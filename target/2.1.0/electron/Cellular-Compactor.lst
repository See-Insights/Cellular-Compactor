
/Users/chipmc/Documents/Maker/Particle/Projects/Cellular-Compactor/target/2.1.0/electron/Cellular-Compactor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000052b0  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000804  40024000  080852d0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000fc  20000000  08085ad4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006f8  20000100  20000100  00040100  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  08085bd0  08085bd0  00035bd0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  08085bfc  08085bfc  00035bfc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001305af  00000000  00000000  00035c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001675f  00000000  00000000  001661af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000026d8  00000000  00000000  0017c90e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00006458  00000000  00000000  0017efe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00029a17  00000000  00000000  0018543e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00032b92  00000000  00000000  001aee55  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000b9052  00000000  00000000  001e19e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00006678  00000000  00000000  0029aa3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0001e674  00000000  00000000  002a10b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <localtime_r>:
#endif // !(defined(DYNALIB_IMPORT) && (defined(PARTICLE_COMPILE_LTO) || defined(PARTICLE_COMPILE_LTO_FAT)))
DYNALIB_FN(18, services2, mktime32, time32_t(struct tm*))
DYNALIB_FN(19, services2, __ssvfscanf_r, int(struct _reent*, FILE*, const char*, va_list))
DYNALIB_FN(20, services2, _printf_i, int(struct _reent*, struct _prt_data_t*, FILE*, int (*pfunc)(struct _reent *, FILE *, const char *, size_t), va_list*))
DYNALIB_FN(21, services2, localtime32_r, struct tm*(const time32_t*, struct tm*))
DYNALIB_FN(22, services2, localtime_r, struct tm*(const time_t*, struct tm*))
 8080020:	b508      	push	{r3, lr}
 8080022:	4b02      	ldr	r3, [pc, #8]	; (808002c <localtime_r+0xc>)
 8080024:	681b      	ldr	r3, [r3, #0]
 8080026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080028:	9301      	str	r3, [sp, #4]
 808002a:	bd08      	pop	{r3, pc}
 808002c:	0806002c 	.word	0x0806002c

08080030 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080030:	4809      	ldr	r0, [pc, #36]	; (8080058 <module_user_pre_init+0x28>)
 8080032:	490a      	ldr	r1, [pc, #40]	; (808005c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080034:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080036:	4288      	cmp	r0, r1
 8080038:	d005      	beq.n	8080046 <module_user_pre_init+0x16>
 808003a:	4a09      	ldr	r2, [pc, #36]	; (8080060 <module_user_pre_init+0x30>)
 808003c:	4282      	cmp	r2, r0
 808003e:	d002      	beq.n	8080046 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080040:	1a12      	subs	r2, r2, r0
 8080042:	f004 fc3d 	bl	80848c0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080046:	4807      	ldr	r0, [pc, #28]	; (8080064 <module_user_pre_init+0x34>)
 8080048:	4a07      	ldr	r2, [pc, #28]	; (8080068 <module_user_pre_init+0x38>)
 808004a:	2100      	movs	r1, #0
 808004c:	1a12      	subs	r2, r2, r0
 808004e:	f004 fc5f 	bl	8084910 <memset>
    return &link_heap_start;
}
 8080052:	4806      	ldr	r0, [pc, #24]	; (808006c <module_user_pre_init+0x3c>)
 8080054:	bd08      	pop	{r3, pc}
 8080056:	bf00      	nop
 8080058:	20000000 	.word	0x20000000
 808005c:	08085ad4 	.word	0x08085ad4
 8080060:	200000fc 	.word	0x200000fc
 8080064:	20000100 	.word	0x20000100
 8080068:	200007f8 	.word	0x200007f8
 808006c:	200007f8 	.word	0x200007f8

08080070 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080070:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080072:	f003 fb27 	bl	80836c4 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080076:	2500      	movs	r5, #0
 8080078:	4e05      	ldr	r6, [pc, #20]	; (8080090 <module_user_init+0x20>)
 808007a:	4c06      	ldr	r4, [pc, #24]	; (8080094 <module_user_init+0x24>)
 808007c:	1ba4      	subs	r4, r4, r6
 808007e:	08a4      	lsrs	r4, r4, #2
 8080080:	42a5      	cmp	r5, r4
 8080082:	d100      	bne.n	8080086 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080084:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080086:	f856 3b04 	ldr.w	r3, [r6], #4
 808008a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808008c:	3501      	adds	r5, #1
 808008e:	e7f7      	b.n	8080080 <module_user_init+0x10>
 8080090:	080852a8 	.word	0x080852a8
 8080094:	080852cc 	.word	0x080852cc

08080098 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080098:	f000 be6e 	b.w	8080d78 <setup>

0808009c <module_user_loop>:
}

void module_user_loop() {
 808009c:	b508      	push	{r3, lr}
    loop();
 808009e:	f000 fcab 	bl	80809f8 <loop>
    _post_loop();
}
 80800a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80800a6:	f003 bacf 	b.w	8083648 <_post_loop>

080800aa <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80800aa:	f002 b82f 	b.w	808210c <malloc>

080800ae <_Znaj>:
 80800ae:	f002 b82d 	b.w	808210c <malloc>

080800b2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80800b2:	f002 b833 	b.w	808211c <free>
	...

080800b8 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800b8:	2100      	movs	r1, #0
 80800ba:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80800bc:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800be:	4a02      	ldr	r2, [pc, #8]	; (80800c8 <__cxa_pure_virtual+0x10>)
 80800c0:	f001 fef6 	bl	8081eb0 <panic_>
  while (1);
 80800c4:	e7fe      	b.n	80800c4 <__cxa_pure_virtual+0xc>
 80800c6:	bf00      	nop
 80800c8:	08081c11 	.word	0x08081c11

080800cc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800cc:	7800      	ldrb	r0, [r0, #0]
 80800ce:	fab0 f080 	clz	r0, r0
 80800d2:	0940      	lsrs	r0, r0, #5
 80800d4:	4770      	bx	lr

080800d6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800d6:	2301      	movs	r3, #1
 80800d8:	7003      	strb	r3, [r0, #0]
 80800da:	4770      	bx	lr

080800dc <_Z11watchdogISRv>:
  watchdogFlag = false;
}

// Here is were we will put the timer and other ISRs
void watchdogISR() {
  watchdogFlag = true;
 80800dc:	2201      	movs	r2, #1
 80800de:	4b01      	ldr	r3, [pc, #4]	; (80800e4 <_Z11watchdogISRv+0x8>)
 80800e0:	701a      	strb	r2, [r3, #0]
}
 80800e2:	4770      	bx	lr
 80800e4:	20000205 	.word	0x20000205

080800e8 <_Z9input1ISRv>:

void input1ISR() {
  input1Flag = true;
 80800e8:	2201      	movs	r2, #1
 80800ea:	4b01      	ldr	r3, [pc, #4]	; (80800f0 <_Z9input1ISRv+0x8>)
 80800ec:	701a      	strb	r2, [r3, #0]
}
 80800ee:	4770      	bx	lr
 80800f0:	200001ac 	.word	0x200001ac

080800f4 <_Z9input2ISRv>:

void input2ISR() {
  input2Flag = true;
 80800f4:	2201      	movs	r2, #1
 80800f6:	4b01      	ldr	r3, [pc, #4]	; (80800fc <_Z9input2ISRv+0x8>)
 80800f8:	701a      	strb	r2, [r3, #0]
}
 80800fa:	4770      	bx	lr
 80800fc:	200001ad 	.word	0x200001ad

08080100 <_Z7sendNow6String>:
    return 1;                                 // Unfortunately, this will never be sent
  }
  else return 0;
}

int sendNow(String command) {// Function to force sending data in current hour
 8080100:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8080102:	4904      	ldr	r1, [pc, #16]	; (8080114 <_Z7sendNow6String+0x14>)
 8080104:	f002 ff0e 	bl	8082f24 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080108:	b118      	cbz	r0, 8080112 <_Z7sendNow6String+0x12>
  {
    state = REPORTING_STATE;
 808010a:	2205      	movs	r2, #5
    return 1;
 808010c:	2001      	movs	r0, #1
    state = REPORTING_STATE;
 808010e:	4b02      	ldr	r3, [pc, #8]	; (8080118 <_Z7sendNow6String+0x18>)
 8080110:	701a      	strb	r2, [r3, #0]
  }
  else return 0;
}
 8080112:	bd08      	pop	{r3, pc}
 8080114:	08084b58 	.word	0x08084b58
 8080118:	200001ec 	.word	0x200001ec

0808011c <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
 808011c:	b510      	push	{r4, lr}
 808011e:	4604      	mov	r4, r0
 8080120:	4b02      	ldr	r3, [pc, #8]	; (808012c <_ZN17PublishQueueAsyncD1Ev+0x10>)
 8080122:	6003      	str	r3, [r0, #0]
 8080124:	f001 fab8 	bl	8081698 <_ZN25PublishQueueAsyncRetainedD1Ev>
 8080128:	4620      	mov	r0, r4
 808012a:	bd10      	pop	{r4, pc}
 808012c:	08084e20 	.word	0x08084e20

08080130 <_ZN17PublishQueueAsyncD0Ev>:
 8080130:	b510      	push	{r4, lr}
 8080132:	4604      	mov	r4, r0
 8080134:	f7ff fff2 	bl	808011c <_ZN17PublishQueueAsyncD1Ev>
 8080138:	4620      	mov	r0, r4
 808013a:	2138      	movs	r1, #56	; 0x38
 808013c:	f003 fc11 	bl	8083962 <_ZdlPvj>
 8080140:	4620      	mov	r0, r4
 8080142:	bd10      	pop	{r4, pc}

08080144 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
 8080144:	b510      	push	{r4, lr}
 8080146:	4604      	mov	r4, r0
 8080148:	4b02      	ldr	r3, [pc, #8]	; (8080154 <_ZN8MB85RC64D1Ev+0x10>)
 808014a:	6003      	str	r3, [r0, #0]
 808014c:	f001 f8a0 	bl	8081290 <_ZN6MB85RCD1Ev>
 8080150:	4620      	mov	r0, r4
 8080152:	bd10      	pop	{r4, pc}
 8080154:	08084e04 	.word	0x08084e04

08080158 <_ZN8MB85RC64D0Ev>:
 8080158:	b510      	push	{r4, lr}
 808015a:	4604      	mov	r4, r0
 808015c:	f7ff fff2 	bl	8080144 <_ZN8MB85RC64D1Ev>
 8080160:	4620      	mov	r0, r4
 8080162:	2110      	movs	r1, #16
 8080164:	f003 fbfd 	bl	8083962 <_ZdlPvj>
 8080168:	4620      	mov	r0, r4
 808016a:	bd10      	pop	{r4, pc}

0808016c <_Z12hardResetNow6String>:
int hardResetNow(String command) {  // Will perform a hard reset on the Electron
 808016c:	b508      	push	{r3, lr}
 808016e:	4905      	ldr	r1, [pc, #20]	; (8080184 <_Z12hardResetNow6String+0x18>)
 8080170:	f002 fed8 	bl	8082f24 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080174:	b120      	cbz	r0, 8080180 <_Z12hardResetNow6String+0x14>
    digitalWrite(hardResetPin,HIGH);          // This will cut all power to the Electron AND the carrir board
 8080176:	2004      	movs	r0, #4
 8080178:	2101      	movs	r1, #1
 808017a:	f003 fb4c 	bl	8083816 <digitalWrite>
 808017e:	2001      	movs	r0, #1
}
 8080180:	bd08      	pop	{r3, pc}
 8080182:	bf00      	nop
 8080184:	08084b58 	.word	0x08084b58

08080188 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 8080188:	b510      	push	{r4, lr}
 808018a:	4604      	mov	r4, r0
        if (wakeupSource_) {
 808018c:	6800      	ldr	r0, [r0, #0]
 808018e:	b108      	cbz	r0, 8080194 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 8080190:	f001 ffc4 	bl	808211c <free>
class SystemClass {
 8080194:	4620      	mov	r0, r4
 8080196:	bd10      	pop	{r4, pc}

08080198 <_ZN10CloudClass8syncTimeEv.isra.0>:
    void unsubscribe()
    {
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
 8080198:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808019a:	f001 ff17 	bl	8081fcc <spark_cloud_flag_connected>
        if (!connected()) {
 808019e:	b120      	cbz	r0, 80801aa <_ZN10CloudClass8syncTimeEv.isra.0+0x12>
    }
 80801a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return spark_sync_time(NULL);
 80801a4:	2000      	movs	r0, #0
 80801a6:	f001 bf31 	b.w	808200c <spark_sync_time>
    }
 80801aa:	bd08      	pop	{r3, pc}

080801ac <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
 80801ac:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80801ae:	2000      	movs	r0, #0
 80801b0:	f001 ff34 	bl	808201c <spark_sync_time_pending>
 80801b4:	b128      	cbz	r0, 80801c2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80801b6:	f001 ff09 	bl	8081fcc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80801ba:	f080 0001 	eor.w	r0, r0, #1
 80801be:	b2c0      	uxtb	r0, r0
    }
 80801c0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80801c2:	2001      	movs	r0, #1
 80801c4:	e7fc      	b.n	80801c0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

080801c6 <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80801c6:	2000      	movs	r0, #0
 80801c8:	f001 bd3a 	b.w	8081c40 <hal_timer_millis>

080801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
 80801cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80801ce:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
 80801d2:	6804      	ldr	r4, [r0, #0]
 80801d4:	f88d 3000 	strb.w	r3, [sp]
 80801d8:	f88d 5004 	strb.w	r5, [sp, #4]
 80801dc:	233c      	movs	r3, #60	; 0x3c
 80801de:	68e4      	ldr	r4, [r4, #12]
 80801e0:	47a0      	blx	r4
	}
 80801e2:	b003      	add	sp, #12
 80801e4:	bd30      	pop	{r4, r5, pc}
	...

080801e8 <_Z14getInputStates6String>:
int getInputStates(String command) {
 80801e8:	b570      	push	{r4, r5, r6, lr}
  snprintf(resultStr, sizeof(resultStr), "Current values input1: %s, input2: %s", digitalRead(input1) ? "high" : "low" , digitalRead(input2) ? "high" : "low");
 80801ea:	2019      	movs	r0, #25
int getInputStates(String command) {
 80801ec:	b0a2      	sub	sp, #136	; 0x88
  snprintf(resultStr, sizeof(resultStr), "Current values input1: %s, input2: %s", digitalRead(input1) ? "high" : "low" , digitalRead(input2) ? "high" : "low");
 80801ee:	f003 fb2b 	bl	8083848 <digitalRead>
 80801f2:	4e10      	ldr	r6, [pc, #64]	; (8080234 <_Z14getInputStates6String+0x4c>)
 80801f4:	4c10      	ldr	r4, [pc, #64]	; (8080238 <_Z14getInputStates6String+0x50>)
 80801f6:	2800      	cmp	r0, #0
 80801f8:	bf14      	ite	ne
 80801fa:	4625      	movne	r5, r4
 80801fc:	4635      	moveq	r5, r6
 80801fe:	201b      	movs	r0, #27
 8080200:	f003 fb22 	bl	8083848 <digitalRead>
 8080204:	2800      	cmp	r0, #0
 8080206:	bf08      	it	eq
 8080208:	4634      	moveq	r4, r6
 808020a:	462b      	mov	r3, r5
 808020c:	2180      	movs	r1, #128	; 0x80
 808020e:	4a0b      	ldr	r2, [pc, #44]	; (808023c <_Z14getInputStates6String+0x54>)
 8080210:	9400      	str	r4, [sp, #0]
 8080212:	a802      	add	r0, sp, #8
 8080214:	f001 ff9a 	bl	808214c <snprintf>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080218:	2300      	movs	r3, #0
  publishQueue.publish("States",resultStr,PRIVATE);
 808021a:	f88d 3000 	strb.w	r3, [sp]
 808021e:	4b08      	ldr	r3, [pc, #32]	; (8080240 <_Z14getInputStates6String+0x58>)
 8080220:	4908      	ldr	r1, [pc, #32]	; (8080244 <_Z14getInputStates6String+0x5c>)
 8080222:	781b      	ldrb	r3, [r3, #0]
 8080224:	aa02      	add	r2, sp, #8
 8080226:	4808      	ldr	r0, [pc, #32]	; (8080248 <_Z14getInputStates6String+0x60>)
 8080228:	f7ff ffd0 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
 808022c:	2001      	movs	r0, #1
 808022e:	b022      	add	sp, #136	; 0x88
 8080230:	bd70      	pop	{r4, r5, r6, pc}
 8080232:	bf00      	nop
 8080234:	08084b5f 	.word	0x08084b5f
 8080238:	08084b5a 	.word	0x08084b5a
 808023c:	08084b63 	.word	0x08084b63
 8080240:	20000158 	.word	0x20000158
 8080244:	08084b89 	.word	0x08084b89
 8080248:	200001b0 	.word	0x200001b0

0808024c <_Z14UbidotsHandlerPKcS0_>:
{
 808024c:	b513      	push	{r0, r1, r4, lr}
  if (!data) {                                            // First check to see if there is any data
 808024e:	460c      	mov	r4, r1
 8080250:	b951      	cbnz	r1, 8080268 <_Z14UbidotsHandlerPKcS0_+0x1c>
    publishQueue.publish("Ubidots Hook", "No Data",PRIVATE);
 8080252:	4b17      	ldr	r3, [pc, #92]	; (80802b0 <_Z14UbidotsHandlerPKcS0_+0x64>)
 8080254:	f88d 1000 	strb.w	r1, [sp]
 8080258:	781b      	ldrb	r3, [r3, #0]
 808025a:	4a16      	ldr	r2, [pc, #88]	; (80802b4 <_Z14UbidotsHandlerPKcS0_+0x68>)
  else publishQueue.publish("Ubidots Hook", data,PRIVATE);             // Publish the response code
 808025c:	4916      	ldr	r1, [pc, #88]	; (80802b8 <_Z14UbidotsHandlerPKcS0_+0x6c>)
 808025e:	4817      	ldr	r0, [pc, #92]	; (80802bc <_Z14UbidotsHandlerPKcS0_+0x70>)
 8080260:	f7ff ffb4 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
 8080264:	b002      	add	sp, #8
 8080266:	bd10      	pop	{r4, pc}
  int responseCode = atoi(data);                          // Response is only a single number thanks to Template
 8080268:	4608      	mov	r0, r1
 808026a:	f004 fb17 	bl	808489c <atoi>
  if ((responseCode == 200) || (responseCode == 201))
 808026e:	38c8      	subs	r0, #200	; 0xc8
 8080270:	2801      	cmp	r0, #1
 8080272:	d815      	bhi.n	80802a0 <_Z14UbidotsHandlerPKcS0_+0x54>
    if(sysStatus.verboseMode) publishQueue.publish("State","Response Received",PRIVATE);
 8080274:	4b12      	ldr	r3, [pc, #72]	; (80802c0 <_Z14UbidotsHandlerPKcS0_+0x74>)
 8080276:	78db      	ldrb	r3, [r3, #3]
 8080278:	b14b      	cbz	r3, 808028e <_Z14UbidotsHandlerPKcS0_+0x42>
 808027a:	2300      	movs	r3, #0
 808027c:	f88d 3000 	strb.w	r3, [sp]
 8080280:	4b0b      	ldr	r3, [pc, #44]	; (80802b0 <_Z14UbidotsHandlerPKcS0_+0x64>)
 8080282:	4a10      	ldr	r2, [pc, #64]	; (80802c4 <_Z14UbidotsHandlerPKcS0_+0x78>)
 8080284:	781b      	ldrb	r3, [r3, #0]
 8080286:	4910      	ldr	r1, [pc, #64]	; (80802c8 <_Z14UbidotsHandlerPKcS0_+0x7c>)
 8080288:	480c      	ldr	r0, [pc, #48]	; (80802bc <_Z14UbidotsHandlerPKcS0_+0x70>)
 808028a:	f7ff ff9f 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    dataInFlight = false;                                 // Data has been received
 808028e:	2100      	movs	r1, #0
    digitalWrite(blueLED, LOW);                           // Reset the LED and flags
 8080290:	2007      	movs	r0, #7
    dataInFlight = false;                                 // Data has been received
 8080292:	4b0e      	ldr	r3, [pc, #56]	; (80802cc <_Z14UbidotsHandlerPKcS0_+0x80>)
 8080294:	7019      	strb	r1, [r3, #0]
}
 8080296:	b002      	add	sp, #8
 8080298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(blueLED, LOW);                           // Reset the LED and flags
 808029c:	f003 babb 	b.w	8083816 <digitalWrite>
 80802a0:	2300      	movs	r3, #0
  else publishQueue.publish("Ubidots Hook", data,PRIVATE);             // Publish the response code
 80802a2:	f88d 3000 	strb.w	r3, [sp]
 80802a6:	4b02      	ldr	r3, [pc, #8]	; (80802b0 <_Z14UbidotsHandlerPKcS0_+0x64>)
 80802a8:	4622      	mov	r2, r4
 80802aa:	781b      	ldrb	r3, [r3, #0]
 80802ac:	e7d6      	b.n	808025c <_Z14UbidotsHandlerPKcS0_+0x10>
 80802ae:	bf00      	nop
 80802b0:	20000158 	.word	0x20000158
 80802b4:	08084b90 	.word	0x08084b90
 80802b8:	08084b98 	.word	0x08084b98
 80802bc:	200001b0 	.word	0x200001b0
 80802c0:	200001f0 	.word	0x200001f0
 80802c4:	08084ba5 	.word	0x08084ba5
 80802c8:	08084bb7 	.word	0x08084bb7
 80802cc:	2000019b 	.word	0x2000019b

080802d0 <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
 80802d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80802d2:	4912      	ldr	r1, [pc, #72]	; (808031c <_Z14setVerboseMode6String+0x4c>)
 80802d4:	4605      	mov	r5, r0
 80802d6:	f002 fe25 	bl	8082f24 <_ZNK6String6equalsEPKc>
  if (command == "1")
 80802da:	4604      	mov	r4, r0
 80802dc:	b178      	cbz	r0, 80802fe <_Z14setVerboseMode6String+0x2e>
  {
    sysStatus.verboseMode = true;
 80802de:	2401      	movs	r4, #1
 80802e0:	4b0f      	ldr	r3, [pc, #60]	; (8080320 <_Z14setVerboseMode6String+0x50>)
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
 80802e2:	4a10      	ldr	r2, [pc, #64]	; (8080324 <_Z14setVerboseMode6String+0x54>)
    sysStatus.verboseMode = true;
 80802e4:	70dc      	strb	r4, [r3, #3]
 80802e6:	2300      	movs	r3, #0
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
 80802e8:	f88d 3000 	strb.w	r3, [sp]
 80802ec:	4b0e      	ldr	r3, [pc, #56]	; (8080328 <_Z14setVerboseMode6String+0x58>)
 80802ee:	781b      	ldrb	r3, [r3, #0]
    return 1;
  }
  else if (command == "0")
  {
    sysStatus.verboseMode = false;
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
 80802f0:	490e      	ldr	r1, [pc, #56]	; (808032c <_Z14setVerboseMode6String+0x5c>)
 80802f2:	480f      	ldr	r0, [pc, #60]	; (8080330 <_Z14setVerboseMode6String+0x60>)
 80802f4:	f7ff ff6a 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
 80802f8:	2001      	movs	r0, #1
    return 1;
  }
  else return 0;
}
 80802fa:	b003      	add	sp, #12
 80802fc:	bd30      	pop	{r4, r5, pc}
 80802fe:	4628      	mov	r0, r5
 8080300:	490c      	ldr	r1, [pc, #48]	; (8080334 <_Z14setVerboseMode6String+0x64>)
 8080302:	f002 fe0f 	bl	8082f24 <_ZNK6String6equalsEPKc>
  else if (command == "0")
 8080306:	2800      	cmp	r0, #0
 8080308:	d0f7      	beq.n	80802fa <_Z14setVerboseMode6String+0x2a>
    sysStatus.verboseMode = false;
 808030a:	4b05      	ldr	r3, [pc, #20]	; (8080320 <_Z14setVerboseMode6String+0x50>)
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
 808030c:	4a0a      	ldr	r2, [pc, #40]	; (8080338 <_Z14setVerboseMode6String+0x68>)
    sysStatus.verboseMode = false;
 808030e:	70dc      	strb	r4, [r3, #3]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
 8080310:	4b05      	ldr	r3, [pc, #20]	; (8080328 <_Z14setVerboseMode6String+0x58>)
 8080312:	f88d 4000 	strb.w	r4, [sp]
 8080316:	781b      	ldrb	r3, [r3, #0]
 8080318:	e7ea      	b.n	80802f0 <_Z14setVerboseMode6String+0x20>
 808031a:	bf00      	nop
 808031c:	08084b58 	.word	0x08084b58
 8080320:	200001f0 	.word	0x200001f0
 8080324:	08084bbd 	.word	0x08084bbd
 8080328:	20000158 	.word	0x20000158
 808032c:	08084be0 	.word	0x08084be0
 8080330:	200001b0 	.word	0x200001b0
 8080334:	08084bce 	.word	0x08084bce
 8080338:	08084bd0 	.word	0x08084bd0
 808033c:	00000000 	.word	0x00000000

08080340 <_Z11setTimeZone6String>:
  // None for lastHookResponse
  currentStatusWriteNeeded = true;
}

int setTimeZone(String command)
{
 8080340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8080344:	b0c8      	sub	sp, #288	; 0x120
 8080346:	4680      	mov	r8, r0
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
 8080348:	f7ff ff26 	bl	8080198 <_ZN10CloudClass8syncTimeEv.isra.0>
        const system_tick_t start = millis();
 808034c:	f7ff ff3b 	bl	80801c6 <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 8080350:	f04f 0a00 	mov.w	sl, #0
        const system_tick_t start = millis();
 8080354:	4681      	mov	r9, r0
        while (_while() && !_condition()) {
 8080356:	f247 562f 	movw	r6, #29999	; 0x752f
 808035a:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 808035c:	f7ff ff33 	bl	80801c6 <_ZN11SystemClass6millisEv>
 8080360:	ebb0 0409 	subs.w	r4, r0, r9
 8080364:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
 8080368:	42af      	cmp	r7, r5
 808036a:	bf08      	it	eq
 808036c:	42a6      	cmpeq	r6, r4
 808036e:	d305      	bcc.n	808037c <_Z11setTimeZone6String+0x3c>
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
 8080370:	f7ff ff1c 	bl	80801ac <_ZN10CloudClass12syncTimeDoneEv.isra.0>
 8080374:	b910      	cbnz	r0, 808037c <_Z11setTimeZone6String+0x3c>
            spark_process();
 8080376:	f001 fe19 	bl	8081fac <spark_process>
        while (_while() && !_condition()) {
 808037a:	e7ef      	b.n	808035c <_Z11setTimeZone6String+0x1c>
 808037c:	f7ff ff16 	bl	80801ac <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8080380:	220a      	movs	r2, #10
 8080382:	f8d8 0000 	ldr.w	r0, [r8]
 8080386:	a903      	add	r1, sp, #12
 8080388:	f004 fbb0 	bl	8084aec <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
 808038c:	f100 030c 	add.w	r3, r0, #12
 8080390:	b2db      	uxtb	r3, r3
 8080392:	2b18      	cmp	r3, #24
 8080394:	d846      	bhi.n	8080424 <_Z11setTimeZone6String+0xe4>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8080396:	b245      	sxtb	r5, r0
  sysStatus.timezone = (float)tempTimeZoneOffset;
 8080398:	4628      	mov	r0, r5
 808039a:	f004 f80b 	bl	80843b4 <__aeabi_i2f>
  Time.zone(sysStatus.timezone);
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
 808039e:	2401      	movs	r4, #1
  sysStatus.timezone = (float)tempTimeZoneOffset;
 80803a0:	4b25      	ldr	r3, [pc, #148]	; (8080438 <_Z11setTimeZone6String+0xf8>)
 80803a2:	6098      	str	r0, [r3, #8]
  Time.zone(sysStatus.timezone);
 80803a4:	f002 fed6 	bl	8083154 <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
 80803a8:	4b24      	ldr	r3, [pc, #144]	; (808043c <_Z11setTimeZone6String+0xfc>)
 80803aa:	701c      	strb	r4, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
 80803ac:	f002 ffac 	bl	8083308 <_ZN9TimeClass5localEv>
 80803b0:	4606      	mov	r6, r0
 80803b2:	f002 ff70 	bl	8083296 <_ZN9TimeClass3nowEv>
 80803b6:	1a30      	subs	r0, r6, r0
 80803b8:	f003 fc2e 	bl	8083c18 <__aeabi_i2d>
 80803bc:	a31c      	add	r3, pc, #112	; (adr r3, 8080430 <_Z11setTimeZone6String+0xf0>)
 80803be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80803c2:	f003 fdbd 	bl	8083f40 <__aeabi_ddiv>
 80803c6:	4a1e      	ldr	r2, [pc, #120]	; (8080440 <_Z11setTimeZone6String+0x100>)
 80803c8:	e9cd 0100 	strd	r0, r1, [sp]
 80803cc:	210a      	movs	r1, #10
 80803ce:	481d      	ldr	r0, [pc, #116]	; (8080444 <_Z11setTimeZone6String+0x104>)
 80803d0:	f001 febc 	bl	808214c <snprintf>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80803d4:	f001 fdfa 	bl	8081fcc <spark_cloud_flag_connected>
  if (Particle.connected()) {
 80803d8:	b310      	cbz	r0, 8080420 <_Z11setTimeZone6String+0xe0>
 80803da:	2600      	movs	r6, #0
    snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 80803dc:	462b      	mov	r3, r5
 80803de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80803e2:	4a19      	ldr	r2, [pc, #100]	; (8080448 <_Z11setTimeZone6String+0x108>)
 80803e4:	4d19      	ldr	r5, [pc, #100]	; (808044c <_Z11setTimeZone6String+0x10c>)
 80803e6:	a808      	add	r0, sp, #32
 80803e8:	f001 feb0 	bl	808214c <snprintf>
    publishQueue.publish("Time",data, PRIVATE);
 80803ec:	f88d 6000 	strb.w	r6, [sp]
 80803f0:	4917      	ldr	r1, [pc, #92]	; (8080450 <_Z11setTimeZone6String+0x110>)
 80803f2:	782b      	ldrb	r3, [r5, #0]
 80803f4:	aa08      	add	r2, sp, #32
 80803f6:	4817      	ldr	r0, [pc, #92]	; (8080454 <_Z11setTimeZone6String+0x114>)
 80803f8:	f7ff fee8 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
 80803fc:	f002 ff4b 	bl	8083296 <_ZN9TimeClass3nowEv>
 8080400:	4602      	mov	r2, r0
 8080402:	17c3      	asrs	r3, r0, #31
 8080404:	a804      	add	r0, sp, #16
 8080406:	f002 fef1 	bl	80831ec <_ZN9TimeClass7timeStrEx>
 808040a:	f88d 6000 	strb.w	r6, [sp]
 808040e:	782b      	ldrb	r3, [r5, #0]
 8080410:	9a04      	ldr	r2, [sp, #16]
 8080412:	490f      	ldr	r1, [pc, #60]	; (8080450 <_Z11setTimeZone6String+0x110>)
 8080414:	480f      	ldr	r0, [pc, #60]	; (8080454 <_Z11setTimeZone6String+0x114>)
 8080416:	f7ff fed9 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
 808041a:	a804      	add	r0, sp, #16
 808041c:	f002 fd0b 	bl	8082e36 <_ZN6StringD1Ev>
  }
  return 1;
 8080420:	4620      	mov	r0, r4
 8080422:	e000      	b.n	8080426 <_Z11setTimeZone6String+0xe6>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
 8080424:	2000      	movs	r0, #0
}
 8080426:	b048      	add	sp, #288	; 0x120
 8080428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808042c:	f3af 8000 	nop.w
 8080430:	00000000 	.word	0x00000000
 8080434:	40ac2000 	.word	0x40ac2000
 8080438:	200001f0 	.word	0x200001f0
 808043c:	20000204 	.word	0x20000204
 8080440:	08084be5 	.word	0x08084be5
 8080444:	20000190 	.word	0x20000190
 8080448:	08084bef 	.word	0x08084bef
 808044c:	20000158 	.word	0x20000158
 8080450:	08084c03 	.word	0x08084c03
 8080454:	200001b0 	.word	0x200001b0

08080458 <_Z16takeMeasurementsv>:
bool takeMeasurements() {                                               // We get to this function only after a debounced interrupt (LOW) as indicated by interrupt flags
 8080458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (input1Flag) {                                                     // input1 triggered an interrupt on LOW - and was debounced
 808045a:	4b36      	ldr	r3, [pc, #216]	; (8080534 <_Z16takeMeasurementsv+0xdc>)
 808045c:	781a      	ldrb	r2, [r3, #0]
 808045e:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8080462:	2a00      	cmp	r2, #0
 8080464:	d050      	beq.n	8080508 <_Z16takeMeasurementsv+0xb0>
    input1Flag = false;
 8080466:	2200      	movs	r2, #0
    static unsigned long cycleCountStarted = millis();  
 8080468:	4d33      	ldr	r5, [pc, #204]	; (8080538 <_Z16takeMeasurementsv+0xe0>)
    input1Flag = false;
 808046a:	701a      	strb	r2, [r3, #0]
    static unsigned long cycleCountStarted = millis();  
 808046c:	782b      	ldrb	r3, [r5, #0]
 808046e:	4e33      	ldr	r6, [pc, #204]	; (808053c <_Z16takeMeasurementsv+0xe4>)
 8080470:	f013 0f01 	tst.w	r3, #1
 8080474:	f3bf 8f5b 	dmb	ish
 8080478:	d109      	bne.n	808048e <_Z16takeMeasurementsv+0x36>
 808047a:	4628      	mov	r0, r5
 808047c:	f7ff fe26 	bl	80800cc <__cxa_guard_acquire>
 8080480:	b128      	cbz	r0, 808048e <_Z16takeMeasurementsv+0x36>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8080482:	f001 fbcd 	bl	8081c20 <HAL_Timer_Get_Milli_Seconds>
 8080486:	6030      	str	r0, [r6, #0]
 8080488:	4628      	mov	r0, r5
 808048a:	f7ff fe24 	bl	80800d6 <__cxa_guard_release>
 808048e:	f001 fbc7 	bl	8081c20 <HAL_Timer_Get_Milli_Seconds>
    if ((millis() - cycleCountStarted > 15000) && current.input1 == 2) {  // What happens if we are on 75% full already and looking to see if flashing and it has been too long (giving 15 seconds for 5 cycles)
 8080492:	6833      	ldr	r3, [r6, #0]
 8080494:	4d2a      	ldr	r5, [pc, #168]	; (8080540 <_Z16takeMeasurementsv+0xe8>)
 8080496:	1ac0      	subs	r0, r0, r3
 8080498:	f643 2398 	movw	r3, #15000	; 0x3a98
 808049c:	4298      	cmp	r0, r3
 808049e:	d90a      	bls.n	80804b6 <_Z16takeMeasurementsv+0x5e>
 80804a0:	4b28      	ldr	r3, [pc, #160]	; (8080544 <_Z16takeMeasurementsv+0xec>)
 80804a2:	781b      	ldrb	r3, [r3, #0]
 80804a4:	2b02      	cmp	r3, #2
 80804a6:	d106      	bne.n	80804b6 <_Z16takeMeasurementsv+0x5e>
      cycleCount = 0;                                                   // Reset the cycle counts 
 80804a8:	2400      	movs	r4, #0
 80804aa:	602c      	str	r4, [r5, #0]
 80804ac:	f001 fbb8 	bl	8081c20 <HAL_Timer_Get_Milli_Seconds>
      cycleCountStarted = millis();
 80804b0:	6030      	str	r0, [r6, #0]
}
 80804b2:	4620      	mov	r0, r4
 80804b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!cycleCount && current.input1 == 0) {                           // First interrupt and the Light is ON (input1 = LOW)
 80804b6:	682b      	ldr	r3, [r5, #0]
 80804b8:	b98b      	cbnz	r3, 80804de <_Z16takeMeasurementsv+0x86>
 80804ba:	4a22      	ldr	r2, [pc, #136]	; (8080544 <_Z16takeMeasurementsv+0xec>)
 80804bc:	7811      	ldrb	r1, [r2, #0]
 80804be:	b981      	cbnz	r1, 80804e2 <_Z16takeMeasurementsv+0x8a>
      current.input1 = 2;                                               // Inidication is that we are now 75% full
 80804c0:	2302      	movs	r3, #2
      cycleCount++;                                                     // Start counting cycles
 80804c2:	2701      	movs	r7, #1
      current.input1 = 2;                                               // Inidication is that we are now 75% full
 80804c4:	7013      	strb	r3, [r2, #0]
      strncpy(input1Str,"75% Full",sizeof(input1Str));
 80804c6:	4920      	ldr	r1, [pc, #128]	; (8080548 <_Z16takeMeasurementsv+0xf0>)
 80804c8:	2210      	movs	r2, #16
 80804ca:	4820      	ldr	r0, [pc, #128]	; (808054c <_Z16takeMeasurementsv+0xf4>)
 80804cc:	f004 fa81 	bl	80849d2 <strncpy>
      cycleCount++;                                                     // Start counting cycles
 80804d0:	602f      	str	r7, [r5, #0]
 80804d2:	f001 fba5 	bl	8081c20 <HAL_Timer_Get_Milli_Seconds>
      currentStatusWriteNeeded = true;
 80804d6:	4b1e      	ldr	r3, [pc, #120]	; (8080550 <_Z16takeMeasurementsv+0xf8>)
      cycleCountStarted = millis();                                     // Start the timer to reset cycleCount if too much time has passed
 80804d8:	6030      	str	r0, [r6, #0]
      currentStatusWriteNeeded = true;
 80804da:	701f      	strb	r7, [r3, #0]
      return true;                                                      // We have a change to report
 80804dc:	e7e9      	b.n	80804b2 <_Z16takeMeasurementsv+0x5a>
    else if (cycleCount < cyclesRequired) {
 80804de:	2b04      	cmp	r3, #4
 80804e0:	dc03      	bgt.n	80804ea <_Z16takeMeasurementsv+0x92>
      cycleCount++;                                                     // Increment the counter
 80804e2:	3301      	adds	r3, #1
      return false;                                                     // No change in state - return false
 80804e4:	2400      	movs	r4, #0
      cycleCount++;                                                     // Increment the counter
 80804e6:	602b      	str	r3, [r5, #0]
      return false;                                                     // No change in state - return false
 80804e8:	e7e3      	b.n	80804b2 <_Z16takeMeasurementsv+0x5a>
      current.input1 = 1;                                               // We are at 100% full the light is flashing
 80804ea:	2501      	movs	r5, #1
 80804ec:	4e15      	ldr	r6, [pc, #84]	; (8080544 <_Z16takeMeasurementsv+0xec>)
      strncpy(input1Str,"100% Full",sizeof(input1Str));
 80804ee:	2210      	movs	r2, #16
 80804f0:	4918      	ldr	r1, [pc, #96]	; (8080554 <_Z16takeMeasurementsv+0xfc>)
 80804f2:	4816      	ldr	r0, [pc, #88]	; (808054c <_Z16takeMeasurementsv+0xf4>)
      current.input1 = 1;                                               // We are at 100% full the light is flashing
 80804f4:	7035      	strb	r5, [r6, #0]
      strncpy(input1Str,"100% Full",sizeof(input1Str));
 80804f6:	f004 fa6c 	bl	80849d2 <strncpy>
      detachInterrupt(input1);                                          // Will stop checking input 1 until a reset.                                  
 80804fa:	2019      	movs	r0, #25
      currentStatusWriteNeeded = true;
 80804fc:	4b14      	ldr	r3, [pc, #80]	; (8080550 <_Z16takeMeasurementsv+0xf8>)
      current.warningFlag = true;                                       // Set the interrupt disconnected flag which will trigger the blue flashing LED
 80804fe:	7435      	strb	r5, [r6, #16]
      currentStatusWriteNeeded = true;
 8080500:	701d      	strb	r5, [r3, #0]
    detachInterrupt(input2);                                            // Will stop checking input 2 until a reset.     
 8080502:	f002 fb53 	bl	8082bac <_Z15detachInterruptt>
    return true;
 8080506:	e7d4      	b.n	80804b2 <_Z16takeMeasurementsv+0x5a>
  if (input2Flag) {                                                     // input2 triggered an interrupt by going LOW this is an alert
 8080508:	4b13      	ldr	r3, [pc, #76]	; (8080558 <_Z16takeMeasurementsv+0x100>)
 808050a:	781a      	ldrb	r2, [r3, #0]
 808050c:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8080510:	2a00      	cmp	r2, #0
 8080512:	d0ce      	beq.n	80804b2 <_Z16takeMeasurementsv+0x5a>
    input2Flag = false;
 8080514:	2200      	movs	r2, #0
    current.input2 = 1;                                                 // This is the alert value
 8080516:	2501      	movs	r5, #1
 8080518:	4e0a      	ldr	r6, [pc, #40]	; (8080544 <_Z16takeMeasurementsv+0xec>)
    input2Flag = false;
 808051a:	701a      	strb	r2, [r3, #0]
    strncpy(input1Str,"Low Oil",sizeof(input1Str));
 808051c:	490f      	ldr	r1, [pc, #60]	; (808055c <_Z16takeMeasurementsv+0x104>)
 808051e:	2210      	movs	r2, #16
 8080520:	480a      	ldr	r0, [pc, #40]	; (808054c <_Z16takeMeasurementsv+0xf4>)
    current.input2 = 1;                                                 // This is the alert value
 8080522:	7075      	strb	r5, [r6, #1]
    strncpy(input1Str,"Low Oil",sizeof(input1Str));
 8080524:	f004 fa55 	bl	80849d2 <strncpy>
    currentStatusWriteNeeded = true;
 8080528:	4b09      	ldr	r3, [pc, #36]	; (8080550 <_Z16takeMeasurementsv+0xf8>)
    detachInterrupt(input2);                                            // Will stop checking input 2 until a reset.     
 808052a:	201b      	movs	r0, #27
    current.warningFlag = true;                                         // Set the interrupt disconnected flag which will trigger the blue flashing LED
 808052c:	7435      	strb	r5, [r6, #16]
    currentStatusWriteNeeded = true;
 808052e:	701d      	strb	r5, [r3, #0]
    detachInterrupt(input2);                                            // Will stop checking input 2 until a reset.     
 8080530:	e7e7      	b.n	8080502 <_Z16takeMeasurementsv+0xaa>
 8080532:	bf00      	nop
 8080534:	200001ac 	.word	0x200001ac
 8080538:	20000150 	.word	0x20000150
 808053c:	20000160 	.word	0x20000160
 8080540:	2000015c 	.word	0x2000015c
 8080544:	20000178 	.word	0x20000178
 8080548:	08084c08 	.word	0x08084c08
 808054c:	20000000 	.word	0x20000000
 8080550:	2000019a 	.word	0x2000019a
 8080554:	08084c11 	.word	0x08084c11
 8080558:	200001ad 	.word	0x200001ad
 808055c:	08084c1b 	.word	0x08084c1b

08080560 <_Z17getSignalStrengthv>:
void getSignalStrength() {
 8080560:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
 8080562:	4d17      	ldr	r5, [pc, #92]	; (80805c0 <_Z17getSignalStrengthv+0x60>)
void getSignalStrength() {
 8080564:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
 8080566:	ac04      	add	r4, sp, #16
 8080568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808056a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 808056c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808056e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8080570:	e895 0003 	ldmia.w	r5, {r0, r1}
 8080574:	e884 0003 	stmia.w	r4, {r0, r1}
  CellularSignal sig = Cellular.RSSI();
 8080578:	4912      	ldr	r1, [pc, #72]	; (80805c4 <_Z17getSignalStrengthv+0x64>)
 808057a:	a80e      	add	r0, sp, #56	; 0x38
 808057c:	f001 fe70 	bl	8082260 <_ZN5spark13CellularClass4RSSIEv>
  auto rat = sig.getAccessTechnology();
 8080580:	a80e      	add	r0, sp, #56	; 0x38
 8080582:	f001 fec0 	bl	8082306 <_ZNK14CellularSignal19getAccessTechnologyEv>
 8080586:	4604      	mov	r4, r0
  float strengthPercentage = sig.getStrength();
 8080588:	a80e      	add	r0, sp, #56	; 0x38
 808058a:	f001 fec5 	bl	8082318 <_ZNK14CellularSignal11getStrengthEv>
 808058e:	4605      	mov	r5, r0
  float qualityPercentage = sig.getQuality();
 8080590:	a80e      	add	r0, sp, #56	; 0x38
 8080592:	f001 feeb 	bl	808236c <_ZNK14CellularSignal10getQualityEv>
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
 8080596:	ab18      	add	r3, sp, #96	; 0x60
 8080598:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 808059c:	f003 fb4e 	bl	8083c3c <__aeabi_f2d>
 80805a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80805a4:	4628      	mov	r0, r5
 80805a6:	f003 fb49 	bl	8083c3c <__aeabi_f2d>
 80805aa:	e9cd 0100 	strd	r0, r1, [sp]
 80805ae:	4a06      	ldr	r2, [pc, #24]	; (80805c8 <_Z17getSignalStrengthv+0x68>)
 80805b0:	2140      	movs	r1, #64	; 0x40
 80805b2:	f854 3c50 	ldr.w	r3, [r4, #-80]
 80805b6:	4805      	ldr	r0, [pc, #20]	; (80805cc <_Z17getSignalStrengthv+0x6c>)
 80805b8:	f001 fdc8 	bl	808214c <snprintf>
}
 80805bc:	b019      	add	sp, #100	; 0x64
 80805be:	bd30      	pop	{r4, r5, pc}
 80805c0:	08084e40 	.word	0x08084e40
 80805c4:	20000210 	.word	0x20000210
 80805c8:	08084c23 	.word	0x08084c23
 80805cc:	20000104 	.word	0x20000104

080805d0 <_Z14getTemperaturev>:
int getTemperature() {
 80805d0:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
 80805d2:	200a      	movs	r0, #10
 80805d4:	f003 f94b 	bl	808386e <analogRead>
  float voltage = reading * 3.3;        // converting that reading to voltage, for 3.3v arduino use 3.3
 80805d8:	f003 fb1e 	bl	8083c18 <__aeabi_i2d>
 80805dc:	a314      	add	r3, pc, #80	; (adr r3, 8080630 <_Z14getTemperaturev+0x60>)
 80805de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80805e2:	f003 fb83 	bl	8083cec <__aeabi_dmul>
 80805e6:	f003 fddb 	bl	80841a0 <__aeabi_d2f>
  voltage /= 4096.0;                    // Electron is different than the Arduino where there are only 1024 steps
 80805ea:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 80805ee:	f003 ff35 	bl	808445c <__aeabi_fmul>
  int temperatureC = int(((voltage - 0.5) * 100));  //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
 80805f2:	f003 fb23 	bl	8083c3c <__aeabi_f2d>
 80805f6:	2200      	movs	r2, #0
 80805f8:	4b0f      	ldr	r3, [pc, #60]	; (8080638 <_Z14getTemperaturev+0x68>)
 80805fa:	f003 f9bf 	bl	808397c <__aeabi_dsub>
 80805fe:	2200      	movs	r2, #0
 8080600:	4b0e      	ldr	r3, [pc, #56]	; (808063c <_Z14getTemperaturev+0x6c>)
 8080602:	f003 fb73 	bl	8083cec <__aeabi_dmul>
 8080606:	f003 fd83 	bl	8084110 <__aeabi_d2iz>
  current.temperature = int((temperatureC * 9.0 / 5.0) + 32.0);  // now convert to Fahrenheit
 808060a:	f003 fb05 	bl	8083c18 <__aeabi_i2d>
 808060e:	2200      	movs	r2, #0
 8080610:	4b0b      	ldr	r3, [pc, #44]	; (8080640 <_Z14getTemperaturev+0x70>)
 8080612:	f003 fb6b 	bl	8083cec <__aeabi_dmul>
 8080616:	2200      	movs	r2, #0
 8080618:	4b0a      	ldr	r3, [pc, #40]	; (8080644 <_Z14getTemperaturev+0x74>)
 808061a:	f003 fc91 	bl	8083f40 <__aeabi_ddiv>
 808061e:	2200      	movs	r2, #0
 8080620:	4b09      	ldr	r3, [pc, #36]	; (8080648 <_Z14getTemperaturev+0x78>)
 8080622:	f003 f9ad 	bl	8083980 <__adddf3>
 8080626:	f003 fd73 	bl	8084110 <__aeabi_d2iz>
 808062a:	4b08      	ldr	r3, [pc, #32]	; (808064c <_Z14getTemperaturev+0x7c>)
 808062c:	6098      	str	r0, [r3, #8]
}
 808062e:	bd08      	pop	{r3, pc}
 8080630:	66666666 	.word	0x66666666
 8080634:	400a6666 	.word	0x400a6666
 8080638:	3fe00000 	.word	0x3fe00000
 808063c:	40590000 	.word	0x40590000
 8080640:	40220000 	.word	0x40220000
 8080644:	40140000 	.word	0x40140000
 8080648:	40400000 	.word	0x40400000
 808064c:	20000178 	.word	0x20000178

08080650 <_Z9sendEventv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8080650:	2200      	movs	r2, #0
void sendEvent() {                    
 8080652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080656:	4b1c      	ldr	r3, [pc, #112]	; (80806c8 <_Z9sendEventv+0x78>)
 8080658:	b0c6      	sub	sp, #280	; 0x118
 808065a:	4611      	mov	r1, r2
 808065c:	6858      	ldr	r0, [r3, #4]
 808065e:	f001 fd0d 	bl	808207c <network_ready>
  if (Cellular.ready()) getSignalStrength();                            // Test signal strength if the cellular modem is on and ready
 8080662:	b108      	cbz	r0, 8080668 <_Z9sendEventv+0x18>
 8080664:	f7ff ff7c 	bl	8080560 <_Z17getSignalStrengthv>
  getTemperature();
 8080668:	f7ff ffb2 	bl	80805d0 <_Z14getTemperaturev>
  snprintf(data, sizeof(data), "{\"input1\":%i, \"input2\":%i, \"temp\":%i, \"alerts\":%i, \"resets\":%i, \"timestamp\":%lu000}",current.input1, current.input2, current.temperature, current.alertCount, sysStatus.resetCount, Time.now());
 808066c:	4a17      	ldr	r2, [pc, #92]	; (80806cc <_Z9sendEventv+0x7c>)
 808066e:	4b18      	ldr	r3, [pc, #96]	; (80806d0 <_Z9sendEventv+0x80>)
 8080670:	7814      	ldrb	r4, [r2, #0]
 8080672:	7855      	ldrb	r5, [r2, #1]
 8080674:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8080678:	e9d2 6702 	ldrd	r6, r7, [r2, #8]
 808067c:	f002 fe0b 	bl	8083296 <_ZN9TimeClass3nowEv>
 8080680:	4623      	mov	r3, r4
 8080682:	e9cd 8003 	strd	r8, r0, [sp, #12]
 8080686:	f44f 7180 	mov.w	r1, #256	; 0x100
 808068a:	e9cd 6701 	strd	r6, r7, [sp, #4]
 808068e:	4a11      	ldr	r2, [pc, #68]	; (80806d4 <_Z9sendEventv+0x84>)
 8080690:	9500      	str	r5, [sp, #0]
 8080692:	a806      	add	r0, sp, #24
 8080694:	f001 fd5a 	bl	808214c <snprintf>
 8080698:	2300      	movs	r3, #0
  publishQueue.publish("HaulerCaller_Hook", data, PRIVATE);
 808069a:	f88d 3000 	strb.w	r3, [sp]
 808069e:	4b0e      	ldr	r3, [pc, #56]	; (80806d8 <_Z9sendEventv+0x88>)
 80806a0:	490e      	ldr	r1, [pc, #56]	; (80806dc <_Z9sendEventv+0x8c>)
 80806a2:	aa06      	add	r2, sp, #24
 80806a4:	781b      	ldrb	r3, [r3, #0]
 80806a6:	480e      	ldr	r0, [pc, #56]	; (80806e0 <_Z9sendEventv+0x90>)
 80806a8:	f7ff fd90 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                  // set the data inflight flag
 80806ac:	2201      	movs	r2, #1
 80806ae:	4b0d      	ldr	r3, [pc, #52]	; (80806e4 <_Z9sendEventv+0x94>)
 80806b0:	701a      	strb	r2, [r3, #0]
  currentHourlyPeriod = Time.hour();                                    // Change the time period since we have reported for this one
 80806b2:	f002 fe01 	bl	80832b8 <_ZN9TimeClass4hourEv>
 80806b6:	4b0c      	ldr	r3, [pc, #48]	; (80806e8 <_Z9sendEventv+0x98>)
 80806b8:	6018      	str	r0, [r3, #0]
 80806ba:	f001 fab1 	bl	8081c20 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
 80806be:	4b0b      	ldr	r3, [pc, #44]	; (80806ec <_Z9sendEventv+0x9c>)
 80806c0:	6018      	str	r0, [r3, #0]
}
 80806c2:	b046      	add	sp, #280	; 0x118
 80806c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80806c8:	20000210 	.word	0x20000210
 80806cc:	20000178 	.word	0x20000178
 80806d0:	200001f0 	.word	0x200001f0
 80806d4:	08084c3c 	.word	0x08084c3c
 80806d8:	20000158 	.word	0x20000158
 80806dc:	08084c90 	.word	0x08084c90
 80806e0:	200001b0 	.word	0x200001b0
 80806e4:	2000019b 	.word	0x2000019b
 80806e8:	2000018c 	.word	0x2000018c
 80806ec:	20000208 	.word	0x20000208

080806f0 <_Z11petWatchdogv>:
void petWatchdog() {
 80806f0:	b508      	push	{r3, lr}
  digitalWrite(donePin, HIGH);                                        // Pet the watchdog
 80806f2:	2101      	movs	r1, #1
 80806f4:	2006      	movs	r0, #6
 80806f6:	f003 f88e 	bl	8083816 <digitalWrite>
  digitalWrite(donePin, LOW);
 80806fa:	2100      	movs	r1, #0
 80806fc:	2006      	movs	r0, #6
 80806fe:	f003 f88a 	bl	8083816 <digitalWrite>
  watchdogFlag = false;
 8080702:	2200      	movs	r2, #0
 8080704:	4b01      	ldr	r3, [pc, #4]	; (808070c <_Z11petWatchdogv+0x1c>)
 8080706:	701a      	strb	r2, [r3, #0]
}
 8080708:	bd08      	pop	{r3, pc}
 808070a:	bf00      	nop
 808070c:	20000205 	.word	0x20000205

08080710 <_Z17connectToParticlev>:
bool connectToParticle() {
 8080710:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        network_on(*this, 0, 0, NULL);
 8080714:	2300      	movs	r3, #0
 8080716:	481d      	ldr	r0, [pc, #116]	; (808078c <_Z17connectToParticlev+0x7c>)
 8080718:	461a      	mov	r2, r3
 808071a:	4619      	mov	r1, r3
 808071c:	6840      	ldr	r0, [r0, #4]
 808071e:	f001 fcb5 	bl	808208c <network_on>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 8080722:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8080726:	f001 fc49 	bl	8081fbc <spark_cloud_flag_connect>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 808072a:	f04f 0b00 	mov.w	fp, #0
        while (_while() && !_condition()) {
 808072e:	f240 38e7 	movw	r8, #999	; 0x3e7
 8080732:	f04f 0900 	mov.w	r9, #0
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080736:	f8df a060 	ldr.w	sl, [pc, #96]	; 8080798 <_Z17connectToParticlev+0x88>
        const system_tick_t start = millis();
 808073a:	f7ff fd44 	bl	80801c6 <_ZN11SystemClass6millisEv>
 808073e:	4605      	mov	r5, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 8080740:	f7ff fd41 	bl	80801c6 <_ZN11SystemClass6millisEv>
 8080744:	1b46      	subs	r6, r0, r5
 8080746:	eb61 070b 	sbc.w	r7, r1, fp
        while (_while() && !_condition()) {
 808074a:	45b9      	cmp	r9, r7
 808074c:	bf08      	it	eq
 808074e:	45b0      	cmpeq	r8, r6
 8080750:	d305      	bcc.n	808075e <_Z17connectToParticlev+0x4e>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080752:	f001 fc3b 	bl	8081fcc <spark_cloud_flag_connected>
 8080756:	b910      	cbnz	r0, 808075e <_Z17connectToParticlev+0x4e>
            spark_process();
 8080758:	f001 fc28 	bl	8081fac <spark_process>
        while (_while() && !_condition()) {
 808075c:	e7f0      	b.n	8080740 <_Z17connectToParticlev+0x30>
 808075e:	f001 fc35 	bl	8081fcc <spark_cloud_flag_connected>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 8080762:	b120      	cbz	r0, 808076e <_Z17connectToParticlev+0x5e>
 8080764:	f001 fc32 	bl	8081fcc <spark_cloud_flag_connected>
  if (Particle.connected()) {
 8080768:	b950      	cbnz	r0, 8080780 <_Z17connectToParticlev+0x70>
}
 808076a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return HAL_Timer_Get_Milli_Seconds();
 808076e:	f001 fa57 	bl	8081c20 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
 8080772:	f8ca 0000 	str.w	r0, [sl]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
 8080776:	f001 fc19 	bl	8081fac <spark_process>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 808077a:	3c01      	subs	r4, #1
 808077c:	d1dd      	bne.n	808073a <_Z17connectToParticlev+0x2a>
 808077e:	e7f1      	b.n	8080764 <_Z17connectToParticlev+0x54>
    sysStatus.connectedStatus = true;
 8080780:	2301      	movs	r3, #1
 8080782:	4a03      	ldr	r2, [pc, #12]	; (8080790 <_Z17connectToParticlev+0x80>)
 8080784:	7093      	strb	r3, [r2, #2]
    systemStatusWriteNeeded = true;
 8080786:	4a03      	ldr	r2, [pc, #12]	; (8080794 <_Z17connectToParticlev+0x84>)
 8080788:	7013      	strb	r3, [r2, #0]
    return 1;                               // Were able to connect successfully
 808078a:	e7ee      	b.n	808076a <_Z17connectToParticlev+0x5a>
 808078c:	20000210 	.word	0x20000210
 8080790:	200001f0 	.word	0x200001f0
 8080794:	20000204 	.word	0x20000204
 8080798:	200007d4 	.word	0x200007d4

0808079c <_Z8flashLEDv>:
void flashLED() {
 808079c:	b510      	push	{r4, lr}
 808079e:	f001 fa3f 	bl	8081c20 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastTransition > 1000) {
 80807a2:	4c09      	ldr	r4, [pc, #36]	; (80807c8 <_Z8flashLEDv+0x2c>)
 80807a4:	6823      	ldr	r3, [r4, #0]
 80807a6:	1ac0      	subs	r0, r0, r3
 80807a8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80807ac:	d90b      	bls.n	80807c6 <_Z8flashLEDv+0x2a>
    digitalWrite(blueLED,!digitalRead(blueLED));
 80807ae:	2007      	movs	r0, #7
 80807b0:	f003 f84a 	bl	8083848 <digitalRead>
 80807b4:	fab0 f180 	clz	r1, r0
 80807b8:	2007      	movs	r0, #7
 80807ba:	0949      	lsrs	r1, r1, #5
 80807bc:	f003 f82b 	bl	8083816 <digitalWrite>
 80807c0:	f001 fa2e 	bl	8081c20 <HAL_Timer_Get_Milli_Seconds>
    lastTransition = millis();
 80807c4:	6020      	str	r0, [r4, #0]
}
 80807c6:	bd10      	pop	{r4, pc}
 80807c8:	20000174 	.word	0x20000174

080807cc <_Z12dailyCleanupv>:
void dailyCleanup() {                                                 // Called from Reporting State ONLY - clean house at the end of the day
 80807cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80807d0:	2400      	movs	r4, #0
  publishQueue.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
 80807d2:	4b15      	ldr	r3, [pc, #84]	; (8080828 <_Z12dailyCleanupv+0x5c>)
 80807d4:	f88d 4000 	strb.w	r4, [sp]
 80807d8:	4a14      	ldr	r2, [pc, #80]	; (808082c <_Z12dailyCleanupv+0x60>)
 80807da:	4915      	ldr	r1, [pc, #84]	; (8080830 <_Z12dailyCleanupv+0x64>)
 80807dc:	781b      	ldrb	r3, [r3, #0]
 80807de:	4815      	ldr	r0, [pc, #84]	; (8080834 <_Z12dailyCleanupv+0x68>)
 80807e0:	f7ff fcf4 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
 80807e4:	4b14      	ldr	r3, [pc, #80]	; (8080838 <_Z12dailyCleanupv+0x6c>)
 80807e6:	f247 582f 	movw	r8, #29999	; 0x752f
 80807ea:	70dc      	strb	r4, [r3, #3]
  Particle.syncTime();                                                // Set the clock each day
 80807ec:	f7ff fcd4 	bl	8080198 <_ZN10CloudClass8syncTimeEv.isra.0>
        const system_tick_t start = millis();
 80807f0:	f7ff fce9 	bl	80801c6 <_ZN11SystemClass6millisEv>
        while (_while() && !_condition()) {
 80807f4:	f04f 0900 	mov.w	r9, #0
        const system_tick_t start = millis();
 80807f8:	4605      	mov	r5, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80807fa:	f7ff fce4 	bl	80801c6 <_ZN11SystemClass6millisEv>
 80807fe:	1b46      	subs	r6, r0, r5
 8080800:	eb61 0704 	sbc.w	r7, r1, r4
        while (_while() && !_condition()) {
 8080804:	45b9      	cmp	r9, r7
 8080806:	bf08      	it	eq
 8080808:	45b0      	cmpeq	r8, r6
 808080a:	d305      	bcc.n	8080818 <_Z12dailyCleanupv+0x4c>
  waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete
 808080c:	f7ff fcce 	bl	80801ac <_ZN10CloudClass12syncTimeDoneEv.isra.0>
 8080810:	b910      	cbnz	r0, 8080818 <_Z12dailyCleanupv+0x4c>
            spark_process();
 8080812:	f001 fbcb 	bl	8081fac <spark_process>
        while (_while() && !_condition()) {
 8080816:	e7f0      	b.n	80807fa <_Z12dailyCleanupv+0x2e>
 8080818:	f7ff fcc8 	bl	80801ac <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  systemStatusWriteNeeded = true;
 808081c:	2201      	movs	r2, #1
 808081e:	4b07      	ldr	r3, [pc, #28]	; (808083c <_Z12dailyCleanupv+0x70>)
 8080820:	701a      	strb	r2, [r3, #0]
}
 8080822:	b003      	add	sp, #12
 8080824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8080828:	20000158 	.word	0x20000158
 808082c:	08084ca2 	.word	0x08084ca2
 8080830:	08084caa 	.word	0x08084caa
 8080834:	200001b0 	.word	0x200001b0
 8080838:	200001f0 	.word	0x200001f0
 808083c:	20000204 	.word	0x20000204

08080840 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
 8080840:	b507      	push	{r0, r1, r2, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080842:	f001 fbc3 	bl	8081fcc <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
 8080846:	b148      	cbz	r0, 808085c <_Z18loadSystemDefaultsv+0x1c>
 8080848:	2300      	movs	r3, #0
 808084a:	f88d 3000 	strb.w	r3, [sp]
 808084e:	4b0c      	ldr	r3, [pc, #48]	; (8080880 <_Z18loadSystemDefaultsv+0x40>)
 8080850:	4a0c      	ldr	r2, [pc, #48]	; (8080884 <_Z18loadSystemDefaultsv+0x44>)
 8080852:	781b      	ldrb	r3, [r3, #0]
 8080854:	490c      	ldr	r1, [pc, #48]	; (8080888 <_Z18loadSystemDefaultsv+0x48>)
 8080856:	480d      	ldr	r0, [pc, #52]	; (808088c <_Z18loadSystemDefaultsv+0x4c>)
 8080858:	f7ff fcb8 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
 808085c:	2300      	movs	r3, #0
  sysStatus.structuresVersion = 1;
 808085e:	4a0c      	ldr	r2, [pc, #48]	; (8080890 <_Z18loadSystemDefaultsv+0x50>)
 8080860:	2101      	movs	r1, #1
  sysStatus.verboseMode = false;
 8080862:	70d3      	strb	r3, [r2, #3]
  sysStatus.timezone = -5;                                          // Default is East Coast Time
 8080864:	4b0b      	ldr	r3, [pc, #44]	; (8080894 <_Z18loadSystemDefaultsv+0x54>)
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
 8080866:	480c      	ldr	r0, [pc, #48]	; (8080898 <_Z18loadSystemDefaultsv+0x58>)
 8080868:	6093      	str	r3, [r2, #8]
  sysStatus.dstOffset = 1;
 808086a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 808086e:	60d3      	str	r3, [r2, #12]
 8080870:	2314      	movs	r3, #20
  sysStatus.structuresVersion = 1;
 8080872:	7011      	strb	r1, [r2, #0]
}
 8080874:	b003      	add	sp, #12
 8080876:	f85d eb04 	ldr.w	lr, [sp], #4
 808087a:	f000 bdc4 	b.w	8081406 <_ZN6MB85RC9writeDataEjPKhj>
 808087e:	bf00      	nop
 8080880:	20000158 	.word	0x20000158
 8080884:	08084cb8 	.word	0x08084cb8
 8080888:	08084be0 	.word	0x08084be0
 808088c:	200001b0 	.word	0x200001b0
 8080890:	200001f0 	.word	0x200001f0
 8080894:	c0a00000 	.word	0xc0a00000
 8080898:	2000019c 	.word	0x2000019c

0808089c <_Z17checkSystemValuesv>:
void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
 808089c:	b538      	push	{r3, r4, r5, lr}
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
 808089e:	4c15      	ldr	r4, [pc, #84]	; (80808f4 <_Z17checkSystemValuesv+0x58>)
 80808a0:	78e3      	ldrb	r3, [r4, #3]
 80808a2:	2b01      	cmp	r3, #1
 80808a4:	bf84      	itt	hi
 80808a6:	2300      	movhi	r3, #0
 80808a8:	70e3      	strbhi	r3, [r4, #3]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
 80808aa:	6863      	ldr	r3, [r4, #4]
 80808ac:	2bff      	cmp	r3, #255	; 0xff
 80808ae:	d901      	bls.n	80808b4 <_Z17checkSystemValuesv+0x18>
 80808b0:	2300      	movs	r3, #0
 80808b2:	6063      	str	r3, [r4, #4]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
 80808b4:	68a5      	ldr	r5, [r4, #8]
 80808b6:	4910      	ldr	r1, [pc, #64]	; (80808f8 <_Z17checkSystemValuesv+0x5c>)
 80808b8:	4628      	mov	r0, r5
 80808ba:	f003 ff6d 	bl	8084798 <__aeabi_fcmplt>
 80808be:	b920      	cbnz	r0, 80808ca <_Z17checkSystemValuesv+0x2e>
 80808c0:	4628      	mov	r0, r5
 80808c2:	490e      	ldr	r1, [pc, #56]	; (80808fc <_Z17checkSystemValuesv+0x60>)
 80808c4:	f003 ff86 	bl	80847d4 <__aeabi_fcmpgt>
 80808c8:	b108      	cbz	r0, 80808ce <_Z17checkSystemValuesv+0x32>
 80808ca:	4b0d      	ldr	r3, [pc, #52]	; (8080900 <_Z17checkSystemValuesv+0x64>)
 80808cc:	60a3      	str	r3, [r4, #8]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
 80808ce:	68e5      	ldr	r5, [r4, #12]
 80808d0:	2100      	movs	r1, #0
 80808d2:	4628      	mov	r0, r5
 80808d4:	f003 ff60 	bl	8084798 <__aeabi_fcmplt>
 80808d8:	b928      	cbnz	r0, 80808e6 <_Z17checkSystemValuesv+0x4a>
 80808da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80808de:	4628      	mov	r0, r5
 80808e0:	f003 ff78 	bl	80847d4 <__aeabi_fcmpgt>
 80808e4:	b110      	cbz	r0, 80808ec <_Z17checkSystemValuesv+0x50>
 80808e6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80808ea:	60e3      	str	r3, [r4, #12]
  systemStatusWriteNeeded = true;
 80808ec:	2201      	movs	r2, #1
 80808ee:	4b05      	ldr	r3, [pc, #20]	; (8080904 <_Z17checkSystemValuesv+0x68>)
 80808f0:	701a      	strb	r2, [r3, #0]
}
 80808f2:	bd38      	pop	{r3, r4, r5, pc}
 80808f4:	200001f0 	.word	0x200001f0
 80808f8:	c1400000 	.word	0xc1400000
 80808fc:	41400000 	.word	0x41400000
 8080900:	c0a00000 	.word	0xc0a00000
 8080904:	20000204 	.word	0x20000204

08080908 <_Z18checkCurrentValuesv>:
  current.input1 = 0;                                                   // Always reset at startup
 8080908:	2200      	movs	r2, #0
 808090a:	4b05      	ldr	r3, [pc, #20]	; (8080920 <_Z18checkCurrentValuesv+0x18>)
  if (current.alertCount < 0 || current.alertCount > 254) current.alertCount = 0;
 808090c:	68d9      	ldr	r1, [r3, #12]
  current.input1 = 0;                                                   // Always reset at startup
 808090e:	801a      	strh	r2, [r3, #0]
  if (current.alertCount < 0 || current.alertCount > 254) current.alertCount = 0;
 8080910:	29fe      	cmp	r1, #254	; 0xfe
  current.warningFlag = 0;                                    // Always false at startup
 8080912:	741a      	strb	r2, [r3, #16]
  if (current.alertCount < 0 || current.alertCount > 254) current.alertCount = 0;
 8080914:	bf88      	it	hi
 8080916:	60da      	strhi	r2, [r3, #12]
  currentStatusWriteNeeded = true;
 8080918:	2201      	movs	r2, #1
 808091a:	4b02      	ldr	r3, [pc, #8]	; (8080924 <_Z18checkCurrentValuesv+0x1c>)
 808091c:	701a      	strb	r2, [r3, #0]
}
 808091e:	4770      	bx	lr
 8080920:	20000178 	.word	0x20000178
 8080924:	2000019a 	.word	0x2000019a

08080928 <_Z22publishStateTransitionv>:

void publishStateTransition(void)
{
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 8080928:	230e      	movs	r3, #14
{
 808092a:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 808092c:	4d10      	ldr	r5, [pc, #64]	; (8080970 <_Z22publishStateTransitionv+0x48>)
 808092e:	4911      	ldr	r1, [pc, #68]	; (8080974 <_Z22publishStateTransitionv+0x4c>)
 8080930:	782a      	ldrb	r2, [r5, #0]
 8080932:	4c11      	ldr	r4, [pc, #68]	; (8080978 <_Z22publishStateTransitionv+0x50>)
 8080934:	fb03 1202 	mla	r2, r3, r2, r1
 8080938:	7820      	ldrb	r0, [r4, #0]
{
 808093a:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 808093c:	fb03 1300 	mla	r3, r3, r0, r1
 8080940:	9200      	str	r2, [sp, #0]
 8080942:	2128      	movs	r1, #40	; 0x28
 8080944:	4a0d      	ldr	r2, [pc, #52]	; (808097c <_Z22publishStateTransitionv+0x54>)
 8080946:	a802      	add	r0, sp, #8
 8080948:	f001 fc00 	bl	808214c <snprintf>
  oldState = state;
 808094c:	782b      	ldrb	r3, [r5, #0]
 808094e:	7023      	strb	r3, [r4, #0]
  if (sysStatus.verboseMode) publishQueue.publish("State Transition",stateTransitionString,PRIVATE);
 8080950:	4b0b      	ldr	r3, [pc, #44]	; (8080980 <_Z22publishStateTransitionv+0x58>)
 8080952:	78db      	ldrb	r3, [r3, #3]
 8080954:	b14b      	cbz	r3, 808096a <_Z22publishStateTransitionv+0x42>
 8080956:	2300      	movs	r3, #0
 8080958:	f88d 3000 	strb.w	r3, [sp]
 808095c:	4b09      	ldr	r3, [pc, #36]	; (8080984 <_Z22publishStateTransitionv+0x5c>)
 808095e:	490a      	ldr	r1, [pc, #40]	; (8080988 <_Z22publishStateTransitionv+0x60>)
 8080960:	781b      	ldrb	r3, [r3, #0]
 8080962:	480a      	ldr	r0, [pc, #40]	; (808098c <_Z22publishStateTransitionv+0x64>)
 8080964:	aa02      	add	r2, sp, #8
 8080966:	f7ff fc31 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
 808096a:	b00d      	add	sp, #52	; 0x34
 808096c:	bd30      	pop	{r4, r5, pc}
 808096e:	bf00      	nop
 8080970:	200001ec 	.word	0x200001ec
 8080974:	20000024 	.word	0x20000024
 8080978:	200001ae 	.word	0x200001ae
 808097c:	08084cd0 	.word	0x08084cd0
 8080980:	200001f0 	.word	0x200001f0
 8080984:	20000158 	.word	0x20000158
 8080988:	08084cde 	.word	0x08084cde
 808098c:	200001b0 	.word	0x200001b0

08080990 <_Z14fullModemResetv>:
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
 8080990:	2300      	movs	r3, #0

void fullModemReset()   // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
{
 8080992:	b530      	push	{r4, r5, lr}
 8080994:	b085      	sub	sp, #20
	Particle.disconnect(); 	                                         // Disconnect from the cloud
 8080996:	a801      	add	r0, sp, #4
 8080998:	e9cd 3301 	strd	r3, r3, [sp, #4]
 808099c:	f8ad 300c 	strh.w	r3, [sp, #12]
 80809a0:	f001 fdaf 	bl	8082502 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
 80809a4:	f001 f93c 	bl	8081c20 <HAL_Timer_Get_Milli_Seconds>
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 80809a8:	f643 2597 	movw	r5, #14999	; 0x3a97
 80809ac:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80809ae:	f001 fb0d 	bl	8081fcc <spark_cloud_flag_connected>
 80809b2:	b140      	cbz	r0, 80809c6 <_Z14fullModemResetv+0x36>
 80809b4:	f001 f934 	bl	8081c20 <HAL_Timer_Get_Milli_Seconds>
 80809b8:	1b00      	subs	r0, r0, r4
 80809ba:	42a8      	cmp	r0, r5
 80809bc:	d803      	bhi.n	80809c6 <_Z14fullModemResetv+0x36>
		delay(100);
 80809be:	2064      	movs	r0, #100	; 0x64
 80809c0:	f001 fbe4 	bl	808218c <delay>
	while(Particle.connected() && millis() - startTime < 15000) {
 80809c4:	e7f3      	b.n	80809ae <_Z14fullModemResetv+0x1e>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 80809c6:	2100      	movs	r1, #0
 80809c8:	f247 5230 	movw	r2, #30000	; 0x7530
 80809cc:	4608      	mov	r0, r1
 80809ce:	4b08      	ldr	r3, [pc, #32]	; (80809f0 <_Z14fullModemResetv+0x60>)
 80809d0:	f001 f8b6 	bl	8081b40 <cellular_command>
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
 80809d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80809d8:	f001 fbd8 	bl	808218c <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
 80809dc:	4b05      	ldr	r3, [pc, #20]	; (80809f4 <_Z14fullModemResetv+0x64>)
 80809de:	220a      	movs	r2, #10
 80809e0:	2101      	movs	r1, #1
 80809e2:	681b      	ldr	r3, [r3, #0]
 80809e4:	a801      	add	r0, sp, #4
 80809e6:	f002 fb19 	bl	808301c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 80809ea:	b005      	add	sp, #20
 80809ec:	bd30      	pop	{r4, r5, pc}
 80809ee:	bf00      	nop
 80809f0:	08084cef 	.word	0x08084cef
 80809f4:	20000154 	.word	0x20000154

080809f8 <loop>:
{
 80809f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch(state) {
 80809fc:	4ca3      	ldr	r4, [pc, #652]	; (8080c8c <loop+0x294>)
 80809fe:	4ea4      	ldr	r6, [pc, #656]	; (8080c90 <loop+0x298>)
 8080a00:	7823      	ldrb	r3, [r4, #0]
 8080a02:	4da4      	ldr	r5, [pc, #656]	; (8080c94 <loop+0x29c>)
 8080a04:	3b01      	subs	r3, #1
 8080a06:	2b05      	cmp	r3, #5
 8080a08:	d84b      	bhi.n	8080aa2 <loop+0xaa>
 8080a0a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8080a0e:	00f7      	.short	0x00f7
 8080a10:	00900006 	.word	0x00900006
 8080a14:	00b7001f 	.word	0x00b7001f
 8080a18:	00d4      	.short	0x00d4
    if (state != oldState) publishStateTransition();
 8080a1a:	4b9f      	ldr	r3, [pc, #636]	; (8080c98 <loop+0x2a0>)
 8080a1c:	781b      	ldrb	r3, [r3, #0]
 8080a1e:	2b02      	cmp	r3, #2
 8080a20:	d001      	beq.n	8080a26 <loop+0x2e>
 8080a22:	f7ff ff81 	bl	8080928 <_Z22publishStateTransitionv>
    if (input1Flag) state = DEBOUNCE_FULL_STATE;                        // Need to make sure lights are on for sure - harder since full can flash
 8080a26:	4b9d      	ldr	r3, [pc, #628]	; (8080c9c <loop+0x2a4>)
 8080a28:	781b      	ldrb	r3, [r3, #0]
 8080a2a:	b10b      	cbz	r3, 8080a30 <loop+0x38>
 8080a2c:	2304      	movs	r3, #4
 8080a2e:	7023      	strb	r3, [r4, #0]
    if (input2Flag) state = DEBOUNCE_OIL_STATE;                         // Need to make sure lights are on for sure
 8080a30:	4b9b      	ldr	r3, [pc, #620]	; (8080ca0 <loop+0x2a8>)
 8080a32:	781b      	ldrb	r3, [r3, #0]
 8080a34:	b10b      	cbz	r3, 8080a3a <loop+0x42>
 8080a36:	2303      	movs	r3, #3
 8080a38:	7023      	strb	r3, [r4, #0]
    if (Time.hour() != currentHourlyPeriod) state = REPORTING_STATE;    // We want to report on the hour
 8080a3a:	f002 fc3d 	bl	80832b8 <_ZN9TimeClass4hourEv>
 8080a3e:	4b99      	ldr	r3, [pc, #612]	; (8080ca4 <loop+0x2ac>)
 8080a40:	681b      	ldr	r3, [r3, #0]
 8080a42:	4298      	cmp	r0, r3
 8080a44:	d02d      	beq.n	8080aa2 <loop+0xaa>
          state = REPORTING_STATE;                                      // We need to report the change in alert level
 8080a46:	2305      	movs	r3, #5
      state = RESP_WAIT_STATE;                                          // Wait for Response
 8080a48:	7023      	strb	r3, [r4, #0]
 8080a4a:	e02a      	b.n	8080aa2 <loop+0xaa>
    if (state != oldState) {
 8080a4c:	4b92      	ldr	r3, [pc, #584]	; (8080c98 <loop+0x2a0>)
 8080a4e:	781b      	ldrb	r3, [r3, #0]
 8080a50:	2b04      	cmp	r3, #4
 8080a52:	d004      	beq.n	8080a5e <loop+0x66>
      debounceCount = 0;                                                // Zero the debounce count the first time we enter this state from another state
 8080a54:	2200      	movs	r2, #0
 8080a56:	4b94      	ldr	r3, [pc, #592]	; (8080ca8 <loop+0x2b0>)
 8080a58:	601a      	str	r2, [r3, #0]
      publishStateTransition();
 8080a5a:	f7ff ff65 	bl	8080928 <_Z22publishStateTransitionv>
 8080a5e:	f001 f8df 	bl	8081c20 <HAL_Timer_Get_Milli_Seconds>
    if ((millis() - debounceTimeStamp > 100) && current.input1 == 0) {  // More debounce since we are looking for a solid light
 8080a62:	4f92      	ldr	r7, [pc, #584]	; (8080cac <loop+0x2b4>)
 8080a64:	683b      	ldr	r3, [r7, #0]
 8080a66:	46b8      	mov	r8, r7
 8080a68:	1ac0      	subs	r0, r0, r3
 8080a6a:	2864      	cmp	r0, #100	; 0x64
 8080a6c:	d912      	bls.n	8080a94 <loop+0x9c>
 8080a6e:	f896 9000 	ldrb.w	r9, [r6]
 8080a72:	f1b9 0f00 	cmp.w	r9, #0
 8080a76:	d10d      	bne.n	8080a94 <loop+0x9c>
 8080a78:	f001 f8d2 	bl	8081c20 <HAL_Timer_Get_Milli_Seconds>
      debounceTimeStamp = millis();
 8080a7c:	6038      	str	r0, [r7, #0]
      if (!digitalRead(input1)) debounceCount++;
 8080a7e:	2019      	movs	r0, #25
 8080a80:	f002 fee2 	bl	8083848 <digitalRead>
 8080a84:	4b88      	ldr	r3, [pc, #544]	; (8080ca8 <loop+0x2b0>)
 8080a86:	b368      	cbz	r0, 8080ae4 <loop+0xec>
        input1Flag = false;                                             // Reset the interrupt flag
 8080a88:	4a84      	ldr	r2, [pc, #528]	; (8080c9c <loop+0x2a4>)
 8080a8a:	f882 9000 	strb.w	r9, [r2]
        state = IDLE_STATE;                                             // Go back to the IDLE_STATE      
 8080a8e:	2202      	movs	r2, #2
 8080a90:	7022      	strb	r2, [r4, #0]
 8080a92:	e02a      	b.n	8080aea <loop+0xf2>
 8080a94:	f001 f8c4 	bl	8081c20 <HAL_Timer_Get_Milli_Seconds>
    else if ((millis() - debounceTimeStamp > 50) && current.input1 == 2) {   // Less debounce since the light should be flashing - will debounce for 1/2 second
 8080a98:	f8d8 3000 	ldr.w	r3, [r8]
 8080a9c:	1ac0      	subs	r0, r0, r3
 8080a9e:	2832      	cmp	r0, #50	; 0x32
 8080aa0:	d82e      	bhi.n	8080b00 <loop+0x108>
  if (watchdogFlag) petWatchdog();
 8080aa2:	4b83      	ldr	r3, [pc, #524]	; (8080cb0 <loop+0x2b8>)
 8080aa4:	781b      	ldrb	r3, [r3, #0]
 8080aa6:	b10b      	cbz	r3, 8080aac <loop+0xb4>
 8080aa8:	f7ff fe22 	bl	80806f0 <_Z11petWatchdogv>
  if (current.warningFlag) flashLED();                      // Signal that at least one interrupt is disconnected
 8080aac:	7c33      	ldrb	r3, [r6, #16]
 8080aae:	b10b      	cbz	r3, 8080ab4 <loop+0xbc>
 8080ab0:	f7ff fe74 	bl	808079c <_Z8flashLEDv>
  if (systemStatusWriteNeeded) {                                      // Batch write updates to FRAM
 8080ab4:	782b      	ldrb	r3, [r5, #0]
 8080ab6:	b13b      	cbz	r3, 8080ac8 <loop+0xd0>
 8080ab8:	2314      	movs	r3, #20
 8080aba:	2101      	movs	r1, #1
 8080abc:	4a7d      	ldr	r2, [pc, #500]	; (8080cb4 <loop+0x2bc>)
 8080abe:	487e      	ldr	r0, [pc, #504]	; (8080cb8 <loop+0x2c0>)
 8080ac0:	f000 fca1 	bl	8081406 <_ZN6MB85RC9writeDataEjPKhj>
    systemStatusWriteNeeded = false;
 8080ac4:	2300      	movs	r3, #0
 8080ac6:	702b      	strb	r3, [r5, #0]
  if (currentStatusWriteNeeded) {
 8080ac8:	4c7c      	ldr	r4, [pc, #496]	; (8080cbc <loop+0x2c4>)
 8080aca:	7823      	ldrb	r3, [r4, #0]
 8080acc:	b13b      	cbz	r3, 8080ade <loop+0xe6>
 8080ace:	2314      	movs	r3, #20
 8080ad0:	2150      	movs	r1, #80	; 0x50
 8080ad2:	4a6f      	ldr	r2, [pc, #444]	; (8080c90 <loop+0x298>)
 8080ad4:	4878      	ldr	r0, [pc, #480]	; (8080cb8 <loop+0x2c0>)
 8080ad6:	f000 fc96 	bl	8081406 <_ZN6MB85RC9writeDataEjPKhj>
    currentStatusWriteNeeded = false;
 8080ada:	2300      	movs	r3, #0
 8080adc:	7023      	strb	r3, [r4, #0]
}
 8080ade:	b003      	add	sp, #12
 8080ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!digitalRead(input1)) debounceCount++;
 8080ae4:	681a      	ldr	r2, [r3, #0]
 8080ae6:	3201      	adds	r2, #1
 8080ae8:	601a      	str	r2, [r3, #0]
      if (debounceCount > 100) {                                        // We are looking for 75% which is on solid - hence the 10 second debounce
 8080aea:	681b      	ldr	r3, [r3, #0]
 8080aec:	2b64      	cmp	r3, #100	; 0x64
      if (debounceCount > 10) {                                         // We are looking for the "full" light on  hence the shorter debounce
 8080aee:	ddd8      	ble.n	8080aa2 <loop+0xaa>
        if (takeMeasurements()) {
 8080af0:	f7ff fcb2 	bl	8080458 <_Z16takeMeasurementsv>
 8080af4:	2800      	cmp	r0, #0
 8080af6:	d1a6      	bne.n	8080a46 <loop+0x4e>
          input1Flag = false;
 8080af8:	4b68      	ldr	r3, [pc, #416]	; (8080c9c <loop+0x2a4>)
 8080afa:	7018      	strb	r0, [r3, #0]
    if (!dataInFlight)  state = IDLE_STATE;                             // Response Received
 8080afc:	2302      	movs	r3, #2
 8080afe:	e7a3      	b.n	8080a48 <loop+0x50>
    else if ((millis() - debounceTimeStamp > 50) && current.input1 == 2) {   // Less debounce since the light should be flashing - will debounce for 1/2 second
 8080b00:	7837      	ldrb	r7, [r6, #0]
 8080b02:	2f02      	cmp	r7, #2
 8080b04:	d1cd      	bne.n	8080aa2 <loop+0xaa>
 8080b06:	f001 f88b 	bl	8081c20 <HAL_Timer_Get_Milli_Seconds>
      debounceTimeStamp = millis();
 8080b0a:	f8c8 0000 	str.w	r0, [r8]
      if (!digitalRead(input1)) debounceCount++;
 8080b0e:	2019      	movs	r0, #25
 8080b10:	f002 fe9a 	bl	8083848 <digitalRead>
 8080b14:	4b64      	ldr	r3, [pc, #400]	; (8080ca8 <loop+0x2b0>)
 8080b16:	b928      	cbnz	r0, 8080b24 <loop+0x12c>
 8080b18:	681a      	ldr	r2, [r3, #0]
 8080b1a:	3201      	adds	r2, #1
 8080b1c:	601a      	str	r2, [r3, #0]
      if (debounceCount > 10) {                                         // We are looking for the "full" light on  hence the shorter debounce
 8080b1e:	681b      	ldr	r3, [r3, #0]
 8080b20:	2b0a      	cmp	r3, #10
 8080b22:	e7e4      	b.n	8080aee <loop+0xf6>
        input1Flag = false;                                             // Reset the interrupt flag
 8080b24:	2100      	movs	r1, #0
 8080b26:	4a5d      	ldr	r2, [pc, #372]	; (8080c9c <loop+0x2a4>)
        state = IDLE_STATE;                                             // Go back to the IDLE_STATE      
 8080b28:	7027      	strb	r7, [r4, #0]
        input1Flag = false;                                             // Reset the interrupt flag
 8080b2a:	7011      	strb	r1, [r2, #0]
        state = IDLE_STATE;                                             // Go back to the IDLE_STATE      
 8080b2c:	e7f7      	b.n	8080b1e <loop+0x126>
      if (state != oldState) {
 8080b2e:	4b5a      	ldr	r3, [pc, #360]	; (8080c98 <loop+0x2a0>)
 8080b30:	781b      	ldrb	r3, [r3, #0]
 8080b32:	2b03      	cmp	r3, #3
 8080b34:	d004      	beq.n	8080b40 <loop+0x148>
        debounceCount = 0;                                              // We are going to reset the counter as we enter this state for the first time
 8080b36:	2200      	movs	r2, #0
 8080b38:	4b61      	ldr	r3, [pc, #388]	; (8080cc0 <loop+0x2c8>)
 8080b3a:	601a      	str	r2, [r3, #0]
        publishStateTransition();
 8080b3c:	f7ff fef4 	bl	8080928 <_Z22publishStateTransitionv>
 8080b40:	f001 f86e 	bl	8081c20 <HAL_Timer_Get_Milli_Seconds>
      if (millis() - debounceTimeStamp > 100) {                         // Check the state of this low oil light ten times in a second - all have to show LOW (light on) to pass this state
 8080b44:	4f5f      	ldr	r7, [pc, #380]	; (8080cc4 <loop+0x2cc>)
 8080b46:	683b      	ldr	r3, [r7, #0]
 8080b48:	1ac0      	subs	r0, r0, r3
 8080b4a:	2864      	cmp	r0, #100	; 0x64
 8080b4c:	d9a9      	bls.n	8080aa2 <loop+0xaa>
 8080b4e:	f001 f867 	bl	8081c20 <HAL_Timer_Get_Milli_Seconds>
        debounceTimeStamp = millis();
 8080b52:	6038      	str	r0, [r7, #0]
        if (!digitalRead(input2)) debounceCount++;                      // Light is on - check
 8080b54:	201b      	movs	r0, #27
 8080b56:	f002 fe77 	bl	8083848 <digitalRead>
 8080b5a:	4b59      	ldr	r3, [pc, #356]	; (8080cc0 <loop+0x2c8>)
 8080b5c:	b940      	cbnz	r0, 8080b70 <loop+0x178>
 8080b5e:	681a      	ldr	r2, [r3, #0]
 8080b60:	3201      	adds	r2, #1
 8080b62:	601a      	str	r2, [r3, #0]
        if (debounceCount > 100) {                                      // Low oil light is on (assert low) and we have not yet set this alert - it will take 10 seconds to reach this state
 8080b64:	681b      	ldr	r3, [r3, #0]
 8080b66:	2b64      	cmp	r3, #100	; 0x64
 8080b68:	dd9b      	ble.n	8080aa2 <loop+0xaa>
          takeMeasurements();                                           // This will take measurements and set the flags
 8080b6a:	f7ff fc75 	bl	8080458 <_Z16takeMeasurementsv>
 8080b6e:	e76a      	b.n	8080a46 <loop+0x4e>
        input2Flag = false;                                             // Reset the interrupt flag
 8080b70:	2100      	movs	r1, #0
 8080b72:	4a4b      	ldr	r2, [pc, #300]	; (8080ca0 <loop+0x2a8>)
 8080b74:	7011      	strb	r1, [r2, #0]
        state = IDLE_STATE;                                             // Go back to the IDLE_STATE        
 8080b76:	2202      	movs	r2, #2
 8080b78:	7022      	strb	r2, [r4, #0]
 8080b7a:	e7f3      	b.n	8080b64 <loop+0x16c>
    if (state != oldState) publishStateTransition();
 8080b7c:	4b46      	ldr	r3, [pc, #280]	; (8080c98 <loop+0x2a0>)
 8080b7e:	781b      	ldrb	r3, [r3, #0]
 8080b80:	2b05      	cmp	r3, #5
 8080b82:	d001      	beq.n	8080b88 <loop+0x190>
 8080b84:	f7ff fed0 	bl	8080928 <_Z22publishStateTransitionv>
    if (!sysStatus.connectedStatus) connectToParticle();                // Only attempt to connect if not already New process to get connected
 8080b88:	4b4a      	ldr	r3, [pc, #296]	; (8080cb4 <loop+0x2bc>)
 8080b8a:	789b      	ldrb	r3, [r3, #2]
 8080b8c:	b90b      	cbnz	r3, 8080b92 <loop+0x19a>
 8080b8e:	f7ff fdbf 	bl	8080710 <_Z17connectToParticlev>
 8080b92:	f001 fa1b 	bl	8081fcc <spark_cloud_flag_connected>
    if (Particle.connected()) {
 8080b96:	b140      	cbz	r0, 8080baa <loop+0x1b2>
      if (Time.hour() == 0) dailyCleanup();                             // Once a day, clean house
 8080b98:	f002 fb8e 	bl	80832b8 <_ZN9TimeClass4hourEv>
 8080b9c:	b908      	cbnz	r0, 8080ba2 <loop+0x1aa>
 8080b9e:	f7ff fe15 	bl	80807cc <_Z12dailyCleanupv>
      sendEvent();                                                      // Send data to Ubidots
 8080ba2:	f7ff fd55 	bl	8080650 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                          // Wait for Response
 8080ba6:	2306      	movs	r3, #6
 8080ba8:	e74e      	b.n	8080a48 <loop+0x50>
 8080baa:	f001 f839 	bl	8081c20 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 8080bae:	4b46      	ldr	r3, [pc, #280]	; (8080cc8 <loop+0x2d0>)
 8080bb0:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;                                              // Response timed out
 8080bb2:	2301      	movs	r3, #1
 8080bb4:	e748      	b.n	8080a48 <loop+0x50>
    if (state != oldState) publishStateTransition();
 8080bb6:	4b38      	ldr	r3, [pc, #224]	; (8080c98 <loop+0x2a0>)
 8080bb8:	781b      	ldrb	r3, [r3, #0]
 8080bba:	2b06      	cmp	r3, #6
 8080bbc:	d001      	beq.n	8080bc2 <loop+0x1ca>
 8080bbe:	f7ff feb3 	bl	8080928 <_Z22publishStateTransitionv>
    if (!dataInFlight)  state = IDLE_STATE;                             // Response Received
 8080bc2:	4b42      	ldr	r3, [pc, #264]	; (8080ccc <loop+0x2d4>)
 8080bc4:	781b      	ldrb	r3, [r3, #0]
 8080bc6:	2b00      	cmp	r3, #0
 8080bc8:	d098      	beq.n	8080afc <loop+0x104>
 8080bca:	f001 f829 	bl	8081c20 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {               // If it takes too long - will need to reset
 8080bce:	4b40      	ldr	r3, [pc, #256]	; (8080cd0 <loop+0x2d8>)
 8080bd0:	681b      	ldr	r3, [r3, #0]
 8080bd2:	1ac0      	subs	r0, r0, r3
 8080bd4:	4b3f      	ldr	r3, [pc, #252]	; (8080cd4 <loop+0x2dc>)
 8080bd6:	681b      	ldr	r3, [r3, #0]
 8080bd8:	4298      	cmp	r0, r3
 8080bda:	f67f af62 	bls.w	8080aa2 <loop+0xaa>
 8080bde:	f001 f81f 	bl	8081c20 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 8080be2:	4b39      	ldr	r3, [pc, #228]	; (8080cc8 <loop+0x2d0>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);    // If the device times out on the Webhook response, it will ensure a new session is started on next connect
 8080be4:	4a3c      	ldr	r2, [pc, #240]	; (8080cd8 <loop+0x2e0>)
      resetTimeStamp = millis();
 8080be6:	6018      	str	r0, [r3, #0]
 8080be8:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);    // If the device times out on the Webhook response, it will ensure a new session is started on next connect
 8080bea:	f88d 3000 	strb.w	r3, [sp]
 8080bee:	4b3b      	ldr	r3, [pc, #236]	; (8080cdc <loop+0x2e4>)
 8080bf0:	493b      	ldr	r1, [pc, #236]	; (8080ce0 <loop+0x2e8>)
 8080bf2:	781b      	ldrb	r3, [r3, #0]
 8080bf4:	483b      	ldr	r0, [pc, #236]	; (8080ce4 <loop+0x2ec>)
 8080bf6:	f7ff fae9 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
 8080bfa:	e7da      	b.n	8080bb2 <loop+0x1ba>
    if (state != oldState) publishStateTransition();
 8080bfc:	4b26      	ldr	r3, [pc, #152]	; (8080c98 <loop+0x2a0>)
 8080bfe:	781b      	ldrb	r3, [r3, #0]
 8080c00:	2b01      	cmp	r3, #1
 8080c02:	d001      	beq.n	8080c08 <loop+0x210>
 8080c04:	f7ff fe90 	bl	8080928 <_Z22publishStateTransitionv>
 8080c08:	f001 f80a 	bl	8081c20 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
 8080c0c:	4b2e      	ldr	r3, [pc, #184]	; (8080cc8 <loop+0x2d0>)
 8080c0e:	4a36      	ldr	r2, [pc, #216]	; (8080ce8 <loop+0x2f0>)
 8080c10:	681b      	ldr	r3, [r3, #0]
 8080c12:	6812      	ldr	r2, [r2, #0]
 8080c14:	4413      	add	r3, r2
 8080c16:	4283      	cmp	r3, r0
 8080c18:	f4bf af43 	bcs.w	8080aa2 <loop+0xaa>
      if (sysStatus.resetCount <= 3) {                                  // First try simple reset
 8080c1c:	4c25      	ldr	r4, [pc, #148]	; (8080cb4 <loop+0x2bc>)
 8080c1e:	6863      	ldr	r3, [r4, #4]
 8080c20:	2b03      	cmp	r3, #3
 8080c22:	dc13      	bgt.n	8080c4c <loop+0x254>
 8080c24:	f001 f9d2 	bl	8081fcc <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
 8080c28:	b148      	cbz	r0, 8080c3e <loop+0x246>
 8080c2a:	2300      	movs	r3, #0
 8080c2c:	f88d 3000 	strb.w	r3, [sp]
 8080c30:	4b2a      	ldr	r3, [pc, #168]	; (8080cdc <loop+0x2e4>)
 8080c32:	4a2e      	ldr	r2, [pc, #184]	; (8080cec <loop+0x2f4>)
 8080c34:	781b      	ldrb	r3, [r3, #0]
 8080c36:	492e      	ldr	r1, [pc, #184]	; (8080cf0 <loop+0x2f8>)
 8080c38:	482a      	ldr	r0, [pc, #168]	; (8080ce4 <loop+0x2ec>)
 8080c3a:	f7ff fac7 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
 8080c3e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080c42:	f001 faa3 	bl	808218c <delay>
        System.reset();
 8080c46:	f002 f9e6 	bl	8083016 <_ZN11SystemClass5resetEv>
 8080c4a:	e72a      	b.n	8080aa2 <loop+0xaa>
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
 8080c4c:	f002 fb23 	bl	8083296 <_ZN9TimeClass3nowEv>
 8080c50:	6923      	ldr	r3, [r4, #16]
 8080c52:	1ac0      	subs	r0, r0, r3
 8080c54:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
 8080c58:	d94e      	bls.n	8080cf8 <loop+0x300>
 8080c5a:	f001 f9b7 	bl	8081fcc <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
 8080c5e:	b148      	cbz	r0, 8080c74 <loop+0x27c>
 8080c60:	2300      	movs	r3, #0
 8080c62:	f88d 3000 	strb.w	r3, [sp]
 8080c66:	4b1d      	ldr	r3, [pc, #116]	; (8080cdc <loop+0x2e4>)
 8080c68:	4a22      	ldr	r2, [pc, #136]	; (8080cf4 <loop+0x2fc>)
 8080c6a:	781b      	ldrb	r3, [r3, #0]
 8080c6c:	4920      	ldr	r1, [pc, #128]	; (8080cf0 <loop+0x2f8>)
 8080c6e:	481d      	ldr	r0, [pc, #116]	; (8080ce4 <loop+0x2ec>)
 8080c70:	f7ff faac 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
 8080c74:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080c78:	f001 fa88 	bl	808218c <delay>
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
 8080c7c:	2300      	movs	r3, #0
        systemStatusWriteNeeded=true;
 8080c7e:	2101      	movs	r1, #1
        digitalWrite(hardResetPin,HIGH);                              // This will cut all power to the Electron AND the carrier board
 8080c80:	2004      	movs	r0, #4
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
 8080c82:	6063      	str	r3, [r4, #4]
        systemStatusWriteNeeded=true;
 8080c84:	7029      	strb	r1, [r5, #0]
        digitalWrite(hardResetPin,HIGH);                              // This will cut all power to the Electron AND the carrier board
 8080c86:	f002 fdc6 	bl	8083816 <digitalWrite>
 8080c8a:	e70a      	b.n	8080aa2 <loop+0xaa>
 8080c8c:	200001ec 	.word	0x200001ec
 8080c90:	20000178 	.word	0x20000178
 8080c94:	20000204 	.word	0x20000204
 8080c98:	200001ae 	.word	0x200001ae
 8080c9c:	200001ac 	.word	0x200001ac
 8080ca0:	200001ad 	.word	0x200001ad
 8080ca4:	2000018c 	.word	0x2000018c
 8080ca8:	20000164 	.word	0x20000164
 8080cac:	2000016c 	.word	0x2000016c
 8080cb0:	20000205 	.word	0x20000205
 8080cb4:	200001f0 	.word	0x200001f0
 8080cb8:	2000019c 	.word	0x2000019c
 8080cbc:	2000019a 	.word	0x2000019a
 8080cc0:	20000168 	.word	0x20000168
 8080cc4:	20000170 	.word	0x20000170
 8080cc8:	200001e8 	.word	0x200001e8
 8080ccc:	2000019b 	.word	0x2000019b
 8080cd0:	20000208 	.word	0x20000208
 8080cd4:	20000088 	.word	0x20000088
 8080cd8:	08084cfb 	.word	0x08084cfb
 8080cdc:	20000158 	.word	0x20000158
 8080ce0:	08084cfc 	.word	0x08084cfc
 8080ce4:	200001b0 	.word	0x200001b0
 8080ce8:	20000020 	.word	0x20000020
 8080cec:	08084d15 	.word	0x08084d15
 8080cf0:	08084bb7 	.word	0x08084bb7
 8080cf4:	08084d29 	.word	0x08084d29
 8080cf8:	f001 f968 	bl	8081fcc <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
 8080cfc:	b148      	cbz	r0, 8080d12 <loop+0x31a>
 8080cfe:	2300      	movs	r3, #0
 8080d00:	f88d 3000 	strb.w	r3, [sp]
 8080d04:	4b08      	ldr	r3, [pc, #32]	; (8080d28 <loop+0x330>)
 8080d06:	4a09      	ldr	r2, [pc, #36]	; (8080d2c <loop+0x334>)
 8080d08:	781b      	ldrb	r3, [r3, #0]
 8080d0a:	4909      	ldr	r1, [pc, #36]	; (8080d30 <loop+0x338>)
 8080d0c:	4809      	ldr	r0, [pc, #36]	; (8080d34 <loop+0x33c>)
 8080d0e:	f7ff fa5d 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
 8080d12:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080d16:	f001 fa39 	bl	808218c <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
 8080d1a:	2300      	movs	r3, #0
 8080d1c:	6063      	str	r3, [r4, #4]
        systemStatusWriteNeeded=true;
 8080d1e:	2301      	movs	r3, #1
 8080d20:	702b      	strb	r3, [r5, #0]
        fullModemReset();                                             // Full Modem reset and reboots
 8080d22:	f7ff fe35 	bl	8080990 <_Z14fullModemResetv>
 8080d26:	e6bc      	b.n	8080aa2 <loop+0xaa>
 8080d28:	20000158 	.word	0x20000158
 8080d2c:	08084d43 	.word	0x08084d43
 8080d30:	08084bb7 	.word	0x08084bb7
 8080d34:	200001b0 	.word	0x200001b0

08080d38 <_Z8isDSTusav>:
  }
  return 1;
}


bool isDSTusa() {
 8080d38:	b538      	push	{r3, r4, r5, lr}
  // United States of America Summer Timer calculation (2am Local Time - 2nd Sunday in March/ 1st Sunday in November)
  // Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
  // The code works in from months, days and hours in succession toward the two transitions
  int dayOfMonth = Time.day();
 8080d3a:	f002 fac9 	bl	80832d0 <_ZN9TimeClass3dayEv>
 8080d3e:	4605      	mov	r5, r0
  int month = Time.month();
 8080d40:	f002 fada 	bl	80832f8 <_ZN9TimeClass5monthEv>
 8080d44:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
 8080d46:	f002 facf 	bl	80832e8 <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
 8080d4a:	1f23      	subs	r3, r4, #4
 8080d4c:	2b06      	cmp	r3, #6
 8080d4e:	d90e      	bls.n	8080d6e <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
 8080d50:	1ee3      	subs	r3, r4, #3
 8080d52:	2b08      	cmp	r3, #8
 8080d54:	d80d      	bhi.n	8080d72 <_Z8isDSTusav+0x3a>
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
 8080d56:	3801      	subs	r0, #1
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
 8080d58:	1a2d      	subs	r5, r5, r0
 8080d5a:	d504      	bpl.n	8080d66 <_Z8isDSTusav+0x2e>
 8080d5c:	2c0b      	cmp	r4, #11
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
 8080d5e:	bf14      	ite	ne
 8080d60:	2000      	movne	r0, #0
 8080d62:	2001      	moveq	r0, #1
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
 8080d64:	bd38      	pop	{r3, r4, r5, pc}
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
 8080d66:	2d07      	cmp	r5, #7
 8080d68:	dd03      	ble.n	8080d72 <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
 8080d6a:	2c03      	cmp	r4, #3
 8080d6c:	e7f7      	b.n	8080d5e <_Z8isDSTusav+0x26>
    return true;
 8080d6e:	2001      	movs	r0, #1
 8080d70:	e7f8      	b.n	8080d64 <_Z8isDSTusav+0x2c>
    return false;
 8080d72:	2000      	movs	r0, #0
 8080d74:	e7f6      	b.n	8080d64 <_Z8isDSTusav+0x2c>
	...

08080d78 <setup>:
{
 8080d78:	b530      	push	{r4, r5, lr}
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 8080d7a:	2400      	movs	r4, #0
 8080d7c:	b0a9      	sub	sp, #164	; 0xa4
  pinMode(input1,INPUT_PULLUP);                                         // Voltage Sensor Interrupt pin
 8080d7e:	2102      	movs	r1, #2
 8080d80:	2019      	movs	r0, #25
 8080d82:	f002 fd37 	bl	80837f4 <pinMode>
  pinMode(input2,INPUT_PULLUP);                                         // Voltage Sensor Interrupt pin
 8080d86:	2102      	movs	r1, #2
 8080d88:	201b      	movs	r0, #27
 8080d8a:	f002 fd33 	bl	80837f4 <pinMode>
  pinMode(wakeUpPin,INPUT);                                             // This pin is active HIGH
 8080d8e:	2100      	movs	r1, #0
 8080d90:	2011      	movs	r0, #17
 8080d92:	f002 fd2f 	bl	80837f4 <pinMode>
  pinMode(userSwitch,INPUT);                                            // Momentary contact button on board for direct user input
 8080d96:	2100      	movs	r1, #0
 8080d98:	2005      	movs	r0, #5
 8080d9a:	f002 fd2b 	bl	80837f4 <pinMode>
  pinMode(blueLED, OUTPUT);                                             // declare the Blue LED Pin as an output
 8080d9e:	2101      	movs	r1, #1
 8080da0:	2007      	movs	r0, #7
 8080da2:	f002 fd27 	bl	80837f4 <pinMode>
  pinMode(tmp36Shutdwn,OUTPUT);                                         // Supports shutting down the TMP-36 to save juice
 8080da6:	2101      	movs	r1, #1
 8080da8:	201d      	movs	r0, #29
 8080daa:	f002 fd23 	bl	80837f4 <pinMode>
  digitalWrite(tmp36Shutdwn, HIGH);                                     // Turns on the temp sensor
 8080dae:	2101      	movs	r1, #1
 8080db0:	201d      	movs	r0, #29
 8080db2:	f002 fd30 	bl	8083816 <digitalWrite>
  pinMode(donePin,OUTPUT);                                              // Allows us to pet the watchdog
 8080db6:	2101      	movs	r1, #1
 8080db8:	2006      	movs	r0, #6
 8080dba:	f002 fd1b 	bl	80837f4 <pinMode>
  pinMode(hardResetPin,OUTPUT);                                         // For a hard reset active HIGH
 8080dbe:	2101      	movs	r1, #1
 8080dc0:	2004      	movs	r0, #4
 8080dc2:	f002 fd17 	bl	80837f4 <pinMode>
  digitalWrite(blueLED,HIGH);                                           // Signal we are in setup() 
 8080dc6:	2101      	movs	r1, #1
 8080dc8:	2007      	movs	r0, #7
 8080dca:	f002 fd24 	bl	8083816 <digitalWrite>
    static String deviceID(void) { return spark_deviceID(); }
 8080dce:	a804      	add	r0, sp, #16
 8080dd0:	f001 f904 	bl	8081fdc <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 8080dd4:	2300      	movs	r3, #0
 8080dd6:	227d      	movs	r2, #125	; 0x7d
 8080dd8:	a908      	add	r1, sp, #32
 8080dda:	a804      	add	r0, sp, #16
 8080ddc:	f002 f8b4 	bl	8082f48 <_ZNK6String8getBytesEPhjj>
 8080de0:	4623      	mov	r3, r4
 8080de2:	4622      	mov	r2, r4
 8080de4:	498e      	ldr	r1, [pc, #568]	; (8081020 <setup+0x2a8>)
 8080de6:	e9cd 4400 	strd	r4, r4, [sp]
 8080dea:	a808      	add	r0, sp, #32
 8080dec:	f001 f906 	bl	8081ffc <spark_subscribe>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 8080df0:	4623      	mov	r3, r4
 8080df2:	2204      	movs	r2, #4
 8080df4:	498b      	ldr	r1, [pc, #556]	; (8081024 <setup+0x2ac>)
 8080df6:	488c      	ldr	r0, [pc, #560]	; (8081028 <setup+0x2b0>)
 8080df8:	f001 f8c8 	bl	8081f8c <spark_variable>
 8080dfc:	4623      	mov	r3, r4
 8080dfe:	2202      	movs	r2, #2
 8080e00:	498a      	ldr	r1, [pc, #552]	; (808102c <setup+0x2b4>)
 8080e02:	488b      	ldr	r0, [pc, #556]	; (8081030 <setup+0x2b8>)
 8080e04:	f001 f8c2 	bl	8081f8c <spark_variable>
 8080e08:	4623      	mov	r3, r4
 8080e0a:	2202      	movs	r2, #2
 8080e0c:	4989      	ldr	r1, [pc, #548]	; (8081034 <setup+0x2bc>)
 8080e0e:	488a      	ldr	r0, [pc, #552]	; (8081038 <setup+0x2c0>)
 8080e10:	f001 f8bc 	bl	8081f8c <spark_variable>
 8080e14:	4623      	mov	r3, r4
 8080e16:	2204      	movs	r2, #4
 8080e18:	4988      	ldr	r1, [pc, #544]	; (808103c <setup+0x2c4>)
 8080e1a:	4889      	ldr	r0, [pc, #548]	; (8081040 <setup+0x2c8>)
 8080e1c:	f001 f8b6 	bl	8081f8c <spark_variable>
 8080e20:	4623      	mov	r3, r4
 8080e22:	2204      	movs	r2, #4
 8080e24:	4987      	ldr	r1, [pc, #540]	; (8081044 <setup+0x2cc>)
 8080e26:	4888      	ldr	r0, [pc, #544]	; (8081048 <setup+0x2d0>)
 8080e28:	f001 f8b0 	bl	8081f8c <spark_variable>
 8080e2c:	4623      	mov	r3, r4
 8080e2e:	2204      	movs	r2, #4
 8080e30:	4986      	ldr	r1, [pc, #536]	; (808104c <setup+0x2d4>)
 8080e32:	4887      	ldr	r0, [pc, #540]	; (8081050 <setup+0x2d8>)
 8080e34:	f001 f8aa 	bl	8081f8c <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 8080e38:	4a86      	ldr	r2, [pc, #536]	; (8081054 <setup+0x2dc>)
 8080e3a:	4987      	ldr	r1, [pc, #540]	; (8081058 <setup+0x2e0>)
 8080e3c:	4887      	ldr	r0, [pc, #540]	; (808105c <setup+0x2e4>)
 8080e3e:	f001 fb4f 	bl	80824e0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080e42:	4a87      	ldr	r2, [pc, #540]	; (8081060 <setup+0x2e8>)
 8080e44:	4987      	ldr	r1, [pc, #540]	; (8081064 <setup+0x2ec>)
 8080e46:	4885      	ldr	r0, [pc, #532]	; (808105c <setup+0x2e4>)
 8080e48:	f001 fb4a 	bl	80824e0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080e4c:	4a86      	ldr	r2, [pc, #536]	; (8081068 <setup+0x2f0>)
 8080e4e:	4987      	ldr	r1, [pc, #540]	; (808106c <setup+0x2f4>)
 8080e50:	4882      	ldr	r0, [pc, #520]	; (808105c <setup+0x2e4>)
 8080e52:	f001 fb45 	bl	80824e0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080e56:	4a86      	ldr	r2, [pc, #536]	; (8081070 <setup+0x2f8>)
 8080e58:	4986      	ldr	r1, [pc, #536]	; (8081074 <setup+0x2fc>)
 8080e5a:	4880      	ldr	r0, [pc, #512]	; (808105c <setup+0x2e4>)
 8080e5c:	f001 fb40 	bl	80824e0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080e60:	4a85      	ldr	r2, [pc, #532]	; (8081078 <setup+0x300>)
 8080e62:	4986      	ldr	r1, [pc, #536]	; (808107c <setup+0x304>)
 8080e64:	487d      	ldr	r0, [pc, #500]	; (808105c <setup+0x2e4>)
 8080e66:	f001 fb3b 	bl	80824e0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080e6a:	4a85      	ldr	r2, [pc, #532]	; (8081080 <setup+0x308>)
 8080e6c:	4985      	ldr	r1, [pc, #532]	; (8081084 <setup+0x30c>)
 8080e6e:	487b      	ldr	r0, [pc, #492]	; (808105c <setup+0x2e4>)
 8080e70:	f001 fb36 	bl	80824e0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  connectToParticle();                                                  // This device is always connected
 8080e74:	f7ff fc4c 	bl	8080710 <_Z17connectToParticlev>
  fram.begin();                                                         // Initialize the FRAM module
 8080e78:	4883      	ldr	r0, [pc, #524]	; (8081088 <setup+0x310>)
 8080e7a:	f000 fa37 	bl	80812ec <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
 8080e7e:	4621      	mov	r1, r4
 8080e80:	2301      	movs	r3, #1
 8080e82:	4881      	ldr	r0, [pc, #516]	; (8081088 <setup+0x310>)
 8080e84:	f10d 020b 	add.w	r2, sp, #11
 8080e88:	f000 fa72 	bl	8081370 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                               // Check to see if the memory map in the sketch matches the data on the chip
 8080e8c:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8080e90:	4d7e      	ldr	r5, [pc, #504]	; (808108c <setup+0x314>)
 8080e92:	2901      	cmp	r1, #1
 8080e94:	f000 8099 	beq.w	8080fca <setup+0x252>
    fram.erase();                                                       // Reset the FRAM to correct the issue
 8080e98:	487b      	ldr	r0, [pc, #492]	; (8081088 <setup+0x310>)
 8080e9a:	f000 fa31 	bl	8081300 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
 8080e9e:	2304      	movs	r3, #4
 8080ea0:	4621      	mov	r1, r4
 8080ea2:	4a7b      	ldr	r2, [pc, #492]	; (8081090 <setup+0x318>)
 8080ea4:	4878      	ldr	r0, [pc, #480]	; (8081088 <setup+0x310>)
 8080ea6:	f000 faae 	bl	8081406 <_ZN6MB85RC9writeDataEjPKhj>
    loadSystemDefaults();                                               // Out of the box, we need the device to be awake and connected
 8080eaa:	f7ff fcc9 	bl	8080840 <_Z18loadSystemDefaultsv>
        int reason = RESET_REASON_NONE;
 8080eae:	2400      	movs	r4, #0
  checkSystemValues();                                                  // Make sure System values are all in valid range
 8080eb0:	f7ff fcf4 	bl	808089c <_Z17checkSystemValuesv>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080eb4:	4622      	mov	r2, r4
 8080eb6:	4621      	mov	r1, r4
 8080eb8:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
 8080eba:	9403      	str	r4, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080ebc:	f000 fe90 	bl	8081be0 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8080ec0:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
 8080ec2:	2b14      	cmp	r3, #20
 8080ec4:	f040 8087 	bne.w	8080fd6 <setup+0x25e>
    systemStatusWriteNeeded = true;                                     // If so, store incremented number - watchdog must have done This
 8080ec8:	2201      	movs	r2, #1
    sysStatus.resetCount++;
 8080eca:	686b      	ldr	r3, [r5, #4]
 8080ecc:	3301      	adds	r3, #1
 8080ece:	606b      	str	r3, [r5, #4]
    systemStatusWriteNeeded = true;                                     // If so, store incremented number - watchdog must have done This
 8080ed0:	4b70      	ldr	r3, [pc, #448]	; (8081094 <setup+0x31c>)
 8080ed2:	701a      	strb	r2, [r3, #0]
  Time.setDSTOffset(sysStatus.dstOffset);                               // Set the value from FRAM if in limits
 8080ed4:	68e8      	ldr	r0, [r5, #12]
 8080ed6:	f002 f95b 	bl	8083190 <_ZN9TimeClass12setDSTOffsetEf>
  DSTRULES() ? Time.beginDST() : Time.endDST();                         // Perform the DST calculation here
 8080eda:	f7ff ff2d 	bl	8080d38 <_Z8isDSTusav>
 8080ede:	2800      	cmp	r0, #0
 8080ee0:	f000 8084 	beq.w	8080fec <setup+0x274>
 8080ee4:	f002 f96e 	bl	80831c4 <_ZN9TimeClass8beginDSTEv>
  Time.zone(sysStatus.timezone);                                        // Set the Time Zone for our device
 8080ee8:	68a8      	ldr	r0, [r5, #8]
 8080eea:	f002 f933 	bl	8083154 <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
 8080eee:	f002 fa0b 	bl	8083308 <_ZN9TimeClass5localEv>
 8080ef2:	4604      	mov	r4, r0
 8080ef4:	f002 f9cf 	bl	8083296 <_ZN9TimeClass3nowEv>
 8080ef8:	1a20      	subs	r0, r4, r0
 8080efa:	f002 fe8d 	bl	8083c18 <__aeabi_i2d>
 8080efe:	a346      	add	r3, pc, #280	; (adr r3, 8081018 <setup+0x2a0>)
 8080f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080f04:	f003 f81c 	bl	8083f40 <__aeabi_ddiv>
  currentHourlyPeriod = 0;                                              // This will force the device to report to Ubidots each time it is rebooted
 8080f08:	2400      	movs	r4, #0
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
 8080f0a:	e9cd 0100 	strd	r0, r1, [sp]
 8080f0e:	4a62      	ldr	r2, [pc, #392]	; (8081098 <setup+0x320>)
 8080f10:	210a      	movs	r1, #10
 8080f12:	4862      	ldr	r0, [pc, #392]	; (808109c <setup+0x324>)
 8080f14:	f001 f91a 	bl	808214c <snprintf>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
 8080f18:	2314      	movs	r3, #20
 8080f1a:	2150      	movs	r1, #80	; 0x50
 8080f1c:	4a60      	ldr	r2, [pc, #384]	; (80810a0 <setup+0x328>)
 8080f1e:	485a      	ldr	r0, [pc, #360]	; (8081088 <setup+0x310>)
 8080f20:	f000 fa26 	bl	8081370 <_ZN6MB85RC8readDataEjPhj>
  checkCurrentValues();                                                 // Make sure all is good
 8080f24:	f7ff fcf0 	bl	8080908 <_Z18checkCurrentValuesv>
  currentHourlyPeriod = Time.hour();                                    // The local time hourly period for reporting purposes
 8080f28:	f002 f9c6 	bl	80832b8 <_ZN9TimeClass4hourEv>
  currentHourlyPeriod = 0;                                              // This will force the device to report to Ubidots each time it is rebooted
 8080f2c:	4b5d      	ldr	r3, [pc, #372]	; (80810a4 <setup+0x32c>)
  if (!digitalRead(userSwitch)) loadSystemDefaults();                   // Make sure the device wakes up and connects
 8080f2e:	2005      	movs	r0, #5
  currentHourlyPeriod = 0;                                              // This will force the device to report to Ubidots each time it is rebooted
 8080f30:	601c      	str	r4, [r3, #0]
  if (!digitalRead(userSwitch)) loadSystemDefaults();                   // Make sure the device wakes up and connects
 8080f32:	f002 fc89 	bl	8083848 <digitalRead>
 8080f36:	b908      	cbnz	r0, 8080f3c <setup+0x1c4>
 8080f38:	f7ff fc82 	bl	8080840 <_Z18loadSystemDefaultsv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                      // The watchdog timer will signal us and we have to respond
 8080f3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8080f40:	2201      	movs	r2, #1
 8080f42:	4959      	ldr	r1, [pc, #356]	; (80810a8 <setup+0x330>)
 8080f44:	2011      	movs	r0, #17
 8080f46:	9400      	str	r4, [sp, #0]
 8080f48:	f001 fe06 	bl	8082b58 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(input1, input1ISR, FALLING);                          // We need to watch for the input1 in both rising and falling states even if it was on at reset
 8080f4c:	2202      	movs	r2, #2
 8080f4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8080f52:	4956      	ldr	r1, [pc, #344]	; (80810ac <setup+0x334>)
 8080f54:	2019      	movs	r0, #25
 8080f56:	9400      	str	r4, [sp, #0]
 8080f58:	f001 fdfe 	bl	8082b58 <_Z15attachInterrupttPFvvE13InterruptModeah>
  if (digitalRead(input1))  {                                           // The input is not in an alert state
 8080f5c:	2019      	movs	r0, #25
 8080f5e:	f002 fc73 	bl	8083848 <digitalRead>
    strncpy(input1Str,"No Alert",sizeof(input1Str));
 8080f62:	2210      	movs	r2, #16
  if (digitalRead(input1))  {                                           // The input is not in an alert state
 8080f64:	2800      	cmp	r0, #0
 8080f66:	d044      	beq.n	8080ff2 <setup+0x27a>
    strncpy(input1Str,"No Alert",sizeof(input1Str));
 8080f68:	4951      	ldr	r1, [pc, #324]	; (80810b0 <setup+0x338>)
 8080f6a:	4836      	ldr	r0, [pc, #216]	; (8081044 <setup+0x2cc>)
 8080f6c:	f003 fd31 	bl	80849d2 <strncpy>
  if (digitalRead(input2))  {                                           // The input is not in an alert state
 8080f70:	201b      	movs	r0, #27
 8080f72:	f002 fc69 	bl	8083848 <digitalRead>
    strncpy(input2Str,"No Alert",sizeof(input2Str));
 8080f76:	2210      	movs	r2, #16
  if (digitalRead(input2))  {                                           // The input is not in an alert state
 8080f78:	2800      	cmp	r0, #0
 8080f7a:	d042      	beq.n	8081002 <setup+0x28a>
    strncpy(input2Str,"No Alert",sizeof(input2Str));
 8080f7c:	494c      	ldr	r1, [pc, #304]	; (80810b0 <setup+0x338>)
 8080f7e:	4833      	ldr	r0, [pc, #204]	; (808104c <setup+0x2d4>)
 8080f80:	f003 fd27 	bl	80849d2 <strncpy>
    attachInterrupt(input2, input2ISR, FALLING);                          // On the input2 line, we just need to know when it goes LOW
 8080f84:	2300      	movs	r3, #0
 8080f86:	2202      	movs	r2, #2
 8080f88:	9300      	str	r3, [sp, #0]
 8080f8a:	201b      	movs	r0, #27
 8080f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8080f90:	4948      	ldr	r1, [pc, #288]	; (80810b4 <setup+0x33c>)
 8080f92:	f001 fde1 	bl	8082b58 <_Z15attachInterrupttPFvvE13InterruptModeah>
        return network_ready(*this, 0,  NULL);
 8080f96:	2200      	movs	r2, #0
 8080f98:	4b47      	ldr	r3, [pc, #284]	; (80810b8 <setup+0x340>)
 8080f9a:	4611      	mov	r1, r2
 8080f9c:	6858      	ldr	r0, [r3, #4]
 8080f9e:	f001 f86d 	bl	808207c <network_ready>
  if (Cellular.ready()) getSignalStrength();                            // Test signal strength if the cellular modem is on and ready
 8080fa2:	b108      	cbz	r0, 8080fa8 <setup+0x230>
 8080fa4:	f7ff fadc 	bl	8080560 <_Z17getSignalStrengthv>
  getTemperature();
 8080fa8:	f7ff fb12 	bl	80805d0 <_Z14getTemperaturev>
  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
 8080fac:	4b43      	ldr	r3, [pc, #268]	; (80810bc <setup+0x344>)
  digitalWrite(blueLED,LOW);                                            // Signal done with startup
 8080fae:	2100      	movs	r1, #0
  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
 8080fb0:	781a      	ldrb	r2, [r3, #0]
  digitalWrite(blueLED,LOW);                                            // Signal done with startup
 8080fb2:	2007      	movs	r0, #7
  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
 8080fb4:	2a01      	cmp	r2, #1
 8080fb6:	bf1c      	itt	ne
 8080fb8:	2202      	movne	r2, #2
 8080fba:	701a      	strbne	r2, [r3, #0]
  digitalWrite(blueLED,LOW);                                            // Signal done with startup
 8080fbc:	f002 fc2b 	bl	8083816 <digitalWrite>
  String deviceID = System.deviceID();                                  // Multiple Electrons share the same hook - keeps things straight
 8080fc0:	a804      	add	r0, sp, #16
 8080fc2:	f001 ff38 	bl	8082e36 <_ZN6StringD1Ev>
}
 8080fc6:	b029      	add	sp, #164	; 0xa4
 8080fc8:	bd30      	pop	{r4, r5, pc}
 8080fca:	2314      	movs	r3, #20
 8080fcc:	462a      	mov	r2, r5
 8080fce:	482e      	ldr	r0, [pc, #184]	; (8081088 <setup+0x310>)
 8080fd0:	f000 f9ce 	bl	8081370 <_ZN6MB85RC8readDataEjPhj>
        return t;
 8080fd4:	e76b      	b.n	8080eae <setup+0x136>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080fd6:	4622      	mov	r2, r4
 8080fd8:	4621      	mov	r1, r4
 8080fda:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
 8080fdc:	9403      	str	r4, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080fde:	f000 fdff 	bl	8081be0 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8080fe2:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
 8080fe4:	2b8c      	cmp	r3, #140	; 0x8c
 8080fe6:	f47f af75 	bne.w	8080ed4 <setup+0x15c>
 8080fea:	e76d      	b.n	8080ec8 <setup+0x150>
  DSTRULES() ? Time.beginDST() : Time.endDST();                         // Perform the DST calculation here
 8080fec:	f002 f8f6 	bl	80831dc <_ZN9TimeClass6endDSTEv>
 8080ff0:	e77a      	b.n	8080ee8 <setup+0x170>
    strncpy(input1Str,"75% Full",sizeof(input1Str));
 8080ff2:	4933      	ldr	r1, [pc, #204]	; (80810c0 <setup+0x348>)
 8080ff4:	4813      	ldr	r0, [pc, #76]	; (8081044 <setup+0x2cc>)
 8080ff6:	f003 fcec 	bl	80849d2 <strncpy>
    current.input1 = 2;                                               // Inidication is that we are now 75% full
 8080ffa:	2202      	movs	r2, #2
 8080ffc:	4b28      	ldr	r3, [pc, #160]	; (80810a0 <setup+0x328>)
 8080ffe:	701a      	strb	r2, [r3, #0]
 8081000:	e7b6      	b.n	8080f70 <setup+0x1f8>
    strncpy(input2Str,"Low Oil",sizeof(input2Str));
 8081002:	4930      	ldr	r1, [pc, #192]	; (80810c4 <setup+0x34c>)
 8081004:	4811      	ldr	r0, [pc, #68]	; (808104c <setup+0x2d4>)
 8081006:	f003 fce4 	bl	80849d2 <strncpy>
    current.input2 = 1;                                               // Inidication is that we have a low oil alert
 808100a:	2201      	movs	r2, #1
 808100c:	4b24      	ldr	r3, [pc, #144]	; (80810a0 <setup+0x328>)
 808100e:	705a      	strb	r2, [r3, #1]
    current.warningFlag = true;
 8081010:	741a      	strb	r2, [r3, #16]
 8081012:	e7c0      	b.n	8080f96 <setup+0x21e>
 8081014:	f3af 8000 	nop.w
 8081018:	00000000 	.word	0x00000000
 808101c:	40ac2000 	.word	0x40ac2000
 8081020:	0808024d 	.word	0x0808024d
 8081024:	20000104 	.word	0x20000104
 8081028:	08084d62 	.word	0x08084d62
 808102c:	200001f4 	.word	0x200001f4
 8081030:	08084d69 	.word	0x08084d69
 8081034:	20000180 	.word	0x20000180
 8081038:	08084d74 	.word	0x08084d74
 808103c:	08084e68 	.word	0x08084e68
 8081040:	08084d80 	.word	0x08084d80
 8081044:	20000000 	.word	0x20000000
 8081048:	08084d88 	.word	0x08084d88
 808104c:	20000010 	.word	0x20000010
 8081050:	08084d8f 	.word	0x08084d8f
 8081054:	08084d96 	.word	0x08084d96
 8081058:	0808016d 	.word	0x0808016d
 808105c:	080824b5 	.word	0x080824b5
 8081060:	08084da1 	.word	0x08084da1
 8081064:	08080101 	.word	0x08080101
 8081068:	08084daa 	.word	0x08084daa
 808106c:	080802d1 	.word	0x080802d1
 8081070:	08084db7 	.word	0x08084db7
 8081074:	08080341 	.word	0x08080341
 8081078:	08084dc4 	.word	0x08084dc4
 808107c:	080810c9 	.word	0x080810c9
 8081080:	08084dd2 	.word	0x08084dd2
 8081084:	080801e9 	.word	0x080801e9
 8081088:	2000019c 	.word	0x2000019c
 808108c:	200001f0 	.word	0x200001f0
 8081090:	08084e70 	.word	0x08084e70
 8081094:	20000204 	.word	0x20000204
 8081098:	08084be5 	.word	0x08084be5
 808109c:	20000190 	.word	0x20000190
 80810a0:	20000178 	.word	0x20000178
 80810a4:	2000018c 	.word	0x2000018c
 80810a8:	080800dd 	.word	0x080800dd
 80810ac:	080800e9 	.word	0x080800e9
 80810b0:	08084de0 	.word	0x08084de0
 80810b4:	080800f5 	.word	0x080800f5
 80810b8:	20000210 	.word	0x20000210
 80810bc:	200001ec 	.word	0x200001ec
 80810c0:	08084c08 	.word	0x08084c08
 80810c4:	08084c1b 	.word	0x08084c1b

080810c8 <_Z12setDSTOffset6String>:
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
 80810c8:	b570      	push	{r4, r5, r6, lr}
 80810ca:	b0c8      	sub	sp, #288	; 0x120
 80810cc:	4604      	mov	r4, r0
  time_t t = Time.now();
 80810ce:	f002 f8e2 	bl	8083296 <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
 80810d2:	220a      	movs	r2, #10
  time_t t = Time.now();
 80810d4:	4605      	mov	r5, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
 80810d6:	a903      	add	r1, sp, #12
 80810d8:	6820      	ldr	r0, [r4, #0]
 80810da:	f003 fd07 	bl	8084aec <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
 80810de:	b2c3      	uxtb	r3, r0
 80810e0:	2b02      	cmp	r3, #2
 80810e2:	d854      	bhi.n	808118e <_Z12setDSTOffset6String+0xc6>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
 80810e4:	b240      	sxtb	r0, r0
 80810e6:	f003 f965 	bl	80843b4 <__aeabi_i2f>
 80810ea:	4604      	mov	r4, r0
 80810ec:	f002 f850 	bl	8083190 <_ZN9TimeClass12setDSTOffsetEf>
  systemStatusWriteNeeded = true;
 80810f0:	2201      	movs	r2, #1
  sysStatus.dstOffset = (float)tempDSTOffset;
 80810f2:	4b2b      	ldr	r3, [pc, #172]	; (80811a0 <_Z12setDSTOffset6String+0xd8>)
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
 80810f4:	4620      	mov	r0, r4
  sysStatus.dstOffset = (float)tempDSTOffset;
 80810f6:	60dc      	str	r4, [r3, #12]
  systemStatusWriteNeeded = true;
 80810f8:	4b2a      	ldr	r3, [pc, #168]	; (80811a4 <_Z12setDSTOffset6String+0xdc>)
 80810fa:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
 80810fc:	f002 fd9e 	bl	8083c3c <__aeabi_f2d>
 8081100:	4a29      	ldr	r2, [pc, #164]	; (80811a8 <_Z12setDSTOffset6String+0xe0>)
 8081102:	e9cd 0100 	strd	r0, r1, [sp]
 8081106:	f44f 7180 	mov.w	r1, #256	; 0x100
 808110a:	a808      	add	r0, sp, #32
 808110c:	f001 f81e 	bl	808214c <snprintf>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
 8081110:	f002 f8a4 	bl	808325c <_ZN9TimeClass7isValidEv>
 8081114:	b128      	cbz	r0, 8081122 <_Z12setDSTOffset6String+0x5a>
 8081116:	f7ff fe0f 	bl	8080d38 <_Z8isDSTusav>
 808111a:	2800      	cmp	r0, #0
 808111c:	d034      	beq.n	8081188 <_Z12setDSTOffset6String+0xc0>
 808111e:	f002 f851 	bl	80831c4 <_ZN9TimeClass8beginDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
 8081122:	f002 f8f1 	bl	8083308 <_ZN9TimeClass5localEv>
 8081126:	4604      	mov	r4, r0
 8081128:	f002 f8b5 	bl	8083296 <_ZN9TimeClass3nowEv>
 808112c:	1a20      	subs	r0, r4, r0
 808112e:	f002 fd73 	bl	8083c18 <__aeabi_i2d>
 8081132:	a319      	add	r3, pc, #100	; (adr r3, 8081198 <_Z12setDSTOffset6String+0xd0>)
 8081134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081138:	f002 ff02 	bl	8083f40 <__aeabi_ddiv>
 808113c:	4a1b      	ldr	r2, [pc, #108]	; (80811ac <_Z12setDSTOffset6String+0xe4>)
 808113e:	e9cd 0100 	strd	r0, r1, [sp]
 8081142:	210a      	movs	r1, #10
 8081144:	481a      	ldr	r0, [pc, #104]	; (80811b0 <_Z12setDSTOffset6String+0xe8>)
 8081146:	f001 f801 	bl	808214c <snprintf>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 808114a:	f000 ff3f 	bl	8081fcc <spark_cloud_flag_connected>
  if (Particle.connected()) {
 808114e:	b1c8      	cbz	r0, 8081184 <_Z12setDSTOffset6String+0xbc>
 8081150:	2600      	movs	r6, #0
 8081152:	4c18      	ldr	r4, [pc, #96]	; (80811b4 <_Z12setDSTOffset6String+0xec>)
    publishQueue.publish("Time",data, PRIVATE);
 8081154:	f88d 6000 	strb.w	r6, [sp]
 8081158:	4917      	ldr	r1, [pc, #92]	; (80811b8 <_Z12setDSTOffset6String+0xf0>)
 808115a:	7823      	ldrb	r3, [r4, #0]
 808115c:	aa08      	add	r2, sp, #32
 808115e:	4817      	ldr	r0, [pc, #92]	; (80811bc <_Z12setDSTOffset6String+0xf4>)
 8081160:	f7ff f834 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
 8081164:	462a      	mov	r2, r5
 8081166:	17eb      	asrs	r3, r5, #31
 8081168:	a804      	add	r0, sp, #16
 808116a:	f002 f83f 	bl	80831ec <_ZN9TimeClass7timeStrEx>
 808116e:	f88d 6000 	strb.w	r6, [sp]
 8081172:	7823      	ldrb	r3, [r4, #0]
 8081174:	9a04      	ldr	r2, [sp, #16]
 8081176:	4910      	ldr	r1, [pc, #64]	; (80811b8 <_Z12setDSTOffset6String+0xf0>)
 8081178:	4810      	ldr	r0, [pc, #64]	; (80811bc <_Z12setDSTOffset6String+0xf4>)
 808117a:	f7ff f827 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
 808117e:	a804      	add	r0, sp, #16
 8081180:	f001 fe59 	bl	8082e36 <_ZN6StringD1Ev>
  return 1;
 8081184:	2001      	movs	r0, #1
 8081186:	e003      	b.n	8081190 <_Z12setDSTOffset6String+0xc8>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
 8081188:	f002 f828 	bl	80831dc <_ZN9TimeClass6endDSTEv>
 808118c:	e7c9      	b.n	8081122 <_Z12setDSTOffset6String+0x5a>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
 808118e:	2000      	movs	r0, #0
}
 8081190:	b048      	add	sp, #288	; 0x120
 8081192:	bd70      	pop	{r4, r5, r6, pc}
 8081194:	f3af 8000 	nop.w
 8081198:	00000000 	.word	0x00000000
 808119c:	40ac2000 	.word	0x40ac2000
 80811a0:	200001f0 	.word	0x200001f0
 80811a4:	20000204 	.word	0x20000204
 80811a8:	08084de9 	.word	0x08084de9
 80811ac:	08084be5 	.word	0x08084be5
 80811b0:	20000190 	.word	0x20000190
 80811b4:	20000158 	.word	0x20000158
 80811b8:	08084c03 	.word	0x08084c03
 80811bc:	200001b0 	.word	0x200001b0

080811c0 <_GLOBAL__sub_I___appProductID>:
 80811c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        val_(val) {
 80811c2:	2400      	movs	r4, #0
 80811c4:	2701      	movs	r7, #1
 80811c6:	4b25      	ldr	r3, [pc, #148]	; (808125c <_GLOBAL__sub_I___appProductID+0x9c>)
              error_(SYSTEM_ERROR_NONE) {
 80811c8:	4d25      	ldr	r5, [pc, #148]	; (8081260 <_GLOBAL__sub_I___appProductID+0xa0>)
 80811ca:	601c      	str	r4, [r3, #0]
 80811cc:	4b25      	ldr	r3, [pc, #148]	; (8081264 <_GLOBAL__sub_I___appProductID+0xa4>)
SYSTEM_MODE(SEMI_AUTOMATIC);    // This will enable user code to start executing automatically.
 80811ce:	4e26      	ldr	r6, [pc, #152]	; (8081268 <_GLOBAL__sub_I___appProductID+0xa8>)
 80811d0:	701f      	strb	r7, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
 80811d2:	f002 faa9 	bl	8083728 <spark_protocol_instance>
 80811d6:	4623      	mov	r3, r4
 80811d8:	4622      	mov	r2, r4
 80811da:	f642 11fb 	movw	r1, #10747	; 0x29fb
 80811de:	f002 faab 	bl	8083738 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
 80811e2:	f002 faa1 	bl	8083728 <spark_protocol_instance>
 80811e6:	4622      	mov	r2, r4
 80811e8:	4623      	mov	r3, r4
 80811ea:	2106      	movs	r1, #6
 80811ec:	f002 faac 	bl	8083748 <spark_protocol_set_product_firmware_version>
    SleepResult() {}
 80811f0:	4b1e      	ldr	r3, [pc, #120]	; (808126c <_GLOBAL__sub_I___appProductID+0xac>)
              error_(SYSTEM_ERROR_NONE) {
 80811f2:	602c      	str	r4, [r5, #0]
    SleepResult() {}
 80811f4:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
 80811f6:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
 80811f8:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
 80811fa:	2002      	movs	r0, #2
 80811fc:	f000 fe70 	bl	8081ee0 <set_system_mode>
 8081200:	4632      	mov	r2, r6
 8081202:	4628      	mov	r0, r5
 8081204:	491a      	ldr	r1, [pc, #104]	; (8081270 <_GLOBAL__sub_I___appProductID+0xb0>)
 8081206:	f002 fba7 	bl	8083958 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);         // Means my code will not be held up by Particle processes.
 808120a:	4621      	mov	r1, r4
 808120c:	4638      	mov	r0, r7
 808120e:	f000 fe7f 	bl	8081f10 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
 8081212:	4639      	mov	r1, r7
 8081214:	2004      	movs	r0, #4
 8081216:	f000 fcdb 	bl	8081bd0 <HAL_Feature_Set>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
 808121a:	f002 fb5d 	bl	80838d8 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
 808121e:	4d15      	ldr	r5, [pc, #84]	; (8081274 <_GLOBAL__sub_I___appProductID+0xb4>)
 8081220:	4601      	mov	r1, r0
 8081222:	4623      	mov	r3, r4
 8081224:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8081228:	4628      	mov	r0, r5
 808122a:	f000 f855 	bl	80812d8 <_ZN6MB85RCC1ER7TwoWireji>
 808122e:	4b12      	ldr	r3, [pc, #72]	; (8081278 <_GLOBAL__sub_I___appProductID+0xb8>)
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
 8081230:	4c12      	ldr	r4, [pc, #72]	; (808127c <_GLOBAL__sub_I___appProductID+0xbc>)
 8081232:	602b      	str	r3, [r5, #0]
 8081234:	4632      	mov	r2, r6
 8081236:	4628      	mov	r0, r5
 8081238:	4911      	ldr	r1, [pc, #68]	; (8081280 <_GLOBAL__sub_I___appProductID+0xc0>)
 808123a:	f002 fb8d 	bl	8083958 <__aeabi_atexit>
 808123e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8081242:	4620      	mov	r0, r4
 8081244:	490f      	ldr	r1, [pc, #60]	; (8081284 <_GLOBAL__sub_I___appProductID+0xc4>)
 8081246:	f000 fb4d 	bl	80818e4 <_ZN25PublishQueueAsyncRetainedC1EPht>
 808124a:	4b0f      	ldr	r3, [pc, #60]	; (8081288 <_GLOBAL__sub_I___appProductID+0xc8>)
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
 808124c:	4632      	mov	r2, r6
 808124e:	6023      	str	r3, [r4, #0]
 8081250:	4620      	mov	r0, r4
 8081252:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
 8081256:	490d      	ldr	r1, [pc, #52]	; (808128c <_GLOBAL__sub_I___appProductID+0xcc>)
 8081258:	f002 bb7e 	b.w	8083958 <__aeabi_atexit>
 808125c:	20000154 	.word	0x20000154
 8081260:	20000144 	.word	0x20000144
 8081264:	20000158 	.word	0x20000158
 8081268:	20000100 	.word	0x20000100
 808126c:	ffff0000 	.word	0xffff0000
 8081270:	08080189 	.word	0x08080189
 8081274:	2000019c 	.word	0x2000019c
 8081278:	08084e04 	.word	0x08084e04
 808127c:	200001b0 	.word	0x200001b0
 8081280:	08080145 	.word	0x08080145
 8081284:	40024000 	.word	0x40024000
 8081288:	08084e20 	.word	0x08084e20
 808128c:	0808011d 	.word	0x0808011d

08081290 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
 8081290:	4770      	bx	lr

08081292 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
 8081292:	b510      	push	{r4, lr}
 8081294:	4604      	mov	r4, r0
}
 8081296:	2110      	movs	r1, #16
 8081298:	f002 fb63 	bl	8083962 <_ZdlPvj>
 808129c:	4620      	mov	r0, r4
 808129e:	bd10      	pop	{r4, pc}

080812a0 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
 80812a0:	6803      	ldr	r3, [r0, #0]
 80812a2:	b2c9      	uxtb	r1, r1
 80812a4:	689b      	ldr	r3, [r3, #8]
 80812a6:	4718      	bx	r3

080812a8 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 80812a8:	b40e      	push	{r1, r2, r3}
 80812aa:	b510      	push	{r4, lr}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80812ac:	2300      	movs	r3, #0
    log(LOG_LEVEL_INFO, fmt, args);
 80812ae:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 80812b0:	2020      	movs	r0, #32
inline void spark::Logger::info(const char *fmt, ...) const {
 80812b2:	b08d      	sub	sp, #52	; 0x34
 80812b4:	aa0f      	add	r2, sp, #60	; 0x3c
 80812b6:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 80812ba:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80812be:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 80812c2:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80812c4:	201e      	movs	r0, #30
 80812c6:	aa04      	add	r2, sp, #16
 80812c8:	f000 fdfa 	bl	8081ec0 <log_message_v>
}
 80812cc:	b00d      	add	sp, #52	; 0x34
 80812ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80812d2:	b003      	add	sp, #12
 80812d4:	4770      	bx	lr
	...

080812d8 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
 80812d8:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
 80812da:	4d03      	ldr	r5, [pc, #12]	; (80812e8 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
 80812dc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80812e0:	e9c0 5100 	strd	r5, r1, [r0]
}
 80812e4:	bd30      	pop	{r4, r5, pc}
 80812e6:	bf00      	nop
 80812e8:	08084ea8 	.word	0x08084ea8

080812ec <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
 80812ec:	6840      	ldr	r0, [r0, #4]
 80812ee:	f001 bbe5 	b.w	8082abc <_ZN7TwoWire5beginEv>

080812f2 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 80812f2:	b510      	push	{r4, lr}
 80812f4:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 80812f6:	6800      	ldr	r0, [r0, #0]
 80812f8:	f001 fc23 	bl	8082b42 <_ZN7TwoWire6unlockEv>
 80812fc:	4620      	mov	r0, r4
 80812fe:	bd10      	pop	{r4, pc}

08081300 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
 8081300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081304:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
 8081306:	6840      	ldr	r0, [r0, #4]
bool MB85RC::erase() {
 8081308:	b08a      	sub	sp, #40	; 0x28
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808130a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808130c:	f001 fc10 	bl	8082b30 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
 8081310:	221e      	movs	r2, #30
 8081312:	2100      	movs	r1, #0
 8081314:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
 8081316:	68a7      	ldr	r7, [r4, #8]
		size_t framAddr = 0;
 8081318:	2600      	movs	r6, #0
		memset(zero, 0, sizeof(zero));
 808131a:	f003 faf9 	bl	8084910 <memset>

		while(totalLen > 0) {
 808131e:	b1ef      	cbz	r7, 808135c <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
 8081320:	2f1e      	cmp	r7, #30
 8081322:	46b8      	mov	r8, r7
 8081324:	bf28      	it	cs
 8081326:	f04f 081e 	movcs.w	r8, #30
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
 808132a:	6823      	ldr	r3, [r4, #0]
 808132c:	4631      	mov	r1, r6
 808132e:	68dd      	ldr	r5, [r3, #12]
 8081330:	4620      	mov	r0, r4
 8081332:	4643      	mov	r3, r8
 8081334:	aa02      	add	r2, sp, #8
 8081336:	47a8      	blx	r5
			if (!result) {
 8081338:	4605      	mov	r5, r0
 808133a:	b958      	cbnz	r0, 8081354 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
 808133c:	480a      	ldr	r0, [pc, #40]	; (8081368 <_ZN6MB85RC5eraseEv+0x68>)
 808133e:	4632      	mov	r2, r6
 8081340:	490a      	ldr	r1, [pc, #40]	; (808136c <_ZN6MB85RC5eraseEv+0x6c>)
 8081342:	f7ff ffb1 	bl	80812a8 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
 8081346:	a801      	add	r0, sp, #4
 8081348:	f7ff ffd3 	bl	80812f2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
 808134c:	4628      	mov	r0, r5
 808134e:	b00a      	add	sp, #40	; 0x28
 8081350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
 8081354:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
 8081358:	4446      	add	r6, r8
		while(totalLen > 0) {
 808135a:	e7e0      	b.n	808131e <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
 808135c:	a801      	add	r0, sp, #4
 808135e:	f7ff ffc8 	bl	80812f2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
 8081362:	2501      	movs	r5, #1
 8081364:	e7f2      	b.n	808134c <_ZN6MB85RC5eraseEv+0x4c>
 8081366:	bf00      	nop
 8081368:	200002fc 	.word	0x200002fc
 808136c:	08084e74 	.word	0x08084e74

08081370 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
 8081370:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8081374:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
 8081376:	6840      	ldr	r0, [r0, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
 8081378:	460d      	mov	r5, r1
 808137a:	4616      	mov	r6, r2
 808137c:	461f      	mov	r7, r3
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808137e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8081380:	f001 fbd6 	bl	8082b30 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
 8081384:	b1a7      	cbz	r7, 80813b0 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
 8081386:	68e1      	ldr	r1, [r4, #12]
 8081388:	6860      	ldr	r0, [r4, #4]
 808138a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 808138e:	f001 fbc8 	bl	8082b22 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
 8081392:	0a29      	lsrs	r1, r5, #8
 8081394:	6860      	ldr	r0, [r4, #4]
 8081396:	f7ff ff83 	bl	80812a0 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
 808139a:	4629      	mov	r1, r5
 808139c:	6860      	ldr	r0, [r4, #4]
 808139e:	f7ff ff7f 	bl	80812a0 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
 80813a2:	2100      	movs	r1, #0
 80813a4:	6860      	ldr	r0, [r4, #4]
 80813a6:	f001 fbbf 	bl	8082b28 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
 80813aa:	b148      	cbz	r0, 80813c0 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
 80813ac:	2400      	movs	r4, #0
 80813ae:	e000      	b.n	80813b2 <_ZN6MB85RC8readDataEjPhj+0x42>
 80813b0:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
 80813b2:	a801      	add	r0, sp, #4
 80813b4:	f7ff ff9d 	bl	80812f2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
 80813b8:	4620      	mov	r0, r4
 80813ba:	b003      	add	sp, #12
 80813bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
 80813c0:	2f20      	cmp	r7, #32
 80813c2:	46b8      	mov	r8, r7
 80813c4:	bf28      	it	cs
 80813c6:	f04f 0820 	movcs.w	r8, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
 80813ca:	7b21      	ldrb	r1, [r4, #12]
 80813cc:	2301      	movs	r3, #1
 80813ce:	4642      	mov	r2, r8
 80813d0:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 80813d4:	6860      	ldr	r0, [r4, #4]
 80813d6:	f001 fb8e 	bl	8082af6 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
 80813da:	f002 fa7d 	bl	80838d8 <_Z19__fetch_global_Wirev>
 80813de:	6803      	ldr	r3, [r0, #0]
 80813e0:	691b      	ldr	r3, [r3, #16]
 80813e2:	4798      	blx	r3
 80813e4:	4540      	cmp	r0, r8
 80813e6:	dbe1      	blt.n	80813ac <_ZN6MB85RC8readDataEjPhj+0x3c>
 80813e8:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
 80813ec:	f002 fa74 	bl	80838d8 <_Z19__fetch_global_Wirev>
 80813f0:	6803      	ldr	r3, [r0, #0]
 80813f2:	695b      	ldr	r3, [r3, #20]
 80813f4:	4798      	blx	r3
 80813f6:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
 80813fa:	454e      	cmp	r6, r9
 80813fc:	d1f6      	bne.n	80813ec <_ZN6MB85RC8readDataEjPhj+0x7c>
 80813fe:	4445      	add	r5, r8
 8081400:	eba7 0708 	sub.w	r7, r7, r8
 8081404:	e7be      	b.n	8081384 <_ZN6MB85RC8readDataEjPhj+0x14>

08081406 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
 8081406:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808140a:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
 808140c:	6840      	ldr	r0, [r0, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
 808140e:	460e      	mov	r6, r1
 8081410:	4690      	mov	r8, r2
 8081412:	461d      	mov	r5, r3
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081414:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8081416:	f04f 0901 	mov.w	r9, #1
 808141a:	f001 fb89 	bl	8082b30 <_ZN7TwoWire4lockEv>
	WITH_LOCK(wire) {
 808141e:	f1b9 0f00 	cmp.w	r9, #0
 8081422:	d02a      	beq.n	808147a <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
 8081424:	b34d      	cbz	r5, 808147a <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
 8081426:	68e1      	ldr	r1, [r4, #12]
 8081428:	6860      	ldr	r0, [r4, #4]
 808142a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 808142e:	f001 fb78 	bl	8082b22 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
 8081432:	0a31      	lsrs	r1, r6, #8
 8081434:	6860      	ldr	r0, [r4, #4]
 8081436:	f7ff ff33 	bl	80812a0 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
 808143a:	4631      	mov	r1, r6
 808143c:	6860      	ldr	r0, [r4, #4]
 808143e:	f7ff ff2f 	bl	80812a0 <_ZN7TwoWire5writeEj>
 8081442:	4647      	mov	r7, r8
 8081444:	f1a5 0a1e 	sub.w	sl, r5, #30
 8081448:	eba6 0b08 	sub.w	fp, r6, r8

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
				wire.write(*data);
 808144c:	6860      	ldr	r0, [r4, #4]
 808144e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8081452:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
 8081454:	3d01      	subs	r5, #1
				wire.write(*data);
 8081456:	689b      	ldr	r3, [r3, #8]
 8081458:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
 808145a:	4555      	cmp	r5, sl
				data++;
 808145c:	46b8      	mov	r8, r7
 808145e:	eb0b 0607 	add.w	r6, fp, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
 8081462:	d001      	beq.n	8081468 <_ZN6MB85RC9writeDataEjPKhj+0x62>
 8081464:	2d00      	cmp	r5, #0
 8081466:	d1f1      	bne.n	808144c <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
 8081468:	2101      	movs	r1, #1
 808146a:	6860      	ldr	r0, [r4, #4]
 808146c:	f001 fb5c 	bl	8082b28 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
 8081470:	2800      	cmp	r0, #0
 8081472:	d0d7      	beq.n	8081424 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
 8081474:	f04f 0900 	mov.w	r9, #0
 8081478:	e7d1      	b.n	808141e <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
 808147a:	a801      	add	r0, sp, #4
 808147c:	f7ff ff39 	bl	80812f2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
 8081480:	4648      	mov	r0, r9
 8081482:	b003      	add	sp, #12
 8081484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08081488 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
 8081488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808148c:	460e      	mov	r6, r1
 808148e:	4615      	mov	r5, r2
 8081490:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
 8081492:	6840      	ldr	r0, [r0, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
 8081494:	b08b      	sub	sp, #44	; 0x2c
 8081496:	461c      	mov	r4, r3
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081498:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808149a:	f001 fb49 	bl	8082b30 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
 808149e:	42ae      	cmp	r6, r5
 80814a0:	d229      	bcs.n	80814f6 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
 80814a2:	4426      	add	r6, r4
			framAddrTo += numBytes;
 80814a4:	4425      	add	r5, r4
			while(numBytes > 0) {
 80814a6:	b18c      	cbz	r4, 80814cc <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
 80814a8:	2c1e      	cmp	r4, #30
 80814aa:	4627      	mov	r7, r4
 80814ac:	bf28      	it	cs
 80814ae:	271e      	movcs	r7, #30
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
 80814b0:	f8d8 3000 	ldr.w	r3, [r8]
				framAddrFrom -= count;
 80814b4:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
 80814b6:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80814ba:	4631      	mov	r1, r6
 80814bc:	463b      	mov	r3, r7
 80814be:	4640      	mov	r0, r8
 80814c0:	aa02      	add	r2, sp, #8
				framAddrTo -= count;
 80814c2:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
 80814c4:	47c8      	blx	r9
				if (!result) {
 80814c6:	b948      	cbnz	r0, 80814dc <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
 80814c8:	2400      	movs	r4, #0
 80814ca:	e000      	b.n	80814ce <_ZN6MB85RC8moveDataEjjj+0x46>
 80814cc:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
 80814ce:	a801      	add	r0, sp, #4
 80814d0:	f7ff ff0f 	bl	80812f2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
 80814d4:	4620      	mov	r0, r4
 80814d6:	b00b      	add	sp, #44	; 0x2c
 80814d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
 80814dc:	f8d8 3000 	ldr.w	r3, [r8]
 80814e0:	4629      	mov	r1, r5
 80814e2:	f8d3 900c 	ldr.w	r9, [r3, #12]
 80814e6:	4640      	mov	r0, r8
 80814e8:	463b      	mov	r3, r7
 80814ea:	aa02      	add	r2, sp, #8
 80814ec:	47c8      	blx	r9
				if (!result) {
 80814ee:	2800      	cmp	r0, #0
 80814f0:	d0ea      	beq.n	80814c8 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
 80814f2:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
 80814f4:	e7d7      	b.n	80814a6 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
 80814f6:	d9e9      	bls.n	80814cc <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
 80814f8:	2c00      	cmp	r4, #0
 80814fa:	d0e7      	beq.n	80814cc <_ZN6MB85RC8moveDataEjjj+0x44>
				if (count > sizeof(buf)) {
 80814fc:	2c1e      	cmp	r4, #30
 80814fe:	4627      	mov	r7, r4
 8081500:	bf28      	it	cs
 8081502:	271e      	movcs	r7, #30
				result = readData(framAddrFrom, buf, count);
 8081504:	f8d8 3000 	ldr.w	r3, [r8]
 8081508:	4631      	mov	r1, r6
 808150a:	f8d3 9008 	ldr.w	r9, [r3, #8]
 808150e:	4640      	mov	r0, r8
 8081510:	463b      	mov	r3, r7
 8081512:	aa02      	add	r2, sp, #8
 8081514:	47c8      	blx	r9
				if (!result) {
 8081516:	2800      	cmp	r0, #0
 8081518:	d0d6      	beq.n	80814c8 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
 808151a:	f8d8 3000 	ldr.w	r3, [r8]
 808151e:	4629      	mov	r1, r5
 8081520:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8081524:	4640      	mov	r0, r8
 8081526:	463b      	mov	r3, r7
 8081528:	aa02      	add	r2, sp, #8
 808152a:	47c8      	blx	r9
				if (!result) {
 808152c:	2800      	cmp	r0, #0
 808152e:	d0cb      	beq.n	80814c8 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
 8081530:	443e      	add	r6, r7
				framAddrTo += count;
 8081532:	443d      	add	r5, r7
				numBytes -= count;
 8081534:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
 8081536:	e7df      	b.n	80814f8 <_ZN6MB85RC8moveDataEjjj+0x70>

08081538 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
 8081538:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 808153a:	4603      	mov	r3, r0
	switch (__op)
 808153c:	d102      	bne.n	8081544 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() =
 808153e:	6001      	str	r1, [r0, #0]

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
 8081540:	2000      	movs	r0, #0
 8081542:	4770      	bx	lr
	  switch (__op)
 8081544:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8081546:	bf04      	itt	eq
 8081548:	e9d1 0100 	ldrdeq	r0, r1, [r1]
 808154c:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
 8081550:	e7f6      	b.n	8081540 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

08081552 <_ZN6Thread3runEPv>:

private:

    static os_thread_return_t run(void* param) {
        Data* th = (Data*)param;
        th->started = true;
 8081552:	2301      	movs	r3, #1
    static os_thread_return_t run(void* param) {
 8081554:	b510      	push	{r4, lr}
        th->started = true;
 8081556:	7403      	strb	r3, [r0, #16]
        if (th->func) {
 8081558:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
 808155a:	4604      	mov	r4, r0
        if (th->func) {
 808155c:	b143      	cbz	r3, 8081570 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
 808155e:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081560:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
 8081562:	2301      	movs	r3, #1
        os_thread_exit(nullptr);
 8081564:	2000      	movs	r0, #0
        th->exited = true;
 8081566:	7463      	strb	r3, [r4, #17]
    }
 8081568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
 808156c:	f000 bb28 	b.w	8081bc0 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8081570:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
 8081572:	2800      	cmp	r0, #0
 8081574:	d0f5      	beq.n	8081562 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
 8081576:	6883      	ldr	r3, [r0, #8]
 8081578:	b90b      	cbnz	r3, 808157e <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
 808157a:	f002 f9f8 	bl	808396e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808157e:	68c3      	ldr	r3, [r0, #12]
 8081580:	e7ee      	b.n	8081560 <_ZN6Thread3runEPv+0xe>

08081582 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081582:	4603      	mov	r3, r0
 8081584:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
 8081586:	6842      	ldr	r2, [r0, #4]
 8081588:	681b      	ldr	r3, [r3, #0]
 808158a:	1054      	asrs	r4, r2, #1
 808158c:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8081590:	07d2      	lsls	r2, r2, #31
 8081592:	bf48      	it	mi
 8081594:	590a      	ldrmi	r2, [r1, r4]
      }
 8081596:	bc10      	pop	{r4}
 8081598:	bf48      	it	mi
 808159a:	58d3      	ldrmi	r3, [r2, r3]
 808159c:	4718      	bx	r3

0808159e <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 808159e:	b510      	push	{r4, lr}
      if (_M_manager)
 80815a0:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80815a2:	4604      	mov	r4, r0
      if (_M_manager)
 80815a4:	b113      	cbz	r3, 80815ac <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80815a6:	2203      	movs	r2, #3
 80815a8:	4601      	mov	r1, r0
 80815aa:	4798      	blx	r3
    }
 80815ac:	4620      	mov	r0, r4
 80815ae:	bd10      	pop	{r4, pc}

080815b0 <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
 80815b0:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
 80815b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
 80815b4:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
 80815b8:	4605      	mov	r5, r0

	os_mutex_create(&mutex);
 80815ba:	3008      	adds	r0, #8
 80815bc:	f000 fad8 	bl	8081b70 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
 80815c0:	2004      	movs	r0, #4
 80815c2:	f7fe fd72 	bl	80800aa <_Znwj>
 80815c6:	4604      	mov	r4, r0
 80815c8:	b398      	cbz	r0, 8081632 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
 80815ca:	2014      	movs	r0, #20
 80815cc:	491a      	ldr	r1, [pc, #104]	; (8081638 <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
 80815ce:	f002 f9ca 	bl	8083966 <_ZnwjRKSt9nothrow_t>
 80815d2:	b130      	cbz	r0, 80815e2 <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 80815d4:	2300      	movs	r3, #0
            exited(false) {
 80815d6:	e9c0 3300 	strd	r3, r3, [r0]
 80815da:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80815de:	7403      	strb	r3, [r0, #16]
 80815e0:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80815e2:	6020      	str	r0, [r4, #0]
        if (!d_) {
 80815e4:	b1a0      	cbz	r0, 8081610 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
 80815e6:	4b15      	ldr	r3, [pc, #84]	; (808163c <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 80815e8:	2202      	movs	r2, #2
        d_->func_param = function_param;
 80815ea:	e9c0 3502 	strd	r3, r5, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 80815ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80815f2:	4913      	ldr	r1, [pc, #76]	; (8081640 <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
 80815f4:	e9cd 0300 	strd	r0, r3, [sp]
 80815f8:	4b12      	ldr	r3, [pc, #72]	; (8081644 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
 80815fa:	3004      	adds	r0, #4
 80815fc:	f000 faa8 	bl	8081b50 <os_thread_create>
 8081600:	b930      	cbnz	r0, 8081610 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8081602:	6823      	ldr	r3, [r4, #0]
        while (!d_->started) {
 8081604:	7c1b      	ldrb	r3, [r3, #16]
 8081606:	b9a3      	cbnz	r3, 8081632 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
 8081608:	2001      	movs	r0, #1
 808160a:	f000 faf9 	bl	8081c00 <HAL_Delay_Milliseconds>
        while (!d_->started) {
 808160e:	e7f8      	b.n	8081602 <_ZN21PublishQueueAsyncBase5setupEv+0x52>
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081610:	2300      	movs	r3, #0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081612:	6826      	ldr	r6, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 8081614:	6023      	str	r3, [r4, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
 8081616:	b166      	cbz	r6, 8081632 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
 8081618:	6837      	ldr	r7, [r6, #0]
 808161a:	b137      	cbz	r7, 808162a <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
 808161c:	4638      	mov	r0, r7
 808161e:	f7ff ffbe 	bl	808159e <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
 8081622:	2110      	movs	r1, #16
 8081624:	4638      	mov	r0, r7
 8081626:	f002 f99c 	bl	8083962 <_ZdlPvj>
 808162a:	2114      	movs	r1, #20
 808162c:	4630      	mov	r0, r6
 808162e:	f002 f998 	bl	8083962 <_ZdlPvj>
 8081632:	606c      	str	r4, [r5, #4]
}
 8081634:	b003      	add	sp, #12
 8081636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081638:	0808514c 	.word	0x0808514c
 808163c:	0808184b 	.word	0x0808184b
 8081640:	08084ebc 	.word	0x08084ebc
 8081644:	08081553 	.word	0x08081553

08081648 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
 8081648:	f247 5130 	movw	r1, #30000	; 0x7530
 808164c:	4a08      	ldr	r2, [pc, #32]	; (8081670 <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
 808164e:	60c1      	str	r1, [r0, #12]
 8081650:	6002      	str	r2, [r0, #0]
 8081652:	2200      	movs	r2, #0
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8081654:	4907      	ldr	r1, [pc, #28]	; (8081674 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
 8081656:	e9c0 2208 	strd	r2, r2, [r0, #32]
 808165a:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 808165e:	4906      	ldr	r1, [pc, #24]	; (8081678 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
 8081660:	6042      	str	r2, [r0, #4]
 8081662:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
 8081664:	4905      	ldr	r1, [pc, #20]	; (808167c <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
 8081666:	8502      	strh	r2, [r0, #40]	; 0x28
 8081668:	6181      	str	r1, [r0, #24]
 808166a:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
 808166e:	4770      	bx	lr
 8081670:	08084f80 	.word	0x08084f80
 8081674:	080819b5 	.word	0x080819b5
 8081678:	08081583 	.word	0x08081583
 808167c:	08081539 	.word	0x08081539

08081680 <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
 8081680:	b510      	push	{r4, lr}
 8081682:	4604      	mov	r4, r0
 8081684:	4b03      	ldr	r3, [pc, #12]	; (8081694 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
 8081686:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
 808168a:	f7ff ff88 	bl	808159e <_ZNSt14_Function_baseD1Ev>
}
 808168e:	4620      	mov	r0, r4
 8081690:	bd10      	pop	{r4, pc}
 8081692:	bf00      	nop
 8081694:	08084f80 	.word	0x08084f80

08081698 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
 8081698:	b510      	push	{r4, lr}
 808169a:	4604      	mov	r4, r0
 808169c:	4b02      	ldr	r3, [pc, #8]	; (80816a8 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
 808169e:	6003      	str	r3, [r0, #0]
 80816a0:	f7ff ffee 	bl	8081680 <_ZN21PublishQueueAsyncBaseD1Ev>

}
 80816a4:	4620      	mov	r0, r4
 80816a6:	bd10      	pop	{r4, pc}
 80816a8:	08084fa8 	.word	0x08084fa8

080816ac <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
 80816ac:	b510      	push	{r4, lr}
 80816ae:	4604      	mov	r4, r0
}
 80816b0:	f7ff fff2 	bl	8081698 <_ZN25PublishQueueAsyncRetainedD1Ev>
 80816b4:	4620      	mov	r0, r4
 80816b6:	2138      	movs	r1, #56	; 0x38
 80816b8:	f002 f953 	bl	8083962 <_ZdlPvj>
 80816bc:	4620      	mov	r0, r4
 80816be:	bd10      	pop	{r4, pc}

080816c0 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
 80816c0:	6880      	ldr	r0, [r0, #8]
 80816c2:	f000 ba5d 	b.w	8081b80 <os_mutex_lock>

080816c6 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
 80816c6:	6880      	ldr	r0, [r0, #8]
 80816c8:	f000 ba62 	b.w	8081b90 <os_mutex_unlock>

080816cc <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
 80816cc:	b510      	push	{r4, lr}
 80816ce:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
 80816d0:	6800      	ldr	r0, [r0, #0]
 80816d2:	f7ff fff8 	bl	80816c6 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
 80816d6:	4620      	mov	r0, r4
 80816d8:	bd10      	pop	{r4, pc}

080816da <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
 80816da:	b513      	push	{r0, r1, r4, lr}
 80816dc:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
 80816de:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
 80816e0:	f7ff ffee 	bl	80816c0 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
 80816e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
 80816e6:	88dc      	ldrh	r4, [r3, #6]
 80816e8:	b2a4      	uxth	r4, r4
 80816ea:	b10c      	cbz	r4, 80816f0 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
 80816ec:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
 80816f0:	a801      	add	r0, sp, #4
 80816f2:	f7ff ffeb 	bl	80816cc <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
 80816f6:	4620      	mov	r0, r4
 80816f8:	b002      	add	sp, #8
 80816fa:	bd10      	pop	{r4, pc}

080816fc <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
 80816fc:	b513      	push	{r0, r1, r4, lr}
 80816fe:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
 8081700:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
 8081702:	f7ff ffdd 	bl	80816c0 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
 8081706:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 808170a:	b943      	cbnz	r3, 808171e <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
 808170c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
 808170e:	2401      	movs	r4, #1
		hdr->numEvents = 0;
 8081710:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
 8081712:	a801      	add	r0, sp, #4
 8081714:	f7ff ffda 	bl	80816cc <_ZN11StMutexLockD1Ev>
	}

	return result;
}
 8081718:	4620      	mov	r0, r4
 808171a:	b002      	add	sp, #8
 808171c:	bd10      	pop	{r4, pc}
	bool result = false;
 808171e:	2400      	movs	r4, #0
 8081720:	e7f7      	b.n	8081712 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

08081722 <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
 8081722:	b513      	push	{r0, r1, r4, lr}
 8081724:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
 8081726:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
 8081728:	f7ff ffca 	bl	80816c0 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
 808172c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
 808172e:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
 8081730:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
 8081732:	f7ff ffcb 	bl	80816cc <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
 8081736:	4620      	mov	r0, r4
 8081738:	b002      	add	sp, #8
 808173a:	bd10      	pop	{r4, pc}

0808173c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
 808173c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8081740:	4699      	mov	r9, r3
	if (!haveSetup) {
 8081742:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
 8081746:	b086      	sub	sp, #24
 8081748:	4604      	mov	r4, r0
 808174a:	460f      	mov	r7, r1
 808174c:	4616      	mov	r6, r2
 808174e:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
 8081752:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
	if (!haveSetup) {
 8081756:	b913      	cbnz	r3, 808175e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
 8081758:	6803      	ldr	r3, [r0, #0]
 808175a:	689b      	ldr	r3, [r3, #8]
 808175c:	4798      	blx	r3
		data = "";
 808175e:	4b30      	ldr	r3, [pc, #192]	; (8081820 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe4>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
 8081760:	4638      	mov	r0, r7
		data = "";
 8081762:	2e00      	cmp	r6, #0
 8081764:	bf08      	it	eq
 8081766:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
 8081768:	f003 f92b 	bl	80849c2 <strlen>
 808176c:	4605      	mov	r5, r0
 808176e:	4630      	mov	r0, r6
 8081770:	f003 f927 	bl	80849c2 <strlen>
 8081774:	4405      	add	r5, r0
 8081776:	350a      	adds	r5, #10
	if ((size % 4) != 0) {
 8081778:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
 808177a:	bf1c      	itt	ne
 808177c:	f025 0503 	bicne.w	r5, r5, #3
 8081780:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
 8081782:	4633      	mov	r3, r6
 8081784:	463a      	mov	r2, r7
 8081786:	e9cd 8502 	strd	r8, r5, [sp, #8]
 808178a:	e9cd 9a00 	strd	r9, sl, [sp]
 808178e:	4925      	ldr	r1, [pc, #148]	; (8081824 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
 8081790:	4825      	ldr	r0, [pc, #148]	; (8081828 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
 8081792:	f7ff fd89 	bl	80812a8 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
 8081796:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8081798:	3b08      	subs	r3, #8
 808179a:	42ab      	cmp	r3, r5
 808179c:	d212      	bcs.n	80817c4 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x88>
		return false;
 808179e:	2400      	movs	r4, #0
}
 80817a0:	4620      	mov	r0, r4
 80817a2:	b006      	add	sp, #24
 80817a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
 80817a8:	88cb      	ldrh	r3, [r1, #6]
 80817aa:	2b01      	cmp	r3, #1
 80817ac:	d036      	beq.n	808181c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe0>
			StMutexLock lock(this);
 80817ae:	a805      	add	r0, sp, #20
 80817b0:	f7ff ff8c 	bl	80816cc <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
 80817b4:	6823      	ldr	r3, [r4, #0]
 80817b6:	4620      	mov	r0, r4
 80817b8:	699b      	ldr	r3, [r3, #24]
 80817ba:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80817be:	4798      	blx	r3
 80817c0:	2800      	cmp	r0, #0
 80817c2:	d0ec      	beq.n	808179e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x62>
 80817c4:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
 80817c6:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
 80817c8:	f7ff ff7a 	bl	80816c0 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
 80817cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80817ce:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
 80817d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
 80817d2:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
 80817d4:	1ad2      	subs	r2, r2, r3
 80817d6:	42aa      	cmp	r2, r5
 80817d8:	d3e6      	bcc.n	80817a8 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6c>
				eventData->flags = flags1.value() | flags2.value();
 80817da:	ea48 080a 	orr.w	r8, r8, sl
 80817de:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
 80817e2:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
 80817e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
				strcpy(cp, eventName);
 80817e8:	4639      	mov	r1, r7
				cp += sizeof(PublishQueueEventData);
 80817ea:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
 80817ee:	4640      	mov	r0, r8
 80817f0:	f003 f8c4 	bl	808497c <strcpy>
				cp += strlen(cp) + 1;
 80817f4:	4640      	mov	r0, r8
 80817f6:	f003 f8e4 	bl	80849c2 <strlen>
 80817fa:	3001      	adds	r0, #1
				strcpy(cp, data);
 80817fc:	4631      	mov	r1, r6
 80817fe:	4440      	add	r0, r8
 8081800:	f003 f8bc 	bl	808497c <strcpy>
				nextFree += size;
 8081804:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
 8081806:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
 8081808:	441d      	add	r5, r3
 808180a:	6365      	str	r5, [r4, #52]	; 0x34
				return true;
 808180c:	2401      	movs	r4, #1
				hdr->numEvents++;
 808180e:	88d3      	ldrh	r3, [r2, #6]
 8081810:	3301      	adds	r3, #1
 8081812:	80d3      	strh	r3, [r2, #6]
			StMutexLock lock(this);
 8081814:	a805      	add	r0, sp, #20
 8081816:	f7ff ff59 	bl	80816cc <_ZN11StMutexLockD1Ev>
 808181a:	e7c1      	b.n	80817a0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
				return false;
 808181c:	2400      	movs	r4, #0
 808181e:	e7f9      	b.n	8081814 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xd8>
 8081820:	08084cfb 	.word	0x08084cfb
 8081824:	08084ece 	.word	0x08084ece
 8081828:	2000020c 	.word	0x2000020c

0808182c <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
 808182c:	4604      	mov	r4, r0
 808182e:	b508      	push	{r3, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081830:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
 8081834:	69a3      	ldr	r3, [r4, #24]
 8081836:	b90b      	cbnz	r3, 808183c <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
 8081838:	f002 f899 	bl	808396e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808183c:	4621      	mov	r1, r4
 808183e:	4628      	mov	r0, r5
 8081840:	69e3      	ldr	r3, [r4, #28]
 8081842:	4798      	blx	r3
		os_thread_yield();
 8081844:	f000 f98c 	bl	8081b60 <os_thread_yield>
	while(true) {
 8081848:	e7f4      	b.n	8081834 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

0808184a <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
 808184a:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
 808184c:	f7ff ffee 	bl	808182c <_ZN21PublishQueueAsyncBase14threadFunctionEv>

08081850 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
 8081850:	b538      	push	{r3, r4, r5, lr}
	start += sizeof(PublishQueueEventData);
 8081852:	f101 0408 	add.w	r4, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
 8081856:	4605      	mov	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
 8081858:	4620      	mov	r0, r4
 808185a:	f003 f8b2 	bl	80849c2 <strlen>
 808185e:	3001      	adds	r0, #1
 8081860:	4404      	add	r4, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
 8081862:	4620      	mov	r0, r4
 8081864:	f003 f8ad 	bl	80849c2 <strlen>
	size_t offset = start - retainedBuffer;
 8081868:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
 808186a:	3001      	adds	r0, #1
 808186c:	4420      	add	r0, r4
	size_t offset = start - retainedBuffer;
 808186e:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
 8081870:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
 8081874:	bf1c      	itt	ne
 8081876:	f1c3 0304 	rsbne	r3, r3, #4
 808187a:	18c0      	addne	r0, r0, r3
}
 808187c:	bd38      	pop	{r3, r4, r5, pc}

0808187e <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
 808187e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8081880:	4604      	mov	r4, r0
 8081882:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
 8081884:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
 8081886:	f7ff ff1b 	bl	80816c0 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
 808188a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
 808188c:	88fb      	ldrh	r3, [r7, #6]
 808188e:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
 8081892:	b1e6      	cbz	r6, 80818ce <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
 8081894:	2b01      	cmp	r3, #1
 8081896:	d922      	bls.n	80818de <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
 8081898:	4629      	mov	r1, r5
 808189a:	4620      	mov	r0, r4
 808189c:	f7ff ffd8 	bl	8081850 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
 80818a0:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
 80818a2:	4629      	mov	r1, r5
 80818a4:	4620      	mov	r0, r4
 80818a6:	f7ff ffd3 	bl	8081850 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
 80818aa:	8e22      	ldrh	r2, [r4, #48]	; 0x30
	uint8_t *next = skipEvent(start);
 80818ac:	4601      	mov	r1, r0
	uint8_t *end = &retainedBuffer[retainedBufferSize];
 80818ae:	443a      	add	r2, r7
	if (after > 0) {
 80818b0:	1a12      	subs	r2, r2, r0
	size_t len = next - start;
 80818b2:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
 80818b6:	d002      	beq.n	80818be <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
 80818b8:	4628      	mov	r0, r5
 80818ba:	f003 f80f 	bl	80848dc <memmove>
	nextFree -= len;
 80818be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80818c0:	1b9b      	subs	r3, r3, r6
 80818c2:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
 80818c4:	88fb      	ldrh	r3, [r7, #6]
	return true;
 80818c6:	2601      	movs	r6, #1
	hdr->numEvents--;
 80818c8:	3b01      	subs	r3, #1
 80818ca:	80fb      	strh	r3, [r7, #6]
	return true;
 80818cc:	e001      	b.n	80818d2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
 80818ce:	2b00      	cmp	r3, #0
 80818d0:	d1e7      	bne.n	80818a2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
 80818d2:	a801      	add	r0, sp, #4
 80818d4:	f7ff fefa 	bl	80816cc <_ZN11StMutexLockD1Ev>
}
 80818d8:	4630      	mov	r0, r6
 80818da:	b003      	add	sp, #12
 80818dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
 80818de:	2600      	movs	r6, #0
 80818e0:	e7f7      	b.n	80818d2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

080818e4 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
 80818e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80818e8:	460d      	mov	r5, r1
 80818ea:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
 80818ec:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
 80818ee:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
 80818f0:	f7ff feaa 	bl	8081648 <_ZN21PublishQueueAsyncBaseC1Ev>
 80818f4:	4b15      	ldr	r3, [pc, #84]	; (808194c <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
 80818f6:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
 80818fa:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
 80818fc:	4b14      	ldr	r3, [pc, #80]	; (8081950 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
 80818fe:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
 8081900:	429a      	cmp	r2, r3
 8081902:	4698      	mov	r8, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
 8081904:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
 8081906:	d117      	bne.n	8081938 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
 8081908:	88ab      	ldrh	r3, [r5, #4]
 808190a:	b29b      	uxth	r3, r3
 808190c:	42b3      	cmp	r3, r6
 808190e:	d113      	bne.n	8081938 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
 8081910:	f04f 0900 	mov.w	r9, #0
		uint8_t *end = &retainedBuffer[retainedBufferSize];
 8081914:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
 8081918:	6367      	str	r7, [r4, #52]	; 0x34
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
 808191a:	88eb      	ldrh	r3, [r5, #6]
 808191c:	fa1f f289 	uxth.w	r2, r9
 8081920:	b29b      	uxth	r3, r3
 8081922:	429a      	cmp	r2, r3
 8081924:	d20e      	bcs.n	8081944 <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
 8081926:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8081928:	4620      	mov	r0, r4
 808192a:	f7ff ff91 	bl	8081850 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
 808192e:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
 8081930:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
 8081932:	f109 0901 	add.w	r9, r9, #1
 8081936:	d9f0      	bls.n	808191a <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
 8081938:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
 808193a:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
 808193e:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
 8081940:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
 8081942:	80eb      	strh	r3, [r5, #6]
}
 8081944:	4620      	mov	r0, r4
 8081946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808194a:	bf00      	nop
 808194c:	08084fa8 	.word	0x08084fa8
 8081950:	d19cab61 	.word	0xd19cab61

08081954 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
 8081954:	b510      	push	{r4, lr}
 8081956:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
 808195a:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
 808195c:	b086      	sub	sp, #24
 808195e:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
 8081960:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
 8081962:	b90a      	cbnz	r2, 8081968 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
 8081964:	07d9      	lsls	r1, r3, #31
 8081966:	d505      	bpl.n	8081974 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8081968:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 808196c:	4b0f      	ldr	r3, [pc, #60]	; (80819ac <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
 808196e:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8081970:	4b0f      	ldr	r3, [pc, #60]	; (80819b0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
 8081972:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081974:	466a      	mov	r2, sp
 8081976:	ab02      	add	r3, sp, #8
 8081978:	e893 0003 	ldmia.w	r3, {r0, r1}
 808197c:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8081980:	e894 0003 	ldmia.w	r4, {r0, r1}
 8081984:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8081988:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808198c:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 808198e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8081992:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8081994:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081996:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8081998:	9104      	str	r1, [sp, #16]
 808199a:	68e1      	ldr	r1, [r4, #12]
    class function<_Res(_ArgTypes...)>
 808199c:	4618      	mov	r0, r3
      __b = _GLIBCXX_MOVE(__tmp);
 808199e:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 80819a0:	9105      	str	r1, [sp, #20]
 80819a2:	f7ff fdfc 	bl	808159e <_ZNSt14_Function_baseD1Ev>
	}
 80819a6:	4620      	mov	r0, r4
 80819a8:	b006      	add	sp, #24
 80819aa:	bd10      	pop	{r4, pc}
 80819ac:	08081583 	.word	0x08081583
 80819b0:	08081539 	.word	0x08081539

080819b4 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
 80819b4:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
 80819b6:	4b05      	ldr	r3, [pc, #20]	; (80819cc <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
 80819b8:	4669      	mov	r1, sp
 80819ba:	9300      	str	r3, [sp, #0]
 80819bc:	2300      	movs	r3, #0
 80819be:	3010      	adds	r0, #16
 80819c0:	9301      	str	r3, [sp, #4]
 80819c2:	f7ff ffc7 	bl	8081954 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
 80819c6:	b003      	add	sp, #12
 80819c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80819cc:	080819fd 	.word	0x080819fd

080819d0 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
 80819d0:	b513      	push	{r0, r1, r4, lr}
 80819d2:	4604      	mov	r4, r0
 80819d4:	f000 f924 	bl	8081c20 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
 80819d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80819da:	1ac0      	subs	r0, r0, r3
 80819dc:	68e3      	ldr	r3, [r4, #12]
 80819de:	4298      	cmp	r0, r3
 80819e0:	d308      	bcc.n	80819f4 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
 80819e2:	4b05      	ldr	r3, [pc, #20]	; (80819f8 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
 80819e4:	4669      	mov	r1, sp
 80819e6:	9300      	str	r3, [sp, #0]
 80819e8:	2300      	movs	r3, #0
 80819ea:	f104 0010 	add.w	r0, r4, #16
 80819ee:	9301      	str	r3, [sp, #4]
 80819f0:	f7ff ffb0 	bl	8081954 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
 80819f4:	b002      	add	sp, #8
 80819f6:	bd10      	pop	{r4, pc}
 80819f8:	080819fd 	.word	0x080819fd

080819fc <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
 80819fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
 8081a00:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
 8081a04:	4604      	mov	r4, r0
 8081a06:	b086      	sub	sp, #24
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
 8081a08:	2b00      	cmp	r3, #0
 8081a0a:	d164      	bne.n	8081ad6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
 8081a0c:	f000 fade 	bl	8081fcc <spark_cloud_flag_connected>
 8081a10:	2800      	cmp	r0, #0
 8081a12:	d060      	beq.n	8081ad6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
 8081a14:	f000 f904 	bl	8081c20 <HAL_Timer_Get_Milli_Seconds>
 8081a18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8081a1a:	1ac0      	subs	r0, r0, r3
 8081a1c:	f240 33f1 	movw	r3, #1009	; 0x3f1
 8081a20:	4298      	cmp	r0, r3
 8081a22:	d958      	bls.n	8081ad6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
 8081a24:	6823      	ldr	r3, [r4, #0]
 8081a26:	4620      	mov	r0, r4
 8081a28:	695b      	ldr	r3, [r3, #20]
 8081a2a:	4798      	blx	r3
		if (data) {
 8081a2c:	4605      	mov	r5, r0
 8081a2e:	2800      	cmp	r0, #0
 8081a30:	d051      	beq.n	8081ad6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			isSending = true;
 8081a32:	2301      	movs	r3, #1
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
 8081a34:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
 8081a38:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
 8081a3c:	4638      	mov	r0, r7
 8081a3e:	f002 ffc0 	bl	80849c2 <strlen>
			PublishFlags flags(PublishFlag(data->flags));
 8081a42:	f895 8004 	ldrb.w	r8, [r5, #4]
			eventData += strlen(eventData) + 1;
 8081a46:	1c46      	adds	r6, r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
 8081a48:	f8cd 8004 	str.w	r8, [sp, #4]
 8081a4c:	682b      	ldr	r3, [r5, #0]
			eventData += strlen(eventData) + 1;
 8081a4e:	443e      	add	r6, r7
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
 8081a50:	463a      	mov	r2, r7
 8081a52:	492a      	ldr	r1, [pc, #168]	; (8081afc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
 8081a54:	482a      	ldr	r0, [pc, #168]	; (8081b00 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
 8081a56:	9300      	str	r3, [sp, #0]
 8081a58:	4633      	mov	r3, r6
 8081a5a:	f7ff fc25 	bl	80812a8 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
 8081a5e:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8081a60:	4632      	mov	r2, r6
 8081a62:	4639      	mov	r1, r7
 8081a64:	f88d 8000 	strb.w	r8, [sp]
 8081a68:	a802      	add	r0, sp, #8
 8081a6a:	f000 fe73 	bl	8082754 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
 8081a6e:	9d02      	ldr	r5, [sp, #8]
 8081a70:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
 8081a72:	b91b      	cbnz	r3, 8081a7c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
 8081a74:	2001      	movs	r0, #1
 8081a76:	f000 fb89 	bl	808218c <delay>
			while(!request.isDone()) {
 8081a7a:	e7f8      	b.n	8081a6e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8081a7c:	2000      	movs	r0, #0
 8081a7e:	f000 fa4f 	bl	8081f20 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 8081a82:	b120      	cbz	r0, 8081a8e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
 8081a84:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 8081a86:	b913      	cbnz	r3, 8081a8e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
 8081a88:	f000 fa90 	bl	8081fac <spark_process>
    }
 8081a8c:	e7fa      	b.n	8081a84 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 8081a8e:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
 8081a90:	2b01      	cmp	r3, #1
 8081a92:	d123      	bne.n	8081adc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
 8081a94:	491b      	ldr	r1, [pc, #108]	; (8081b04 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
 8081a96:	481a      	ldr	r0, [pc, #104]	; (8081b00 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
 8081a98:	f7ff fc06 	bl	80812a8 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
 8081a9c:	6823      	ldr	r3, [r4, #0]
 8081a9e:	2100      	movs	r1, #0
 8081aa0:	4620      	mov	r0, r4
 8081aa2:	699b      	ldr	r3, [r3, #24]
 8081aa4:	4798      	blx	r3
			isSending = false;
 8081aa6:	2300      	movs	r3, #0
 8081aa8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8081aac:	f000 f8b8 	bl	8081c20 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
 8081ab0:	6260      	str	r0, [r4, #36]	; 0x24
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 8081ab2:	9c03      	ldr	r4, [sp, #12]
 8081ab4:	b17c      	cbz	r4, 8081ad6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
 8081ab6:	6863      	ldr	r3, [r4, #4]
 8081ab8:	3b01      	subs	r3, #1
 8081aba:	6063      	str	r3, [r4, #4]
 8081abc:	b95b      	cbnz	r3, 8081ad6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
 8081abe:	6823      	ldr	r3, [r4, #0]
 8081ac0:	4620      	mov	r0, r4
 8081ac2:	689b      	ldr	r3, [r3, #8]
 8081ac4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8081ac6:	68a3      	ldr	r3, [r4, #8]
 8081ac8:	3b01      	subs	r3, #1
 8081aca:	60a3      	str	r3, [r4, #8]
 8081acc:	b91b      	cbnz	r3, 8081ad6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
 8081ace:	6823      	ldr	r3, [r4, #0]
 8081ad0:	4620      	mov	r0, r4
 8081ad2:	68db      	ldr	r3, [r3, #12]
 8081ad4:	4798      	blx	r3
}
 8081ad6:	b006      	add	sp, #24
 8081ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
 8081adc:	68e2      	ldr	r2, [r4, #12]
 8081ade:	490a      	ldr	r1, [pc, #40]	; (8081b08 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
 8081ae0:	4807      	ldr	r0, [pc, #28]	; (8081b00 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
 8081ae2:	f7ff fbe1 	bl	80812a8 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
 8081ae6:	4b09      	ldr	r3, [pc, #36]	; (8081b0c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
 8081ae8:	a904      	add	r1, sp, #16
 8081aea:	9304      	str	r3, [sp, #16]
 8081aec:	2300      	movs	r3, #0
 8081aee:	f104 0010 	add.w	r0, r4, #16
 8081af2:	9305      	str	r3, [sp, #20]
 8081af4:	f7ff ff2e 	bl	8081954 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
 8081af8:	e7d5      	b.n	8081aa6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
 8081afa:	bf00      	nop
 8081afc:	08084f0f 	.word	0x08084f0f
 8081b00:	2000020c 	.word	0x2000020c
 8081b04:	08084f30 	.word	0x08084f30
 8081b08:	08084f47 	.word	0x08084f47
 8081b0c:	080819d1 	.word	0x080819d1

08081b10 <_GLOBAL__sub_I_pubqLogger>:
        name_(name) {
 8081b10:	4b01      	ldr	r3, [pc, #4]	; (8081b18 <_GLOBAL__sub_I_pubqLogger+0x8>)
 8081b12:	4a02      	ldr	r2, [pc, #8]	; (8081b1c <_GLOBAL__sub_I_pubqLogger+0xc>)
 8081b14:	601a      	str	r2, [r3, #0]
}
 8081b16:	4770      	bx	lr
 8081b18:	2000020c 	.word	0x2000020c
 8081b1c:	08084f6e 	.word	0x08084f6e

08081b20 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8081b20:	b508      	push	{r3, lr}
 8081b22:	4b02      	ldr	r3, [pc, #8]	; (8081b2c <inet_gethostbyname+0xc>)
 8081b24:	681b      	ldr	r3, [r3, #0]
 8081b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081b28:	9301      	str	r3, [sp, #4]
 8081b2a:	bd08      	pop	{r3, pc}
 8081b2c:	08060020 	.word	0x08060020

08081b30 <cellular_signal>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
 8081b30:	b508      	push	{r3, lr}
 8081b32:	4b02      	ldr	r3, [pc, #8]	; (8081b3c <cellular_signal+0xc>)
 8081b34:	681b      	ldr	r3, [r3, #0]
 8081b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081b38:	9301      	str	r3, [sp, #4]
 8081b3a:	bd08      	pop	{r3, pc}
 8081b3c:	08060020 	.word	0x08060020

08081b40 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8081b40:	b508      	push	{r3, lr}
 8081b42:	4b02      	ldr	r3, [pc, #8]	; (8081b4c <cellular_command+0xc>)
 8081b44:	681b      	ldr	r3, [r3, #0]
 8081b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081b48:	9301      	str	r3, [sp, #4]
 8081b4a:	bd08      	pop	{r3, pc}
 8081b4c:	08060020 	.word	0x08060020

08081b50 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 8081b50:	b508      	push	{r3, lr}
 8081b52:	4b02      	ldr	r3, [pc, #8]	; (8081b5c <os_thread_create+0xc>)
 8081b54:	681b      	ldr	r3, [r3, #0]
 8081b56:	685b      	ldr	r3, [r3, #4]
 8081b58:	9301      	str	r3, [sp, #4]
 8081b5a:	bd08      	pop	{r3, pc}
 8081b5c:	080401d0 	.word	0x080401d0

08081b60 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 8081b60:	b508      	push	{r3, lr}
 8081b62:	4b02      	ldr	r3, [pc, #8]	; (8081b6c <os_thread_yield+0xc>)
 8081b64:	681b      	ldr	r3, [r3, #0]
 8081b66:	68db      	ldr	r3, [r3, #12]
 8081b68:	9301      	str	r3, [sp, #4]
 8081b6a:	bd08      	pop	{r3, pc}
 8081b6c:	080401d0 	.word	0x080401d0

08081b70 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8081b70:	b508      	push	{r3, lr}
 8081b72:	4b02      	ldr	r3, [pc, #8]	; (8081b7c <os_mutex_create+0xc>)
 8081b74:	681b      	ldr	r3, [r3, #0]
 8081b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081b78:	9301      	str	r3, [sp, #4]
 8081b7a:	bd08      	pop	{r3, pc}
 8081b7c:	080401d0 	.word	0x080401d0

08081b80 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 8081b80:	b508      	push	{r3, lr}
 8081b82:	4b02      	ldr	r3, [pc, #8]	; (8081b8c <os_mutex_lock+0xc>)
 8081b84:	681b      	ldr	r3, [r3, #0]
 8081b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081b88:	9301      	str	r3, [sp, #4]
 8081b8a:	bd08      	pop	{r3, pc}
 8081b8c:	080401d0 	.word	0x080401d0

08081b90 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 8081b90:	b508      	push	{r3, lr}
 8081b92:	4b02      	ldr	r3, [pc, #8]	; (8081b9c <os_mutex_unlock+0xc>)
 8081b94:	681b      	ldr	r3, [r3, #0]
 8081b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081b98:	9301      	str	r3, [sp, #4]
 8081b9a:	bd08      	pop	{r3, pc}
 8081b9c:	080401d0 	.word	0x080401d0

08081ba0 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8081ba0:	b508      	push	{r3, lr}
 8081ba2:	4b02      	ldr	r3, [pc, #8]	; (8081bac <os_mutex_recursive_create+0xc>)
 8081ba4:	681b      	ldr	r3, [r3, #0]
 8081ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081ba8:	9301      	str	r3, [sp, #4]
 8081baa:	bd08      	pop	{r3, pc}
 8081bac:	080401d0 	.word	0x080401d0

08081bb0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8081bb0:	b508      	push	{r3, lr}
 8081bb2:	4b02      	ldr	r3, [pc, #8]	; (8081bbc <os_mutex_recursive_destroy+0xc>)
 8081bb4:	681b      	ldr	r3, [r3, #0]
 8081bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081bb8:	9301      	str	r3, [sp, #4]
 8081bba:	bd08      	pop	{r3, pc}
 8081bbc:	080401d0 	.word	0x080401d0

08081bc0 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 8081bc0:	b508      	push	{r3, lr}
 8081bc2:	4b02      	ldr	r3, [pc, #8]	; (8081bcc <os_thread_exit+0xc>)
 8081bc4:	681b      	ldr	r3, [r3, #0]
 8081bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8081bc8:	9301      	str	r3, [sp, #4]
 8081bca:	bd08      	pop	{r3, pc}
 8081bcc:	080401d0 	.word	0x080401d0

08081bd0 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 8081bd0:	b508      	push	{r3, lr}
 8081bd2:	4b02      	ldr	r3, [pc, #8]	; (8081bdc <HAL_Feature_Set+0xc>)
 8081bd4:	681b      	ldr	r3, [r3, #0]
 8081bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8081bd8:	9301      	str	r3, [sp, #4]
 8081bda:	bd08      	pop	{r3, pc}
 8081bdc:	080401b8 	.word	0x080401b8

08081be0 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 8081be0:	b508      	push	{r3, lr}
 8081be2:	4b02      	ldr	r3, [pc, #8]	; (8081bec <HAL_Core_Get_Last_Reset_Info+0xc>)
 8081be4:	681b      	ldr	r3, [r3, #0]
 8081be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8081be8:	9301      	str	r3, [sp, #4]
 8081bea:	bd08      	pop	{r3, pc}
 8081bec:	080401b8 	.word	0x080401b8

08081bf0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8081bf0:	b508      	push	{r3, lr}
 8081bf2:	4b02      	ldr	r3, [pc, #8]	; (8081bfc <HAL_RNG_GetRandomNumber+0xc>)
 8081bf4:	681b      	ldr	r3, [r3, #0]
 8081bf6:	685b      	ldr	r3, [r3, #4]
 8081bf8:	9301      	str	r3, [sp, #4]
 8081bfa:	bd08      	pop	{r3, pc}
 8081bfc:	0804019c 	.word	0x0804019c

08081c00 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
 8081c00:	b508      	push	{r3, lr}
 8081c02:	4b02      	ldr	r3, [pc, #8]	; (8081c0c <HAL_Delay_Milliseconds+0xc>)
 8081c04:	681b      	ldr	r3, [r3, #0]
 8081c06:	689b      	ldr	r3, [r3, #8]
 8081c08:	9301      	str	r3, [sp, #4]
 8081c0a:	bd08      	pop	{r3, pc}
 8081c0c:	0804019c 	.word	0x0804019c

08081c10 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8081c10:	b508      	push	{r3, lr}
 8081c12:	4b02      	ldr	r3, [pc, #8]	; (8081c1c <HAL_Delay_Microseconds+0xc>)
 8081c14:	681b      	ldr	r3, [r3, #0]
 8081c16:	68db      	ldr	r3, [r3, #12]
 8081c18:	9301      	str	r3, [sp, #4]
 8081c1a:	bd08      	pop	{r3, pc}
 8081c1c:	0804019c 	.word	0x0804019c

08081c20 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8081c20:	b508      	push	{r3, lr}
 8081c22:	4b02      	ldr	r3, [pc, #8]	; (8081c2c <HAL_Timer_Get_Milli_Seconds+0xc>)
 8081c24:	681b      	ldr	r3, [r3, #0]
 8081c26:	695b      	ldr	r3, [r3, #20]
 8081c28:	9301      	str	r3, [sp, #4]
 8081c2a:	bd08      	pop	{r3, pc}
 8081c2c:	0804019c 	.word	0x0804019c

08081c30 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 8081c30:	b508      	push	{r3, lr}
 8081c32:	4b02      	ldr	r3, [pc, #8]	; (8081c3c <hal_rtc_time_is_valid+0xc>)
 8081c34:	681b      	ldr	r3, [r3, #0]
 8081c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081c38:	9301      	str	r3, [sp, #4]
 8081c3a:	bd08      	pop	{r3, pc}
 8081c3c:	0804019c 	.word	0x0804019c

08081c40 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 8081c40:	b508      	push	{r3, lr}
 8081c42:	4b02      	ldr	r3, [pc, #8]	; (8081c4c <hal_timer_millis+0xc>)
 8081c44:	681b      	ldr	r3, [r3, #0]
 8081c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081c48:	9301      	str	r3, [sp, #4]
 8081c4a:	bd08      	pop	{r3, pc}
 8081c4c:	0804019c 	.word	0x0804019c

08081c50 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 8081c50:	b508      	push	{r3, lr}
 8081c52:	4b02      	ldr	r3, [pc, #8]	; (8081c5c <hal_rtc_get_time+0xc>)
 8081c54:	681b      	ldr	r3, [r3, #0]
 8081c56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8081c58:	9301      	str	r3, [sp, #4]
 8081c5a:	bd08      	pop	{r3, pc}
 8081c5c:	0804019c 	.word	0x0804019c

08081c60 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 8081c60:	b508      	push	{r3, lr}
 8081c62:	4b02      	ldr	r3, [pc, #8]	; (8081c6c <HAL_Validate_Pin_Function+0xc>)
 8081c64:	681b      	ldr	r3, [r3, #0]
 8081c66:	685b      	ldr	r3, [r3, #4]
 8081c68:	9301      	str	r3, [sp, #4]
 8081c6a:	bd08      	pop	{r3, pc}
 8081c6c:	080401b0 	.word	0x080401b0

08081c70 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8081c70:	b508      	push	{r3, lr}
 8081c72:	4b02      	ldr	r3, [pc, #8]	; (8081c7c <HAL_Pin_Mode+0xc>)
 8081c74:	681b      	ldr	r3, [r3, #0]
 8081c76:	689b      	ldr	r3, [r3, #8]
 8081c78:	9301      	str	r3, [sp, #4]
 8081c7a:	bd08      	pop	{r3, pc}
 8081c7c:	080401b0 	.word	0x080401b0

08081c80 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8081c80:	b508      	push	{r3, lr}
 8081c82:	4b02      	ldr	r3, [pc, #8]	; (8081c8c <HAL_Get_Pin_Mode+0xc>)
 8081c84:	681b      	ldr	r3, [r3, #0]
 8081c86:	68db      	ldr	r3, [r3, #12]
 8081c88:	9301      	str	r3, [sp, #4]
 8081c8a:	bd08      	pop	{r3, pc}
 8081c8c:	080401b0 	.word	0x080401b0

08081c90 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8081c90:	b508      	push	{r3, lr}
 8081c92:	4b02      	ldr	r3, [pc, #8]	; (8081c9c <HAL_GPIO_Write+0xc>)
 8081c94:	681b      	ldr	r3, [r3, #0]
 8081c96:	691b      	ldr	r3, [r3, #16]
 8081c98:	9301      	str	r3, [sp, #4]
 8081c9a:	bd08      	pop	{r3, pc}
 8081c9c:	080401b0 	.word	0x080401b0

08081ca0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 8081ca0:	b508      	push	{r3, lr}
 8081ca2:	4b02      	ldr	r3, [pc, #8]	; (8081cac <HAL_GPIO_Read+0xc>)
 8081ca4:	681b      	ldr	r3, [r3, #0]
 8081ca6:	695b      	ldr	r3, [r3, #20]
 8081ca8:	9301      	str	r3, [sp, #4]
 8081caa:	bd08      	pop	{r3, pc}
 8081cac:	080401b0 	.word	0x080401b0

08081cb0 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 8081cb0:	b508      	push	{r3, lr}
 8081cb2:	4b02      	ldr	r3, [pc, #8]	; (8081cbc <HAL_Interrupts_Attach+0xc>)
 8081cb4:	681b      	ldr	r3, [r3, #0]
 8081cb6:	699b      	ldr	r3, [r3, #24]
 8081cb8:	9301      	str	r3, [sp, #4]
 8081cba:	bd08      	pop	{r3, pc}
 8081cbc:	080401b0 	.word	0x080401b0

08081cc0 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 8081cc0:	b508      	push	{r3, lr}
 8081cc2:	4b02      	ldr	r3, [pc, #8]	; (8081ccc <HAL_Interrupts_Detach+0xc>)
 8081cc4:	681b      	ldr	r3, [r3, #0]
 8081cc6:	69db      	ldr	r3, [r3, #28]
 8081cc8:	9301      	str	r3, [sp, #4]
 8081cca:	bd08      	pop	{r3, pc}
 8081ccc:	080401b0 	.word	0x080401b0

08081cd0 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 8081cd0:	b508      	push	{r3, lr}
 8081cd2:	4b02      	ldr	r3, [pc, #8]	; (8081cdc <hal_adc_read+0xc>)
 8081cd4:	681b      	ldr	r3, [r3, #0]
 8081cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081cd8:	9301      	str	r3, [sp, #4]
 8081cda:	bd08      	pop	{r3, pc}
 8081cdc:	080401b0 	.word	0x080401b0

08081ce0 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 8081ce0:	b508      	push	{r3, lr}
 8081ce2:	4b02      	ldr	r3, [pc, #8]	; (8081cec <hal_i2c_begin+0xc>)
 8081ce4:	681b      	ldr	r3, [r3, #0]
 8081ce6:	68db      	ldr	r3, [r3, #12]
 8081ce8:	9301      	str	r3, [sp, #4]
 8081cea:	bd08      	pop	{r3, pc}
 8081cec:	080401ac 	.word	0x080401ac

08081cf0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 8081cf0:	b508      	push	{r3, lr}
 8081cf2:	4b02      	ldr	r3, [pc, #8]	; (8081cfc <hal_i2c_begin_transmission+0xc>)
 8081cf4:	681b      	ldr	r3, [r3, #0]
 8081cf6:	699b      	ldr	r3, [r3, #24]
 8081cf8:	9301      	str	r3, [sp, #4]
 8081cfa:	bd08      	pop	{r3, pc}
 8081cfc:	080401ac 	.word	0x080401ac

08081d00 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 8081d00:	b508      	push	{r3, lr}
 8081d02:	4b02      	ldr	r3, [pc, #8]	; (8081d0c <hal_i2c_end_transmission+0xc>)
 8081d04:	681b      	ldr	r3, [r3, #0]
 8081d06:	69db      	ldr	r3, [r3, #28]
 8081d08:	9301      	str	r3, [sp, #4]
 8081d0a:	bd08      	pop	{r3, pc}
 8081d0c:	080401ac 	.word	0x080401ac

08081d10 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 8081d10:	b508      	push	{r3, lr}
 8081d12:	4b02      	ldr	r3, [pc, #8]	; (8081d1c <hal_i2c_write+0xc>)
 8081d14:	681b      	ldr	r3, [r3, #0]
 8081d16:	6a1b      	ldr	r3, [r3, #32]
 8081d18:	9301      	str	r3, [sp, #4]
 8081d1a:	bd08      	pop	{r3, pc}
 8081d1c:	080401ac 	.word	0x080401ac

08081d20 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 8081d20:	b508      	push	{r3, lr}
 8081d22:	4b02      	ldr	r3, [pc, #8]	; (8081d2c <hal_i2c_available+0xc>)
 8081d24:	681b      	ldr	r3, [r3, #0]
 8081d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081d28:	9301      	str	r3, [sp, #4]
 8081d2a:	bd08      	pop	{r3, pc}
 8081d2c:	080401ac 	.word	0x080401ac

08081d30 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 8081d30:	b508      	push	{r3, lr}
 8081d32:	4b02      	ldr	r3, [pc, #8]	; (8081d3c <hal_i2c_read+0xc>)
 8081d34:	681b      	ldr	r3, [r3, #0]
 8081d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081d38:	9301      	str	r3, [sp, #4]
 8081d3a:	bd08      	pop	{r3, pc}
 8081d3c:	080401ac 	.word	0x080401ac

08081d40 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 8081d40:	b508      	push	{r3, lr}
 8081d42:	4b02      	ldr	r3, [pc, #8]	; (8081d4c <hal_i2c_peek+0xc>)
 8081d44:	681b      	ldr	r3, [r3, #0]
 8081d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081d48:	9301      	str	r3, [sp, #4]
 8081d4a:	bd08      	pop	{r3, pc}
 8081d4c:	080401ac 	.word	0x080401ac

08081d50 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 8081d50:	b508      	push	{r3, lr}
 8081d52:	4b02      	ldr	r3, [pc, #8]	; (8081d5c <hal_i2c_flush+0xc>)
 8081d54:	681b      	ldr	r3, [r3, #0]
 8081d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081d58:	9301      	str	r3, [sp, #4]
 8081d5a:	bd08      	pop	{r3, pc}
 8081d5c:	080401ac 	.word	0x080401ac

08081d60 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 8081d60:	b508      	push	{r3, lr}
 8081d62:	4b02      	ldr	r3, [pc, #8]	; (8081d6c <hal_i2c_is_enabled+0xc>)
 8081d64:	681b      	ldr	r3, [r3, #0]
 8081d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081d68:	9301      	str	r3, [sp, #4]
 8081d6a:	bd08      	pop	{r3, pc}
 8081d6c:	080401ac 	.word	0x080401ac

08081d70 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 8081d70:	b508      	push	{r3, lr}
 8081d72:	4b02      	ldr	r3, [pc, #8]	; (8081d7c <hal_i2c_init+0xc>)
 8081d74:	681b      	ldr	r3, [r3, #0]
 8081d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081d78:	9301      	str	r3, [sp, #4]
 8081d7a:	bd08      	pop	{r3, pc}
 8081d7c:	080401ac 	.word	0x080401ac

08081d80 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
 8081d80:	b508      	push	{r3, lr}
 8081d82:	4b02      	ldr	r3, [pc, #8]	; (8081d8c <hal_i2c_lock+0xc>)
 8081d84:	681b      	ldr	r3, [r3, #0]
 8081d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081d88:	9301      	str	r3, [sp, #4]
 8081d8a:	bd08      	pop	{r3, pc}
 8081d8c:	080401ac 	.word	0x080401ac

08081d90 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
 8081d90:	b508      	push	{r3, lr}
 8081d92:	4b02      	ldr	r3, [pc, #8]	; (8081d9c <hal_i2c_unlock+0xc>)
 8081d94:	681b      	ldr	r3, [r3, #0]
 8081d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081d98:	9301      	str	r3, [sp, #4]
 8081d9a:	bd08      	pop	{r3, pc}
 8081d9c:	080401ac 	.word	0x080401ac

08081da0 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 8081da0:	b508      	push	{r3, lr}
 8081da2:	4b02      	ldr	r3, [pc, #8]	; (8081dac <hal_i2c_request_ex+0xc>)
 8081da4:	681b      	ldr	r3, [r3, #0]
 8081da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8081da8:	9301      	str	r3, [sp, #4]
 8081daa:	bd08      	pop	{r3, pc}
 8081dac:	080401ac 	.word	0x080401ac

08081db0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 8081db0:	b508      	push	{r3, lr}
 8081db2:	4b02      	ldr	r3, [pc, #8]	; (8081dbc <hal_spi_init+0xc>)
 8081db4:	681b      	ldr	r3, [r3, #0]
 8081db6:	69db      	ldr	r3, [r3, #28]
 8081db8:	9301      	str	r3, [sp, #4]
 8081dba:	bd08      	pop	{r3, pc}
 8081dbc:	080401b4 	.word	0x080401b4

08081dc0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 8081dc0:	b508      	push	{r3, lr}
 8081dc2:	4b02      	ldr	r3, [pc, #8]	; (8081dcc <hal_spi_is_enabled+0xc>)
 8081dc4:	681b      	ldr	r3, [r3, #0]
 8081dc6:	6a1b      	ldr	r3, [r3, #32]
 8081dc8:	9301      	str	r3, [sp, #4]
 8081dca:	bd08      	pop	{r3, pc}
 8081dcc:	080401b4 	.word	0x080401b4

08081dd0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 8081dd0:	b508      	push	{r3, lr}
 8081dd2:	4b02      	ldr	r3, [pc, #8]	; (8081ddc <hal_usart_init+0xc>)
 8081dd4:	681b      	ldr	r3, [r3, #0]
 8081dd6:	699b      	ldr	r3, [r3, #24]
 8081dd8:	9301      	str	r3, [sp, #4]
 8081dda:	bd08      	pop	{r3, pc}
 8081ddc:	080401c4 	.word	0x080401c4

08081de0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 8081de0:	b508      	push	{r3, lr}
 8081de2:	4b02      	ldr	r3, [pc, #8]	; (8081dec <hal_usart_write+0xc>)
 8081de4:	681b      	ldr	r3, [r3, #0]
 8081de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081de8:	9301      	str	r3, [sp, #4]
 8081dea:	bd08      	pop	{r3, pc}
 8081dec:	080401c4 	.word	0x080401c4

08081df0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 8081df0:	b508      	push	{r3, lr}
 8081df2:	4b02      	ldr	r3, [pc, #8]	; (8081dfc <hal_usart_available+0xc>)
 8081df4:	681b      	ldr	r3, [r3, #0]
 8081df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081df8:	9301      	str	r3, [sp, #4]
 8081dfa:	bd08      	pop	{r3, pc}
 8081dfc:	080401c4 	.word	0x080401c4

08081e00 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 8081e00:	b508      	push	{r3, lr}
 8081e02:	4b02      	ldr	r3, [pc, #8]	; (8081e0c <hal_usart_read+0xc>)
 8081e04:	681b      	ldr	r3, [r3, #0]
 8081e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081e08:	9301      	str	r3, [sp, #4]
 8081e0a:	bd08      	pop	{r3, pc}
 8081e0c:	080401c4 	.word	0x080401c4

08081e10 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 8081e10:	b508      	push	{r3, lr}
 8081e12:	4b02      	ldr	r3, [pc, #8]	; (8081e1c <hal_usart_peek+0xc>)
 8081e14:	681b      	ldr	r3, [r3, #0]
 8081e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081e18:	9301      	str	r3, [sp, #4]
 8081e1a:	bd08      	pop	{r3, pc}
 8081e1c:	080401c4 	.word	0x080401c4

08081e20 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 8081e20:	b508      	push	{r3, lr}
 8081e22:	4b02      	ldr	r3, [pc, #8]	; (8081e2c <hal_usart_flush+0xc>)
 8081e24:	681b      	ldr	r3, [r3, #0]
 8081e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081e28:	9301      	str	r3, [sp, #4]
 8081e2a:	bd08      	pop	{r3, pc}
 8081e2c:	080401c4 	.word	0x080401c4

08081e30 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 8081e30:	b508      	push	{r3, lr}
 8081e32:	4b02      	ldr	r3, [pc, #8]	; (8081e3c <hal_usart_is_enabled+0xc>)
 8081e34:	681b      	ldr	r3, [r3, #0]
 8081e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081e38:	9301      	str	r3, [sp, #4]
 8081e3a:	bd08      	pop	{r3, pc}
 8081e3c:	080401c4 	.word	0x080401c4

08081e40 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 8081e40:	b508      	push	{r3, lr}
 8081e42:	4b02      	ldr	r3, [pc, #8]	; (8081e4c <hal_usart_available_data_for_write+0xc>)
 8081e44:	681b      	ldr	r3, [r3, #0]
 8081e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081e48:	9301      	str	r3, [sp, #4]
 8081e4a:	bd08      	pop	{r3, pc}
 8081e4c:	080401c4 	.word	0x080401c4

08081e50 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8081e50:	b508      	push	{r3, lr}
 8081e52:	4b02      	ldr	r3, [pc, #8]	; (8081e5c <HAL_USB_USART_Init+0xc>)
 8081e54:	681b      	ldr	r3, [r3, #0]
 8081e56:	681b      	ldr	r3, [r3, #0]
 8081e58:	9301      	str	r3, [sp, #4]
 8081e5a:	bd08      	pop	{r3, pc}
 8081e5c:	0806001c 	.word	0x0806001c

08081e60 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8081e60:	b508      	push	{r3, lr}
 8081e62:	4b02      	ldr	r3, [pc, #8]	; (8081e6c <HAL_USB_USART_Available_Data+0xc>)
 8081e64:	681b      	ldr	r3, [r3, #0]
 8081e66:	691b      	ldr	r3, [r3, #16]
 8081e68:	9301      	str	r3, [sp, #4]
 8081e6a:	bd08      	pop	{r3, pc}
 8081e6c:	0806001c 	.word	0x0806001c

08081e70 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8081e70:	b508      	push	{r3, lr}
 8081e72:	4b02      	ldr	r3, [pc, #8]	; (8081e7c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8081e74:	681b      	ldr	r3, [r3, #0]
 8081e76:	695b      	ldr	r3, [r3, #20]
 8081e78:	9301      	str	r3, [sp, #4]
 8081e7a:	bd08      	pop	{r3, pc}
 8081e7c:	0806001c 	.word	0x0806001c

08081e80 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081e80:	b508      	push	{r3, lr}
 8081e82:	4b02      	ldr	r3, [pc, #8]	; (8081e8c <HAL_USB_USART_Receive_Data+0xc>)
 8081e84:	681b      	ldr	r3, [r3, #0]
 8081e86:	699b      	ldr	r3, [r3, #24]
 8081e88:	9301      	str	r3, [sp, #4]
 8081e8a:	bd08      	pop	{r3, pc}
 8081e8c:	0806001c 	.word	0x0806001c

08081e90 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081e90:	b508      	push	{r3, lr}
 8081e92:	4b02      	ldr	r3, [pc, #8]	; (8081e9c <HAL_USB_USART_Send_Data+0xc>)
 8081e94:	681b      	ldr	r3, [r3, #0]
 8081e96:	69db      	ldr	r3, [r3, #28]
 8081e98:	9301      	str	r3, [sp, #4]
 8081e9a:	bd08      	pop	{r3, pc}
 8081e9c:	0806001c 	.word	0x0806001c

08081ea0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8081ea0:	b508      	push	{r3, lr}
 8081ea2:	4b02      	ldr	r3, [pc, #8]	; (8081eac <HAL_USB_USART_Flush_Data+0xc>)
 8081ea4:	681b      	ldr	r3, [r3, #0]
 8081ea6:	6a1b      	ldr	r3, [r3, #32]
 8081ea8:	9301      	str	r3, [sp, #4]
 8081eaa:	bd08      	pop	{r3, pc}
 8081eac:	0806001c 	.word	0x0806001c

08081eb0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 8081eb0:	b508      	push	{r3, lr}
 8081eb2:	4b02      	ldr	r3, [pc, #8]	; (8081ebc <panic_+0xc>)
 8081eb4:	681b      	ldr	r3, [r3, #0]
 8081eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081eb8:	9301      	str	r3, [sp, #4]
 8081eba:	bd08      	pop	{r3, pc}
 8081ebc:	080201a0 	.word	0x080201a0

08081ec0 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 8081ec0:	b508      	push	{r3, lr}
 8081ec2:	4b02      	ldr	r3, [pc, #8]	; (8081ecc <log_message_v+0xc>)
 8081ec4:	681b      	ldr	r3, [r3, #0]
 8081ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081ec8:	9301      	str	r3, [sp, #4]
 8081eca:	bd08      	pop	{r3, pc}
 8081ecc:	080201a0 	.word	0x080201a0

08081ed0 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8081ed0:	b508      	push	{r3, lr}
 8081ed2:	4b02      	ldr	r3, [pc, #8]	; (8081edc <system_mode+0xc>)
 8081ed4:	681b      	ldr	r3, [r3, #0]
 8081ed6:	681b      	ldr	r3, [r3, #0]
 8081ed8:	9301      	str	r3, [sp, #4]
 8081eda:	bd08      	pop	{r3, pc}
 8081edc:	080401a4 	.word	0x080401a4

08081ee0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8081ee0:	b508      	push	{r3, lr}
 8081ee2:	4b02      	ldr	r3, [pc, #8]	; (8081eec <set_system_mode+0xc>)
 8081ee4:	681b      	ldr	r3, [r3, #0]
 8081ee6:	685b      	ldr	r3, [r3, #4]
 8081ee8:	9301      	str	r3, [sp, #4]
 8081eea:	bd08      	pop	{r3, pc}
 8081eec:	080401a4 	.word	0x080401a4

08081ef0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8081ef0:	b508      	push	{r3, lr}
 8081ef2:	4b02      	ldr	r3, [pc, #8]	; (8081efc <system_delay_ms+0xc>)
 8081ef4:	681b      	ldr	r3, [r3, #0]
 8081ef6:	695b      	ldr	r3, [r3, #20]
 8081ef8:	9301      	str	r3, [sp, #4]
 8081efa:	bd08      	pop	{r3, pc}
 8081efc:	080401a4 	.word	0x080401a4

08081f00 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 8081f00:	b508      	push	{r3, lr}
 8081f02:	4b02      	ldr	r3, [pc, #8]	; (8081f0c <system_sleep+0xc>)
 8081f04:	681b      	ldr	r3, [r3, #0]
 8081f06:	699b      	ldr	r3, [r3, #24]
 8081f08:	9301      	str	r3, [sp, #4]
 8081f0a:	bd08      	pop	{r3, pc}
 8081f0c:	080401a4 	.word	0x080401a4

08081f10 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8081f10:	b508      	push	{r3, lr}
 8081f12:	4b02      	ldr	r3, [pc, #8]	; (8081f1c <system_thread_set_state+0xc>)
 8081f14:	681b      	ldr	r3, [r3, #0]
 8081f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081f18:	9301      	str	r3, [sp, #4]
 8081f1a:	bd08      	pop	{r3, pc}
 8081f1c:	080401a4 	.word	0x080401a4

08081f20 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8081f20:	b508      	push	{r3, lr}
 8081f22:	4b02      	ldr	r3, [pc, #8]	; (8081f2c <application_thread_current+0xc>)
 8081f24:	681b      	ldr	r3, [r3, #0]
 8081f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081f28:	9301      	str	r3, [sp, #4]
 8081f2a:	bd08      	pop	{r3, pc}
 8081f2c:	080401a4 	.word	0x080401a4

08081f30 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8081f30:	b508      	push	{r3, lr}
 8081f32:	4b02      	ldr	r3, [pc, #8]	; (8081f3c <application_thread_invoke+0xc>)
 8081f34:	681b      	ldr	r3, [r3, #0]
 8081f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081f38:	9301      	str	r3, [sp, #4]
 8081f3a:	bd08      	pop	{r3, pc}
 8081f3c:	080401a4 	.word	0x080401a4

08081f40 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8081f40:	b508      	push	{r3, lr}
 8081f42:	4b02      	ldr	r3, [pc, #8]	; (8081f4c <system_thread_get_state+0xc>)
 8081f44:	681b      	ldr	r3, [r3, #0]
 8081f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081f48:	9301      	str	r3, [sp, #4]
 8081f4a:	bd08      	pop	{r3, pc}
 8081f4c:	080401a4 	.word	0x080401a4

08081f50 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8081f50:	b508      	push	{r3, lr}
 8081f52:	4b03      	ldr	r3, [pc, #12]	; (8081f60 <system_ctrl_set_app_request_handler+0x10>)
 8081f54:	681b      	ldr	r3, [r3, #0]
 8081f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8081f5a:	9301      	str	r3, [sp, #4]
 8081f5c:	bd08      	pop	{r3, pc}
 8081f5e:	0000      	.short	0x0000
 8081f60:	080401a4 	.word	0x080401a4

08081f64 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8081f64:	b508      	push	{r3, lr}
 8081f66:	4b03      	ldr	r3, [pc, #12]	; (8081f74 <system_ctrl_set_result+0x10>)
 8081f68:	681b      	ldr	r3, [r3, #0]
 8081f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8081f6e:	9301      	str	r3, [sp, #4]
 8081f70:	bd08      	pop	{r3, pc}
 8081f72:	0000      	.short	0x0000
 8081f74:	080401a4 	.word	0x080401a4

08081f78 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 8081f78:	b508      	push	{r3, lr}
 8081f7a:	4b03      	ldr	r3, [pc, #12]	; (8081f88 <system_reset+0x10>)
 8081f7c:	681b      	ldr	r3, [r3, #0]
 8081f7e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8081f82:	9301      	str	r3, [sp, #4]
 8081f84:	bd08      	pop	{r3, pc}
 8081f86:	0000      	.short	0x0000
 8081f88:	080401a4 	.word	0x080401a4

08081f8c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 8081f8c:	b508      	push	{r3, lr}
 8081f8e:	4b02      	ldr	r3, [pc, #8]	; (8081f98 <spark_variable+0xc>)
 8081f90:	681b      	ldr	r3, [r3, #0]
 8081f92:	681b      	ldr	r3, [r3, #0]
 8081f94:	9301      	str	r3, [sp, #4]
 8081f96:	bd08      	pop	{r3, pc}
 8081f98:	080401cc 	.word	0x080401cc

08081f9c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8081f9c:	b508      	push	{r3, lr}
 8081f9e:	4b02      	ldr	r3, [pc, #8]	; (8081fa8 <spark_function+0xc>)
 8081fa0:	681b      	ldr	r3, [r3, #0]
 8081fa2:	685b      	ldr	r3, [r3, #4]
 8081fa4:	9301      	str	r3, [sp, #4]
 8081fa6:	bd08      	pop	{r3, pc}
 8081fa8:	080401cc 	.word	0x080401cc

08081fac <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8081fac:	b508      	push	{r3, lr}
 8081fae:	4b02      	ldr	r3, [pc, #8]	; (8081fb8 <spark_process+0xc>)
 8081fb0:	681b      	ldr	r3, [r3, #0]
 8081fb2:	689b      	ldr	r3, [r3, #8]
 8081fb4:	9301      	str	r3, [sp, #4]
 8081fb6:	bd08      	pop	{r3, pc}
 8081fb8:	080401cc 	.word	0x080401cc

08081fbc <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8081fbc:	b508      	push	{r3, lr}
 8081fbe:	4b02      	ldr	r3, [pc, #8]	; (8081fc8 <spark_cloud_flag_connect+0xc>)
 8081fc0:	681b      	ldr	r3, [r3, #0]
 8081fc2:	68db      	ldr	r3, [r3, #12]
 8081fc4:	9301      	str	r3, [sp, #4]
 8081fc6:	bd08      	pop	{r3, pc}
 8081fc8:	080401cc 	.word	0x080401cc

08081fcc <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8081fcc:	b508      	push	{r3, lr}
 8081fce:	4b02      	ldr	r3, [pc, #8]	; (8081fd8 <spark_cloud_flag_connected+0xc>)
 8081fd0:	681b      	ldr	r3, [r3, #0]
 8081fd2:	695b      	ldr	r3, [r3, #20]
 8081fd4:	9301      	str	r3, [sp, #4]
 8081fd6:	bd08      	pop	{r3, pc}
 8081fd8:	080401cc 	.word	0x080401cc

08081fdc <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 8081fdc:	b508      	push	{r3, lr}
 8081fde:	4b02      	ldr	r3, [pc, #8]	; (8081fe8 <spark_deviceID+0xc>)
 8081fe0:	681b      	ldr	r3, [r3, #0]
 8081fe2:	69db      	ldr	r3, [r3, #28]
 8081fe4:	9301      	str	r3, [sp, #4]
 8081fe6:	bd08      	pop	{r3, pc}
 8081fe8:	080401cc 	.word	0x080401cc

08081fec <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8081fec:	b508      	push	{r3, lr}
 8081fee:	4b02      	ldr	r3, [pc, #8]	; (8081ff8 <spark_send_event+0xc>)
 8081ff0:	681b      	ldr	r3, [r3, #0]
 8081ff2:	6a1b      	ldr	r3, [r3, #32]
 8081ff4:	9301      	str	r3, [sp, #4]
 8081ff6:	bd08      	pop	{r3, pc}
 8081ff8:	080401cc 	.word	0x080401cc

08081ffc <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 8081ffc:	b508      	push	{r3, lr}
 8081ffe:	4b02      	ldr	r3, [pc, #8]	; (8082008 <spark_subscribe+0xc>)
 8082000:	681b      	ldr	r3, [r3, #0]
 8082002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8082004:	9301      	str	r3, [sp, #4]
 8082006:	bd08      	pop	{r3, pc}
 8082008:	080401cc 	.word	0x080401cc

0808200c <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 808200c:	b508      	push	{r3, lr}
 808200e:	4b02      	ldr	r3, [pc, #8]	; (8082018 <spark_sync_time+0xc>)
 8082010:	681b      	ldr	r3, [r3, #0]
 8082012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082014:	9301      	str	r3, [sp, #4]
 8082016:	bd08      	pop	{r3, pc}
 8082018:	080401cc 	.word	0x080401cc

0808201c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 808201c:	b508      	push	{r3, lr}
 808201e:	4b02      	ldr	r3, [pc, #8]	; (8082028 <spark_sync_time_pending+0xc>)
 8082020:	681b      	ldr	r3, [r3, #0]
 8082022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082024:	9301      	str	r3, [sp, #4]
 8082026:	bd08      	pop	{r3, pc}
 8082028:	080401cc 	.word	0x080401cc

0808202c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 808202c:	b508      	push	{r3, lr}
 808202e:	4b02      	ldr	r3, [pc, #8]	; (8082038 <spark_set_random_seed_from_cloud_handler+0xc>)
 8082030:	681b      	ldr	r3, [r3, #0]
 8082032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8082034:	9301      	str	r3, [sp, #4]
 8082036:	bd08      	pop	{r3, pc}
 8082038:	080401cc 	.word	0x080401cc

0808203c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 808203c:	b508      	push	{r3, lr}
 808203e:	4b02      	ldr	r3, [pc, #8]	; (8082048 <spark_cloud_disconnect+0xc>)
 8082040:	681b      	ldr	r3, [r3, #0]
 8082042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8082044:	9301      	str	r3, [sp, #4]
 8082046:	bd08      	pop	{r3, pc}
 8082048:	080401cc 	.word	0x080401cc

0808204c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 808204c:	b508      	push	{r3, lr}
 808204e:	4b02      	ldr	r3, [pc, #8]	; (8082058 <network_connect+0xc>)
 8082050:	681b      	ldr	r3, [r3, #0]
 8082052:	685b      	ldr	r3, [r3, #4]
 8082054:	9301      	str	r3, [sp, #4]
 8082056:	bd08      	pop	{r3, pc}
 8082058:	080401c8 	.word	0x080401c8

0808205c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 808205c:	b508      	push	{r3, lr}
 808205e:	4b02      	ldr	r3, [pc, #8]	; (8082068 <network_connecting+0xc>)
 8082060:	681b      	ldr	r3, [r3, #0]
 8082062:	689b      	ldr	r3, [r3, #8]
 8082064:	9301      	str	r3, [sp, #4]
 8082066:	bd08      	pop	{r3, pc}
 8082068:	080401c8 	.word	0x080401c8

0808206c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 808206c:	b508      	push	{r3, lr}
 808206e:	4b02      	ldr	r3, [pc, #8]	; (8082078 <network_disconnect+0xc>)
 8082070:	681b      	ldr	r3, [r3, #0]
 8082072:	68db      	ldr	r3, [r3, #12]
 8082074:	9301      	str	r3, [sp, #4]
 8082076:	bd08      	pop	{r3, pc}
 8082078:	080401c8 	.word	0x080401c8

0808207c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 808207c:	b508      	push	{r3, lr}
 808207e:	4b02      	ldr	r3, [pc, #8]	; (8082088 <network_ready+0xc>)
 8082080:	681b      	ldr	r3, [r3, #0]
 8082082:	691b      	ldr	r3, [r3, #16]
 8082084:	9301      	str	r3, [sp, #4]
 8082086:	bd08      	pop	{r3, pc}
 8082088:	080401c8 	.word	0x080401c8

0808208c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 808208c:	b508      	push	{r3, lr}
 808208e:	4b02      	ldr	r3, [pc, #8]	; (8082098 <network_on+0xc>)
 8082090:	681b      	ldr	r3, [r3, #0]
 8082092:	695b      	ldr	r3, [r3, #20]
 8082094:	9301      	str	r3, [sp, #4]
 8082096:	bd08      	pop	{r3, pc}
 8082098:	080401c8 	.word	0x080401c8

0808209c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 808209c:	b508      	push	{r3, lr}
 808209e:	4b02      	ldr	r3, [pc, #8]	; (80820a8 <network_off+0xc>)
 80820a0:	681b      	ldr	r3, [r3, #0]
 80820a2:	699b      	ldr	r3, [r3, #24]
 80820a4:	9301      	str	r3, [sp, #4]
 80820a6:	bd08      	pop	{r3, pc}
 80820a8:	080401c8 	.word	0x080401c8

080820ac <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80820ac:	b508      	push	{r3, lr}
 80820ae:	4b02      	ldr	r3, [pc, #8]	; (80820b8 <network_listen+0xc>)
 80820b0:	681b      	ldr	r3, [r3, #0]
 80820b2:	69db      	ldr	r3, [r3, #28]
 80820b4:	9301      	str	r3, [sp, #4]
 80820b6:	bd08      	pop	{r3, pc}
 80820b8:	080401c8 	.word	0x080401c8

080820bc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80820bc:	b508      	push	{r3, lr}
 80820be:	4b02      	ldr	r3, [pc, #8]	; (80820c8 <network_listening+0xc>)
 80820c0:	681b      	ldr	r3, [r3, #0]
 80820c2:	6a1b      	ldr	r3, [r3, #32]
 80820c4:	9301      	str	r3, [sp, #4]
 80820c6:	bd08      	pop	{r3, pc}
 80820c8:	080401c8 	.word	0x080401c8

080820cc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80820cc:	b508      	push	{r3, lr}
 80820ce:	4b02      	ldr	r3, [pc, #8]	; (80820d8 <network_set_listen_timeout+0xc>)
 80820d0:	681b      	ldr	r3, [r3, #0]
 80820d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80820d4:	9301      	str	r3, [sp, #4]
 80820d6:	bd08      	pop	{r3, pc}
 80820d8:	080401c8 	.word	0x080401c8

080820dc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80820dc:	b508      	push	{r3, lr}
 80820de:	4b02      	ldr	r3, [pc, #8]	; (80820e8 <network_get_listen_timeout+0xc>)
 80820e0:	681b      	ldr	r3, [r3, #0]
 80820e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80820e4:	9301      	str	r3, [sp, #4]
 80820e6:	bd08      	pop	{r3, pc}
 80820e8:	080401c8 	.word	0x080401c8

080820ec <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80820ec:	b508      	push	{r3, lr}
 80820ee:	4b02      	ldr	r3, [pc, #8]	; (80820f8 <network_is_on+0xc>)
 80820f0:	681b      	ldr	r3, [r3, #0]
 80820f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80820f4:	9301      	str	r3, [sp, #4]
 80820f6:	bd08      	pop	{r3, pc}
 80820f8:	080401c8 	.word	0x080401c8

080820fc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80820fc:	b508      	push	{r3, lr}
 80820fe:	4b02      	ldr	r3, [pc, #8]	; (8082108 <network_is_off+0xc>)
 8082100:	681b      	ldr	r3, [r3, #0]
 8082102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8082104:	9301      	str	r3, [sp, #4]
 8082106:	bd08      	pop	{r3, pc}
 8082108:	080401c8 	.word	0x080401c8

0808210c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 808210c:	b508      	push	{r3, lr}
 808210e:	4b02      	ldr	r3, [pc, #8]	; (8082118 <malloc+0xc>)
 8082110:	681b      	ldr	r3, [r3, #0]
 8082112:	681b      	ldr	r3, [r3, #0]
 8082114:	9301      	str	r3, [sp, #4]
 8082116:	bd08      	pop	{r3, pc}
 8082118:	080401a0 	.word	0x080401a0

0808211c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 808211c:	b508      	push	{r3, lr}
 808211e:	4b02      	ldr	r3, [pc, #8]	; (8082128 <free+0xc>)
 8082120:	681b      	ldr	r3, [r3, #0]
 8082122:	685b      	ldr	r3, [r3, #4]
 8082124:	9301      	str	r3, [sp, #4]
 8082126:	bd08      	pop	{r3, pc}
 8082128:	080401a0 	.word	0x080401a0

0808212c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 808212c:	b508      	push	{r3, lr}
 808212e:	4b02      	ldr	r3, [pc, #8]	; (8082138 <realloc+0xc>)
 8082130:	681b      	ldr	r3, [r3, #0]
 8082132:	689b      	ldr	r3, [r3, #8]
 8082134:	9301      	str	r3, [sp, #4]
 8082136:	bd08      	pop	{r3, pc}
 8082138:	080401a0 	.word	0x080401a0

0808213c <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 808213c:	b508      	push	{r3, lr}
 808213e:	4b02      	ldr	r3, [pc, #8]	; (8082148 <siprintf+0xc>)
 8082140:	681b      	ldr	r3, [r3, #0]
 8082142:	691b      	ldr	r3, [r3, #16]
 8082144:	9301      	str	r3, [sp, #4]
 8082146:	bd08      	pop	{r3, pc}
 8082148:	080401a0 	.word	0x080401a0

0808214c <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 808214c:	b508      	push	{r3, lr}
 808214e:	4b02      	ldr	r3, [pc, #8]	; (8082158 <snprintf+0xc>)
 8082150:	681b      	ldr	r3, [r3, #0]
 8082152:	69db      	ldr	r3, [r3, #28]
 8082154:	9301      	str	r3, [sp, #4]
 8082156:	bd08      	pop	{r3, pc}
 8082158:	080401a0 	.word	0x080401a0

0808215c <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 808215c:	b508      	push	{r3, lr}
 808215e:	4b02      	ldr	r3, [pc, #8]	; (8082168 <abort+0xc>)
 8082160:	681b      	ldr	r3, [r3, #0]
 8082162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082164:	9301      	str	r3, [sp, #4]
 8082166:	bd08      	pop	{r3, pc}
 8082168:	080401a0 	.word	0x080401a0

0808216c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 808216c:	b508      	push	{r3, lr}
 808216e:	4b02      	ldr	r3, [pc, #8]	; (8082178 <_malloc_r+0xc>)
 8082170:	681b      	ldr	r3, [r3, #0]
 8082172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082174:	9301      	str	r3, [sp, #4]
 8082176:	bd08      	pop	{r3, pc}
 8082178:	080401a0 	.word	0x080401a0

0808217c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 808217c:	b508      	push	{r3, lr}
 808217e:	4b02      	ldr	r3, [pc, #8]	; (8082188 <newlib_impure_ptr_callback+0xc>)
 8082180:	681b      	ldr	r3, [r3, #0]
 8082182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8082184:	9301      	str	r3, [sp, #4]
 8082186:	bd08      	pop	{r3, pc}
 8082188:	080401a0 	.word	0x080401a0

0808218c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 808218c:	2100      	movs	r1, #0
 808218e:	f7ff beaf 	b.w	8081ef0 <system_delay_ms>

08082192 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8082192:	b510      	push	{r4, lr}
      if (_M_empty())
 8082194:	6883      	ldr	r3, [r0, #8]
 8082196:	4604      	mov	r4, r0
 8082198:	b90b      	cbnz	r3, 808219e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 808219a:	f001 fbe8 	bl	808396e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808219e:	68c3      	ldr	r3, [r0, #12]
 80821a0:	4798      	blx	r3
      if (_M_manager)
 80821a2:	68a3      	ldr	r3, [r4, #8]
 80821a4:	b11b      	cbz	r3, 80821ae <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80821a6:	2203      	movs	r2, #3
 80821a8:	4621      	mov	r1, r4
 80821aa:	4620      	mov	r0, r4
 80821ac:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80821ae:	4620      	mov	r0, r4
}
 80821b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80821b4:	2110      	movs	r1, #16
 80821b6:	f001 bbd4 	b.w	8083962 <_ZdlPvj>

080821ba <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80821ba:	2200      	movs	r2, #0
 80821bc:	6840      	ldr	r0, [r0, #4]
 80821be:	4611      	mov	r1, r2
 80821c0:	f7ff bf5c 	b.w	808207c <network_ready>

080821c4 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80821c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 80821c6:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 80821c8:	b085      	sub	sp, #20
 80821ca:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80821cc:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 80821ce:	460f      	mov	r7, r1
 80821d0:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 80821d2:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80821d4:	f002 fbf5 	bl	80849c2 <strlen>
 80821d8:	687b      	ldr	r3, [r7, #4]
 80821da:	b281      	uxth	r1, r0
 80821dc:	9600      	str	r6, [sp, #0]
 80821de:	4628      	mov	r0, r5
 80821e0:	aa03      	add	r2, sp, #12
 80821e2:	f7ff fc9d 	bl	8081b20 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80821e6:	b130      	cbz	r0, 80821f6 <_ZN5spark13CellularClass7resolveEPKc+0x32>
 80821e8:	4631      	mov	r1, r6
 80821ea:	4620      	mov	r0, r4
 80821ec:	f000 fd2a 	bl	8082c44 <_ZN9IPAddressC1Em>
    }
 80821f0:	4620      	mov	r0, r4
 80821f2:	b005      	add	sp, #20
 80821f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80821f6:	4620      	mov	r0, r4
 80821f8:	a903      	add	r1, sp, #12
 80821fa:	f000 fd1b 	bl	8082c34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80821fe:	e7f7      	b.n	80821f0 <_ZN5spark13CellularClass7resolveEPKc+0x2c>

08082200 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 8082200:	2200      	movs	r2, #0
 8082202:	6840      	ldr	r0, [r0, #4]
 8082204:	4611      	mov	r1, r2
 8082206:	f7ff bf59 	b.w	80820bc <network_listening>

0808220a <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 808220a:	2200      	movs	r2, #0
 808220c:	6840      	ldr	r0, [r0, #4]
 808220e:	4611      	mov	r1, r2
 8082210:	f7ff bf64 	b.w	80820dc <network_get_listen_timeout>

08082214 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 8082214:	2200      	movs	r2, #0
 8082216:	6840      	ldr	r0, [r0, #4]
 8082218:	f7ff bf58 	b.w	80820cc <network_set_listen_timeout>

0808221c <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 808221c:	2200      	movs	r2, #0
 808221e:	6840      	ldr	r0, [r0, #4]
 8082220:	f081 0101 	eor.w	r1, r1, #1
 8082224:	f7ff bf42 	b.w	80820ac <network_listen>

08082228 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 8082228:	2300      	movs	r3, #0
 808222a:	6840      	ldr	r0, [r0, #4]
 808222c:	461a      	mov	r2, r3
 808222e:	4619      	mov	r1, r3
 8082230:	f7ff bf34 	b.w	808209c <network_off>

08082234 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 8082234:	2300      	movs	r3, #0
 8082236:	6840      	ldr	r0, [r0, #4]
 8082238:	461a      	mov	r2, r3
 808223a:	4619      	mov	r1, r3
 808223c:	f7ff bf26 	b.w	808208c <network_on>

08082240 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 8082240:	2200      	movs	r2, #0
 8082242:	6840      	ldr	r0, [r0, #4]
 8082244:	4611      	mov	r1, r2
 8082246:	f7ff bf09 	b.w	808205c <network_connecting>

0808224a <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808224a:	2200      	movs	r2, #0
 808224c:	2102      	movs	r1, #2
 808224e:	6840      	ldr	r0, [r0, #4]
 8082250:	f7ff bf0c 	b.w	808206c <network_disconnect>

08082254 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 8082254:	2300      	movs	r3, #0
 8082256:	6840      	ldr	r0, [r0, #4]
 8082258:	461a      	mov	r2, r3
 808225a:	f7ff bef7 	b.w	808204c <network_connect>
	...

08082260 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 8082260:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
 8082262:	2500      	movs	r5, #0
 8082264:	2618      	movs	r6, #24
 8082266:	460f      	mov	r7, r1
 8082268:	4b19      	ldr	r3, [pc, #100]	; (80822d0 <_ZN5spark13CellularClass4RSSIEv+0x70>)
 808226a:	4632      	mov	r2, r6
 808226c:	6003      	str	r3, [r0, #0]
 808226e:	3328      	adds	r3, #40	; 0x28
 8082270:	4629      	mov	r1, r5
 8082272:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8082276:	b089      	sub	sp, #36	; 0x24
 8082278:	6043      	str	r3, [r0, #4]
 808227a:	4604      	mov	r4, r0
 808227c:	3010      	adds	r0, #16
 808227e:	f002 fb47 	bl	8084910 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 8082282:	462a      	mov	r2, r5
 8082284:	4629      	mov	r1, r5
 8082286:	6878      	ldr	r0, [r7, #4]
 8082288:	f7ff fef8 	bl	808207c <network_ready>
 808228c:	b918      	cbnz	r0, 8082296 <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
 808228e:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
 8082290:	4620      	mov	r0, r4
 8082292:	b009      	add	sp, #36	; 0x24
 8082294:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
 8082296:	4629      	mov	r1, r5
 8082298:	4632      	mov	r2, r6
 808229a:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
 808229c:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
 80822a0:	f002 fb36 	bl	8084910 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 80822a4:	4668      	mov	r0, sp
 80822a6:	a902      	add	r1, sp, #8
        sigext.size = sizeof(sigext);
 80822a8:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 80822ac:	f7ff fc40 	bl	8081b30 <cellular_signal>
 80822b0:	b110      	cbz	r0, 80822b8 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
 80822b2:	2301      	movs	r3, #1
 80822b4:	60a3      	str	r3, [r4, #8]
            return sig;
 80822b6:	e7eb      	b.n	8082290 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
 80822b8:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
 80822ba:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
 80822bc:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
 80822be:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
 80822c0:	b90b      	cbnz	r3, 80822c6 <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
 80822c2:	2302      	movs	r3, #2
 80822c4:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
 80822c6:	4620      	mov	r0, r4
 80822c8:	a902      	add	r1, sp, #8
 80822ca:	f000 f8a2 	bl	8082412 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
 80822ce:	e7df      	b.n	8082290 <_ZN5spark13CellularClass4RSSIEv+0x30>
 80822d0:	0808500c 	.word	0x0808500c

080822d4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 80822d4:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 80822d6:	2428      	movs	r4, #40	; 0x28
 80822d8:	4b07      	ldr	r3, [pc, #28]	; (80822f8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 80822da:	4622      	mov	r2, r4
 80822dc:	4618      	mov	r0, r3
 80822de:	2100      	movs	r1, #0
 80822e0:	f002 fb16 	bl	8084910 <memset>
        cid = -1;
 80822e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80822e8:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80822ea:	2204      	movs	r2, #4
 80822ec:	4b03      	ldr	r3, [pc, #12]	; (80822fc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 80822ee:	8004      	strh	r4, [r0, #0]
 80822f0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 80822f2:	4a03      	ldr	r2, [pc, #12]	; (8082300 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 80822f4:	601a      	str	r2, [r3, #0]
 80822f6:	bd10      	pop	{r4, pc}
 80822f8:	20000218 	.word	0x20000218
 80822fc:	20000210 	.word	0x20000210
 8082300:	08084fd0 	.word	0x08084fd0

08082304 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8082304:	4770      	bx	lr

08082306 <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 8082306:	7d00      	ldrb	r0, [r0, #20]
 8082308:	4770      	bx	lr

0808230a <_ZN14CellularSignalD0Ev>:
 808230a:	b510      	push	{r4, lr}
 808230c:	4604      	mov	r4, r0
 808230e:	2128      	movs	r1, #40	; 0x28
 8082310:	f001 fb27 	bl	8083962 <_ZdlPvj>
 8082314:	4620      	mov	r0, r4
 8082316:	bd10      	pop	{r4, pc}

08082318 <_ZNK14CellularSignal11getStrengthEv>:

float CellularSignal::getStrength() const
{
 8082318:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 808231a:	7d03      	ldrb	r3, [r0, #20]
 808231c:	b15b      	cbz	r3, 8082336 <_ZNK14CellularSignal11getStrengthEv+0x1e>
 808231e:	69c0      	ldr	r0, [r0, #28]
 8082320:	2800      	cmp	r0, #0
 8082322:	db08      	blt.n	8082336 <_ZNK14CellularSignal11getStrengthEv+0x1e>
        return (float)sig_.strength / 65535.0f * 100.0f;
 8082324:	f002 f846 	bl	80843b4 <__aeabi_i2f>
 8082328:	4904      	ldr	r1, [pc, #16]	; (808233c <_ZNK14CellularSignal11getStrengthEv+0x24>)
 808232a:	f002 f94b 	bl	80845c4 <__aeabi_fdiv>
 808232e:	4904      	ldr	r1, [pc, #16]	; (8082340 <_ZNK14CellularSignal11getStrengthEv+0x28>)
 8082330:	f002 f894 	bl	808445c <__aeabi_fmul>
    }

    return -1.0f;
}
 8082334:	bd08      	pop	{r3, pc}
    return -1.0f;
 8082336:	4803      	ldr	r0, [pc, #12]	; (8082344 <_ZNK14CellularSignal11getStrengthEv+0x2c>)
 8082338:	e7fc      	b.n	8082334 <_ZNK14CellularSignal11getStrengthEv+0x1c>
 808233a:	bf00      	nop
 808233c:	477fff00 	.word	0x477fff00
 8082340:	42c80000 	.word	0x42c80000
 8082344:	bf800000 	.word	0xbf800000

08082348 <_ZNK14CellularSignal16getStrengthValueEv>:

float CellularSignal::getStrengthValue() const
{
 8082348:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 808234a:	7d03      	ldrb	r3, [r0, #20]
 808234c:	b14b      	cbz	r3, 8082362 <_ZNK14CellularSignal16getStrengthValueEv+0x1a>
 808234e:	6980      	ldr	r0, [r0, #24]
 8082350:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8082354:	d005      	beq.n	8082362 <_ZNK14CellularSignal16getStrengthValueEv+0x1a>
        return (float)sig_.rssi / 100.0f;
 8082356:	f002 f82d 	bl	80843b4 <__aeabi_i2f>
 808235a:	4903      	ldr	r1, [pc, #12]	; (8082368 <_ZNK14CellularSignal16getStrengthValueEv+0x20>)
 808235c:	f002 f932 	bl	80845c4 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8082360:	bd08      	pop	{r3, pc}
    return 0.0f;
 8082362:	2000      	movs	r0, #0
 8082364:	e7fc      	b.n	8082360 <_ZNK14CellularSignal16getStrengthValueEv+0x18>
 8082366:	bf00      	nop
 8082368:	42c80000 	.word	0x42c80000

0808236c <_ZNK14CellularSignal10getQualityEv>:

float CellularSignal::getQuality() const
{
 808236c:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 808236e:	7d03      	ldrb	r3, [r0, #20]
 8082370:	b15b      	cbz	r3, 808238a <_ZNK14CellularSignal10getQualityEv+0x1e>
 8082372:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8082374:	2800      	cmp	r0, #0
 8082376:	db08      	blt.n	808238a <_ZNK14CellularSignal10getQualityEv+0x1e>
        return (float)sig_.quality / 65535.0f * 100.0f;
 8082378:	f002 f81c 	bl	80843b4 <__aeabi_i2f>
 808237c:	4904      	ldr	r1, [pc, #16]	; (8082390 <_ZNK14CellularSignal10getQualityEv+0x24>)
 808237e:	f002 f921 	bl	80845c4 <__aeabi_fdiv>
 8082382:	4904      	ldr	r1, [pc, #16]	; (8082394 <_ZNK14CellularSignal10getQualityEv+0x28>)
 8082384:	f002 f86a 	bl	808445c <__aeabi_fmul>
    }

    return -1.0f;
}
 8082388:	bd08      	pop	{r3, pc}
    return -1.0f;
 808238a:	4803      	ldr	r0, [pc, #12]	; (8082398 <_ZNK14CellularSignal10getQualityEv+0x2c>)
 808238c:	e7fc      	b.n	8082388 <_ZNK14CellularSignal10getQualityEv+0x1c>
 808238e:	bf00      	nop
 8082390:	477fff00 	.word	0x477fff00
 8082394:	42c80000 	.word	0x42c80000
 8082398:	bf800000 	.word	0xbf800000

0808239c <_ZNK14CellularSignal15getQualityValueEv>:

float CellularSignal::getQualityValue() const
{
 808239c:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 808239e:	7d03      	ldrb	r3, [r0, #20]
 80823a0:	b14b      	cbz	r3, 80823b6 <_ZNK14CellularSignal15getQualityValueEv+0x1a>
 80823a2:	6a00      	ldr	r0, [r0, #32]
 80823a4:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80823a8:	d005      	beq.n	80823b6 <_ZNK14CellularSignal15getQualityValueEv+0x1a>
        return (float)sig_.qual / 100.0f;
 80823aa:	f002 f803 	bl	80843b4 <__aeabi_i2f>
 80823ae:	4903      	ldr	r1, [pc, #12]	; (80823bc <_ZNK14CellularSignal15getQualityValueEv+0x20>)
 80823b0:	f002 f908 	bl	80845c4 <__aeabi_fdiv>
    }

    return 0.0f;
}
 80823b4:	bd08      	pop	{r3, pc}
    return 0.0f;
 80823b6:	2000      	movs	r0, #0
 80823b8:	e7fc      	b.n	80823b4 <_ZNK14CellularSignal15getQualityValueEv+0x18>
 80823ba:	bf00      	nop
 80823bc:	42c80000 	.word	0x42c80000

080823c0 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
 80823c0:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 80823c2:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
 80823c4:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
 80823c6:	da0a      	bge.n	80823de <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
 80823c8:	212d      	movs	r1, #45	; 0x2d
 80823ca:	f000 fcf1 	bl	8082db0 <_ZN5Print5printEc>
 80823ce:	4605      	mov	r5, r0
            val = -n;
 80823d0:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80823d2:	220a      	movs	r2, #10
 80823d4:	4630      	mov	r0, r6
 80823d6:	f000 fcee 	bl	8082db6 <_ZN5Print11printNumberEmh>
    }
}
 80823da:	4428      	add	r0, r5
 80823dc:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
 80823de:	4621      	mov	r1, r4
        size_t t = 0;
 80823e0:	2500      	movs	r5, #0
 80823e2:	e7f6      	b.n	80823d2 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

080823e4 <_ZNK14CellularSignal7printToER5Print>:

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
size_t CellularSignal::printTo(Print& p) const
{
 80823e4:	b570      	push	{r4, r5, r6, lr}
 80823e6:	460c      	mov	r4, r1
 80823e8:	4605      	mov	r5, r0
 80823ea:	6881      	ldr	r1, [r0, #8]
 80823ec:	4620      	mov	r0, r4
 80823ee:	f7ff ffe7 	bl	80823c0 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
 80823f2:	212c      	movs	r1, #44	; 0x2c
 80823f4:	4606      	mov	r6, r0
 80823f6:	4620      	mov	r0, r4
 80823f8:	f000 fcda 	bl	8082db0 <_ZN5Print5printEc>
 80823fc:	68e9      	ldr	r1, [r5, #12]
 80823fe:	4406      	add	r6, r0
size_t Print::print(T n, int base)
 8082400:	4620      	mov	r0, r4
 8082402:	f7ff ffdd 	bl	80823c0 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print((*this).qual, DEC);
    return n;
}
 8082406:	4430      	add	r0, r6
 8082408:	bd70      	pop	{r4, r5, r6, pc}

0808240a <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 808240a:	f1a0 0004 	sub.w	r0, r0, #4
 808240e:	f7ff bfe9 	b.w	80823e4 <_ZNK14CellularSignal7printToER5Print>

08082412 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
 8082412:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 8082414:	460d      	mov	r5, r1
 8082416:	f100 0410 	add.w	r4, r0, #16
 808241a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808241c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 808241e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8082422:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8082426:	2001      	movs	r0, #1
 8082428:	bd30      	pop	{r4, r5, pc}

0808242a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808242a:	4770      	bx	lr

0808242c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 808242c:	2000      	movs	r0, #0
 808242e:	4770      	bx	lr

08082430 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8082430:	b510      	push	{r4, lr}
 8082432:	4604      	mov	r4, r0
 8082434:	2110      	movs	r1, #16
 8082436:	f001 fa94 	bl	8083962 <_ZdlPvj>
 808243a:	4620      	mov	r0, r4
 808243c:	bd10      	pop	{r4, pc}

0808243e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 808243e:	b508      	push	{r3, lr}
      { delete this; }
 8082440:	f7ff fff6 	bl	8082430 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8082444:	bd08      	pop	{r3, pc}

08082446 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8082446:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8082448:	b530      	push	{r4, r5, lr}
        type_(type) {
 808244a:	f64f 749c 	movw	r4, #65436	; 0xff9c
 808244e:	6002      	str	r2, [r0, #0]
 8082450:	8084      	strh	r4, [r0, #4]
 8082452:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8082454:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 8082456:	680c      	ldr	r4, [r1, #0]
 8082458:	8085      	strh	r5, [r0, #4]
 808245a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 808245c:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 808245e:	bd30      	pop	{r4, r5, pc}

08082460 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8082460:	b510      	push	{r4, lr}
 8082462:	4604      	mov	r4, r0
    free((void*)msg_);
 8082464:	6800      	ldr	r0, [r0, #0]
 8082466:	f7ff fe59 	bl	808211c <free>
}
 808246a:	4620      	mov	r0, r4
 808246c:	bd10      	pop	{r4, pc}

0808246e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 808246e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8082470:	68c4      	ldr	r4, [r0, #12]
 8082472:	b1f4      	cbz	r4, 80824b2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
 8082474:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8082476:	2b02      	cmp	r3, #2
 8082478:	d103      	bne.n	8082482 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 808247a:	f104 000c 	add.w	r0, r4, #12
 808247e:	f7ff ffef 	bl	8082460 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 8082482:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 8082484:	b135      	cbz	r5, 8082494 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 8082486:	4628      	mov	r0, r5
 8082488:	f7ff f889 	bl	808159e <_ZNSt14_Function_baseD1Ev>
 808248c:	2110      	movs	r1, #16
 808248e:	4628      	mov	r0, r5
 8082490:	f001 fa67 	bl	8083962 <_ZdlPvj>
 8082494:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8082496:	b135      	cbz	r5, 80824a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8082498:	4628      	mov	r0, r5
 808249a:	f7ff f880 	bl	808159e <_ZNSt14_Function_baseD1Ev>
 808249e:	2110      	movs	r1, #16
 80824a0:	4628      	mov	r0, r5
 80824a2:	f001 fa5e 	bl	8083962 <_ZdlPvj>
 80824a6:	4620      	mov	r0, r4
 80824a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80824ac:	2114      	movs	r1, #20
 80824ae:	f001 ba58 	b.w	8083962 <_ZdlPvj>
 80824b2:	bd38      	pop	{r3, r4, r5, pc}

080824b4 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80824b4:	b510      	push	{r4, lr}
 80824b6:	b088      	sub	sp, #32
 80824b8:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80824ba:	4668      	mov	r0, sp
 80824bc:	f000 fd05 	bl	8082eca <_ZN6StringC1EPKc>
    return (*fn)(p);
 80824c0:	4669      	mov	r1, sp
 80824c2:	a804      	add	r0, sp, #16
 80824c4:	f000 fd23 	bl	8082f0e <_ZN6StringC1ERKS_>
 80824c8:	a804      	add	r0, sp, #16
 80824ca:	47a0      	blx	r4
 80824cc:	4604      	mov	r4, r0
 80824ce:	a804      	add	r0, sp, #16
 80824d0:	f000 fcb1 	bl	8082e36 <_ZN6StringD1Ev>
    String p(param);
 80824d4:	4668      	mov	r0, sp
 80824d6:	f000 fcae 	bl	8082e36 <_ZN6StringD1Ev>
}
 80824da:	4620      	mov	r0, r4
 80824dc:	b008      	add	sp, #32
 80824de:	bd10      	pop	{r4, pc}

080824e0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80824e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80824e2:	2300      	movs	r3, #0
         size = sizeof(*this);
 80824e4:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 80824e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 80824ea:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80824ec:	4669      	mov	r1, sp
 80824ee:	461a      	mov	r2, r3
 80824f0:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 80824f2:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 80824f6:	f8ad 4000 	strh.w	r4, [sp]
 80824fa:	f7ff fd4f 	bl	8081f9c <spark_function>
}
 80824fe:	b004      	add	sp, #16
 8082500:	bd10      	pop	{r4, pc}

08082502 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 8082502:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
 8082504:	230c      	movs	r3, #12
    spark_cloud_disconnect_options opts = {};
 8082506:	2100      	movs	r1, #0
    opts.size = sizeof(opts);
 8082508:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
 808250c:	6803      	ldr	r3, [r0, #0]
    spark_cloud_disconnect_options opts = {};
 808250e:	f8ad 100d 	strh.w	r1, [sp, #13]
    opts.flags = flags_;
 8082512:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
 8082516:	7a03      	ldrb	r3, [r0, #8]
    spark_cloud_disconnect_options opts = {};
 8082518:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.graceful = graceful_;
 808251c:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
 8082520:	6843      	ldr	r3, [r0, #4]
 8082522:	9302      	str	r3, [sp, #8]
    opts.clear_session = clearSession_;
 8082524:	7a43      	ldrb	r3, [r0, #9]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8082526:	a801      	add	r0, sp, #4
    opts.clear_session = clearSession_;
 8082528:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 808252c:	f7ff fd86 	bl	808203c <spark_cloud_disconnect>
}
 8082530:	b005      	add	sp, #20
 8082532:	f85d fb04 	ldr.w	pc, [sp], #4

08082536 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 8082536:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 8082538:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 808253a:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 808253c:	b17c      	cbz	r4, 808255e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 808253e:	6863      	ldr	r3, [r4, #4]
 8082540:	3b01      	subs	r3, #1
 8082542:	6063      	str	r3, [r4, #4]
 8082544:	b95b      	cbnz	r3, 808255e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 8082546:	6823      	ldr	r3, [r4, #0]
 8082548:	4620      	mov	r0, r4
 808254a:	689b      	ldr	r3, [r3, #8]
 808254c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 808254e:	68a3      	ldr	r3, [r4, #8]
 8082550:	3b01      	subs	r3, #1
 8082552:	60a3      	str	r3, [r4, #8]
 8082554:	b91b      	cbnz	r3, 808255e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8082556:	6823      	ldr	r3, [r4, #0]
 8082558:	4620      	mov	r0, r4
 808255a:	68db      	ldr	r3, [r3, #12]
 808255c:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 808255e:	4628      	mov	r0, r5
 8082560:	bd38      	pop	{r3, r4, r5, pc}

08082562 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8082562:	680b      	ldr	r3, [r1, #0]
 8082564:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8082566:	b113      	cbz	r3, 808256e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 8082568:	685a      	ldr	r2, [r3, #4]
 808256a:	3201      	adds	r2, #1
 808256c:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
 808256e:	4770      	bx	lr

08082570 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8082570:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082572:	460e      	mov	r6, r1
 8082574:	4604      	mov	r4, r0
 8082576:	f856 3b04 	ldr.w	r3, [r6], #4
 808257a:	460d      	mov	r5, r1
 808257c:	a801      	add	r0, sp, #4
 808257e:	4631      	mov	r1, r6
 8082580:	9300      	str	r3, [sp, #0]
 8082582:	f7ff ffee 	bl	8082562 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8082586:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8082588:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 808258a:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 808258c:	2300      	movs	r3, #0
	_M_pi = __tmp;
 808258e:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 8082590:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 8082592:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8082594:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 8082596:	f7ff ffce 	bl	8082536 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808259a:	4630      	mov	r0, r6
 808259c:	f7ff ffcb 	bl	8082536 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80825a0:	4628      	mov	r0, r5
 80825a2:	2108      	movs	r1, #8
 80825a4:	f001 f9dd 	bl	8083962 <_ZdlPvj>
        return p;
    }
 80825a8:	4620      	mov	r0, r4
 80825aa:	b002      	add	sp, #8
 80825ac:	bd70      	pop	{r4, r5, r6, pc}

080825ae <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 80825ae:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80825b0:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80825b2:	460b      	mov	r3, r1
 80825b4:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80825b6:	c803      	ldmia	r0, {r0, r1}
 80825b8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80825bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80825c0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80825c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80825c8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80825cc:	b002      	add	sp, #8
 80825ce:	bd10      	pop	{r4, pc}

080825d0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 80825d0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80825d2:	b510      	push	{r4, lr}
      if (_M_empty())
 80825d4:	b90a      	cbnz	r2, 80825da <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80825d6:	f001 f9ca 	bl	808396e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80825da:	68c3      	ldr	r3, [r0, #12]
    }
 80825dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80825e0:	4718      	bx	r3

080825e2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80825e2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80825e4:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80825e6:	f100 0110 	add.w	r1, r0, #16
 80825ea:	f7ff fff1 	bl	80825d0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80825ee:	bd08      	pop	{r3, pc}

080825f0 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80825f0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80825f2:	b510      	push	{r4, lr}
      if (_M_empty())
 80825f4:	b90a      	cbnz	r2, 80825fa <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80825f6:	f001 f9ba 	bl	808396e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80825fa:	68c3      	ldr	r3, [r0, #12]
    }
 80825fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082600:	4718      	bx	r3

08082602 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082602:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8082604:	6800      	ldr	r0, [r0, #0]
 8082606:	f100 0110 	add.w	r1, r0, #16
 808260a:	f7ff fff1 	bl	80825f0 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 808260e:	bd08      	pop	{r3, pc}

08082610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 8082610:	b538      	push	{r3, r4, r5, lr}
 8082612:	2300      	movs	r3, #0
 8082614:	4604      	mov	r4, r0
 8082616:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082618:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 808261a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808261c:	f7fd fd45 	bl	80800aa <_Znwj>
 8082620:	b128      	cbz	r0, 808262e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 8082622:	2301      	movs	r3, #1
 8082624:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 8082628:	4b02      	ldr	r3, [pc, #8]	; (8082634 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 808262a:	60c5      	str	r5, [r0, #12]
 808262c:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808262e:	6020      	str	r0, [r4, #0]
	}
 8082630:	4620      	mov	r0, r4
 8082632:	bd38      	pop	{r3, r4, r5, pc}
 8082634:	08085040 	.word	0x08085040

08082638 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 8082638:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 808263a:	2300      	movs	r3, #0
 808263c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 808263e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8082640:	4604      	mov	r4, r0
 8082642:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8082644:	b12b      	cbz	r3, 8082652 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8082646:	2202      	movs	r2, #2
 8082648:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808264a:	68eb      	ldr	r3, [r5, #12]
 808264c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808264e:	68ab      	ldr	r3, [r5, #8]
 8082650:	60a3      	str	r3, [r4, #8]
    }
 8082652:	4620      	mov	r0, r4
 8082654:	bd38      	pop	{r3, r4, r5, pc}
	...

08082658 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 8082658:	b5f0      	push	{r4, r5, r6, r7, lr}
 808265a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 808265c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 808265e:	4668      	mov	r0, sp
 8082660:	f7ff fef1 	bl	8082446 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 8082664:	f04f 0302 	mov.w	r3, #2
 8082668:	e8d4 2f4f 	ldrexb	r2, [r4]
 808266c:	2a00      	cmp	r2, #0
 808266e:	d103      	bne.n	8082678 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 8082670:	e8c4 3f41 	strexb	r1, r3, [r4]
 8082674:	2900      	cmp	r1, #0
 8082676:	d1f7      	bne.n	8082668 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 8082678:	d125      	bne.n	80826c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 808267a:	f104 050c 	add.w	r5, r4, #12
 808267e:	4669      	mov	r1, sp
 8082680:	4628      	mov	r0, r5
 8082682:	f7ff fee0 	bl	8082446 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 8082686:	2301      	movs	r3, #1
 8082688:	f3bf 8f5b 	dmb	ish
 808268c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 808268e:	2000      	movs	r0, #0
 8082690:	f3bf 8f5b 	dmb	ish
 8082694:	f104 0308 	add.w	r3, r4, #8
 8082698:	e853 6f00 	ldrex	r6, [r3]
 808269c:	e843 0200 	strex	r2, r0, [r3]
 80826a0:	2a00      	cmp	r2, #0
 80826a2:	d1f9      	bne.n	8082698 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80826a4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80826a8:	b16e      	cbz	r6, 80826c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80826aa:	f7ff fc39 	bl	8081f20 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80826ae:	b178      	cbz	r0, 80826d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80826b0:	4629      	mov	r1, r5
 80826b2:	4630      	mov	r0, r6
 80826b4:	f7ff ff8c 	bl	80825d0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80826b8:	4630      	mov	r0, r6
 80826ba:	f7fe ff70 	bl	808159e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80826be:	2110      	movs	r1, #16
 80826c0:	4630      	mov	r0, r6
 80826c2:	f001 f94e 	bl	8083962 <_ZdlPvj>
        p_->setError(std::move(error));
 80826c6:	4668      	mov	r0, sp
 80826c8:	f7ff feca 	bl	8082460 <_ZN8particle5ErrorD1Ev>
    }
 80826cc:	b009      	add	sp, #36	; 0x24
 80826ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80826d0:	4631      	mov	r1, r6
 80826d2:	a802      	add	r0, sp, #8
 80826d4:	f7ff ffb0 	bl	8082638 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80826d8:	68e0      	ldr	r0, [r4, #12]
 80826da:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80826de:	b108      	cbz	r0, 80826e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80826e0:	f002 f954 	bl	808498c <strdup>
        type_(type) {
 80826e4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80826e6:	2010      	movs	r0, #16
 80826e8:	f8ad 501c 	strh.w	r5, [sp, #28]
 80826ec:	f7fd fcdd 	bl	80800aa <_Znwj>
 80826f0:	4605      	mov	r5, r0
 80826f2:	b1e8      	cbz	r0, 8082730 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80826f4:	2700      	movs	r7, #0
 80826f6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80826f8:	2018      	movs	r0, #24
 80826fa:	f7fd fcd6 	bl	80800aa <_Znwj>
 80826fe:	4604      	mov	r4, r0
 8082700:	b188      	cbz	r0, 8082726 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 8082702:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8082704:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8082706:	a802      	add	r0, sp, #8
 8082708:	f7ff ff51 	bl	80825ae <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808270c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808270e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8082710:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082712:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8082714:	9204      	str	r2, [sp, #16]
 8082716:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8082718:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 808271a:	60e3      	str	r3, [r4, #12]
 808271c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 8082720:	9205      	str	r2, [sp, #20]
 8082722:	f7ff fe90 	bl	8082446 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 8082726:	4b08      	ldr	r3, [pc, #32]	; (8082748 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082728:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 808272a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808272c:	4b07      	ldr	r3, [pc, #28]	; (808274c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 808272e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 8082730:	a806      	add	r0, sp, #24
 8082732:	f7ff fe95 	bl	8082460 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8082736:	a802      	add	r0, sp, #8
 8082738:	f7fe ff31 	bl	808159e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808273c:	2200      	movs	r2, #0
 808273e:	4629      	mov	r1, r5
 8082740:	4803      	ldr	r0, [pc, #12]	; (8082750 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 8082742:	f7ff fbf5 	bl	8081f30 <application_thread_invoke>
 8082746:	e7b7      	b.n	80826b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 8082748:	080825e3 	.word	0x080825e3
 808274c:	08082879 	.word	0x08082879
 8082750:	08082193 	.word	0x08082193

08082754 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8082754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8082758:	b08a      	sub	sp, #40	; 0x28
 808275a:	4605      	mov	r5, r0
 808275c:	460c      	mov	r4, r1
 808275e:	4617      	mov	r7, r2
 8082760:	4698      	mov	r8, r3
 8082762:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082766:	f7ff fc31 	bl	8081fcc <spark_cloud_flag_connected>
 808276a:	ae07      	add	r6, sp, #28
    if (!connected()) {
 808276c:	4682      	mov	sl, r0
 808276e:	bb38      	cbnz	r0, 80827c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 8082770:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8082774:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8082776:	a905      	add	r1, sp, #20
 8082778:	4630      	mov	r0, r6
 808277a:	f8ad 3018 	strh.w	r3, [sp, #24]
 808277e:	f7ff fe62 	bl	8082446 <_ZN8particle5ErrorC1EOS0_>
 8082782:	2014      	movs	r0, #20
 8082784:	f7fd fc91 	bl	80800aa <_Znwj>
 8082788:	4604      	mov	r4, r0
 808278a:	b148      	cbz	r0, 80827a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 808278c:	2302      	movs	r3, #2
 808278e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8082790:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8082792:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8082796:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 8082798:	4631      	mov	r1, r6
 808279a:	300c      	adds	r0, #12
 808279c:	f7ff fe53 	bl	8082446 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80827a0:	4628      	mov	r0, r5
	: __shared_count(__p)
 80827a2:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80827a4:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80827a8:	f7ff ff32 	bl	8082610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80827ac:	4630      	mov	r0, r6
 80827ae:	f7ff fe57 	bl	8082460 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80827b2:	a805      	add	r0, sp, #20
 80827b4:	f7ff fe54 	bl	8082460 <_ZN8particle5ErrorD1Ev>
}
 80827b8:	4628      	mov	r0, r5
 80827ba:	b00a      	add	sp, #40	; 0x28
 80827bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80827c0:	230c      	movs	r3, #12
 80827c2:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80827c6:	2014      	movs	r0, #20
 80827c8:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80827cc:	9307      	str	r3, [sp, #28]
 80827ce:	f7fd fc6c 	bl	80800aa <_Znwj>
 80827d2:	4601      	mov	r1, r0
 80827d4:	b128      	cbz	r0, 80827e2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80827d6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80827da:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80827de:	f880 a001 	strb.w	sl, [r0, #1]
 80827e2:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80827e4:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80827e6:	f7ff ff13 	bl	8082610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80827ea:	4b22      	ldr	r3, [pc, #136]	; (8082874 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80827ec:	2008      	movs	r0, #8
 80827ee:	9308      	str	r3, [sp, #32]
 80827f0:	f7fd fc5b 	bl	80800aa <_Znwj>
 80827f4:	4682      	mov	sl, r0
 80827f6:	b128      	cbz	r0, 8082804 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80827f8:	9b03      	ldr	r3, [sp, #12]
 80827fa:	a904      	add	r1, sp, #16
 80827fc:	f840 3b04 	str.w	r3, [r0], #4
 8082800:	f7ff feaf 	bl	8082562 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8082804:	4642      	mov	r2, r8
 8082806:	4639      	mov	r1, r7
 8082808:	4620      	mov	r0, r4
 808280a:	9600      	str	r6, [sp, #0]
 808280c:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 8082810:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8082814:	f7ff fbea 	bl	8081fec <spark_send_event>
 8082818:	b9b8      	cbnz	r0, 808284a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 808281a:	9b03      	ldr	r3, [sp, #12]
 808281c:	785b      	ldrb	r3, [r3, #1]
 808281e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8082822:	b993      	cbnz	r3, 808284a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 8082824:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 8082828:	a905      	add	r1, sp, #20
 808282a:	a803      	add	r0, sp, #12
 808282c:	9205      	str	r2, [sp, #20]
 808282e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8082832:	f7ff ff11 	bl	8082658 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8082836:	a805      	add	r0, sp, #20
 8082838:	f7ff fe12 	bl	8082460 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 808283c:	a805      	add	r0, sp, #20
 808283e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8082840:	f7ff fe96 	bl	8082570 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 8082844:	a806      	add	r0, sp, #24
 8082846:	f7ff fe76 	bl	8082536 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 808284a:	9b03      	ldr	r3, [sp, #12]
 808284c:	a904      	add	r1, sp, #16
 808284e:	a806      	add	r0, sp, #24
 8082850:	9305      	str	r3, [sp, #20]
 8082852:	f7ff fe86 	bl	8082562 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 8082856:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8082858:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 808285a:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 808285c:	2300      	movs	r3, #0
	_M_pi = __tmp;
 808285e:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 8082860:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 8082862:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 8082864:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 8082866:	f7ff fe66 	bl	8082536 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808286a:	a804      	add	r0, sp, #16
 808286c:	f7ff fe63 	bl	8082536 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 8082870:	e7a2      	b.n	80827b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 8082872:	bf00      	nop
 8082874:	0808293d 	.word	0x0808293d

08082878 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 8082878:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808287a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808287c:	4605      	mov	r5, r0
	  switch (__op)
 808287e:	d007      	beq.n	8082890 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 8082880:	2a03      	cmp	r2, #3
 8082882:	d018      	beq.n	80828b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 8082884:	2a01      	cmp	r2, #1
 8082886:	d101      	bne.n	808288c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 8082888:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808288a:	6003      	str	r3, [r0, #0]
	}
 808288c:	2000      	movs	r0, #0
 808288e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8082890:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 8082892:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8082894:	f7fd fc09 	bl	80800aa <_Znwj>
 8082898:	4604      	mov	r4, r0
 808289a:	b150      	cbz	r0, 80828b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 808289c:	4631      	mov	r1, r6
 808289e:	f7ff fecb 	bl	8082638 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80828a2:	6930      	ldr	r0, [r6, #16]
 80828a4:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80828a8:	b108      	cbz	r0, 80828ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80828aa:	f002 f86f 	bl	808498c <strdup>
        type_(type) {
 80828ae:	6120      	str	r0, [r4, #16]
 80828b0:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80828b2:	602c      	str	r4, [r5, #0]
	}
 80828b4:	e7ea      	b.n	808288c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80828b6:	6804      	ldr	r4, [r0, #0]
 80828b8:	2c00      	cmp	r4, #0
 80828ba:	d0e7      	beq.n	808288c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80828bc:	f104 0010 	add.w	r0, r4, #16
 80828c0:	f7ff fdce 	bl	8082460 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80828c4:	4620      	mov	r0, r4
 80828c6:	f7fe fe6a 	bl	808159e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80828ca:	2118      	movs	r1, #24
 80828cc:	4620      	mov	r0, r4
 80828ce:	f001 f848 	bl	8083962 <_ZdlPvj>
 80828d2:	e7db      	b.n	808288c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080828d4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80828d4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80828d6:	2300      	movs	r3, #0
 80828d8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80828da:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80828dc:	4604      	mov	r4, r0
 80828de:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80828e0:	b12b      	cbz	r3, 80828ee <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80828e2:	2202      	movs	r2, #2
 80828e4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80828e6:	68eb      	ldr	r3, [r5, #12]
 80828e8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80828ea:	68ab      	ldr	r3, [r5, #8]
 80828ec:	60a3      	str	r3, [r4, #8]
    }
 80828ee:	4620      	mov	r0, r4
 80828f0:	bd38      	pop	{r3, r4, r5, pc}

080828f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80828f2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80828f4:	b570      	push	{r4, r5, r6, lr}
 80828f6:	4604      	mov	r4, r0
	  switch (__op)
 80828f8:	d007      	beq.n	808290a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80828fa:	2a03      	cmp	r2, #3
 80828fc:	d012      	beq.n	8082924 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80828fe:	2a01      	cmp	r2, #1
 8082900:	d101      	bne.n	8082906 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 8082902:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8082904:	6003      	str	r3, [r0, #0]
	}
 8082906:	2000      	movs	r0, #0
 8082908:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 808290a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 808290c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 808290e:	f7fd fbcc 	bl	80800aa <_Znwj>
 8082912:	4605      	mov	r5, r0
 8082914:	b120      	cbz	r0, 8082920 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 8082916:	4631      	mov	r1, r6
 8082918:	f7ff ffdc 	bl	80828d4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 808291c:	7c33      	ldrb	r3, [r6, #16]
 808291e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 8082920:	6025      	str	r5, [r4, #0]
	}
 8082922:	e7f0      	b.n	8082906 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 8082924:	6804      	ldr	r4, [r0, #0]
 8082926:	2c00      	cmp	r4, #0
 8082928:	d0ed      	beq.n	8082906 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 808292a:	4620      	mov	r0, r4
 808292c:	f7fe fe37 	bl	808159e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8082930:	2114      	movs	r1, #20
 8082932:	4620      	mov	r0, r4
 8082934:	f001 f815 	bl	8083962 <_ZdlPvj>
 8082938:	e7e5      	b.n	8082906 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

0808293c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 808293c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808293e:	4604      	mov	r4, r0
 8082940:	b089      	sub	sp, #36	; 0x24
 8082942:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8082944:	a801      	add	r0, sp, #4
 8082946:	4611      	mov	r1, r2
 8082948:	f7ff fe12 	bl	8082570 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 808294c:	b1a4      	cbz	r4, 8082978 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 808294e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8082950:	b11d      	cbz	r5, 808295a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 8082952:	4628      	mov	r0, r5
 8082954:	f002 f81a 	bl	808498c <strdup>
 8082958:	4605      	mov	r5, r0
 808295a:	a801      	add	r0, sp, #4
 808295c:	a903      	add	r1, sp, #12
        type_(type) {
 808295e:	9503      	str	r5, [sp, #12]
 8082960:	f8ad 4010 	strh.w	r4, [sp, #16]
 8082964:	f7ff fe78 	bl	8082658 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8082968:	a803      	add	r0, sp, #12
 808296a:	f7ff fd79 	bl	8082460 <_ZN8particle5ErrorD1Ev>
 808296e:	a802      	add	r0, sp, #8
 8082970:	f7ff fde1 	bl	8082536 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8082974:	b009      	add	sp, #36	; 0x24
 8082976:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 8082978:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 808297a:	9d01      	ldr	r5, [sp, #4]
 808297c:	e8d5 2f4f 	ldrexb	r2, [r5]
 8082980:	2a00      	cmp	r2, #0
 8082982:	d103      	bne.n	808298c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 8082984:	e8c5 3f41 	strexb	r1, r3, [r5]
 8082988:	2900      	cmp	r1, #0
 808298a:	d1f7      	bne.n	808297c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 808298c:	d1ef      	bne.n	808296e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 808298e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 8082990:	f3bf 8f5b 	dmb	ish
 8082994:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 8082996:	f3bf 8f5b 	dmb	ish
 808299a:	1d2b      	adds	r3, r5, #4
 808299c:	e853 6f00 	ldrex	r6, [r3]
 80829a0:	e843 4200 	strex	r2, r4, [r3]
 80829a4:	2a00      	cmp	r2, #0
 80829a6:	d1f9      	bne.n	808299c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80829a8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80829ac:	2e00      	cmp	r6, #0
 80829ae:	d0de      	beq.n	808296e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80829b0:	4620      	mov	r0, r4
 80829b2:	f7ff fab5 	bl	8081f20 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80829b6:	4607      	mov	r7, r0
 80829b8:	b160      	cbz	r0, 80829d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80829ba:	4630      	mov	r0, r6
 80829bc:	f105 010c 	add.w	r1, r5, #12
 80829c0:	f7ff fe16 	bl	80825f0 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80829c4:	4630      	mov	r0, r6
 80829c6:	f7fe fdea 	bl	808159e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80829ca:	2110      	movs	r1, #16
 80829cc:	4630      	mov	r0, r6
 80829ce:	f000 ffc8 	bl	8083962 <_ZdlPvj>
 80829d2:	e7cc      	b.n	808296e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80829d4:	4631      	mov	r1, r6
 80829d6:	a803      	add	r0, sp, #12
 80829d8:	f7ff ff7c 	bl	80828d4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80829dc:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80829de:	2010      	movs	r0, #16
 80829e0:	f88d 301c 	strb.w	r3, [sp, #28]
 80829e4:	f7fd fb61 	bl	80800aa <_Znwj>
 80829e8:	4605      	mov	r5, r0
 80829ea:	b1d0      	cbz	r0, 8082a22 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80829ec:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80829ee:	2014      	movs	r0, #20
 80829f0:	f7fd fb5b 	bl	80800aa <_Znwj>
 80829f4:	4604      	mov	r4, r0
 80829f6:	b178      	cbz	r0, 8082a18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80829f8:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80829fa:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80829fc:	a803      	add	r0, sp, #12
 80829fe:	f7ff fdd6 	bl	80825ae <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082a02:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8082a04:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8082a06:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082a08:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 8082a0a:	9205      	str	r2, [sp, #20]
 8082a0c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8082a0e:	60e3      	str	r3, [r4, #12]
 8082a10:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 8082a14:	9206      	str	r2, [sp, #24]
 8082a16:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 8082a18:	4b06      	ldr	r3, [pc, #24]	; (8082a34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082a1a:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8082a1c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8082a1e:	4b06      	ldr	r3, [pc, #24]	; (8082a38 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 8082a20:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 8082a22:	a803      	add	r0, sp, #12
 8082a24:	f7fe fdbb 	bl	808159e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8082a28:	2200      	movs	r2, #0
 8082a2a:	4629      	mov	r1, r5
 8082a2c:	4803      	ldr	r0, [pc, #12]	; (8082a3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 8082a2e:	f7ff fa7f 	bl	8081f30 <application_thread_invoke>
 8082a32:	e7c7      	b.n	80829c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 8082a34:	08082603 	.word	0x08082603
 8082a38:	080828f3 	.word	0x080828f3
 8082a3c:	08082193 	.word	0x08082193

08082a40 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 8082a40:	4770      	bx	lr

08082a42 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8082a42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082a44:	4606      	mov	r6, r0
 8082a46:	4615      	mov	r5, r2
 8082a48:	460c      	mov	r4, r1
 8082a4a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8082a4c:	42bc      	cmp	r4, r7
 8082a4e:	d006      	beq.n	8082a5e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8082a50:	6833      	ldr	r3, [r6, #0]
 8082a52:	4630      	mov	r0, r6
 8082a54:	689b      	ldr	r3, [r3, #8]
 8082a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8082a5a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 8082a5c:	e7f6      	b.n	8082a4c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 8082a5e:	4628      	mov	r0, r5
 8082a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082a62 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 8082a62:	2200      	movs	r2, #0
 8082a64:	7c00      	ldrb	r0, [r0, #16]
 8082a66:	f7ff b953 	b.w	8081d10 <hal_i2c_write>

08082a6a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 8082a6a:	2100      	movs	r1, #0
 8082a6c:	7c00      	ldrb	r0, [r0, #16]
 8082a6e:	f7ff b957 	b.w	8081d20 <hal_i2c_available>

08082a72 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 8082a72:	2100      	movs	r1, #0
 8082a74:	7c00      	ldrb	r0, [r0, #16]
 8082a76:	f7ff b95b 	b.w	8081d30 <hal_i2c_read>

08082a7a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 8082a7a:	2100      	movs	r1, #0
 8082a7c:	7c00      	ldrb	r0, [r0, #16]
 8082a7e:	f7ff b95f 	b.w	8081d40 <hal_i2c_peek>

08082a82 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 8082a82:	2100      	movs	r1, #0
 8082a84:	7c00      	ldrb	r0, [r0, #16]
 8082a86:	f7ff b963 	b.w	8081d50 <hal_i2c_flush>

08082a8a <_ZN7TwoWireD0Ev>:
 8082a8a:	b510      	push	{r4, lr}
 8082a8c:	4604      	mov	r4, r0
 8082a8e:	2114      	movs	r1, #20
 8082a90:	f000 ff67 	bl	8083962 <_ZdlPvj>
 8082a94:	4620      	mov	r0, r4
 8082a96:	bd10      	pop	{r4, pc}

08082a98 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 8082a98:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8082a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8082a9e:	4604      	mov	r4, r0
 8082aa0:	4608      	mov	r0, r1
 8082aa2:	2100      	movs	r1, #0
 8082aa4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8082aa8:	4b03      	ldr	r3, [pc, #12]	; (8082ab8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 8082aaa:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 8082aac:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 8082aae:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 8082ab0:	f7ff f95e 	bl	8081d70 <hal_i2c_init>
}
 8082ab4:	4620      	mov	r0, r4
 8082ab6:	bd10      	pop	{r4, pc}
 8082ab8:	0808505c 	.word	0x0808505c

08082abc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8082abc:	2300      	movs	r3, #0
 8082abe:	7c00      	ldrb	r0, [r0, #16]
 8082ac0:	461a      	mov	r2, r3
 8082ac2:	4619      	mov	r1, r3
 8082ac4:	f7ff b90c 	b.w	8081ce0 <hal_i2c_begin>

08082ac8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 8082ac8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 8082aca:	2200      	movs	r2, #0
 8082acc:	2314      	movs	r3, #20
 8082ace:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8082ad2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 8082ad6:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 8082ad8:	7c00      	ldrb	r0, [r0, #16]
 8082ada:	f88d 3008 	strb.w	r3, [sp, #8]
 8082ade:	684b      	ldr	r3, [r1, #4]
 8082ae0:	9303      	str	r3, [sp, #12]
 8082ae2:	68cb      	ldr	r3, [r1, #12]
 8082ae4:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 8082ae6:	7a0b      	ldrb	r3, [r1, #8]
 8082ae8:	a901      	add	r1, sp, #4
 8082aea:	9305      	str	r3, [sp, #20]
 8082aec:	f7ff f958 	bl	8081da0 <hal_i2c_request_ex>
}
 8082af0:	b007      	add	sp, #28
 8082af2:	f85d fb04 	ldr.w	pc, [sp], #4

08082af6 <_ZN7TwoWire11requestFromEhjh>:
{
 8082af6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 8082af8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8082afa:	f88d 1000 	strb.w	r1, [sp]
 8082afe:	f04f 0164 	mov.w	r1, #100	; 0x64
 8082b02:	bf18      	it	ne
 8082b04:	2301      	movne	r3, #1
 8082b06:	9103      	str	r1, [sp, #12]
 8082b08:	4669      	mov	r1, sp
    size_ = size;
 8082b0a:	9201      	str	r2, [sp, #4]
 8082b0c:	f88d 3008 	strb.w	r3, [sp, #8]
 8082b10:	f7ff ffda 	bl	8082ac8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 8082b14:	b005      	add	sp, #20
 8082b16:	f85d fb04 	ldr.w	pc, [sp], #4

08082b1a <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 8082b1a:	2200      	movs	r2, #0
 8082b1c:	7c00      	ldrb	r0, [r0, #16]
 8082b1e:	f7ff b8e7 	b.w	8081cf0 <hal_i2c_begin_transmission>

08082b22 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 8082b22:	b2c9      	uxtb	r1, r1
 8082b24:	f7ff bff9 	b.w	8082b1a <_ZN7TwoWire17beginTransmissionEh>

08082b28 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 8082b28:	2200      	movs	r2, #0
 8082b2a:	7c00      	ldrb	r0, [r0, #16]
 8082b2c:	f7ff b8e8 	b.w	8081d00 <hal_i2c_end_transmission>

08082b30 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 8082b30:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
 8082b32:	2100      	movs	r1, #0
 8082b34:	7c00      	ldrb	r0, [r0, #16]
 8082b36:	f7ff f923 	bl	8081d80 <hal_i2c_lock>
}
 8082b3a:	fab0 f080 	clz	r0, r0
 8082b3e:	0940      	lsrs	r0, r0, #5
 8082b40:	bd08      	pop	{r3, pc}

08082b42 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 8082b42:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
 8082b44:	2100      	movs	r1, #0
 8082b46:	7c00      	ldrb	r0, [r0, #16]
 8082b48:	f7ff f922 	bl	8081d90 <hal_i2c_unlock>
}
 8082b4c:	fab0 f080 	clz	r0, r0
 8082b50:	0940      	lsrs	r0, r0, #5
 8082b52:	bd08      	pop	{r3, pc}

08082b54 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 8082b54:	4700      	bx	r0
	...

08082b58 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 8082b58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 8082b5c:	2400      	movs	r4, #0
{
 8082b5e:	461d      	mov	r5, r3
 8082b60:	460f      	mov	r7, r1
 8082b62:	4690      	mov	r8, r2
 8082b64:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
 8082b66:	f7ff f8ab 	bl	8081cc0 <HAL_Interrupts_Detach>
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8082b6a:	2304      	movs	r3, #4
  if (priority >= 0) {
 8082b6c:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8082b6e:	f88d 300c 	strb.w	r3, [sp, #12]
    extra.IRQChannelSubPriority = subpriority;
 8082b72:	bfa8      	it	ge
 8082b74:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    HAL_InterruptExtraConfiguration extra = {0};
 8082b78:	f8ad 400d 	strh.w	r4, [sp, #13]
 8082b7c:	f88d 400f 	strb.w	r4, [sp, #15]
    return &extra;
 8082b80:	bfa4      	itt	ge
 8082b82:	ac03      	addge	r4, sp, #12
    extra.IRQChannelSubPriority = subpriority;
 8082b84:	f88d 300e 	strbge.w	r3, [sp, #14]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8082b88:	463a      	mov	r2, r7
 8082b8a:	4643      	mov	r3, r8
 8082b8c:	4630      	mov	r0, r6
 8082b8e:	4906      	ldr	r1, [pc, #24]	; (8082ba8 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
 8082b90:	9400      	str	r4, [sp, #0]
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 8082b92:	bfa8      	it	ge
 8082b94:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8082b98:	f7ff f88a 	bl	8081cb0 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 8082b9c:	fab0 f080 	clz	r0, r0
 8082ba0:	0940      	lsrs	r0, r0, #5
 8082ba2:	b004      	add	sp, #16
 8082ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082ba8:	08082b55 	.word	0x08082b55

08082bac <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
 8082bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082bae:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
 8082bb0:	f7ff f886 	bl	8081cc0 <HAL_Interrupts_Detach>
 8082bb4:	4605      	mov	r5, r0
 8082bb6:	b970      	cbnz	r0, 8082bd6 <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
 8082bb8:	4f08      	ldr	r7, [pc, #32]	; (8082bdc <_Z15detachInterruptt+0x30>)
 8082bba:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
 8082bbe:	b146      	cbz	r6, 8082bd2 <_Z15detachInterruptt+0x26>
 8082bc0:	4630      	mov	r0, r6
 8082bc2:	f7fe fcec 	bl	808159e <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
 8082bc6:	2110      	movs	r1, #16
 8082bc8:	4630      	mov	r0, r6
 8082bca:	f000 feca 	bl	8083962 <_ZdlPvj>
        handlers[pin] = nullptr;
 8082bce:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
 8082bd2:	2001      	movs	r0, #1
 8082bd4:	e000      	b.n	8082bd8 <_Z15detachInterruptt+0x2c>
        return false;
 8082bd6:	2000      	movs	r0, #0
    }
    return true;
}
 8082bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8082bda:	bf00      	nop
 8082bdc:	20000240 	.word	0x20000240

08082be0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8082be0:	4770      	bx	lr

08082be2 <_ZN9IPAddressD0Ev>:
 8082be2:	b510      	push	{r4, lr}
 8082be4:	4604      	mov	r4, r0
 8082be6:	2108      	movs	r1, #8
 8082be8:	f000 febb 	bl	8083962 <_ZdlPvj>
 8082bec:	4620      	mov	r0, r4
 8082bee:	bd10      	pop	{r4, pc}

08082bf0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8082bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082bf2:	460e      	mov	r6, r1
 8082bf4:	2400      	movs	r4, #0
 8082bf6:	f100 0708 	add.w	r7, r0, #8
 8082bfa:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 8082bfc:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 8082c00:	220a      	movs	r2, #10
 8082c02:	4630      	mov	r0, r6
 8082c04:	f000 f8d7 	bl	8082db6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8082c08:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8082c0a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 8082c0c:	d101      	bne.n	8082c12 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 8082c0e:	4620      	mov	r0, r4
 8082c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 8082c12:	2c00      	cmp	r4, #0
 8082c14:	d0f2      	beq.n	8082bfc <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8082c16:	212e      	movs	r1, #46	; 0x2e
 8082c18:	4630      	mov	r0, r6
 8082c1a:	f000 f8c9 	bl	8082db0 <_ZN5Print5printEc>
 8082c1e:	4404      	add	r4, r0
 8082c20:	e7ec      	b.n	8082bfc <_ZNK9IPAddress7printToER5Print+0xc>
	...

08082c24 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 8082c24:	4a02      	ldr	r2, [pc, #8]	; (8082c30 <_ZN9IPAddressC1Ev+0xc>)
 8082c26:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8082c28:	2200      	movs	r2, #0
 8082c2a:	6042      	str	r2, [r0, #4]
}
 8082c2c:	4770      	bx	lr
 8082c2e:	bf00      	nop
 8082c30:	08085084 	.word	0x08085084

08082c34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 8082c34:	4a02      	ldr	r2, [pc, #8]	; (8082c40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8082c36:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 8082c38:	680a      	ldr	r2, [r1, #0]
 8082c3a:	6042      	str	r2, [r0, #4]
}
 8082c3c:	4770      	bx	lr
 8082c3e:	bf00      	nop
 8082c40:	08085084 	.word	0x08085084

08082c44 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 8082c44:	4a01      	ldr	r2, [pc, #4]	; (8082c4c <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 8082c46:	e9c0 2100 	strd	r2, r1, [r0]
}
 8082c4a:	4770      	bx	lr
 8082c4c:	08085084 	.word	0x08085084

08082c50 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 8082c50:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8082c52:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8082c56:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8082c5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8082c5e:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8082c62:	6044      	str	r4, [r0, #4]
}
 8082c64:	bd10      	pop	{r4, pc}
	...

08082c68 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8082c68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082c6a:	4d04      	ldr	r5, [pc, #16]	; (8082c7c <_ZN9IPAddressC1Ehhhh+0x14>)
 8082c6c:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8082c6e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8082c72:	9500      	str	r5, [sp, #0]
 8082c74:	f7ff ffec 	bl	8082c50 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8082c78:	b003      	add	sp, #12
 8082c7a:	bd30      	pop	{r4, r5, pc}
 8082c7c:	08085084 	.word	0x08085084

08082c80 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8082c80:	4b01      	ldr	r3, [pc, #4]	; (8082c88 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8082c82:	4a02      	ldr	r2, [pc, #8]	; (8082c8c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8082c84:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 8082c86:	4770      	bx	lr
 8082c88:	200002fc 	.word	0x200002fc
 8082c8c:	08085090 	.word	0x08085090

08082c90 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8082c90:	2300      	movs	r3, #0
 8082c92:	6840      	ldr	r0, [r0, #4]
 8082c94:	461a      	mov	r2, r3
 8082c96:	f7ff b9d9 	b.w	808204c <network_connect>

08082c9a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8082c9a:	2200      	movs	r2, #0
 8082c9c:	2102      	movs	r1, #2
 8082c9e:	6840      	ldr	r0, [r0, #4]
 8082ca0:	f7ff b9e4 	b.w	808206c <network_disconnect>

08082ca4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8082ca4:	2200      	movs	r2, #0
 8082ca6:	6840      	ldr	r0, [r0, #4]
 8082ca8:	4611      	mov	r1, r2
 8082caa:	f7ff b9d7 	b.w	808205c <network_connecting>

08082cae <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8082cae:	2200      	movs	r2, #0
 8082cb0:	6840      	ldr	r0, [r0, #4]
 8082cb2:	4611      	mov	r1, r2
 8082cb4:	f7ff b9e2 	b.w	808207c <network_ready>

08082cb8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8082cb8:	2300      	movs	r3, #0
 8082cba:	6840      	ldr	r0, [r0, #4]
 8082cbc:	461a      	mov	r2, r3
 8082cbe:	4619      	mov	r1, r3
 8082cc0:	f7ff b9e4 	b.w	808208c <network_on>

08082cc4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8082cc4:	2300      	movs	r3, #0
 8082cc6:	6840      	ldr	r0, [r0, #4]
 8082cc8:	461a      	mov	r2, r3
 8082cca:	4619      	mov	r1, r3
 8082ccc:	f7ff b9e6 	b.w	808209c <network_off>

08082cd0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 8082cd0:	2100      	movs	r1, #0
 8082cd2:	6840      	ldr	r0, [r0, #4]
 8082cd4:	f7ff ba0a 	b.w	80820ec <network_is_on>

08082cd8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 8082cd8:	2100      	movs	r1, #0
 8082cda:	6840      	ldr	r0, [r0, #4]
 8082cdc:	f7ff ba0e 	b.w	80820fc <network_is_off>

08082ce0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8082ce0:	2200      	movs	r2, #0
 8082ce2:	6840      	ldr	r0, [r0, #4]
 8082ce4:	f081 0101 	eor.w	r1, r1, #1
 8082ce8:	f7ff b9e0 	b.w	80820ac <network_listen>

08082cec <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8082cec:	2200      	movs	r2, #0
 8082cee:	6840      	ldr	r0, [r0, #4]
 8082cf0:	f7ff b9ec 	b.w	80820cc <network_set_listen_timeout>

08082cf4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8082cf4:	2200      	movs	r2, #0
 8082cf6:	6840      	ldr	r0, [r0, #4]
 8082cf8:	4611      	mov	r1, r2
 8082cfa:	f7ff b9ef 	b.w	80820dc <network_get_listen_timeout>

08082cfe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8082cfe:	2200      	movs	r2, #0
 8082d00:	6840      	ldr	r0, [r0, #4]
 8082d02:	4611      	mov	r1, r2
 8082d04:	f7ff b9da 	b.w	80820bc <network_listening>

08082d08 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8082d08:	b570      	push	{r4, r5, r6, lr}
 8082d0a:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8082d0c:	2600      	movs	r6, #0
 8082d0e:	b086      	sub	sp, #24
 8082d10:	4604      	mov	r4, r0
    IPAddress addr;
 8082d12:	a804      	add	r0, sp, #16
 8082d14:	f7ff ff86 	bl	8082c24 <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082d18:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 8082d1a:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082d1c:	f001 fe51 	bl	80849c2 <strlen>
 8082d20:	4b0a      	ldr	r3, [pc, #40]	; (8082d4c <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 8082d22:	9600      	str	r6, [sp, #0]
 8082d24:	b281      	uxth	r1, r0
 8082d26:	685b      	ldr	r3, [r3, #4]
 8082d28:	4628      	mov	r0, r5
 8082d2a:	aa03      	add	r2, sp, #12
 8082d2c:	f7fe fef8 	bl	8081b20 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082d30:	b130      	cbz	r0, 8082d40 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8082d32:	4631      	mov	r1, r6
 8082d34:	4620      	mov	r0, r4
 8082d36:	f7ff ff85 	bl	8082c44 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8082d3a:	4620      	mov	r0, r4
 8082d3c:	b006      	add	sp, #24
 8082d3e:	bd70      	pop	{r4, r5, r6, pc}
 8082d40:	4620      	mov	r0, r4
 8082d42:	a903      	add	r1, sp, #12
 8082d44:	f7ff ff76 	bl	8082c34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 8082d48:	e7f7      	b.n	8082d3a <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 8082d4a:	bf00      	nop
 8082d4c:	20000210 	.word	0x20000210

08082d50 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8082d50:	4b02      	ldr	r3, [pc, #8]	; (8082d5c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8082d52:	4a03      	ldr	r2, [pc, #12]	; (8082d60 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8082d54:	601a      	str	r2, [r3, #0]
 8082d56:	2200      	movs	r2, #0
 8082d58:	605a      	str	r2, [r3, #4]

} // spark
 8082d5a:	4770      	bx	lr
 8082d5c:	20000300 	.word	0x20000300
 8082d60:	0808509c 	.word	0x0808509c

08082d64 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8082d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082d66:	4606      	mov	r6, r0
 8082d68:	460d      	mov	r5, r1
  size_t n = 0;
 8082d6a:	2400      	movs	r4, #0
 8082d6c:	188f      	adds	r7, r1, r2
  while (size--) {
 8082d6e:	42bd      	cmp	r5, r7
 8082d70:	d00c      	beq.n	8082d8c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8082d72:	6833      	ldr	r3, [r6, #0]
 8082d74:	4630      	mov	r0, r6
 8082d76:	689b      	ldr	r3, [r3, #8]
 8082d78:	f815 1b01 	ldrb.w	r1, [r5], #1
 8082d7c:	4798      	blx	r3
     if (chunk>=0)
 8082d7e:	1e03      	subs	r3, r0, #0
 8082d80:	db01      	blt.n	8082d86 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8082d82:	441c      	add	r4, r3
  while (size--) {
 8082d84:	e7f3      	b.n	8082d6e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8082d86:	2c00      	cmp	r4, #0
 8082d88:	bf08      	it	eq
 8082d8a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 8082d8c:	4620      	mov	r0, r4
 8082d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082d90 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 8082d90:	b570      	push	{r4, r5, r6, lr}
 8082d92:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8082d94:	460c      	mov	r4, r1
    }
 8082d96:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8082d98:	b149      	cbz	r1, 8082dae <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8082d9a:	f001 fe12 	bl	80849c2 <strlen>
 8082d9e:	682b      	ldr	r3, [r5, #0]
 8082da0:	4602      	mov	r2, r0
 8082da2:	4621      	mov	r1, r4
 8082da4:	4628      	mov	r0, r5
    }
 8082da6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 8082daa:	68db      	ldr	r3, [r3, #12]
 8082dac:	4718      	bx	r3
    }
 8082dae:	bd70      	pop	{r4, r5, r6, pc}

08082db0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8082db0:	6803      	ldr	r3, [r0, #0]
 8082db2:	689b      	ldr	r3, [r3, #8]
 8082db4:	4718      	bx	r3

08082db6 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8082db6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8082db8:	2a01      	cmp	r2, #1
 8082dba:	bf98      	it	ls
 8082dbc:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 8082dbe:	b530      	push	{r4, r5, lr}
 8082dc0:	b08b      	sub	sp, #44	; 0x2c
 8082dc2:	460c      	mov	r4, r1
  *str = '\0';
 8082dc4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 8082dc8:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 8082dca:	4625      	mov	r5, r4
 8082dcc:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 8082dd0:	fb04 5312 	mls	r3, r4, r2, r5
 8082dd4:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8082dd6:	2b09      	cmp	r3, #9
 8082dd8:	bf94      	ite	ls
 8082dda:	3330      	addls	r3, #48	; 0x30
 8082ddc:	3337      	addhi	r3, #55	; 0x37
 8082dde:	b2db      	uxtb	r3, r3
  } while(n);
 8082de0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8082de2:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 8082de6:	d9f0      	bls.n	8082dca <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 8082de8:	f7ff ffd2 	bl	8082d90 <_ZN5Print5writeEPKc>
}
 8082dec:	b00b      	add	sp, #44	; 0x2c
 8082dee:	bd30      	pop	{r4, r5, pc}

08082df0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8082df0:	b510      	push	{r4, lr}
 8082df2:	4604      	mov	r4, r0
 8082df4:	f7fe fbd3 	bl	808159e <_ZNSt14_Function_baseD1Ev>
 8082df8:	4620      	mov	r0, r4
 8082dfa:	bd10      	pop	{r4, pc}

08082dfc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 8082dfc:	2300      	movs	r3, #0
 8082dfe:	4803      	ldr	r0, [pc, #12]	; (8082e0c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8082e00:	4a03      	ldr	r2, [pc, #12]	; (8082e10 <_GLOBAL__sub_I_RGB+0x14>)
 8082e02:	4904      	ldr	r1, [pc, #16]	; (8082e14 <_GLOBAL__sub_I_RGB+0x18>)
 8082e04:	6083      	str	r3, [r0, #8]
 8082e06:	f000 bda7 	b.w	8083958 <__aeabi_atexit>
 8082e0a:	bf00      	nop
 8082e0c:	20000308 	.word	0x20000308
 8082e10:	20000100 	.word	0x20000100
 8082e14:	08082df1 	.word	0x08082df1

08082e18 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 8082e18:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 8082e1a:	2600      	movs	r6, #0
 8082e1c:	4604      	mov	r4, r0
 8082e1e:	460d      	mov	r5, r1
 8082e20:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 8082e24:	f7fe febc 	bl	8081ba0 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 8082e28:	4628      	mov	r0, r5
    _spi = spi;
 8082e2a:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 8082e2c:	f7fe ffc0 	bl	8081db0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 8082e30:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 8082e32:	6066      	str	r6, [r4, #4]
}
 8082e34:	bd70      	pop	{r4, r5, r6, pc}

08082e36 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8082e36:	b510      	push	{r4, lr}
 8082e38:	4604      	mov	r4, r0
{
	free(buffer);
 8082e3a:	6800      	ldr	r0, [r0, #0]
 8082e3c:	f7ff f96e 	bl	808211c <free>
}
 8082e40:	4620      	mov	r0, r4
 8082e42:	bd10      	pop	{r4, pc}

08082e44 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8082e44:	b510      	push	{r4, lr}
 8082e46:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8082e48:	6800      	ldr	r0, [r0, #0]
 8082e4a:	b108      	cbz	r0, 8082e50 <_ZN6String10invalidateEv+0xc>
 8082e4c:	f7ff f966 	bl	808211c <free>
	buffer = NULL;
 8082e50:	2300      	movs	r3, #0
	capacity = len = 0;
 8082e52:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 8082e56:	6023      	str	r3, [r4, #0]
}
 8082e58:	bd10      	pop	{r4, pc}

08082e5a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8082e5a:	b538      	push	{r3, r4, r5, lr}
 8082e5c:	4604      	mov	r4, r0
 8082e5e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8082e60:	6800      	ldr	r0, [r0, #0]
 8082e62:	3101      	adds	r1, #1
 8082e64:	f7ff f962 	bl	808212c <realloc>
	if (newbuffer) {
 8082e68:	b110      	cbz	r0, 8082e70 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8082e6a:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 8082e6e:	2001      	movs	r0, #1
	}
	return 0;
}
 8082e70:	bd38      	pop	{r3, r4, r5, pc}

08082e72 <_ZN6String7reserveEj>:
{
 8082e72:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8082e74:	6803      	ldr	r3, [r0, #0]
{
 8082e76:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8082e78:	b123      	cbz	r3, 8082e84 <_ZN6String7reserveEj+0x12>
 8082e7a:	6843      	ldr	r3, [r0, #4]
 8082e7c:	428b      	cmp	r3, r1
 8082e7e:	d301      	bcc.n	8082e84 <_ZN6String7reserveEj+0x12>
 8082e80:	2001      	movs	r0, #1
}
 8082e82:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 8082e84:	4620      	mov	r0, r4
 8082e86:	f7ff ffe8 	bl	8082e5a <_ZN6String12changeBufferEj>
 8082e8a:	2800      	cmp	r0, #0
 8082e8c:	d0f9      	beq.n	8082e82 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 8082e8e:	68a3      	ldr	r3, [r4, #8]
 8082e90:	2b00      	cmp	r3, #0
 8082e92:	d1f5      	bne.n	8082e80 <_ZN6String7reserveEj+0xe>
 8082e94:	6822      	ldr	r2, [r4, #0]
 8082e96:	7013      	strb	r3, [r2, #0]
 8082e98:	e7f2      	b.n	8082e80 <_ZN6String7reserveEj+0xe>

08082e9a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8082e9a:	b570      	push	{r4, r5, r6, lr}
 8082e9c:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8082e9e:	4611      	mov	r1, r2
{
 8082ea0:	4604      	mov	r4, r0
 8082ea2:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8082ea4:	f7ff ffe5 	bl	8082e72 <_ZN6String7reserveEj>
 8082ea8:	b920      	cbnz	r0, 8082eb4 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 8082eaa:	4620      	mov	r0, r4
 8082eac:	f7ff ffca 	bl	8082e44 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 8082eb0:	4620      	mov	r0, r4
 8082eb2:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 8082eb4:	462a      	mov	r2, r5
 8082eb6:	4631      	mov	r1, r6
 8082eb8:	6820      	ldr	r0, [r4, #0]
	len = length;
 8082eba:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8082ebc:	f001 fd00 	bl	80848c0 <memcpy>
	buffer[len] = 0;
 8082ec0:	2100      	movs	r1, #0
 8082ec2:	6822      	ldr	r2, [r4, #0]
 8082ec4:	68a3      	ldr	r3, [r4, #8]
 8082ec6:	54d1      	strb	r1, [r2, r3]
	return *this;
 8082ec8:	e7f2      	b.n	8082eb0 <_ZN6String4copyEPKcj+0x16>

08082eca <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 8082eca:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 8082ecc:	2300      	movs	r3, #0
String::String(const char *cstr)
 8082ece:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 8082ed0:	460d      	mov	r5, r1
	capacity = 0;
 8082ed2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8082ed6:	6083      	str	r3, [r0, #8]
	flags = 0;
 8082ed8:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 8082eda:	b139      	cbz	r1, 8082eec <_ZN6StringC1EPKc+0x22>
 8082edc:	4608      	mov	r0, r1
 8082ede:	f001 fd70 	bl	80849c2 <strlen>
 8082ee2:	4629      	mov	r1, r5
 8082ee4:	4602      	mov	r2, r0
 8082ee6:	4620      	mov	r0, r4
 8082ee8:	f7ff ffd7 	bl	8082e9a <_ZN6String4copyEPKcj>
}
 8082eec:	4620      	mov	r0, r4
 8082eee:	bd38      	pop	{r3, r4, r5, pc}

08082ef0 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8082ef0:	4288      	cmp	r0, r1
{
 8082ef2:	b510      	push	{r4, lr}
 8082ef4:	460b      	mov	r3, r1
 8082ef6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8082ef8:	d004      	beq.n	8082f04 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8082efa:	6809      	ldr	r1, [r1, #0]
 8082efc:	b121      	cbz	r1, 8082f08 <_ZN6StringaSERKS_+0x18>
 8082efe:	689a      	ldr	r2, [r3, #8]
 8082f00:	f7ff ffcb 	bl	8082e9a <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 8082f04:	4620      	mov	r0, r4
 8082f06:	bd10      	pop	{r4, pc}
	else invalidate();
 8082f08:	f7ff ff9c 	bl	8082e44 <_ZN6String10invalidateEv>
 8082f0c:	e7fa      	b.n	8082f04 <_ZN6StringaSERKS_+0x14>

08082f0e <_ZN6StringC1ERKS_>:
	buffer = NULL;
 8082f0e:	2300      	movs	r3, #0
String::String(const String &value)
 8082f10:	b510      	push	{r4, lr}
 8082f12:	4604      	mov	r4, r0
	capacity = 0;
 8082f14:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8082f18:	6083      	str	r3, [r0, #8]
	flags = 0;
 8082f1a:	7303      	strb	r3, [r0, #12]
	*this = value;
 8082f1c:	f7ff ffe8 	bl	8082ef0 <_ZN6StringaSERKS_>
}
 8082f20:	4620      	mov	r0, r4
 8082f22:	bd10      	pop	{r4, pc}

08082f24 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8082f24:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8082f26:	6882      	ldr	r2, [r0, #8]
 8082f28:	b93a      	cbnz	r2, 8082f3a <_ZNK6String6equalsEPKc+0x16>
 8082f2a:	b121      	cbz	r1, 8082f36 <_ZNK6String6equalsEPKc+0x12>
 8082f2c:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 8082f2e:	fab0 f080 	clz	r0, r0
 8082f32:	0940      	lsrs	r0, r0, #5
 8082f34:	e000      	b.n	8082f38 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8082f36:	2001      	movs	r0, #1
}
 8082f38:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8082f3a:	6800      	ldr	r0, [r0, #0]
 8082f3c:	b909      	cbnz	r1, 8082f42 <_ZNK6String6equalsEPKc+0x1e>
 8082f3e:	7800      	ldrb	r0, [r0, #0]
 8082f40:	e7f5      	b.n	8082f2e <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 8082f42:	f001 fd11 	bl	8084968 <strcmp>
 8082f46:	e7f2      	b.n	8082f2e <_ZNK6String6equalsEPKc+0xa>

08082f48 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 8082f48:	b558      	push	{r3, r4, r6, lr}
 8082f4a:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 8082f4c:	b12a      	cbz	r2, 8082f5a <_ZNK6String8getBytesEPhjj+0x12>
 8082f4e:	b121      	cbz	r1, 8082f5a <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
 8082f50:	6884      	ldr	r4, [r0, #8]
 8082f52:	42a3      	cmp	r3, r4
 8082f54:	d302      	bcc.n	8082f5c <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 8082f56:	2300      	movs	r3, #0
 8082f58:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
 8082f5a:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
 8082f5c:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
 8082f5e:	3a01      	subs	r2, #1
	if (n > len - index) n = len - index;
 8082f60:	4294      	cmp	r4, r2
 8082f62:	bf28      	it	cs
 8082f64:	4614      	movcs	r4, r2
	strncpy((char *)buf, buffer + index, n);
 8082f66:	6801      	ldr	r1, [r0, #0]
 8082f68:	4622      	mov	r2, r4
 8082f6a:	4419      	add	r1, r3
 8082f6c:	4630      	mov	r0, r6
 8082f6e:	f001 fd30 	bl	80849d2 <strncpy>
	buf[n] = 0;
 8082f72:	2300      	movs	r3, #0
 8082f74:	5533      	strb	r3, [r6, r4]
 8082f76:	e7f0      	b.n	8082f5a <_ZNK6String8getBytesEPhjj+0x12>

08082f78 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 8082f78:	b510      	push	{r4, lr}
 8082f7a:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8082f7c:	6800      	ldr	r0, [r0, #0]
 8082f7e:	b118      	cbz	r0, 8082f88 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 8082f80:	f7ff f8cc 	bl	808211c <free>
            wakeupSource_ = nullptr;
 8082f84:	2300      	movs	r3, #0
 8082f86:	6023      	str	r3, [r4, #0]
        }
    }
 8082f88:	bd10      	pop	{r4, pc}

08082f8a <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8082f8a:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 8082f8c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8082f90:	460d      	mov	r5, r1
        error_ = result.error_;
 8082f92:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 8082f94:	460b      	mov	r3, r1
 8082f96:	f853 2f06 	ldr.w	r2, [r3, #6]!
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8082f9a:	4604      	mov	r4, r0
        compatResult_ = result.compatResult_;
 8082f9c:	f8c0 2006 	str.w	r2, [r0, #6]
 8082fa0:	889b      	ldrh	r3, [r3, #4]
 8082fa2:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 8082fa4:	f7ff ffe8 	bl	8082f78 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
 8082fa8:	682b      	ldr	r3, [r5, #0]
 8082faa:	b113      	cbz	r3, 8082fb2 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 8082fac:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 8082fae:	2300      	movs	r3, #0
 8082fb0:	602b      	str	r3, [r5, #0]
    }
 8082fb2:	4620      	mov	r0, r4
 8082fb4:	bd38      	pop	{r3, r4, r5, pc}

08082fb6 <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
 8082fb6:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SleepResult toSleepResult() {
 8082fba:	b510      	push	{r4, lr}
 8082fbc:	680a      	ldr	r2, [r1, #0]
        if (error_ || wakeupSource_) {
 8082fbe:	b933      	cbnz	r3, 8082fce <_ZN17SystemSleepResult13toSleepResultEv+0x18>
 8082fc0:	b932      	cbnz	r2, 8082fd0 <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
 8082fc2:	f851 3f06 	ldr.w	r3, [r1, #6]!
 8082fc6:	6003      	str	r3, [r0, #0]
 8082fc8:	888b      	ldrh	r3, [r1, #4]
 8082fca:	8083      	strh	r3, [r0, #4]
    }
 8082fcc:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
 8082fce:	b122      	cbz	r2, 8082fda <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
 8082fd0:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
 8082fd2:	2c01      	cmp	r4, #1
 8082fd4:	d003      	beq.n	8082fde <_ZN17SystemSleepResult13toSleepResultEv+0x28>
 8082fd6:	2c04      	cmp	r4, #4
 8082fd8:	d006      	beq.n	8082fe8 <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 8082fda:	2204      	movs	r2, #4
 8082fdc:	e005      	b.n	8082fea <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 8082fde:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 8082fe0:	718c      	strb	r4, [r1, #6]
 8082fe2:	810b      	strh	r3, [r1, #8]
 8082fe4:	814a      	strh	r2, [r1, #10]
                    break;
 8082fe6:	e7ec      	b.n	8082fc2 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 8082fe8:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 8082fea:	810b      	strh	r3, [r1, #8]
 8082fec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8082ff0:	718a      	strb	r2, [r1, #6]
 8082ff2:	814b      	strh	r3, [r1, #10]
                    break;
 8082ff4:	e7e5      	b.n	8082fc2 <_ZN17SystemSleepResult13toSleepResultEv+0xc>

08082ff6 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 8082ff6:	b507      	push	{r0, r1, r2, lr}
 8082ff8:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 8082ffa:	2100      	movs	r1, #0
{
 8082ffc:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 8082ffe:	9100      	str	r1, [sp, #0]
 8083000:	2001      	movs	r0, #1
 8083002:	218c      	movs	r1, #140	; 0x8c
 8083004:	f7fe ffb8 	bl	8081f78 <system_reset>
}
 8083008:	b003      	add	sp, #12
 808300a:	f85d fb04 	ldr.w	pc, [sp], #4

0808300e <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 808300e:	4601      	mov	r1, r0
    reset(0, flags);
 8083010:	2000      	movs	r0, #0
 8083012:	f7ff bff0 	b.w	8082ff6 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

08083016 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 8083016:	2000      	movs	r0, #0
 8083018:	f7ff bff9 	b.w	808300e <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

0808301c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 808301c:	b530      	push	{r4, r5, lr}
 808301e:	4604      	mov	r4, r0
 8083020:	b085      	sub	sp, #20
 8083022:	4608      	mov	r0, r1
 8083024:	4611      	mov	r1, r2
 8083026:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 8083028:	2300      	movs	r3, #0
 808302a:	f7fe ff69 	bl	8081f00 <system_sleep>
              compatResult_(r) {
 808302e:	2300      	movs	r3, #0
 8083030:	9301      	str	r3, [sp, #4]
 8083032:	f8ad 3008 	strh.w	r3, [sp, #8]
 8083036:	f88d 300a 	strb.w	r3, [sp, #10]
 808303a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
 808303e:	4d09      	ldr	r5, [pc, #36]	; (8083064 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 8083040:	a901      	add	r1, sp, #4
 8083042:	f8ad 000c 	strh.w	r0, [sp, #12]
 8083046:	4628      	mov	r0, r5
 8083048:	f8ad 300e 	strh.w	r3, [sp, #14]
 808304c:	f7ff ff9d 	bl	8082f8a <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
 8083050:	a801      	add	r0, sp, #4
 8083052:	f7ff ff91 	bl	8082f78 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
 8083056:	4620      	mov	r0, r4
 8083058:	4629      	mov	r1, r5
 808305a:	f7ff ffac 	bl	8082fb6 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
 808305e:	4620      	mov	r0, r4
 8083060:	b005      	add	sp, #20
 8083062:	bd30      	pop	{r4, r5, pc}
 8083064:	20000318 	.word	0x20000318

08083068 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8083068:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 808306a:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 808306c:	b510      	push	{r4, lr}
 808306e:	4b08      	ldr	r3, [pc, #32]	; (8083090 <_GLOBAL__sub_I_System+0x28>)
 8083070:	4c08      	ldr	r4, [pc, #32]	; (8083094 <_GLOBAL__sub_I_System+0x2c>)
 8083072:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 8083074:	4b08      	ldr	r3, [pc, #32]	; (8083098 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 8083076:	6020      	str	r0, [r4, #0]
 8083078:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 808307a:	71a0      	strb	r0, [r4, #6]
 808307c:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 808307e:	f7fe ff2f 	bl	8081ee0 <set_system_mode>
SystemClass System;
 8083082:	4620      	mov	r0, r4
 8083084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 8083088:	4a04      	ldr	r2, [pc, #16]	; (808309c <_GLOBAL__sub_I_System+0x34>)
 808308a:	4905      	ldr	r1, [pc, #20]	; (80830a0 <_GLOBAL__sub_I_System+0x38>)
 808308c:	f000 bc64 	b.w	8083958 <__aeabi_atexit>
 8083090:	20000324 	.word	0x20000324
 8083094:	20000318 	.word	0x20000318
 8083098:	ffff0000 	.word	0xffff0000
 808309c:	20000100 	.word	0x20000100
 80830a0:	08080189 	.word	0x08080189

080830a4 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80830a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 80830a8:	4a15      	ldr	r2, [pc, #84]	; (8083100 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80830aa:	f8df 8060 	ldr.w	r8, [pc, #96]	; 808310c <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 80830ae:	e9d2 3200 	ldrd	r3, r2, [r2]
 80830b2:	18c0      	adds	r0, r0, r3
 80830b4:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
 80830b8:	4a12      	ldr	r2, [pc, #72]	; (8083104 <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 80830ba:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 80830bc:	e9d2 3200 	ldrd	r3, r2, [r2]
 80830c0:	18c6      	adds	r6, r0, r3
 80830c2:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
 80830c6:	e9d8 2300 	ldrd	r2, r3, [r8]
 80830ca:	42bb      	cmp	r3, r7
 80830cc:	bf08      	it	eq
 80830ce:	42b2      	cmpeq	r2, r6
 80830d0:	d013      	beq.n	80830fa <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 80830d2:	a903      	add	r1, sp, #12
 80830d4:	4668      	mov	r0, sp
 80830d6:	e9cd 6700 	strd	r6, r7, [sp]
 80830da:	f7fc ffa1 	bl	8080020 <localtime_r>
	calendar_time.tm_year += 1900;
 80830de:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80830e0:	4d09      	ldr	r5, [pc, #36]	; (8083108 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 80830e2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80830e6:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 80830e8:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80830ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80830ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80830ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80830f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80830f2:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80830f6:	6823      	ldr	r3, [r4, #0]
 80830f8:	602b      	str	r3, [r5, #0]
    }
}
 80830fa:	b00c      	add	sp, #48	; 0x30
 80830fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8083100:	20000358 	.word	0x20000358
 8083104:	20000350 	.word	0x20000350
 8083108:	2000032c 	.word	0x2000032c
 808310c:	20000360 	.word	0x20000360

08083110 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
 8083110:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
 8083112:	2000      	movs	r0, #0
 8083114:	f7fe ff82 	bl	808201c <spark_sync_time_pending>
 8083118:	b128      	cbz	r0, 8083126 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 808311a:	f7fe ff57 	bl	8081fcc <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 808311e:	f080 0001 	eor.w	r0, r0, #1
 8083122:	b2c0      	uxtb	r0, r0
    }
 8083124:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 8083126:	2001      	movs	r0, #1
 8083128:	e7fc      	b.n	8083124 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

0808312c <_ZN9TimeClass7weekdayEx>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
 808312c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 808312e:	f7ff ffb9 	bl	80830a4 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
 8083132:	4b02      	ldr	r3, [pc, #8]	; (808313c <_ZN9TimeClass7weekdayEx+0x10>)
 8083134:	6998      	ldr	r0, [r3, #24]
}
 8083136:	3001      	adds	r0, #1
 8083138:	bd08      	pop	{r3, pc}
 808313a:	bf00      	nop
 808313c:	2000032c 	.word	0x2000032c

08083140 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 8083140:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 8083142:	f7ff ffaf 	bl	80830a4 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 8083146:	4b02      	ldr	r3, [pc, #8]	; (8083150 <_ZN9TimeClass5monthEx+0x10>)
 8083148:	6918      	ldr	r0, [r3, #16]
}
 808314a:	3001      	adds	r0, #1
 808314c:	bd08      	pop	{r3, pc}
 808314e:	bf00      	nop
 8083150:	2000032c 	.word	0x2000032c

08083154 <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8083154:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8083156:	490a      	ldr	r1, [pc, #40]	; (8083180 <_ZN9TimeClass4zoneEf+0x2c>)
{
 8083158:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808315a:	f001 fb1d 	bl	8084798 <__aeabi_fcmplt>
 808315e:	b968      	cbnz	r0, 808317c <_ZN9TimeClass4zoneEf+0x28>
 8083160:	4620      	mov	r0, r4
 8083162:	4908      	ldr	r1, [pc, #32]	; (8083184 <_ZN9TimeClass4zoneEf+0x30>)
 8083164:	f001 fb36 	bl	80847d4 <__aeabi_fcmpgt>
 8083168:	b940      	cbnz	r0, 808317c <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 808316a:	4907      	ldr	r1, [pc, #28]	; (8083188 <_ZN9TimeClass4zoneEf+0x34>)
 808316c:	4620      	mov	r0, r4
 808316e:	f001 f975 	bl	808445c <__aeabi_fmul>
 8083172:	f001 fb39 	bl	80847e8 <__aeabi_f2lz>
 8083176:	4b05      	ldr	r3, [pc, #20]	; (808318c <_ZN9TimeClass4zoneEf+0x38>)
 8083178:	e9c3 0100 	strd	r0, r1, [r3]
}
 808317c:	bd10      	pop	{r4, pc}
 808317e:	bf00      	nop
 8083180:	c1400000 	.word	0xc1400000
 8083184:	41600000 	.word	0x41600000
 8083188:	45610000 	.word	0x45610000
 808318c:	20000358 	.word	0x20000358

08083190 <_ZN9TimeClass12setDSTOffsetEf>:
{
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
 8083190:	b510      	push	{r4, lr}
    if (offset < 0 || offset > 2)
 8083192:	2100      	movs	r1, #0
{
 8083194:	4604      	mov	r4, r0
    if (offset < 0 || offset > 2)
 8083196:	f001 faff 	bl	8084798 <__aeabi_fcmplt>
 808319a:	b970      	cbnz	r0, 80831ba <_ZN9TimeClass12setDSTOffsetEf+0x2a>
 808319c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80831a0:	4620      	mov	r0, r4
 80831a2:	f001 fb17 	bl	80847d4 <__aeabi_fcmpgt>
 80831a6:	b940      	cbnz	r0, 80831ba <_ZN9TimeClass12setDSTOffsetEf+0x2a>
    {
        return;
    }
    dst_cache = offset * 3600;
 80831a8:	4904      	ldr	r1, [pc, #16]	; (80831bc <_ZN9TimeClass12setDSTOffsetEf+0x2c>)
 80831aa:	4620      	mov	r0, r4
 80831ac:	f001 f956 	bl	808445c <__aeabi_fmul>
 80831b0:	f001 fb1a 	bl	80847e8 <__aeabi_f2lz>
 80831b4:	4b02      	ldr	r3, [pc, #8]	; (80831c0 <_ZN9TimeClass12setDSTOffsetEf+0x30>)
 80831b6:	e9c3 0100 	strd	r0, r1, [r3]
}
 80831ba:	bd10      	pop	{r4, pc}
 80831bc:	45610000 	.word	0x45610000
 80831c0:	20000090 	.word	0x20000090

080831c4 <_ZN9TimeClass8beginDSTEv>:

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
 80831c4:	4b03      	ldr	r3, [pc, #12]	; (80831d4 <_ZN9TimeClass8beginDSTEv+0x10>)
 80831c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80831ca:	4b03      	ldr	r3, [pc, #12]	; (80831d8 <_ZN9TimeClass8beginDSTEv+0x14>)
 80831cc:	e9c3 0100 	strd	r0, r1, [r3]
}
 80831d0:	4770      	bx	lr
 80831d2:	bf00      	nop
 80831d4:	20000090 	.word	0x20000090
 80831d8:	20000350 	.word	0x20000350

080831dc <_ZN9TimeClass6endDSTEv>:

void TimeClass::endDST()
{
    dst_current_cache = 0;
 80831dc:	2000      	movs	r0, #0
 80831de:	2100      	movs	r1, #0
 80831e0:	4b01      	ldr	r3, [pc, #4]	; (80831e8 <_ZN9TimeClass6endDSTEv+0xc>)
 80831e2:	e9c3 0100 	strd	r0, r1, [r3]
}
 80831e6:	4770      	bx	lr
 80831e8:	20000350 	.word	0x20000350

080831ec <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80831ec:	b530      	push	{r4, r5, lr}
 80831ee:	4604      	mov	r4, r0
    t += time_zone_cache;
 80831f0:	4818      	ldr	r0, [pc, #96]	; (8083254 <_ZN9TimeClass7timeStrEx+0x68>)
{
 80831f2:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 80831f4:	e9d0 1000 	ldrd	r1, r0, [r0]
 80831f8:	1852      	adds	r2, r2, r1
 80831fa:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 80831fe:	4816      	ldr	r0, [pc, #88]	; (8083258 <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 8083200:	2500      	movs	r5, #0
    t += dst_current_cache;
 8083202:	e9d0 1000 	ldrd	r1, r0, [r0]
 8083206:	1852      	adds	r2, r2, r1
 8083208:	eb40 0303 	adc.w	r3, r0, r3
 808320c:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 8083210:	2224      	movs	r2, #36	; 0x24
 8083212:	2100      	movs	r1, #0
 8083214:	eb0d 0002 	add.w	r0, sp, r2
 8083218:	f001 fb7a 	bl	8084910 <memset>
    localtime_r(&t, &calendar_time);
 808321c:	a909      	add	r1, sp, #36	; 0x24
 808321e:	4668      	mov	r0, sp
 8083220:	f7fc fefe 	bl	8080020 <localtime_r>
    char ascstr[26] = {};
 8083224:	2216      	movs	r2, #22
 8083226:	4629      	mov	r1, r5
 8083228:	a803      	add	r0, sp, #12
 808322a:	9502      	str	r5, [sp, #8]
 808322c:	f001 fb70 	bl	8084910 <memset>
    asctime_r(&calendar_time, ascstr);
 8083230:	a902      	add	r1, sp, #8
 8083232:	a809      	add	r0, sp, #36	; 0x24
 8083234:	f001 fb0c 	bl	8084850 <asctime_r>
    int len = strlen(ascstr);
 8083238:	a802      	add	r0, sp, #8
 808323a:	f001 fbc2 	bl	80849c2 <strlen>
    ascstr[len-1] = 0; // remove final newline
 808323e:	ab12      	add	r3, sp, #72	; 0x48
 8083240:	4418      	add	r0, r3
 8083242:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 8083246:	a902      	add	r1, sp, #8
 8083248:	4620      	mov	r0, r4
 808324a:	f7ff fe3e 	bl	8082eca <_ZN6StringC1EPKc>
}
 808324e:	4620      	mov	r0, r4
 8083250:	b013      	add	sp, #76	; 0x4c
 8083252:	bd30      	pop	{r4, r5, pc}
 8083254:	20000358 	.word	0x20000358
 8083258:	20000350 	.word	0x20000350

0808325c <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 808325c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 808325e:	2000      	movs	r0, #0
 8083260:	f7fe fce6 	bl	8081c30 <hal_rtc_time_is_valid>
    if (rtcstate)
 8083264:	4604      	mov	r4, r0
 8083266:	b9a0      	cbnz	r0, 8083292 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8083268:	f7fe fe32 	bl	8081ed0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 808326c:	2801      	cmp	r0, #1
 808326e:	d110      	bne.n	8083292 <_ZN9TimeClass7isValidEv+0x36>
 8083270:	4620      	mov	r0, r4
 8083272:	f7fe fe65 	bl	8081f40 <system_thread_get_state>
 8083276:	b960      	cbnz	r0, 8083292 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 8083278:	f7ff ff4a 	bl	8083110 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808327c:	b910      	cbnz	r0, 8083284 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 808327e:	f7fe fe95 	bl	8081fac <spark_process>
        while (_while() && !_condition()) {
 8083282:	e7f9      	b.n	8083278 <_ZN9TimeClass7isValidEv+0x1c>
 8083284:	f7ff ff44 	bl	8083110 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 8083288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 808328c:	2000      	movs	r0, #0
 808328e:	f7fe bccf 	b.w	8081c30 <hal_rtc_time_is_valid>
}
 8083292:	4620      	mov	r0, r4
 8083294:	bd10      	pop	{r4, pc}

08083296 <_ZN9TimeClass3nowEv>:
{
 8083296:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 8083298:	f7ff ffe0 	bl	808325c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 808329c:	2210      	movs	r2, #16
 808329e:	2100      	movs	r1, #0
 80832a0:	4668      	mov	r0, sp
 80832a2:	f001 fb35 	bl	8084910 <memset>
    hal_rtc_get_time(&tv, nullptr);
 80832a6:	2100      	movs	r1, #0
 80832a8:	4668      	mov	r0, sp
 80832aa:	f7fe fcd1 	bl	8081c50 <hal_rtc_get_time>
}
 80832ae:	9800      	ldr	r0, [sp, #0]
 80832b0:	b005      	add	sp, #20
 80832b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080832b8 <_ZN9TimeClass4hourEv>:
{
 80832b8:	b508      	push	{r3, lr}
	return hour(now());
 80832ba:	f7ff ffec 	bl	8083296 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80832be:	17c1      	asrs	r1, r0, #31
 80832c0:	f7ff fef0 	bl	80830a4 <_ZL22Refresh_UnixTime_Cachex>
}
 80832c4:	4b01      	ldr	r3, [pc, #4]	; (80832cc <_ZN9TimeClass4hourEv+0x14>)
 80832c6:	6898      	ldr	r0, [r3, #8]
 80832c8:	bd08      	pop	{r3, pc}
 80832ca:	bf00      	nop
 80832cc:	2000032c 	.word	0x2000032c

080832d0 <_ZN9TimeClass3dayEv>:
{
 80832d0:	b508      	push	{r3, lr}
	return day(now());
 80832d2:	f7ff ffe0 	bl	8083296 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80832d6:	17c1      	asrs	r1, r0, #31
 80832d8:	f7ff fee4 	bl	80830a4 <_ZL22Refresh_UnixTime_Cachex>
}
 80832dc:	4b01      	ldr	r3, [pc, #4]	; (80832e4 <_ZN9TimeClass3dayEv+0x14>)
 80832de:	68d8      	ldr	r0, [r3, #12]
 80832e0:	bd08      	pop	{r3, pc}
 80832e2:	bf00      	nop
 80832e4:	2000032c 	.word	0x2000032c

080832e8 <_ZN9TimeClass7weekdayEv>:
{
 80832e8:	b508      	push	{r3, lr}
	return weekday(now());
 80832ea:	f7ff ffd4 	bl	8083296 <_ZN9TimeClass3nowEv>
}
 80832ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return weekday(now());
 80832f2:	17c1      	asrs	r1, r0, #31
 80832f4:	f7ff bf1a 	b.w	808312c <_ZN9TimeClass7weekdayEx>

080832f8 <_ZN9TimeClass5monthEv>:
{
 80832f8:	b508      	push	{r3, lr}
	return month(now());
 80832fa:	f7ff ffcc 	bl	8083296 <_ZN9TimeClass3nowEv>
}
 80832fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 8083302:	17c1      	asrs	r1, r0, #31
 8083304:	f7ff bf1c 	b.w	8083140 <_ZN9TimeClass5monthEx>

08083308 <_ZN9TimeClass5localEv>:
{
 8083308:	b508      	push	{r3, lr}
	return now() + time_zone_cache + dst_current_cache;
 808330a:	f7ff ffc4 	bl	8083296 <_ZN9TimeClass3nowEv>
 808330e:	4b03      	ldr	r3, [pc, #12]	; (808331c <_ZN9TimeClass5localEv+0x14>)
 8083310:	4a03      	ldr	r2, [pc, #12]	; (8083320 <_ZN9TimeClass5localEv+0x18>)
 8083312:	681b      	ldr	r3, [r3, #0]
 8083314:	6812      	ldr	r2, [r2, #0]
 8083316:	4413      	add	r3, r2
}
 8083318:	4418      	add	r0, r3
 808331a:	bd08      	pop	{r3, pc}
 808331c:	20000358 	.word	0x20000358
 8083320:	20000350 	.word	0x20000350

08083324 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8083324:	4b02      	ldr	r3, [pc, #8]	; (8083330 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8083326:	681a      	ldr	r2, [r3, #0]
 8083328:	4b02      	ldr	r3, [pc, #8]	; (8083334 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 808332a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 808332c:	4770      	bx	lr
 808332e:	bf00      	nop
 8083330:	2000008c 	.word	0x2000008c
 8083334:	20000328 	.word	0x20000328

08083338 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 8083338:	4770      	bx	lr

0808333a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808333a:	7441      	strb	r1, [r0, #17]
}
 808333c:	4770      	bx	lr

0808333e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 808333e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 8083340:	7c00      	ldrb	r0, [r0, #16]
 8083342:	f7fe fd7d 	bl	8081e40 <hal_usart_available_data_for_write>
}
 8083346:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808334a:	bd08      	pop	{r3, pc}

0808334c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 808334c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 808334e:	7c00      	ldrb	r0, [r0, #16]
 8083350:	f7fe fd4e 	bl	8081df0 <hal_usart_available>
}
 8083354:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8083358:	bd08      	pop	{r3, pc}

0808335a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 808335a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 808335c:	7c00      	ldrb	r0, [r0, #16]
 808335e:	f7fe fd57 	bl	8081e10 <hal_usart_peek>
}
 8083362:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8083366:	bd08      	pop	{r3, pc}

08083368 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8083368:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 808336a:	7c00      	ldrb	r0, [r0, #16]
 808336c:	f7fe fd48 	bl	8081e00 <hal_usart_read>
}
 8083370:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8083374:	bd08      	pop	{r3, pc}

08083376 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 8083376:	7c00      	ldrb	r0, [r0, #16]
 8083378:	f7fe bd52 	b.w	8081e20 <hal_usart_flush>

0808337c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 808337c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808337e:	7c46      	ldrb	r6, [r0, #17]
{
 8083380:	4604      	mov	r4, r0
 8083382:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8083384:	b12e      	cbz	r6, 8083392 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 8083386:	4629      	mov	r1, r5
 8083388:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 808338a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 808338e:	f7fe bd27 	b.w	8081de0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8083392:	7c00      	ldrb	r0, [r0, #16]
 8083394:	f7fe fd54 	bl	8081e40 <hal_usart_available_data_for_write>
 8083398:	2800      	cmp	r0, #0
 808339a:	dcf4      	bgt.n	8083386 <_ZN11USARTSerial5writeEh+0xa>
}
 808339c:	4630      	mov	r0, r6
 808339e:	bd70      	pop	{r4, r5, r6, pc}

080833a0 <_ZN11USARTSerialD0Ev>:
 80833a0:	b510      	push	{r4, lr}
 80833a2:	4604      	mov	r4, r0
 80833a4:	2114      	movs	r1, #20
 80833a6:	f000 fadc 	bl	8083962 <_ZdlPvj>
 80833aa:	4620      	mov	r0, r4
 80833ac:	bd10      	pop	{r4, pc}
	...

080833b0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80833b0:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80833b4:	b510      	push	{r4, lr}
 80833b6:	4604      	mov	r4, r0
 80833b8:	4608      	mov	r0, r1
 80833ba:	4611      	mov	r1, r2
 80833bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80833c0:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80833c4:	4a04      	ldr	r2, [pc, #16]	; (80833d8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80833c6:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80833c8:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80833ca:	2201      	movs	r2, #1
 80833cc:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80833ce:	461a      	mov	r2, r3
 80833d0:	f7fe fcfe 	bl	8081dd0 <hal_usart_init>
}
 80833d4:	4620      	mov	r0, r4
 80833d6:	bd10      	pop	{r4, pc}
 80833d8:	080850f4 	.word	0x080850f4

080833dc <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80833dc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80833de:	4d0d      	ldr	r5, [pc, #52]	; (8083414 <_Z22__fetch_global_Serial1v+0x38>)
 80833e0:	7829      	ldrb	r1, [r5, #0]
 80833e2:	f3bf 8f5b 	dmb	ish
 80833e6:	f011 0401 	ands.w	r4, r1, #1
 80833ea:	d111      	bne.n	8083410 <_Z22__fetch_global_Serial1v+0x34>
 80833ec:	4628      	mov	r0, r5
 80833ee:	f7fc fe6d 	bl	80800cc <__cxa_guard_acquire>
 80833f2:	b168      	cbz	r0, 8083410 <_Z22__fetch_global_Serial1v+0x34>
 80833f4:	4621      	mov	r1, r4
 80833f6:	4a08      	ldr	r2, [pc, #32]	; (8083418 <_Z22__fetch_global_Serial1v+0x3c>)
 80833f8:	4b08      	ldr	r3, [pc, #32]	; (808341c <_Z22__fetch_global_Serial1v+0x40>)
 80833fa:	4809      	ldr	r0, [pc, #36]	; (8083420 <_Z22__fetch_global_Serial1v+0x44>)
 80833fc:	f7ff ffd8 	bl	80833b0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8083400:	4628      	mov	r0, r5
 8083402:	f7fc fe68 	bl	80800d6 <__cxa_guard_release>
 8083406:	4a07      	ldr	r2, [pc, #28]	; (8083424 <_Z22__fetch_global_Serial1v+0x48>)
 8083408:	4907      	ldr	r1, [pc, #28]	; (8083428 <_Z22__fetch_global_Serial1v+0x4c>)
 808340a:	4805      	ldr	r0, [pc, #20]	; (8083420 <_Z22__fetch_global_Serial1v+0x44>)
 808340c:	f000 faa4 	bl	8083958 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8083410:	4803      	ldr	r0, [pc, #12]	; (8083420 <_Z22__fetch_global_Serial1v+0x44>)
 8083412:	bd38      	pop	{r3, r4, r5, pc}
 8083414:	20000368 	.word	0x20000368
 8083418:	2000036c 	.word	0x2000036c
 808341c:	200003f0 	.word	0x200003f0
 8083420:	20000474 	.word	0x20000474
 8083424:	20000100 	.word	0x20000100
 8083428:	08083339 	.word	0x08083339

0808342c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808342c:	7441      	strb	r1, [r0, #17]
}
 808342e:	4770      	bx	lr

08083430 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8083430:	4770      	bx	lr

08083432 <_ZN9USBSerial4readEv>:
{
 8083432:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8083434:	2100      	movs	r1, #0
 8083436:	7c00      	ldrb	r0, [r0, #16]
 8083438:	f7fe fd22 	bl	8081e80 <HAL_USB_USART_Receive_Data>
}
 808343c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8083440:	bd08      	pop	{r3, pc}

08083442 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 8083442:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8083444:	2101      	movs	r1, #1
 8083446:	7c00      	ldrb	r0, [r0, #16]
 8083448:	f7fe fd1a 	bl	8081e80 <HAL_USB_USART_Receive_Data>
}
 808344c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8083450:	bd08      	pop	{r3, pc}

08083452 <_ZN9USBSerial17availableForWriteEv>:
{
 8083452:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8083454:	7c00      	ldrb	r0, [r0, #16]
 8083456:	f7fe fd0b 	bl	8081e70 <HAL_USB_USART_Available_Data_For_Write>
}
 808345a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808345e:	bd08      	pop	{r3, pc}

08083460 <_ZN9USBSerial9availableEv>:
{
 8083460:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8083462:	7c00      	ldrb	r0, [r0, #16]
 8083464:	f7fe fcfc 	bl	8081e60 <HAL_USB_USART_Available_Data>
}
 8083468:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808346c:	bd08      	pop	{r3, pc}

0808346e <_ZN9USBSerial5writeEh>:
{
 808346e:	b538      	push	{r3, r4, r5, lr}
 8083470:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8083472:	7c00      	ldrb	r0, [r0, #16]
{
 8083474:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8083476:	f7fe fcfb 	bl	8081e70 <HAL_USB_USART_Available_Data_For_Write>
 808347a:	2800      	cmp	r0, #0
 808347c:	dc01      	bgt.n	8083482 <_ZN9USBSerial5writeEh+0x14>
 808347e:	7c60      	ldrb	r0, [r4, #17]
 8083480:	b128      	cbz	r0, 808348e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8083482:	4629      	mov	r1, r5
 8083484:	7c20      	ldrb	r0, [r4, #16]
 8083486:	f7fe fd03 	bl	8081e90 <HAL_USB_USART_Send_Data>
 808348a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 808348e:	bd38      	pop	{r3, r4, r5, pc}

08083490 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 8083490:	7c00      	ldrb	r0, [r0, #16]
 8083492:	f7fe bd05 	b.w	8081ea0 <HAL_USB_USART_Flush_Data>

08083496 <_ZN9USBSerialD0Ev>:
 8083496:	b510      	push	{r4, lr}
 8083498:	4604      	mov	r4, r0
 808349a:	2114      	movs	r1, #20
 808349c:	f000 fa61 	bl	8083962 <_ZdlPvj>
 80834a0:	4620      	mov	r0, r4
 80834a2:	bd10      	pop	{r4, pc}

080834a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80834a4:	b510      	push	{r4, lr}
 80834a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80834aa:	4604      	mov	r4, r0
 80834ac:	4608      	mov	r0, r1
 80834ae:	2100      	movs	r1, #0
 80834b0:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80834b4:	4b04      	ldr	r3, [pc, #16]	; (80834c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80834b6:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80834b8:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80834ba:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80834bc:	4611      	mov	r1, r2
  _blocking = true;
 80834be:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80834c0:	f7fe fcc6 	bl	8081e50 <HAL_USB_USART_Init>
}
 80834c4:	4620      	mov	r0, r4
 80834c6:	bd10      	pop	{r4, pc}
 80834c8:	08085124 	.word	0x08085124

080834cc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80834cc:	b510      	push	{r4, lr}
 80834ce:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80834d0:	2214      	movs	r2, #20
 80834d2:	2100      	movs	r1, #0
 80834d4:	f001 fa1c 	bl	8084910 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80834d8:	4b05      	ldr	r3, [pc, #20]	; (80834f0 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80834da:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80834dc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80834de:	4b05      	ldr	r3, [pc, #20]	; (80834f4 <_Z19acquireSerialBufferv+0x28>)
 80834e0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80834e2:	f240 1301 	movw	r3, #257	; 0x101
 80834e6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80834e8:	2381      	movs	r3, #129	; 0x81
 80834ea:	8223      	strh	r3, [r4, #16]
}
 80834ec:	bd10      	pop	{r4, pc}
 80834ee:	bf00      	nop
 80834f0:	200004b8 	.word	0x200004b8
 80834f4:	200005b9 	.word	0x200005b9

080834f8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80834f8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80834fa:	4d0f      	ldr	r5, [pc, #60]	; (8083538 <_Z16_fetch_usbserialv+0x40>)
{
 80834fc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80834fe:	a801      	add	r0, sp, #4
 8083500:	f7ff ffe4 	bl	80834cc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8083504:	7829      	ldrb	r1, [r5, #0]
 8083506:	f3bf 8f5b 	dmb	ish
 808350a:	f011 0401 	ands.w	r4, r1, #1
 808350e:	d110      	bne.n	8083532 <_Z16_fetch_usbserialv+0x3a>
 8083510:	4628      	mov	r0, r5
 8083512:	f7fc fddb 	bl	80800cc <__cxa_guard_acquire>
 8083516:	b160      	cbz	r0, 8083532 <_Z16_fetch_usbserialv+0x3a>
 8083518:	4621      	mov	r1, r4
 808351a:	aa01      	add	r2, sp, #4
 808351c:	4807      	ldr	r0, [pc, #28]	; (808353c <_Z16_fetch_usbserialv+0x44>)
 808351e:	f7ff ffc1 	bl	80834a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8083522:	4628      	mov	r0, r5
 8083524:	f7fc fdd7 	bl	80800d6 <__cxa_guard_release>
 8083528:	4a05      	ldr	r2, [pc, #20]	; (8083540 <_Z16_fetch_usbserialv+0x48>)
 808352a:	4906      	ldr	r1, [pc, #24]	; (8083544 <_Z16_fetch_usbserialv+0x4c>)
 808352c:	4803      	ldr	r0, [pc, #12]	; (808353c <_Z16_fetch_usbserialv+0x44>)
 808352e:	f000 fa13 	bl	8083958 <__aeabi_atexit>
	return _usbserial;
}
 8083532:	4802      	ldr	r0, [pc, #8]	; (808353c <_Z16_fetch_usbserialv+0x44>)
 8083534:	b007      	add	sp, #28
 8083536:	bd30      	pop	{r4, r5, pc}
 8083538:	20000488 	.word	0x20000488
 808353c:	20000490 	.word	0x20000490
 8083540:	20000100 	.word	0x20000100
 8083544:	08083431 	.word	0x08083431

08083548 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8083548:	b510      	push	{r4, lr}
 808354a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808354c:	2214      	movs	r2, #20
 808354e:	2100      	movs	r1, #0
 8083550:	f001 f9de 	bl	8084910 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8083554:	4b05      	ldr	r3, [pc, #20]	; (808356c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8083556:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 8083558:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 808355a:	4b05      	ldr	r3, [pc, #20]	; (8083570 <_Z23acquireUSBSerial1Bufferv+0x28>)
 808355c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808355e:	f240 1301 	movw	r3, #257	; 0x101
 8083562:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8083564:	2381      	movs	r3, #129	; 0x81
 8083566:	8223      	strh	r3, [r4, #16]
}
 8083568:	bd10      	pop	{r4, pc}
 808356a:	bf00      	nop
 808356c:	2000063a 	.word	0x2000063a
 8083570:	2000073b 	.word	0x2000073b

08083574 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8083574:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8083576:	4c0f      	ldr	r4, [pc, #60]	; (80835b4 <_Z17_fetch_usbserial1v+0x40>)
{
 8083578:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 808357a:	a801      	add	r0, sp, #4
 808357c:	f7ff ffe4 	bl	8083548 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8083580:	7823      	ldrb	r3, [r4, #0]
 8083582:	f3bf 8f5b 	dmb	ish
 8083586:	07db      	lsls	r3, r3, #31
 8083588:	d410      	bmi.n	80835ac <_Z17_fetch_usbserial1v+0x38>
 808358a:	4620      	mov	r0, r4
 808358c:	f7fc fd9e 	bl	80800cc <__cxa_guard_acquire>
 8083590:	b160      	cbz	r0, 80835ac <_Z17_fetch_usbserial1v+0x38>
 8083592:	2101      	movs	r1, #1
 8083594:	aa01      	add	r2, sp, #4
 8083596:	4808      	ldr	r0, [pc, #32]	; (80835b8 <_Z17_fetch_usbserial1v+0x44>)
 8083598:	f7ff ff84 	bl	80834a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808359c:	4620      	mov	r0, r4
 808359e:	f7fc fd9a 	bl	80800d6 <__cxa_guard_release>
 80835a2:	4a06      	ldr	r2, [pc, #24]	; (80835bc <_Z17_fetch_usbserial1v+0x48>)
 80835a4:	4906      	ldr	r1, [pc, #24]	; (80835c0 <_Z17_fetch_usbserial1v+0x4c>)
 80835a6:	4804      	ldr	r0, [pc, #16]	; (80835b8 <_Z17_fetch_usbserial1v+0x44>)
 80835a8:	f000 f9d6 	bl	8083958 <__aeabi_atexit>
  return _usbserial1;
}
 80835ac:	4802      	ldr	r0, [pc, #8]	; (80835b8 <_Z17_fetch_usbserial1v+0x44>)
 80835ae:	b006      	add	sp, #24
 80835b0:	bd10      	pop	{r4, pc}
 80835b2:	bf00      	nop
 80835b4:	2000048c 	.word	0x2000048c
 80835b8:	200004a4 	.word	0x200004a4
 80835bc:	20000100 	.word	0x20000100
 80835c0:	08083431 	.word	0x08083431

080835c4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80835c4:	4b01      	ldr	r3, [pc, #4]	; (80835cc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80835c6:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80835c8:	4770      	bx	lr
 80835ca:	bf00      	nop
 80835cc:	20000098 	.word	0x20000098

080835d0 <serialEventRun>:
{
 80835d0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80835d2:	4b17      	ldr	r3, [pc, #92]	; (8083630 <serialEventRun+0x60>)
 80835d4:	b143      	cbz	r3, 80835e8 <serialEventRun+0x18>
 80835d6:	f7ff ff8f 	bl	80834f8 <_Z16_fetch_usbserialv>
 80835da:	6803      	ldr	r3, [r0, #0]
 80835dc:	691b      	ldr	r3, [r3, #16]
 80835de:	4798      	blx	r3
 80835e0:	2800      	cmp	r0, #0
 80835e2:	dd01      	ble.n	80835e8 <serialEventRun+0x18>
        serialEvent();
 80835e4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80835e8:	4b12      	ldr	r3, [pc, #72]	; (8083634 <serialEventRun+0x64>)
 80835ea:	b143      	cbz	r3, 80835fe <serialEventRun+0x2e>
 80835ec:	f7ff fef6 	bl	80833dc <_Z22__fetch_global_Serial1v>
 80835f0:	6803      	ldr	r3, [r0, #0]
 80835f2:	691b      	ldr	r3, [r3, #16]
 80835f4:	4798      	blx	r3
 80835f6:	2800      	cmp	r0, #0
 80835f8:	dd01      	ble.n	80835fe <serialEventRun+0x2e>
        serialEvent1();
 80835fa:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80835fe:	4b0e      	ldr	r3, [pc, #56]	; (8083638 <serialEventRun+0x68>)
 8083600:	b10b      	cbz	r3, 8083606 <serialEventRun+0x36>
 8083602:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 8083606:	4b0d      	ldr	r3, [pc, #52]	; (808363c <serialEventRun+0x6c>)
 8083608:	b10b      	cbz	r3, 808360e <serialEventRun+0x3e>
 808360a:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 808360e:	4b0c      	ldr	r3, [pc, #48]	; (8083640 <serialEventRun+0x70>)
 8083610:	b10b      	cbz	r3, 8083616 <serialEventRun+0x46>
 8083612:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8083616:	4b0b      	ldr	r3, [pc, #44]	; (8083644 <serialEventRun+0x74>)
 8083618:	b143      	cbz	r3, 808362c <serialEventRun+0x5c>
 808361a:	f7ff ffab 	bl	8083574 <_Z17_fetch_usbserial1v>
 808361e:	6803      	ldr	r3, [r0, #0]
 8083620:	691b      	ldr	r3, [r3, #16]
 8083622:	4798      	blx	r3
 8083624:	2800      	cmp	r0, #0
 8083626:	dd01      	ble.n	808362c <serialEventRun+0x5c>
        usbSerialEvent1();
 8083628:	f3af 8000 	nop.w
}
 808362c:	bd08      	pop	{r3, pc}
 808362e:	bf00      	nop
	...

08083648 <_post_loop>:
{
 8083648:	b508      	push	{r3, lr}
	serialEventRun();
 808364a:	f7ff ffc1 	bl	80835d0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808364e:	f7fe fae7 	bl	8081c20 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8083652:	4b01      	ldr	r3, [pc, #4]	; (8083658 <_post_loop+0x10>)
 8083654:	6018      	str	r0, [r3, #0]
}
 8083656:	bd08      	pop	{r3, pc}
 8083658:	200007d4 	.word	0x200007d4

0808365c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 808365c:	4802      	ldr	r0, [pc, #8]	; (8083668 <_Z33system_initialize_user_backup_ramv+0xc>)
 808365e:	4a03      	ldr	r2, [pc, #12]	; (808366c <_Z33system_initialize_user_backup_ramv+0x10>)
 8083660:	4903      	ldr	r1, [pc, #12]	; (8083670 <_Z33system_initialize_user_backup_ramv+0x14>)
 8083662:	1a12      	subs	r2, r2, r0
 8083664:	f001 b92c 	b.w	80848c0 <memcpy>
 8083668:	40024000 	.word	0x40024000
 808366c:	40024804 	.word	0x40024804
 8083670:	080852d0 	.word	0x080852d0

08083674 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8083674:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8083676:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8083678:	461a      	mov	r2, r3
 808367a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808367e:	9300      	str	r3, [sp, #0]
 8083680:	f7fe fc70 	bl	8081f64 <system_ctrl_set_result>
}
 8083684:	b003      	add	sp, #12
 8083686:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808368c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 808368c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 808368e:	8843      	ldrh	r3, [r0, #2]
 8083690:	2b0a      	cmp	r3, #10
 8083692:	d008      	beq.n	80836a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8083694:	2b50      	cmp	r3, #80	; 0x50
 8083696:	d10b      	bne.n	80836b0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 8083698:	4b09      	ldr	r3, [pc, #36]	; (80836c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 808369a:	681b      	ldr	r3, [r3, #0]
 808369c:	b14b      	cbz	r3, 80836b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 808369e:	b003      	add	sp, #12
 80836a0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80836a4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80836a6:	f7ff ffe5 	bl	8083674 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80836aa:	b003      	add	sp, #12
 80836ac:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80836b0:	2300      	movs	r3, #0
 80836b2:	461a      	mov	r2, r3
 80836b4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80836b8:	9300      	str	r3, [sp, #0]
 80836ba:	f7fe fc53 	bl	8081f64 <system_ctrl_set_result>
}
 80836be:	e7f4      	b.n	80836aa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80836c0:	200007c0 	.word	0x200007c0

080836c4 <module_user_init_hook>:
{
 80836c4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80836c6:	4c12      	ldr	r4, [pc, #72]	; (8083710 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80836c8:	2100      	movs	r1, #0
 80836ca:	4812      	ldr	r0, [pc, #72]	; (8083714 <module_user_init_hook+0x50>)
 80836cc:	f7fe fd56 	bl	808217c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80836d0:	4d11      	ldr	r5, [pc, #68]	; (8083718 <module_user_init_hook+0x54>)
 80836d2:	6823      	ldr	r3, [r4, #0]
 80836d4:	42ab      	cmp	r3, r5
 80836d6:	bf0c      	ite	eq
 80836d8:	2201      	moveq	r2, #1
 80836da:	2200      	movne	r2, #0
 80836dc:	4b0f      	ldr	r3, [pc, #60]	; (808371c <module_user_init_hook+0x58>)
 80836de:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80836e0:	d002      	beq.n	80836e8 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80836e2:	f7ff ffbb 	bl	808365c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80836e6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80836e8:	f7fe fa82 	bl	8081bf0 <HAL_RNG_GetRandomNumber>
 80836ec:	4604      	mov	r4, r0
    srand(seed);
 80836ee:	f001 f917 	bl	8084920 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80836f2:	4b0b      	ldr	r3, [pc, #44]	; (8083720 <module_user_init_hook+0x5c>)
 80836f4:	b113      	cbz	r3, 80836fc <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80836f6:	4620      	mov	r0, r4
 80836f8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80836fc:	2100      	movs	r1, #0
 80836fe:	4808      	ldr	r0, [pc, #32]	; (8083720 <module_user_init_hook+0x5c>)
 8083700:	f7fe fc94 	bl	808202c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8083704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8083708:	2100      	movs	r1, #0
 808370a:	4806      	ldr	r0, [pc, #24]	; (8083724 <module_user_init_hook+0x60>)
 808370c:	f7fe bc20 	b.w	8081f50 <system_ctrl_set_app_request_handler>
 8083710:	40024800 	.word	0x40024800
 8083714:	080835c5 	.word	0x080835c5
 8083718:	9a271c1e 	.word	0x9a271c1e
 808371c:	200007bc 	.word	0x200007bc
 8083720:	00000000 	.word	0x00000000
 8083724:	0808368d 	.word	0x0808368d

08083728 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
 8083728:	b508      	push	{r3, lr}
 808372a:	4b02      	ldr	r3, [pc, #8]	; (8083734 <spark_protocol_instance+0xc>)
 808372c:	681b      	ldr	r3, [r3, #0]
 808372e:	681b      	ldr	r3, [r3, #0]
 8083730:	9301      	str	r3, [sp, #4]
 8083732:	bd08      	pop	{r3, pc}
 8083734:	0802019c 	.word	0x0802019c

08083738 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
 8083738:	b508      	push	{r3, lr}
 808373a:	4b02      	ldr	r3, [pc, #8]	; (8083744 <spark_protocol_set_product_id+0xc>)
 808373c:	681b      	ldr	r3, [r3, #0]
 808373e:	685b      	ldr	r3, [r3, #4]
 8083740:	9301      	str	r3, [sp, #4]
 8083742:	bd08      	pop	{r3, pc}
 8083744:	0802019c 	.word	0x0802019c

08083748 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
 8083748:	b508      	push	{r3, lr}
 808374a:	4b02      	ldr	r3, [pc, #8]	; (8083754 <spark_protocol_set_product_firmware_version+0xc>)
 808374c:	681b      	ldr	r3, [r3, #0]
 808374e:	689b      	ldr	r3, [r3, #8]
 8083750:	9301      	str	r3, [sp, #4]
 8083752:	bd08      	pop	{r3, pc}
 8083754:	0802019c 	.word	0x0802019c

08083758 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 8083758:	b510      	push	{r4, lr}
 808375a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 808375c:	6880      	ldr	r0, [r0, #8]
 808375e:	b108      	cbz	r0, 8083764 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 8083760:	f7fe fa26 	bl	8081bb0 <os_mutex_recursive_destroy>
 8083764:	4620      	mov	r0, r4
 8083766:	bd10      	pop	{r4, pc}

08083768 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 8083768:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 808376a:	b570      	push	{r4, r5, r6, lr}
 808376c:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 808376e:	d901      	bls.n	8083774 <pinAvailable+0xc>
    return false;
 8083770:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 8083772:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8083774:	f1a0 030d 	sub.w	r3, r0, #13
 8083778:	2b02      	cmp	r3, #2
 808377a:	d90b      	bls.n	8083794 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 808377c:	2801      	cmp	r0, #1
 808377e:	d826      	bhi.n	80837ce <pinAvailable+0x66>
 8083780:	f000 f8aa 	bl	80838d8 <_Z19__fetch_global_Wirev>
 8083784:	2100      	movs	r1, #0
 8083786:	7c00      	ldrb	r0, [r0, #16]
 8083788:	f7fe faea 	bl	8081d60 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 808378c:	f080 0001 	eor.w	r0, r0, #1
 8083790:	b2c0      	uxtb	r0, r0
 8083792:	e7ee      	b.n	8083772 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 8083794:	4e13      	ldr	r6, [pc, #76]	; (80837e4 <pinAvailable+0x7c>)
 8083796:	7831      	ldrb	r1, [r6, #0]
 8083798:	f3bf 8f5b 	dmb	ish
 808379c:	f011 0501 	ands.w	r5, r1, #1
 80837a0:	d10f      	bne.n	80837c2 <pinAvailable+0x5a>
 80837a2:	4630      	mov	r0, r6
 80837a4:	f7fc fc92 	bl	80800cc <__cxa_guard_acquire>
 80837a8:	b158      	cbz	r0, 80837c2 <pinAvailable+0x5a>
 80837aa:	4629      	mov	r1, r5
 80837ac:	480e      	ldr	r0, [pc, #56]	; (80837e8 <pinAvailable+0x80>)
 80837ae:	f7ff fb33 	bl	8082e18 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80837b2:	4630      	mov	r0, r6
 80837b4:	f7fc fc8f 	bl	80800d6 <__cxa_guard_release>
 80837b8:	4a0c      	ldr	r2, [pc, #48]	; (80837ec <pinAvailable+0x84>)
 80837ba:	490d      	ldr	r1, [pc, #52]	; (80837f0 <pinAvailable+0x88>)
 80837bc:	480a      	ldr	r0, [pc, #40]	; (80837e8 <pinAvailable+0x80>)
 80837be:	f000 f8cb 	bl	8083958 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80837c2:	4b09      	ldr	r3, [pc, #36]	; (80837e8 <pinAvailable+0x80>)
 80837c4:	7818      	ldrb	r0, [r3, #0]
 80837c6:	f7fe fafb 	bl	8081dc0 <hal_spi_is_enabled>
 80837ca:	2800      	cmp	r0, #0
 80837cc:	d1d0      	bne.n	8083770 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80837ce:	3c12      	subs	r4, #18
 80837d0:	2c01      	cmp	r4, #1
 80837d2:	d805      	bhi.n	80837e0 <pinAvailable+0x78>
 80837d4:	f7ff fe02 	bl	80833dc <_Z22__fetch_global_Serial1v>
 80837d8:	7c00      	ldrb	r0, [r0, #16]
 80837da:	f7fe fb29 	bl	8081e30 <hal_usart_is_enabled>
 80837de:	e7d5      	b.n	808378c <pinAvailable+0x24>
  return true; // 'pin' is available
 80837e0:	2001      	movs	r0, #1
 80837e2:	e7c6      	b.n	8083772 <pinAvailable+0xa>
 80837e4:	200007c4 	.word	0x200007c4
 80837e8:	200007c8 	.word	0x200007c8
 80837ec:	20000100 	.word	0x20000100
 80837f0:	08083759 	.word	0x08083759

080837f4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80837f4:	282e      	cmp	r0, #46	; 0x2e
{
 80837f6:	b538      	push	{r3, r4, r5, lr}
 80837f8:	4604      	mov	r4, r0
 80837fa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80837fc:	d80a      	bhi.n	8083814 <pinMode+0x20>
 80837fe:	29ff      	cmp	r1, #255	; 0xff
 8083800:	d008      	beq.n	8083814 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 8083802:	f7ff ffb1 	bl	8083768 <pinAvailable>
 8083806:	b128      	cbz	r0, 8083814 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 8083808:	4629      	mov	r1, r5
 808380a:	4620      	mov	r0, r4
}
 808380c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 8083810:	f7fe ba2e 	b.w	8081c70 <HAL_Pin_Mode>
}
 8083814:	bd38      	pop	{r3, r4, r5, pc}

08083816 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8083816:	b538      	push	{r3, r4, r5, lr}
 8083818:	4604      	mov	r4, r0
 808381a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808381c:	f7fe fa30 	bl	8081c80 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8083820:	28ff      	cmp	r0, #255	; 0xff
 8083822:	d010      	beq.n	8083846 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 8083824:	2806      	cmp	r0, #6
 8083826:	d804      	bhi.n	8083832 <digitalWrite+0x1c>
 8083828:	234d      	movs	r3, #77	; 0x4d
 808382a:	fa23 f000 	lsr.w	r0, r3, r0
 808382e:	07c3      	lsls	r3, r0, #31
 8083830:	d409      	bmi.n	8083846 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8083832:	4620      	mov	r0, r4
 8083834:	f7ff ff98 	bl	8083768 <pinAvailable>
 8083838:	b128      	cbz	r0, 8083846 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 808383a:	4629      	mov	r1, r5
 808383c:	4620      	mov	r0, r4
}
 808383e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 8083842:	f7fe ba25 	b.w	8081c90 <HAL_GPIO_Write>
}
 8083846:	bd38      	pop	{r3, r4, r5, pc}

08083848 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 8083848:	b510      	push	{r4, lr}
 808384a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808384c:	f7fe fa18 	bl	8081c80 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 8083850:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 8083852:	b2db      	uxtb	r3, r3
 8083854:	2b01      	cmp	r3, #1
 8083856:	d908      	bls.n	808386a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 8083858:	4620      	mov	r0, r4
 808385a:	f7ff ff85 	bl	8083768 <pinAvailable>
 808385e:	b120      	cbz	r0, 808386a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8083860:	4620      	mov	r0, r4
}
 8083862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 8083866:	f7fe ba1b 	b.w	8081ca0 <HAL_GPIO_Read>
}
 808386a:	2000      	movs	r0, #0
 808386c:	bd10      	pop	{r4, pc}

0808386e <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 808386e:	b510      	push	{r4, lr}
 8083870:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 8083872:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 8083874:	bf9c      	itt	ls
 8083876:	340a      	addls	r4, #10
 8083878:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808387a:	4620      	mov	r0, r4
 808387c:	f7ff ff74 	bl	8083768 <pinAvailable>
 8083880:	b150      	cbz	r0, 8083898 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8083882:	2103      	movs	r1, #3
 8083884:	4620      	mov	r0, r4
 8083886:	f7fe f9eb 	bl	8081c60 <HAL_Validate_Pin_Function>
 808388a:	2803      	cmp	r0, #3
 808388c:	d104      	bne.n	8083898 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 808388e:	4620      	mov	r0, r4
}
 8083890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 8083894:	f7fe ba1c 	b.w	8081cd0 <hal_adc_read>
}
 8083898:	2000      	movs	r0, #0
 808389a:	bd10      	pop	{r4, pc}

0808389c <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 808389c:	2300      	movs	r3, #0
hal_i2c_config_t defaultWireConfig() {
 808389e:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80838a0:	2520      	movs	r5, #32
 80838a2:	8043      	strh	r3, [r0, #2]
 80838a4:	2314      	movs	r3, #20
		.size = sizeof(hal_i2c_config_t),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80838a6:	4e08      	ldr	r6, [pc, #32]	; (80838c8 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x2c>)
hal_i2c_config_t defaultWireConfig() {
 80838a8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80838aa:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80838ac:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80838ae:	6085      	str	r5, [r0, #8]
 80838b0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80838b2:	4628      	mov	r0, r5
 80838b4:	f000 f859 	bl	808396a <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80838b8:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80838ba:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80838bc:	4628      	mov	r0, r5
 80838be:	f000 f854 	bl	808396a <_ZnajRKSt9nothrow_t>
	};
 80838c2:	60e0      	str	r0, [r4, #12]

	return config;
}
 80838c4:	4620      	mov	r0, r4
 80838c6:	bd70      	pop	{r4, r5, r6, pc}
 80838c8:	0808514c 	.word	0x0808514c

080838cc <_Z17acquireWireBufferv>:

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80838cc:	b510      	push	{r4, lr}
 80838ce:	4604      	mov	r4, r0
	return defaultWireConfig();
 80838d0:	f7ff ffe4 	bl	808389c <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 80838d4:	4620      	mov	r0, r4
 80838d6:	bd10      	pop	{r4, pc}

080838d8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80838d8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80838da:	4d0f      	ldr	r5, [pc, #60]	; (8083918 <_Z19__fetch_global_Wirev+0x40>)
{
 80838dc:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80838de:	7829      	ldrb	r1, [r5, #0]
 80838e0:	f3bf 8f5b 	dmb	ish
 80838e4:	f011 0401 	ands.w	r4, r1, #1
 80838e8:	d113      	bne.n	8083912 <_Z19__fetch_global_Wirev+0x3a>
 80838ea:	4628      	mov	r0, r5
 80838ec:	f7fc fbee 	bl	80800cc <__cxa_guard_acquire>
 80838f0:	b178      	cbz	r0, 8083912 <_Z19__fetch_global_Wirev+0x3a>
 80838f2:	a801      	add	r0, sp, #4
 80838f4:	f7ff ffea 	bl	80838cc <_Z17acquireWireBufferv>
 80838f8:	4621      	mov	r1, r4
 80838fa:	aa01      	add	r2, sp, #4
 80838fc:	4807      	ldr	r0, [pc, #28]	; (808391c <_Z19__fetch_global_Wirev+0x44>)
 80838fe:	f7ff f8cb 	bl	8082a98 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 8083902:	4628      	mov	r0, r5
 8083904:	f7fc fbe7 	bl	80800d6 <__cxa_guard_release>
 8083908:	4a05      	ldr	r2, [pc, #20]	; (8083920 <_Z19__fetch_global_Wirev+0x48>)
 808390a:	4906      	ldr	r1, [pc, #24]	; (8083924 <_Z19__fetch_global_Wirev+0x4c>)
 808390c:	4803      	ldr	r0, [pc, #12]	; (808391c <_Z19__fetch_global_Wirev+0x44>)
 808390e:	f000 f823 	bl	8083958 <__aeabi_atexit>
	return wire;
}
 8083912:	4802      	ldr	r0, [pc, #8]	; (808391c <_Z19__fetch_global_Wirev+0x44>)
 8083914:	b007      	add	sp, #28
 8083916:	bd30      	pop	{r4, r5, pc}
 8083918:	200007d8 	.word	0x200007d8
 808391c:	200007dc 	.word	0x200007dc
 8083920:	20000100 	.word	0x20000100
 8083924:	08082a41 	.word	0x08082a41

08083928 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8083928:	2300      	movs	r3, #0
 808392a:	b513      	push	{r0, r1, r4, lr}
 808392c:	4c07      	ldr	r4, [pc, #28]	; (808394c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 808392e:	461a      	mov	r2, r3
 8083930:	4619      	mov	r1, r3
 8083932:	4620      	mov	r0, r4
 8083934:	9300      	str	r3, [sp, #0]
 8083936:	f7ff f997 	bl	8082c68 <_ZN9IPAddressC1Ehhhh>
 808393a:	4620      	mov	r0, r4
 808393c:	4a04      	ldr	r2, [pc, #16]	; (8083950 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 808393e:	4905      	ldr	r1, [pc, #20]	; (8083954 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8083940:	b002      	add	sp, #8
 8083942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8083946:	f000 b807 	b.w	8083958 <__aeabi_atexit>
 808394a:	bf00      	nop
 808394c:	200007f0 	.word	0x200007f0
 8083950:	20000100 	.word	0x20000100
 8083954:	08082be1 	.word	0x08082be1

08083958 <__aeabi_atexit>:
 8083958:	460b      	mov	r3, r1
 808395a:	4601      	mov	r1, r0
 808395c:	4618      	mov	r0, r3
 808395e:	f000 bfa1 	b.w	80848a4 <__cxa_atexit>

08083962 <_ZdlPvj>:
 8083962:	f7fc bba6 	b.w	80800b2 <_ZdlPv>

08083966 <_ZnwjRKSt9nothrow_t>:
 8083966:	f7fc bba0 	b.w	80800aa <_Znwj>

0808396a <_ZnajRKSt9nothrow_t>:
 808396a:	f7fc bba0 	b.w	80800ae <_Znaj>

0808396e <_ZSt25__throw_bad_function_callv>:
 808396e:	b508      	push	{r3, lr}
 8083970:	f7fe fbf4 	bl	808215c <abort>

08083974 <__aeabi_drsub>:
 8083974:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8083978:	e002      	b.n	8083980 <__adddf3>
 808397a:	bf00      	nop

0808397c <__aeabi_dsub>:
 808397c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08083980 <__adddf3>:
 8083980:	b530      	push	{r4, r5, lr}
 8083982:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8083986:	ea4f 0543 	mov.w	r5, r3, lsl #1
 808398a:	ea94 0f05 	teq	r4, r5
 808398e:	bf08      	it	eq
 8083990:	ea90 0f02 	teqeq	r0, r2
 8083994:	bf1f      	itttt	ne
 8083996:	ea54 0c00 	orrsne.w	ip, r4, r0
 808399a:	ea55 0c02 	orrsne.w	ip, r5, r2
 808399e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80839a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80839a6:	f000 80e2 	beq.w	8083b6e <__adddf3+0x1ee>
 80839aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80839ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80839b2:	bfb8      	it	lt
 80839b4:	426d      	neglt	r5, r5
 80839b6:	dd0c      	ble.n	80839d2 <__adddf3+0x52>
 80839b8:	442c      	add	r4, r5
 80839ba:	ea80 0202 	eor.w	r2, r0, r2
 80839be:	ea81 0303 	eor.w	r3, r1, r3
 80839c2:	ea82 0000 	eor.w	r0, r2, r0
 80839c6:	ea83 0101 	eor.w	r1, r3, r1
 80839ca:	ea80 0202 	eor.w	r2, r0, r2
 80839ce:	ea81 0303 	eor.w	r3, r1, r3
 80839d2:	2d36      	cmp	r5, #54	; 0x36
 80839d4:	bf88      	it	hi
 80839d6:	bd30      	pophi	{r4, r5, pc}
 80839d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80839dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80839e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80839e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80839e8:	d002      	beq.n	80839f0 <__adddf3+0x70>
 80839ea:	4240      	negs	r0, r0
 80839ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80839f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80839f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80839f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80839fc:	d002      	beq.n	8083a04 <__adddf3+0x84>
 80839fe:	4252      	negs	r2, r2
 8083a00:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8083a04:	ea94 0f05 	teq	r4, r5
 8083a08:	f000 80a7 	beq.w	8083b5a <__adddf3+0x1da>
 8083a0c:	f1a4 0401 	sub.w	r4, r4, #1
 8083a10:	f1d5 0e20 	rsbs	lr, r5, #32
 8083a14:	db0d      	blt.n	8083a32 <__adddf3+0xb2>
 8083a16:	fa02 fc0e 	lsl.w	ip, r2, lr
 8083a1a:	fa22 f205 	lsr.w	r2, r2, r5
 8083a1e:	1880      	adds	r0, r0, r2
 8083a20:	f141 0100 	adc.w	r1, r1, #0
 8083a24:	fa03 f20e 	lsl.w	r2, r3, lr
 8083a28:	1880      	adds	r0, r0, r2
 8083a2a:	fa43 f305 	asr.w	r3, r3, r5
 8083a2e:	4159      	adcs	r1, r3
 8083a30:	e00e      	b.n	8083a50 <__adddf3+0xd0>
 8083a32:	f1a5 0520 	sub.w	r5, r5, #32
 8083a36:	f10e 0e20 	add.w	lr, lr, #32
 8083a3a:	2a01      	cmp	r2, #1
 8083a3c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8083a40:	bf28      	it	cs
 8083a42:	f04c 0c02 	orrcs.w	ip, ip, #2
 8083a46:	fa43 f305 	asr.w	r3, r3, r5
 8083a4a:	18c0      	adds	r0, r0, r3
 8083a4c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8083a50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083a54:	d507      	bpl.n	8083a66 <__adddf3+0xe6>
 8083a56:	f04f 0e00 	mov.w	lr, #0
 8083a5a:	f1dc 0c00 	rsbs	ip, ip, #0
 8083a5e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8083a62:	eb6e 0101 	sbc.w	r1, lr, r1
 8083a66:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8083a6a:	d31b      	bcc.n	8083aa4 <__adddf3+0x124>
 8083a6c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8083a70:	d30c      	bcc.n	8083a8c <__adddf3+0x10c>
 8083a72:	0849      	lsrs	r1, r1, #1
 8083a74:	ea5f 0030 	movs.w	r0, r0, rrx
 8083a78:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8083a7c:	f104 0401 	add.w	r4, r4, #1
 8083a80:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8083a84:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8083a88:	f080 809a 	bcs.w	8083bc0 <__adddf3+0x240>
 8083a8c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8083a90:	bf08      	it	eq
 8083a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8083a96:	f150 0000 	adcs.w	r0, r0, #0
 8083a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083a9e:	ea41 0105 	orr.w	r1, r1, r5
 8083aa2:	bd30      	pop	{r4, r5, pc}
 8083aa4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8083aa8:	4140      	adcs	r0, r0
 8083aaa:	eb41 0101 	adc.w	r1, r1, r1
 8083aae:	3c01      	subs	r4, #1
 8083ab0:	bf28      	it	cs
 8083ab2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8083ab6:	d2e9      	bcs.n	8083a8c <__adddf3+0x10c>
 8083ab8:	f091 0f00 	teq	r1, #0
 8083abc:	bf04      	itt	eq
 8083abe:	4601      	moveq	r1, r0
 8083ac0:	2000      	moveq	r0, #0
 8083ac2:	fab1 f381 	clz	r3, r1
 8083ac6:	bf08      	it	eq
 8083ac8:	3320      	addeq	r3, #32
 8083aca:	f1a3 030b 	sub.w	r3, r3, #11
 8083ace:	f1b3 0220 	subs.w	r2, r3, #32
 8083ad2:	da0c      	bge.n	8083aee <__adddf3+0x16e>
 8083ad4:	320c      	adds	r2, #12
 8083ad6:	dd08      	ble.n	8083aea <__adddf3+0x16a>
 8083ad8:	f102 0c14 	add.w	ip, r2, #20
 8083adc:	f1c2 020c 	rsb	r2, r2, #12
 8083ae0:	fa01 f00c 	lsl.w	r0, r1, ip
 8083ae4:	fa21 f102 	lsr.w	r1, r1, r2
 8083ae8:	e00c      	b.n	8083b04 <__adddf3+0x184>
 8083aea:	f102 0214 	add.w	r2, r2, #20
 8083aee:	bfd8      	it	le
 8083af0:	f1c2 0c20 	rsble	ip, r2, #32
 8083af4:	fa01 f102 	lsl.w	r1, r1, r2
 8083af8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8083afc:	bfdc      	itt	le
 8083afe:	ea41 010c 	orrle.w	r1, r1, ip
 8083b02:	4090      	lslle	r0, r2
 8083b04:	1ae4      	subs	r4, r4, r3
 8083b06:	bfa2      	ittt	ge
 8083b08:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8083b0c:	4329      	orrge	r1, r5
 8083b0e:	bd30      	popge	{r4, r5, pc}
 8083b10:	ea6f 0404 	mvn.w	r4, r4
 8083b14:	3c1f      	subs	r4, #31
 8083b16:	da1c      	bge.n	8083b52 <__adddf3+0x1d2>
 8083b18:	340c      	adds	r4, #12
 8083b1a:	dc0e      	bgt.n	8083b3a <__adddf3+0x1ba>
 8083b1c:	f104 0414 	add.w	r4, r4, #20
 8083b20:	f1c4 0220 	rsb	r2, r4, #32
 8083b24:	fa20 f004 	lsr.w	r0, r0, r4
 8083b28:	fa01 f302 	lsl.w	r3, r1, r2
 8083b2c:	ea40 0003 	orr.w	r0, r0, r3
 8083b30:	fa21 f304 	lsr.w	r3, r1, r4
 8083b34:	ea45 0103 	orr.w	r1, r5, r3
 8083b38:	bd30      	pop	{r4, r5, pc}
 8083b3a:	f1c4 040c 	rsb	r4, r4, #12
 8083b3e:	f1c4 0220 	rsb	r2, r4, #32
 8083b42:	fa20 f002 	lsr.w	r0, r0, r2
 8083b46:	fa01 f304 	lsl.w	r3, r1, r4
 8083b4a:	ea40 0003 	orr.w	r0, r0, r3
 8083b4e:	4629      	mov	r1, r5
 8083b50:	bd30      	pop	{r4, r5, pc}
 8083b52:	fa21 f004 	lsr.w	r0, r1, r4
 8083b56:	4629      	mov	r1, r5
 8083b58:	bd30      	pop	{r4, r5, pc}
 8083b5a:	f094 0f00 	teq	r4, #0
 8083b5e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8083b62:	bf06      	itte	eq
 8083b64:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8083b68:	3401      	addeq	r4, #1
 8083b6a:	3d01      	subne	r5, #1
 8083b6c:	e74e      	b.n	8083a0c <__adddf3+0x8c>
 8083b6e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8083b72:	bf18      	it	ne
 8083b74:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8083b78:	d029      	beq.n	8083bce <__adddf3+0x24e>
 8083b7a:	ea94 0f05 	teq	r4, r5
 8083b7e:	bf08      	it	eq
 8083b80:	ea90 0f02 	teqeq	r0, r2
 8083b84:	d005      	beq.n	8083b92 <__adddf3+0x212>
 8083b86:	ea54 0c00 	orrs.w	ip, r4, r0
 8083b8a:	bf04      	itt	eq
 8083b8c:	4619      	moveq	r1, r3
 8083b8e:	4610      	moveq	r0, r2
 8083b90:	bd30      	pop	{r4, r5, pc}
 8083b92:	ea91 0f03 	teq	r1, r3
 8083b96:	bf1e      	ittt	ne
 8083b98:	2100      	movne	r1, #0
 8083b9a:	2000      	movne	r0, #0
 8083b9c:	bd30      	popne	{r4, r5, pc}
 8083b9e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8083ba2:	d105      	bne.n	8083bb0 <__adddf3+0x230>
 8083ba4:	0040      	lsls	r0, r0, #1
 8083ba6:	4149      	adcs	r1, r1
 8083ba8:	bf28      	it	cs
 8083baa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8083bae:	bd30      	pop	{r4, r5, pc}
 8083bb0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8083bb4:	bf3c      	itt	cc
 8083bb6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8083bba:	bd30      	popcc	{r4, r5, pc}
 8083bbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083bc0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8083bc4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083bc8:	f04f 0000 	mov.w	r0, #0
 8083bcc:	bd30      	pop	{r4, r5, pc}
 8083bce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8083bd2:	bf1a      	itte	ne
 8083bd4:	4619      	movne	r1, r3
 8083bd6:	4610      	movne	r0, r2
 8083bd8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8083bdc:	bf1c      	itt	ne
 8083bde:	460b      	movne	r3, r1
 8083be0:	4602      	movne	r2, r0
 8083be2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083be6:	bf06      	itte	eq
 8083be8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8083bec:	ea91 0f03 	teqeq	r1, r3
 8083bf0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8083bf4:	bd30      	pop	{r4, r5, pc}
 8083bf6:	bf00      	nop

08083bf8 <__aeabi_ui2d>:
 8083bf8:	f090 0f00 	teq	r0, #0
 8083bfc:	bf04      	itt	eq
 8083bfe:	2100      	moveq	r1, #0
 8083c00:	4770      	bxeq	lr
 8083c02:	b530      	push	{r4, r5, lr}
 8083c04:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083c08:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083c0c:	f04f 0500 	mov.w	r5, #0
 8083c10:	f04f 0100 	mov.w	r1, #0
 8083c14:	e750      	b.n	8083ab8 <__adddf3+0x138>
 8083c16:	bf00      	nop

08083c18 <__aeabi_i2d>:
 8083c18:	f090 0f00 	teq	r0, #0
 8083c1c:	bf04      	itt	eq
 8083c1e:	2100      	moveq	r1, #0
 8083c20:	4770      	bxeq	lr
 8083c22:	b530      	push	{r4, r5, lr}
 8083c24:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083c28:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083c2c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8083c30:	bf48      	it	mi
 8083c32:	4240      	negmi	r0, r0
 8083c34:	f04f 0100 	mov.w	r1, #0
 8083c38:	e73e      	b.n	8083ab8 <__adddf3+0x138>
 8083c3a:	bf00      	nop

08083c3c <__aeabi_f2d>:
 8083c3c:	0042      	lsls	r2, r0, #1
 8083c3e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8083c42:	ea4f 0131 	mov.w	r1, r1, rrx
 8083c46:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8083c4a:	bf1f      	itttt	ne
 8083c4c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8083c50:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8083c54:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8083c58:	4770      	bxne	lr
 8083c5a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8083c5e:	bf08      	it	eq
 8083c60:	4770      	bxeq	lr
 8083c62:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8083c66:	bf04      	itt	eq
 8083c68:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8083c6c:	4770      	bxeq	lr
 8083c6e:	b530      	push	{r4, r5, lr}
 8083c70:	f44f 7460 	mov.w	r4, #896	; 0x380
 8083c74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083c78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083c7c:	e71c      	b.n	8083ab8 <__adddf3+0x138>
 8083c7e:	bf00      	nop

08083c80 <__aeabi_ul2d>:
 8083c80:	ea50 0201 	orrs.w	r2, r0, r1
 8083c84:	bf08      	it	eq
 8083c86:	4770      	bxeq	lr
 8083c88:	b530      	push	{r4, r5, lr}
 8083c8a:	f04f 0500 	mov.w	r5, #0
 8083c8e:	e00a      	b.n	8083ca6 <__aeabi_l2d+0x16>

08083c90 <__aeabi_l2d>:
 8083c90:	ea50 0201 	orrs.w	r2, r0, r1
 8083c94:	bf08      	it	eq
 8083c96:	4770      	bxeq	lr
 8083c98:	b530      	push	{r4, r5, lr}
 8083c9a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8083c9e:	d502      	bpl.n	8083ca6 <__aeabi_l2d+0x16>
 8083ca0:	4240      	negs	r0, r0
 8083ca2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083ca6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083caa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083cae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8083cb2:	f43f aed8 	beq.w	8083a66 <__adddf3+0xe6>
 8083cb6:	f04f 0203 	mov.w	r2, #3
 8083cba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8083cbe:	bf18      	it	ne
 8083cc0:	3203      	addne	r2, #3
 8083cc2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8083cc6:	bf18      	it	ne
 8083cc8:	3203      	addne	r2, #3
 8083cca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8083cce:	f1c2 0320 	rsb	r3, r2, #32
 8083cd2:	fa00 fc03 	lsl.w	ip, r0, r3
 8083cd6:	fa20 f002 	lsr.w	r0, r0, r2
 8083cda:	fa01 fe03 	lsl.w	lr, r1, r3
 8083cde:	ea40 000e 	orr.w	r0, r0, lr
 8083ce2:	fa21 f102 	lsr.w	r1, r1, r2
 8083ce6:	4414      	add	r4, r2
 8083ce8:	e6bd      	b.n	8083a66 <__adddf3+0xe6>
 8083cea:	bf00      	nop

08083cec <__aeabi_dmul>:
 8083cec:	b570      	push	{r4, r5, r6, lr}
 8083cee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083cf2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083cf6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8083cfa:	bf1d      	ittte	ne
 8083cfc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083d00:	ea94 0f0c 	teqne	r4, ip
 8083d04:	ea95 0f0c 	teqne	r5, ip
 8083d08:	f000 f8de 	bleq	8083ec8 <__aeabi_dmul+0x1dc>
 8083d0c:	442c      	add	r4, r5
 8083d0e:	ea81 0603 	eor.w	r6, r1, r3
 8083d12:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8083d16:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8083d1a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8083d1e:	bf18      	it	ne
 8083d20:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8083d24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083d28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8083d2c:	d038      	beq.n	8083da0 <__aeabi_dmul+0xb4>
 8083d2e:	fba0 ce02 	umull	ip, lr, r0, r2
 8083d32:	f04f 0500 	mov.w	r5, #0
 8083d36:	fbe1 e502 	umlal	lr, r5, r1, r2
 8083d3a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8083d3e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8083d42:	f04f 0600 	mov.w	r6, #0
 8083d46:	fbe1 5603 	umlal	r5, r6, r1, r3
 8083d4a:	f09c 0f00 	teq	ip, #0
 8083d4e:	bf18      	it	ne
 8083d50:	f04e 0e01 	orrne.w	lr, lr, #1
 8083d54:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8083d58:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8083d5c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8083d60:	d204      	bcs.n	8083d6c <__aeabi_dmul+0x80>
 8083d62:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8083d66:	416d      	adcs	r5, r5
 8083d68:	eb46 0606 	adc.w	r6, r6, r6
 8083d6c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8083d70:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8083d74:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8083d78:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8083d7c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8083d80:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083d84:	bf88      	it	hi
 8083d86:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083d8a:	d81e      	bhi.n	8083dca <__aeabi_dmul+0xde>
 8083d8c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8083d90:	bf08      	it	eq
 8083d92:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8083d96:	f150 0000 	adcs.w	r0, r0, #0
 8083d9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083d9e:	bd70      	pop	{r4, r5, r6, pc}
 8083da0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8083da4:	ea46 0101 	orr.w	r1, r6, r1
 8083da8:	ea40 0002 	orr.w	r0, r0, r2
 8083dac:	ea81 0103 	eor.w	r1, r1, r3
 8083db0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8083db4:	bfc2      	ittt	gt
 8083db6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8083dba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083dbe:	bd70      	popgt	{r4, r5, r6, pc}
 8083dc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083dc4:	f04f 0e00 	mov.w	lr, #0
 8083dc8:	3c01      	subs	r4, #1
 8083dca:	f300 80ab 	bgt.w	8083f24 <__aeabi_dmul+0x238>
 8083dce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8083dd2:	bfde      	ittt	le
 8083dd4:	2000      	movle	r0, #0
 8083dd6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8083dda:	bd70      	pople	{r4, r5, r6, pc}
 8083ddc:	f1c4 0400 	rsb	r4, r4, #0
 8083de0:	3c20      	subs	r4, #32
 8083de2:	da35      	bge.n	8083e50 <__aeabi_dmul+0x164>
 8083de4:	340c      	adds	r4, #12
 8083de6:	dc1b      	bgt.n	8083e20 <__aeabi_dmul+0x134>
 8083de8:	f104 0414 	add.w	r4, r4, #20
 8083dec:	f1c4 0520 	rsb	r5, r4, #32
 8083df0:	fa00 f305 	lsl.w	r3, r0, r5
 8083df4:	fa20 f004 	lsr.w	r0, r0, r4
 8083df8:	fa01 f205 	lsl.w	r2, r1, r5
 8083dfc:	ea40 0002 	orr.w	r0, r0, r2
 8083e00:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8083e04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083e08:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083e0c:	fa21 f604 	lsr.w	r6, r1, r4
 8083e10:	eb42 0106 	adc.w	r1, r2, r6
 8083e14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083e18:	bf08      	it	eq
 8083e1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083e1e:	bd70      	pop	{r4, r5, r6, pc}
 8083e20:	f1c4 040c 	rsb	r4, r4, #12
 8083e24:	f1c4 0520 	rsb	r5, r4, #32
 8083e28:	fa00 f304 	lsl.w	r3, r0, r4
 8083e2c:	fa20 f005 	lsr.w	r0, r0, r5
 8083e30:	fa01 f204 	lsl.w	r2, r1, r4
 8083e34:	ea40 0002 	orr.w	r0, r0, r2
 8083e38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083e3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083e40:	f141 0100 	adc.w	r1, r1, #0
 8083e44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083e48:	bf08      	it	eq
 8083e4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083e4e:	bd70      	pop	{r4, r5, r6, pc}
 8083e50:	f1c4 0520 	rsb	r5, r4, #32
 8083e54:	fa00 f205 	lsl.w	r2, r0, r5
 8083e58:	ea4e 0e02 	orr.w	lr, lr, r2
 8083e5c:	fa20 f304 	lsr.w	r3, r0, r4
 8083e60:	fa01 f205 	lsl.w	r2, r1, r5
 8083e64:	ea43 0302 	orr.w	r3, r3, r2
 8083e68:	fa21 f004 	lsr.w	r0, r1, r4
 8083e6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083e70:	fa21 f204 	lsr.w	r2, r1, r4
 8083e74:	ea20 0002 	bic.w	r0, r0, r2
 8083e78:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8083e7c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083e80:	bf08      	it	eq
 8083e82:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083e86:	bd70      	pop	{r4, r5, r6, pc}
 8083e88:	f094 0f00 	teq	r4, #0
 8083e8c:	d10f      	bne.n	8083eae <__aeabi_dmul+0x1c2>
 8083e8e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8083e92:	0040      	lsls	r0, r0, #1
 8083e94:	eb41 0101 	adc.w	r1, r1, r1
 8083e98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083e9c:	bf08      	it	eq
 8083e9e:	3c01      	subeq	r4, #1
 8083ea0:	d0f7      	beq.n	8083e92 <__aeabi_dmul+0x1a6>
 8083ea2:	ea41 0106 	orr.w	r1, r1, r6
 8083ea6:	f095 0f00 	teq	r5, #0
 8083eaa:	bf18      	it	ne
 8083eac:	4770      	bxne	lr
 8083eae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8083eb2:	0052      	lsls	r2, r2, #1
 8083eb4:	eb43 0303 	adc.w	r3, r3, r3
 8083eb8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8083ebc:	bf08      	it	eq
 8083ebe:	3d01      	subeq	r5, #1
 8083ec0:	d0f7      	beq.n	8083eb2 <__aeabi_dmul+0x1c6>
 8083ec2:	ea43 0306 	orr.w	r3, r3, r6
 8083ec6:	4770      	bx	lr
 8083ec8:	ea94 0f0c 	teq	r4, ip
 8083ecc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083ed0:	bf18      	it	ne
 8083ed2:	ea95 0f0c 	teqne	r5, ip
 8083ed6:	d00c      	beq.n	8083ef2 <__aeabi_dmul+0x206>
 8083ed8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083edc:	bf18      	it	ne
 8083ede:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083ee2:	d1d1      	bne.n	8083e88 <__aeabi_dmul+0x19c>
 8083ee4:	ea81 0103 	eor.w	r1, r1, r3
 8083ee8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083eec:	f04f 0000 	mov.w	r0, #0
 8083ef0:	bd70      	pop	{r4, r5, r6, pc}
 8083ef2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083ef6:	bf06      	itte	eq
 8083ef8:	4610      	moveq	r0, r2
 8083efa:	4619      	moveq	r1, r3
 8083efc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083f00:	d019      	beq.n	8083f36 <__aeabi_dmul+0x24a>
 8083f02:	ea94 0f0c 	teq	r4, ip
 8083f06:	d102      	bne.n	8083f0e <__aeabi_dmul+0x222>
 8083f08:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8083f0c:	d113      	bne.n	8083f36 <__aeabi_dmul+0x24a>
 8083f0e:	ea95 0f0c 	teq	r5, ip
 8083f12:	d105      	bne.n	8083f20 <__aeabi_dmul+0x234>
 8083f14:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8083f18:	bf1c      	itt	ne
 8083f1a:	4610      	movne	r0, r2
 8083f1c:	4619      	movne	r1, r3
 8083f1e:	d10a      	bne.n	8083f36 <__aeabi_dmul+0x24a>
 8083f20:	ea81 0103 	eor.w	r1, r1, r3
 8083f24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083f28:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083f2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083f30:	f04f 0000 	mov.w	r0, #0
 8083f34:	bd70      	pop	{r4, r5, r6, pc}
 8083f36:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083f3a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8083f3e:	bd70      	pop	{r4, r5, r6, pc}

08083f40 <__aeabi_ddiv>:
 8083f40:	b570      	push	{r4, r5, r6, lr}
 8083f42:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083f46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083f4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8083f4e:	bf1d      	ittte	ne
 8083f50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083f54:	ea94 0f0c 	teqne	r4, ip
 8083f58:	ea95 0f0c 	teqne	r5, ip
 8083f5c:	f000 f8a7 	bleq	80840ae <__aeabi_ddiv+0x16e>
 8083f60:	eba4 0405 	sub.w	r4, r4, r5
 8083f64:	ea81 0e03 	eor.w	lr, r1, r3
 8083f68:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083f6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083f70:	f000 8088 	beq.w	8084084 <__aeabi_ddiv+0x144>
 8083f74:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083f78:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8083f7c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8083f80:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8083f84:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8083f88:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8083f8c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8083f90:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8083f94:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8083f98:	429d      	cmp	r5, r3
 8083f9a:	bf08      	it	eq
 8083f9c:	4296      	cmpeq	r6, r2
 8083f9e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8083fa2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8083fa6:	d202      	bcs.n	8083fae <__aeabi_ddiv+0x6e>
 8083fa8:	085b      	lsrs	r3, r3, #1
 8083faa:	ea4f 0232 	mov.w	r2, r2, rrx
 8083fae:	1ab6      	subs	r6, r6, r2
 8083fb0:	eb65 0503 	sbc.w	r5, r5, r3
 8083fb4:	085b      	lsrs	r3, r3, #1
 8083fb6:	ea4f 0232 	mov.w	r2, r2, rrx
 8083fba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8083fbe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8083fc2:	ebb6 0e02 	subs.w	lr, r6, r2
 8083fc6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083fca:	bf22      	ittt	cs
 8083fcc:	1ab6      	subcs	r6, r6, r2
 8083fce:	4675      	movcs	r5, lr
 8083fd0:	ea40 000c 	orrcs.w	r0, r0, ip
 8083fd4:	085b      	lsrs	r3, r3, #1
 8083fd6:	ea4f 0232 	mov.w	r2, r2, rrx
 8083fda:	ebb6 0e02 	subs.w	lr, r6, r2
 8083fde:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083fe2:	bf22      	ittt	cs
 8083fe4:	1ab6      	subcs	r6, r6, r2
 8083fe6:	4675      	movcs	r5, lr
 8083fe8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8083fec:	085b      	lsrs	r3, r3, #1
 8083fee:	ea4f 0232 	mov.w	r2, r2, rrx
 8083ff2:	ebb6 0e02 	subs.w	lr, r6, r2
 8083ff6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083ffa:	bf22      	ittt	cs
 8083ffc:	1ab6      	subcs	r6, r6, r2
 8083ffe:	4675      	movcs	r5, lr
 8084000:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8084004:	085b      	lsrs	r3, r3, #1
 8084006:	ea4f 0232 	mov.w	r2, r2, rrx
 808400a:	ebb6 0e02 	subs.w	lr, r6, r2
 808400e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8084012:	bf22      	ittt	cs
 8084014:	1ab6      	subcs	r6, r6, r2
 8084016:	4675      	movcs	r5, lr
 8084018:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808401c:	ea55 0e06 	orrs.w	lr, r5, r6
 8084020:	d018      	beq.n	8084054 <__aeabi_ddiv+0x114>
 8084022:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8084026:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 808402a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808402e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8084032:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8084036:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 808403a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808403e:	d1c0      	bne.n	8083fc2 <__aeabi_ddiv+0x82>
 8084040:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8084044:	d10b      	bne.n	808405e <__aeabi_ddiv+0x11e>
 8084046:	ea41 0100 	orr.w	r1, r1, r0
 808404a:	f04f 0000 	mov.w	r0, #0
 808404e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8084052:	e7b6      	b.n	8083fc2 <__aeabi_ddiv+0x82>
 8084054:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8084058:	bf04      	itt	eq
 808405a:	4301      	orreq	r1, r0
 808405c:	2000      	moveq	r0, #0
 808405e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8084062:	bf88      	it	hi
 8084064:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8084068:	f63f aeaf 	bhi.w	8083dca <__aeabi_dmul+0xde>
 808406c:	ebb5 0c03 	subs.w	ip, r5, r3
 8084070:	bf04      	itt	eq
 8084072:	ebb6 0c02 	subseq.w	ip, r6, r2
 8084076:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808407a:	f150 0000 	adcs.w	r0, r0, #0
 808407e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8084082:	bd70      	pop	{r4, r5, r6, pc}
 8084084:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8084088:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 808408c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8084090:	bfc2      	ittt	gt
 8084092:	ebd4 050c 	rsbsgt	r5, r4, ip
 8084096:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808409a:	bd70      	popgt	{r4, r5, r6, pc}
 808409c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80840a0:	f04f 0e00 	mov.w	lr, #0
 80840a4:	3c01      	subs	r4, #1
 80840a6:	e690      	b.n	8083dca <__aeabi_dmul+0xde>
 80840a8:	ea45 0e06 	orr.w	lr, r5, r6
 80840ac:	e68d      	b.n	8083dca <__aeabi_dmul+0xde>
 80840ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80840b2:	ea94 0f0c 	teq	r4, ip
 80840b6:	bf08      	it	eq
 80840b8:	ea95 0f0c 	teqeq	r5, ip
 80840bc:	f43f af3b 	beq.w	8083f36 <__aeabi_dmul+0x24a>
 80840c0:	ea94 0f0c 	teq	r4, ip
 80840c4:	d10a      	bne.n	80840dc <__aeabi_ddiv+0x19c>
 80840c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80840ca:	f47f af34 	bne.w	8083f36 <__aeabi_dmul+0x24a>
 80840ce:	ea95 0f0c 	teq	r5, ip
 80840d2:	f47f af25 	bne.w	8083f20 <__aeabi_dmul+0x234>
 80840d6:	4610      	mov	r0, r2
 80840d8:	4619      	mov	r1, r3
 80840da:	e72c      	b.n	8083f36 <__aeabi_dmul+0x24a>
 80840dc:	ea95 0f0c 	teq	r5, ip
 80840e0:	d106      	bne.n	80840f0 <__aeabi_ddiv+0x1b0>
 80840e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80840e6:	f43f aefd 	beq.w	8083ee4 <__aeabi_dmul+0x1f8>
 80840ea:	4610      	mov	r0, r2
 80840ec:	4619      	mov	r1, r3
 80840ee:	e722      	b.n	8083f36 <__aeabi_dmul+0x24a>
 80840f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80840f4:	bf18      	it	ne
 80840f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80840fa:	f47f aec5 	bne.w	8083e88 <__aeabi_dmul+0x19c>
 80840fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8084102:	f47f af0d 	bne.w	8083f20 <__aeabi_dmul+0x234>
 8084106:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808410a:	f47f aeeb 	bne.w	8083ee4 <__aeabi_dmul+0x1f8>
 808410e:	e712      	b.n	8083f36 <__aeabi_dmul+0x24a>

08084110 <__aeabi_d2iz>:
 8084110:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8084114:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8084118:	d215      	bcs.n	8084146 <__aeabi_d2iz+0x36>
 808411a:	d511      	bpl.n	8084140 <__aeabi_d2iz+0x30>
 808411c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8084120:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8084124:	d912      	bls.n	808414c <__aeabi_d2iz+0x3c>
 8084126:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808412a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808412e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8084132:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8084136:	fa23 f002 	lsr.w	r0, r3, r2
 808413a:	bf18      	it	ne
 808413c:	4240      	negne	r0, r0
 808413e:	4770      	bx	lr
 8084140:	f04f 0000 	mov.w	r0, #0
 8084144:	4770      	bx	lr
 8084146:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808414a:	d105      	bne.n	8084158 <__aeabi_d2iz+0x48>
 808414c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8084150:	bf08      	it	eq
 8084152:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8084156:	4770      	bx	lr
 8084158:	f04f 0000 	mov.w	r0, #0
 808415c:	4770      	bx	lr
 808415e:	bf00      	nop

08084160 <__aeabi_d2uiz>:
 8084160:	004a      	lsls	r2, r1, #1
 8084162:	d211      	bcs.n	8084188 <__aeabi_d2uiz+0x28>
 8084164:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8084168:	d211      	bcs.n	808418e <__aeabi_d2uiz+0x2e>
 808416a:	d50d      	bpl.n	8084188 <__aeabi_d2uiz+0x28>
 808416c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8084170:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8084174:	d40e      	bmi.n	8084194 <__aeabi_d2uiz+0x34>
 8084176:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808417a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808417e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8084182:	fa23 f002 	lsr.w	r0, r3, r2
 8084186:	4770      	bx	lr
 8084188:	f04f 0000 	mov.w	r0, #0
 808418c:	4770      	bx	lr
 808418e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8084192:	d102      	bne.n	808419a <__aeabi_d2uiz+0x3a>
 8084194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8084198:	4770      	bx	lr
 808419a:	f04f 0000 	mov.w	r0, #0
 808419e:	4770      	bx	lr

080841a0 <__aeabi_d2f>:
 80841a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80841a4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80841a8:	bf24      	itt	cs
 80841aa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80841ae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80841b2:	d90d      	bls.n	80841d0 <__aeabi_d2f+0x30>
 80841b4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80841b8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80841bc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80841c0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80841c4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80841c8:	bf08      	it	eq
 80841ca:	f020 0001 	biceq.w	r0, r0, #1
 80841ce:	4770      	bx	lr
 80841d0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80841d4:	d121      	bne.n	808421a <__aeabi_d2f+0x7a>
 80841d6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80841da:	bfbc      	itt	lt
 80841dc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80841e0:	4770      	bxlt	lr
 80841e2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80841e6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80841ea:	f1c2 0218 	rsb	r2, r2, #24
 80841ee:	f1c2 0c20 	rsb	ip, r2, #32
 80841f2:	fa10 f30c 	lsls.w	r3, r0, ip
 80841f6:	fa20 f002 	lsr.w	r0, r0, r2
 80841fa:	bf18      	it	ne
 80841fc:	f040 0001 	orrne.w	r0, r0, #1
 8084200:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8084204:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8084208:	fa03 fc0c 	lsl.w	ip, r3, ip
 808420c:	ea40 000c 	orr.w	r0, r0, ip
 8084210:	fa23 f302 	lsr.w	r3, r3, r2
 8084214:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8084218:	e7cc      	b.n	80841b4 <__aeabi_d2f+0x14>
 808421a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808421e:	d107      	bne.n	8084230 <__aeabi_d2f+0x90>
 8084220:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8084224:	bf1e      	ittt	ne
 8084226:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808422a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808422e:	4770      	bxne	lr
 8084230:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8084234:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8084238:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808423c:	4770      	bx	lr
 808423e:	bf00      	nop

08084240 <__aeabi_frsub>:
 8084240:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8084244:	e002      	b.n	808424c <__addsf3>
 8084246:	bf00      	nop

08084248 <__aeabi_fsub>:
 8084248:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0808424c <__addsf3>:
 808424c:	0042      	lsls	r2, r0, #1
 808424e:	bf1f      	itttt	ne
 8084250:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8084254:	ea92 0f03 	teqne	r2, r3
 8084258:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 808425c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8084260:	d06a      	beq.n	8084338 <__addsf3+0xec>
 8084262:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8084266:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808426a:	bfc1      	itttt	gt
 808426c:	18d2      	addgt	r2, r2, r3
 808426e:	4041      	eorgt	r1, r0
 8084270:	4048      	eorgt	r0, r1
 8084272:	4041      	eorgt	r1, r0
 8084274:	bfb8      	it	lt
 8084276:	425b      	neglt	r3, r3
 8084278:	2b19      	cmp	r3, #25
 808427a:	bf88      	it	hi
 808427c:	4770      	bxhi	lr
 808427e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8084282:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084286:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808428a:	bf18      	it	ne
 808428c:	4240      	negne	r0, r0
 808428e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8084292:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8084296:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808429a:	bf18      	it	ne
 808429c:	4249      	negne	r1, r1
 808429e:	ea92 0f03 	teq	r2, r3
 80842a2:	d03f      	beq.n	8084324 <__addsf3+0xd8>
 80842a4:	f1a2 0201 	sub.w	r2, r2, #1
 80842a8:	fa41 fc03 	asr.w	ip, r1, r3
 80842ac:	eb10 000c 	adds.w	r0, r0, ip
 80842b0:	f1c3 0320 	rsb	r3, r3, #32
 80842b4:	fa01 f103 	lsl.w	r1, r1, r3
 80842b8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80842bc:	d502      	bpl.n	80842c4 <__addsf3+0x78>
 80842be:	4249      	negs	r1, r1
 80842c0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80842c4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80842c8:	d313      	bcc.n	80842f2 <__addsf3+0xa6>
 80842ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80842ce:	d306      	bcc.n	80842de <__addsf3+0x92>
 80842d0:	0840      	lsrs	r0, r0, #1
 80842d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80842d6:	f102 0201 	add.w	r2, r2, #1
 80842da:	2afe      	cmp	r2, #254	; 0xfe
 80842dc:	d251      	bcs.n	8084382 <__addsf3+0x136>
 80842de:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80842e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80842e6:	bf08      	it	eq
 80842e8:	f020 0001 	biceq.w	r0, r0, #1
 80842ec:	ea40 0003 	orr.w	r0, r0, r3
 80842f0:	4770      	bx	lr
 80842f2:	0049      	lsls	r1, r1, #1
 80842f4:	eb40 0000 	adc.w	r0, r0, r0
 80842f8:	3a01      	subs	r2, #1
 80842fa:	bf28      	it	cs
 80842fc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8084300:	d2ed      	bcs.n	80842de <__addsf3+0x92>
 8084302:	fab0 fc80 	clz	ip, r0
 8084306:	f1ac 0c08 	sub.w	ip, ip, #8
 808430a:	ebb2 020c 	subs.w	r2, r2, ip
 808430e:	fa00 f00c 	lsl.w	r0, r0, ip
 8084312:	bfaa      	itet	ge
 8084314:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8084318:	4252      	neglt	r2, r2
 808431a:	4318      	orrge	r0, r3
 808431c:	bfbc      	itt	lt
 808431e:	40d0      	lsrlt	r0, r2
 8084320:	4318      	orrlt	r0, r3
 8084322:	4770      	bx	lr
 8084324:	f092 0f00 	teq	r2, #0
 8084328:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 808432c:	bf06      	itte	eq
 808432e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8084332:	3201      	addeq	r2, #1
 8084334:	3b01      	subne	r3, #1
 8084336:	e7b5      	b.n	80842a4 <__addsf3+0x58>
 8084338:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808433c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8084340:	bf18      	it	ne
 8084342:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8084346:	d021      	beq.n	808438c <__addsf3+0x140>
 8084348:	ea92 0f03 	teq	r2, r3
 808434c:	d004      	beq.n	8084358 <__addsf3+0x10c>
 808434e:	f092 0f00 	teq	r2, #0
 8084352:	bf08      	it	eq
 8084354:	4608      	moveq	r0, r1
 8084356:	4770      	bx	lr
 8084358:	ea90 0f01 	teq	r0, r1
 808435c:	bf1c      	itt	ne
 808435e:	2000      	movne	r0, #0
 8084360:	4770      	bxne	lr
 8084362:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8084366:	d104      	bne.n	8084372 <__addsf3+0x126>
 8084368:	0040      	lsls	r0, r0, #1
 808436a:	bf28      	it	cs
 808436c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8084370:	4770      	bx	lr
 8084372:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8084376:	bf3c      	itt	cc
 8084378:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 808437c:	4770      	bxcc	lr
 808437e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8084382:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8084386:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808438a:	4770      	bx	lr
 808438c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8084390:	bf16      	itet	ne
 8084392:	4608      	movne	r0, r1
 8084394:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8084398:	4601      	movne	r1, r0
 808439a:	0242      	lsls	r2, r0, #9
 808439c:	bf06      	itte	eq
 808439e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80843a2:	ea90 0f01 	teqeq	r0, r1
 80843a6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80843aa:	4770      	bx	lr

080843ac <__aeabi_ui2f>:
 80843ac:	f04f 0300 	mov.w	r3, #0
 80843b0:	e004      	b.n	80843bc <__aeabi_i2f+0x8>
 80843b2:	bf00      	nop

080843b4 <__aeabi_i2f>:
 80843b4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80843b8:	bf48      	it	mi
 80843ba:	4240      	negmi	r0, r0
 80843bc:	ea5f 0c00 	movs.w	ip, r0
 80843c0:	bf08      	it	eq
 80843c2:	4770      	bxeq	lr
 80843c4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80843c8:	4601      	mov	r1, r0
 80843ca:	f04f 0000 	mov.w	r0, #0
 80843ce:	e01c      	b.n	808440a <__aeabi_l2f+0x2a>

080843d0 <__aeabi_ul2f>:
 80843d0:	ea50 0201 	orrs.w	r2, r0, r1
 80843d4:	bf08      	it	eq
 80843d6:	4770      	bxeq	lr
 80843d8:	f04f 0300 	mov.w	r3, #0
 80843dc:	e00a      	b.n	80843f4 <__aeabi_l2f+0x14>
 80843de:	bf00      	nop

080843e0 <__aeabi_l2f>:
 80843e0:	ea50 0201 	orrs.w	r2, r0, r1
 80843e4:	bf08      	it	eq
 80843e6:	4770      	bxeq	lr
 80843e8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80843ec:	d502      	bpl.n	80843f4 <__aeabi_l2f+0x14>
 80843ee:	4240      	negs	r0, r0
 80843f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80843f4:	ea5f 0c01 	movs.w	ip, r1
 80843f8:	bf02      	ittt	eq
 80843fa:	4684      	moveq	ip, r0
 80843fc:	4601      	moveq	r1, r0
 80843fe:	2000      	moveq	r0, #0
 8084400:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8084404:	bf08      	it	eq
 8084406:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 808440a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808440e:	fabc f28c 	clz	r2, ip
 8084412:	3a08      	subs	r2, #8
 8084414:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8084418:	db10      	blt.n	808443c <__aeabi_l2f+0x5c>
 808441a:	fa01 fc02 	lsl.w	ip, r1, r2
 808441e:	4463      	add	r3, ip
 8084420:	fa00 fc02 	lsl.w	ip, r0, r2
 8084424:	f1c2 0220 	rsb	r2, r2, #32
 8084428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808442c:	fa20 f202 	lsr.w	r2, r0, r2
 8084430:	eb43 0002 	adc.w	r0, r3, r2
 8084434:	bf08      	it	eq
 8084436:	f020 0001 	biceq.w	r0, r0, #1
 808443a:	4770      	bx	lr
 808443c:	f102 0220 	add.w	r2, r2, #32
 8084440:	fa01 fc02 	lsl.w	ip, r1, r2
 8084444:	f1c2 0220 	rsb	r2, r2, #32
 8084448:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 808444c:	fa21 f202 	lsr.w	r2, r1, r2
 8084450:	eb43 0002 	adc.w	r0, r3, r2
 8084454:	bf08      	it	eq
 8084456:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808445a:	4770      	bx	lr

0808445c <__aeabi_fmul>:
 808445c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8084460:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8084464:	bf1e      	ittt	ne
 8084466:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808446a:	ea92 0f0c 	teqne	r2, ip
 808446e:	ea93 0f0c 	teqne	r3, ip
 8084472:	d06f      	beq.n	8084554 <__aeabi_fmul+0xf8>
 8084474:	441a      	add	r2, r3
 8084476:	ea80 0c01 	eor.w	ip, r0, r1
 808447a:	0240      	lsls	r0, r0, #9
 808447c:	bf18      	it	ne
 808447e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8084482:	d01e      	beq.n	80844c2 <__aeabi_fmul+0x66>
 8084484:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8084488:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 808448c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8084490:	fba0 3101 	umull	r3, r1, r0, r1
 8084494:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8084498:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 808449c:	bf3e      	ittt	cc
 808449e:	0049      	lslcc	r1, r1, #1
 80844a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80844a4:	005b      	lslcc	r3, r3, #1
 80844a6:	ea40 0001 	orr.w	r0, r0, r1
 80844aa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80844ae:	2afd      	cmp	r2, #253	; 0xfd
 80844b0:	d81d      	bhi.n	80844ee <__aeabi_fmul+0x92>
 80844b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80844b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80844ba:	bf08      	it	eq
 80844bc:	f020 0001 	biceq.w	r0, r0, #1
 80844c0:	4770      	bx	lr
 80844c2:	f090 0f00 	teq	r0, #0
 80844c6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80844ca:	bf08      	it	eq
 80844cc:	0249      	lsleq	r1, r1, #9
 80844ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80844d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80844d6:	3a7f      	subs	r2, #127	; 0x7f
 80844d8:	bfc2      	ittt	gt
 80844da:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80844de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80844e2:	4770      	bxgt	lr
 80844e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80844e8:	f04f 0300 	mov.w	r3, #0
 80844ec:	3a01      	subs	r2, #1
 80844ee:	dc5d      	bgt.n	80845ac <__aeabi_fmul+0x150>
 80844f0:	f112 0f19 	cmn.w	r2, #25
 80844f4:	bfdc      	itt	le
 80844f6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80844fa:	4770      	bxle	lr
 80844fc:	f1c2 0200 	rsb	r2, r2, #0
 8084500:	0041      	lsls	r1, r0, #1
 8084502:	fa21 f102 	lsr.w	r1, r1, r2
 8084506:	f1c2 0220 	rsb	r2, r2, #32
 808450a:	fa00 fc02 	lsl.w	ip, r0, r2
 808450e:	ea5f 0031 	movs.w	r0, r1, rrx
 8084512:	f140 0000 	adc.w	r0, r0, #0
 8084516:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808451a:	bf08      	it	eq
 808451c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8084520:	4770      	bx	lr
 8084522:	f092 0f00 	teq	r2, #0
 8084526:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808452a:	bf02      	ittt	eq
 808452c:	0040      	lsleq	r0, r0, #1
 808452e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8084532:	3a01      	subeq	r2, #1
 8084534:	d0f9      	beq.n	808452a <__aeabi_fmul+0xce>
 8084536:	ea40 000c 	orr.w	r0, r0, ip
 808453a:	f093 0f00 	teq	r3, #0
 808453e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8084542:	bf02      	ittt	eq
 8084544:	0049      	lsleq	r1, r1, #1
 8084546:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808454a:	3b01      	subeq	r3, #1
 808454c:	d0f9      	beq.n	8084542 <__aeabi_fmul+0xe6>
 808454e:	ea41 010c 	orr.w	r1, r1, ip
 8084552:	e78f      	b.n	8084474 <__aeabi_fmul+0x18>
 8084554:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8084558:	ea92 0f0c 	teq	r2, ip
 808455c:	bf18      	it	ne
 808455e:	ea93 0f0c 	teqne	r3, ip
 8084562:	d00a      	beq.n	808457a <__aeabi_fmul+0x11e>
 8084564:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8084568:	bf18      	it	ne
 808456a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808456e:	d1d8      	bne.n	8084522 <__aeabi_fmul+0xc6>
 8084570:	ea80 0001 	eor.w	r0, r0, r1
 8084574:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8084578:	4770      	bx	lr
 808457a:	f090 0f00 	teq	r0, #0
 808457e:	bf17      	itett	ne
 8084580:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8084584:	4608      	moveq	r0, r1
 8084586:	f091 0f00 	teqne	r1, #0
 808458a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808458e:	d014      	beq.n	80845ba <__aeabi_fmul+0x15e>
 8084590:	ea92 0f0c 	teq	r2, ip
 8084594:	d101      	bne.n	808459a <__aeabi_fmul+0x13e>
 8084596:	0242      	lsls	r2, r0, #9
 8084598:	d10f      	bne.n	80845ba <__aeabi_fmul+0x15e>
 808459a:	ea93 0f0c 	teq	r3, ip
 808459e:	d103      	bne.n	80845a8 <__aeabi_fmul+0x14c>
 80845a0:	024b      	lsls	r3, r1, #9
 80845a2:	bf18      	it	ne
 80845a4:	4608      	movne	r0, r1
 80845a6:	d108      	bne.n	80845ba <__aeabi_fmul+0x15e>
 80845a8:	ea80 0001 	eor.w	r0, r0, r1
 80845ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80845b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80845b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80845b8:	4770      	bx	lr
 80845ba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80845be:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80845c2:	4770      	bx	lr

080845c4 <__aeabi_fdiv>:
 80845c4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80845c8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80845cc:	bf1e      	ittt	ne
 80845ce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80845d2:	ea92 0f0c 	teqne	r2, ip
 80845d6:	ea93 0f0c 	teqne	r3, ip
 80845da:	d069      	beq.n	80846b0 <__aeabi_fdiv+0xec>
 80845dc:	eba2 0203 	sub.w	r2, r2, r3
 80845e0:	ea80 0c01 	eor.w	ip, r0, r1
 80845e4:	0249      	lsls	r1, r1, #9
 80845e6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80845ea:	d037      	beq.n	808465c <__aeabi_fdiv+0x98>
 80845ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80845f0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80845f4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80845f8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80845fc:	428b      	cmp	r3, r1
 80845fe:	bf38      	it	cc
 8084600:	005b      	lslcc	r3, r3, #1
 8084602:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8084606:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808460a:	428b      	cmp	r3, r1
 808460c:	bf24      	itt	cs
 808460e:	1a5b      	subcs	r3, r3, r1
 8084610:	ea40 000c 	orrcs.w	r0, r0, ip
 8084614:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8084618:	bf24      	itt	cs
 808461a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808461e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8084622:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8084626:	bf24      	itt	cs
 8084628:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808462c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8084630:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8084634:	bf24      	itt	cs
 8084636:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808463a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808463e:	011b      	lsls	r3, r3, #4
 8084640:	bf18      	it	ne
 8084642:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8084646:	d1e0      	bne.n	808460a <__aeabi_fdiv+0x46>
 8084648:	2afd      	cmp	r2, #253	; 0xfd
 808464a:	f63f af50 	bhi.w	80844ee <__aeabi_fmul+0x92>
 808464e:	428b      	cmp	r3, r1
 8084650:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8084654:	bf08      	it	eq
 8084656:	f020 0001 	biceq.w	r0, r0, #1
 808465a:	4770      	bx	lr
 808465c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8084660:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8084664:	327f      	adds	r2, #127	; 0x7f
 8084666:	bfc2      	ittt	gt
 8084668:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808466c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8084670:	4770      	bxgt	lr
 8084672:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084676:	f04f 0300 	mov.w	r3, #0
 808467a:	3a01      	subs	r2, #1
 808467c:	e737      	b.n	80844ee <__aeabi_fmul+0x92>
 808467e:	f092 0f00 	teq	r2, #0
 8084682:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8084686:	bf02      	ittt	eq
 8084688:	0040      	lsleq	r0, r0, #1
 808468a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808468e:	3a01      	subeq	r2, #1
 8084690:	d0f9      	beq.n	8084686 <__aeabi_fdiv+0xc2>
 8084692:	ea40 000c 	orr.w	r0, r0, ip
 8084696:	f093 0f00 	teq	r3, #0
 808469a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808469e:	bf02      	ittt	eq
 80846a0:	0049      	lsleq	r1, r1, #1
 80846a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80846a6:	3b01      	subeq	r3, #1
 80846a8:	d0f9      	beq.n	808469e <__aeabi_fdiv+0xda>
 80846aa:	ea41 010c 	orr.w	r1, r1, ip
 80846ae:	e795      	b.n	80845dc <__aeabi_fdiv+0x18>
 80846b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80846b4:	ea92 0f0c 	teq	r2, ip
 80846b8:	d108      	bne.n	80846cc <__aeabi_fdiv+0x108>
 80846ba:	0242      	lsls	r2, r0, #9
 80846bc:	f47f af7d 	bne.w	80845ba <__aeabi_fmul+0x15e>
 80846c0:	ea93 0f0c 	teq	r3, ip
 80846c4:	f47f af70 	bne.w	80845a8 <__aeabi_fmul+0x14c>
 80846c8:	4608      	mov	r0, r1
 80846ca:	e776      	b.n	80845ba <__aeabi_fmul+0x15e>
 80846cc:	ea93 0f0c 	teq	r3, ip
 80846d0:	d104      	bne.n	80846dc <__aeabi_fdiv+0x118>
 80846d2:	024b      	lsls	r3, r1, #9
 80846d4:	f43f af4c 	beq.w	8084570 <__aeabi_fmul+0x114>
 80846d8:	4608      	mov	r0, r1
 80846da:	e76e      	b.n	80845ba <__aeabi_fmul+0x15e>
 80846dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80846e0:	bf18      	it	ne
 80846e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80846e6:	d1ca      	bne.n	808467e <__aeabi_fdiv+0xba>
 80846e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80846ec:	f47f af5c 	bne.w	80845a8 <__aeabi_fmul+0x14c>
 80846f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80846f4:	f47f af3c 	bne.w	8084570 <__aeabi_fmul+0x114>
 80846f8:	e75f      	b.n	80845ba <__aeabi_fmul+0x15e>
 80846fa:	bf00      	nop

080846fc <__gesf2>:
 80846fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8084700:	e006      	b.n	8084710 <__cmpsf2+0x4>
 8084702:	bf00      	nop

08084704 <__lesf2>:
 8084704:	f04f 0c01 	mov.w	ip, #1
 8084708:	e002      	b.n	8084710 <__cmpsf2+0x4>
 808470a:	bf00      	nop

0808470c <__cmpsf2>:
 808470c:	f04f 0c01 	mov.w	ip, #1
 8084710:	f84d cd04 	str.w	ip, [sp, #-4]!
 8084714:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8084718:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808471c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8084720:	bf18      	it	ne
 8084722:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8084726:	d011      	beq.n	808474c <__cmpsf2+0x40>
 8084728:	b001      	add	sp, #4
 808472a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808472e:	bf18      	it	ne
 8084730:	ea90 0f01 	teqne	r0, r1
 8084734:	bf58      	it	pl
 8084736:	ebb2 0003 	subspl.w	r0, r2, r3
 808473a:	bf88      	it	hi
 808473c:	17c8      	asrhi	r0, r1, #31
 808473e:	bf38      	it	cc
 8084740:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8084744:	bf18      	it	ne
 8084746:	f040 0001 	orrne.w	r0, r0, #1
 808474a:	4770      	bx	lr
 808474c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8084750:	d102      	bne.n	8084758 <__cmpsf2+0x4c>
 8084752:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8084756:	d105      	bne.n	8084764 <__cmpsf2+0x58>
 8084758:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808475c:	d1e4      	bne.n	8084728 <__cmpsf2+0x1c>
 808475e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8084762:	d0e1      	beq.n	8084728 <__cmpsf2+0x1c>
 8084764:	f85d 0b04 	ldr.w	r0, [sp], #4
 8084768:	4770      	bx	lr
 808476a:	bf00      	nop

0808476c <__aeabi_cfrcmple>:
 808476c:	4684      	mov	ip, r0
 808476e:	4608      	mov	r0, r1
 8084770:	4661      	mov	r1, ip
 8084772:	e7ff      	b.n	8084774 <__aeabi_cfcmpeq>

08084774 <__aeabi_cfcmpeq>:
 8084774:	b50f      	push	{r0, r1, r2, r3, lr}
 8084776:	f7ff ffc9 	bl	808470c <__cmpsf2>
 808477a:	2800      	cmp	r0, #0
 808477c:	bf48      	it	mi
 808477e:	f110 0f00 	cmnmi.w	r0, #0
 8084782:	bd0f      	pop	{r0, r1, r2, r3, pc}

08084784 <__aeabi_fcmpeq>:
 8084784:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084788:	f7ff fff4 	bl	8084774 <__aeabi_cfcmpeq>
 808478c:	bf0c      	ite	eq
 808478e:	2001      	moveq	r0, #1
 8084790:	2000      	movne	r0, #0
 8084792:	f85d fb08 	ldr.w	pc, [sp], #8
 8084796:	bf00      	nop

08084798 <__aeabi_fcmplt>:
 8084798:	f84d ed08 	str.w	lr, [sp, #-8]!
 808479c:	f7ff ffea 	bl	8084774 <__aeabi_cfcmpeq>
 80847a0:	bf34      	ite	cc
 80847a2:	2001      	movcc	r0, #1
 80847a4:	2000      	movcs	r0, #0
 80847a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80847aa:	bf00      	nop

080847ac <__aeabi_fcmple>:
 80847ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80847b0:	f7ff ffe0 	bl	8084774 <__aeabi_cfcmpeq>
 80847b4:	bf94      	ite	ls
 80847b6:	2001      	movls	r0, #1
 80847b8:	2000      	movhi	r0, #0
 80847ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80847be:	bf00      	nop

080847c0 <__aeabi_fcmpge>:
 80847c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80847c4:	f7ff ffd2 	bl	808476c <__aeabi_cfrcmple>
 80847c8:	bf94      	ite	ls
 80847ca:	2001      	movls	r0, #1
 80847cc:	2000      	movhi	r0, #0
 80847ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80847d2:	bf00      	nop

080847d4 <__aeabi_fcmpgt>:
 80847d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80847d8:	f7ff ffc8 	bl	808476c <__aeabi_cfrcmple>
 80847dc:	bf34      	ite	cc
 80847de:	2001      	movcc	r0, #1
 80847e0:	2000      	movcs	r0, #0
 80847e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80847e6:	bf00      	nop

080847e8 <__aeabi_f2lz>:
 80847e8:	b510      	push	{r4, lr}
 80847ea:	2100      	movs	r1, #0
 80847ec:	4604      	mov	r4, r0
 80847ee:	f7ff ffd3 	bl	8084798 <__aeabi_fcmplt>
 80847f2:	b920      	cbnz	r0, 80847fe <__aeabi_f2lz+0x16>
 80847f4:	4620      	mov	r0, r4
 80847f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80847fa:	f000 b809 	b.w	8084810 <__aeabi_f2ulz>
 80847fe:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 8084802:	f000 f805 	bl	8084810 <__aeabi_f2ulz>
 8084806:	4240      	negs	r0, r0
 8084808:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808480c:	bd10      	pop	{r4, pc}
 808480e:	bf00      	nop

08084810 <__aeabi_f2ulz>:
 8084810:	b5d0      	push	{r4, r6, r7, lr}
 8084812:	f7ff fa13 	bl	8083c3c <__aeabi_f2d>
 8084816:	2200      	movs	r2, #0
 8084818:	4b0b      	ldr	r3, [pc, #44]	; (8084848 <__aeabi_f2ulz+0x38>)
 808481a:	4606      	mov	r6, r0
 808481c:	460f      	mov	r7, r1
 808481e:	f7ff fa65 	bl	8083cec <__aeabi_dmul>
 8084822:	f7ff fc9d 	bl	8084160 <__aeabi_d2uiz>
 8084826:	4604      	mov	r4, r0
 8084828:	f7ff f9e6 	bl	8083bf8 <__aeabi_ui2d>
 808482c:	2200      	movs	r2, #0
 808482e:	4b07      	ldr	r3, [pc, #28]	; (808484c <__aeabi_f2ulz+0x3c>)
 8084830:	f7ff fa5c 	bl	8083cec <__aeabi_dmul>
 8084834:	4602      	mov	r2, r0
 8084836:	460b      	mov	r3, r1
 8084838:	4630      	mov	r0, r6
 808483a:	4639      	mov	r1, r7
 808483c:	f7ff f89e 	bl	808397c <__aeabi_dsub>
 8084840:	f7ff fc8e 	bl	8084160 <__aeabi_d2uiz>
 8084844:	4621      	mov	r1, r4
 8084846:	bdd0      	pop	{r4, r6, r7, pc}
 8084848:	3df00000 	.word	0x3df00000
 808484c:	41f00000 	.word	0x41f00000

08084850 <asctime_r>:
 8084850:	b510      	push	{r4, lr}
 8084852:	460c      	mov	r4, r1
 8084854:	6941      	ldr	r1, [r0, #20]
 8084856:	b086      	sub	sp, #24
 8084858:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 808485c:	6903      	ldr	r3, [r0, #16]
 808485e:	6982      	ldr	r2, [r0, #24]
 8084860:	9104      	str	r1, [sp, #16]
 8084862:	6801      	ldr	r1, [r0, #0]
 8084864:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8084868:	9103      	str	r1, [sp, #12]
 808486a:	6841      	ldr	r1, [r0, #4]
 808486c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8084870:	9102      	str	r1, [sp, #8]
 8084872:	6881      	ldr	r1, [r0, #8]
 8084874:	9101      	str	r1, [sp, #4]
 8084876:	68c1      	ldr	r1, [r0, #12]
 8084878:	4620      	mov	r0, r4
 808487a:	9100      	str	r1, [sp, #0]
 808487c:	4904      	ldr	r1, [pc, #16]	; (8084890 <asctime_r+0x40>)
 808487e:	440b      	add	r3, r1
 8084880:	4904      	ldr	r1, [pc, #16]	; (8084894 <asctime_r+0x44>)
 8084882:	440a      	add	r2, r1
 8084884:	4904      	ldr	r1, [pc, #16]	; (8084898 <asctime_r+0x48>)
 8084886:	f7fd fc59 	bl	808213c <siprintf>
 808488a:	4620      	mov	r0, r4
 808488c:	b006      	add	sp, #24
 808488e:	bd10      	pop	{r4, pc}
 8084890:	08085182 	.word	0x08085182
 8084894:	0808516d 	.word	0x0808516d
 8084898:	0808514d 	.word	0x0808514d

0808489c <atoi>:
 808489c:	220a      	movs	r2, #10
 808489e:	2100      	movs	r1, #0
 80848a0:	f000 b924 	b.w	8084aec <strtol>

080848a4 <__cxa_atexit>:
 80848a4:	b510      	push	{r4, lr}
 80848a6:	4604      	mov	r4, r0
 80848a8:	4804      	ldr	r0, [pc, #16]	; (80848bc <__cxa_atexit+0x18>)
 80848aa:	4613      	mov	r3, r2
 80848ac:	b120      	cbz	r0, 80848b8 <__cxa_atexit+0x14>
 80848ae:	460a      	mov	r2, r1
 80848b0:	2002      	movs	r0, #2
 80848b2:	4621      	mov	r1, r4
 80848b4:	f3af 8000 	nop.w
 80848b8:	bd10      	pop	{r4, pc}
 80848ba:	bf00      	nop
 80848bc:	00000000 	.word	0x00000000

080848c0 <memcpy>:
 80848c0:	440a      	add	r2, r1
 80848c2:	4291      	cmp	r1, r2
 80848c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80848c8:	d100      	bne.n	80848cc <memcpy+0xc>
 80848ca:	4770      	bx	lr
 80848cc:	b510      	push	{r4, lr}
 80848ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80848d2:	4291      	cmp	r1, r2
 80848d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80848d8:	d1f9      	bne.n	80848ce <memcpy+0xe>
 80848da:	bd10      	pop	{r4, pc}

080848dc <memmove>:
 80848dc:	4288      	cmp	r0, r1
 80848de:	b510      	push	{r4, lr}
 80848e0:	eb01 0402 	add.w	r4, r1, r2
 80848e4:	d902      	bls.n	80848ec <memmove+0x10>
 80848e6:	4284      	cmp	r4, r0
 80848e8:	4623      	mov	r3, r4
 80848ea:	d807      	bhi.n	80848fc <memmove+0x20>
 80848ec:	1e43      	subs	r3, r0, #1
 80848ee:	42a1      	cmp	r1, r4
 80848f0:	d008      	beq.n	8084904 <memmove+0x28>
 80848f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80848f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80848fa:	e7f8      	b.n	80848ee <memmove+0x12>
 80848fc:	4601      	mov	r1, r0
 80848fe:	4402      	add	r2, r0
 8084900:	428a      	cmp	r2, r1
 8084902:	d100      	bne.n	8084906 <memmove+0x2a>
 8084904:	bd10      	pop	{r4, pc}
 8084906:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 808490a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 808490e:	e7f7      	b.n	8084900 <memmove+0x24>

08084910 <memset>:
 8084910:	4603      	mov	r3, r0
 8084912:	4402      	add	r2, r0
 8084914:	4293      	cmp	r3, r2
 8084916:	d100      	bne.n	808491a <memset+0xa>
 8084918:	4770      	bx	lr
 808491a:	f803 1b01 	strb.w	r1, [r3], #1
 808491e:	e7f9      	b.n	8084914 <memset+0x4>

08084920 <srand>:
 8084920:	b538      	push	{r3, r4, r5, lr}
 8084922:	4b0d      	ldr	r3, [pc, #52]	; (8084958 <srand+0x38>)
 8084924:	4604      	mov	r4, r0
 8084926:	681d      	ldr	r5, [r3, #0]
 8084928:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808492a:	b97b      	cbnz	r3, 808494c <srand+0x2c>
 808492c:	2018      	movs	r0, #24
 808492e:	f7fd fbed 	bl	808210c <malloc>
 8084932:	4a0a      	ldr	r2, [pc, #40]	; (808495c <srand+0x3c>)
 8084934:	4b0a      	ldr	r3, [pc, #40]	; (8084960 <srand+0x40>)
 8084936:	63a8      	str	r0, [r5, #56]	; 0x38
 8084938:	e9c0 2300 	strd	r2, r3, [r0]
 808493c:	4b09      	ldr	r3, [pc, #36]	; (8084964 <srand+0x44>)
 808493e:	2201      	movs	r2, #1
 8084940:	6083      	str	r3, [r0, #8]
 8084942:	230b      	movs	r3, #11
 8084944:	8183      	strh	r3, [r0, #12]
 8084946:	2300      	movs	r3, #0
 8084948:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808494c:	2200      	movs	r2, #0
 808494e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8084950:	611c      	str	r4, [r3, #16]
 8084952:	615a      	str	r2, [r3, #20]
 8084954:	bd38      	pop	{r3, r4, r5, pc}
 8084956:	bf00      	nop
 8084958:	20000098 	.word	0x20000098
 808495c:	abcd330e 	.word	0xabcd330e
 8084960:	e66d1234 	.word	0xe66d1234
 8084964:	0005deec 	.word	0x0005deec

08084968 <strcmp>:
 8084968:	f810 2b01 	ldrb.w	r2, [r0], #1
 808496c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8084970:	2a01      	cmp	r2, #1
 8084972:	bf28      	it	cs
 8084974:	429a      	cmpcs	r2, r3
 8084976:	d0f7      	beq.n	8084968 <strcmp>
 8084978:	1ad0      	subs	r0, r2, r3
 808497a:	4770      	bx	lr

0808497c <strcpy>:
 808497c:	4603      	mov	r3, r0
 808497e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8084982:	f803 2b01 	strb.w	r2, [r3], #1
 8084986:	2a00      	cmp	r2, #0
 8084988:	d1f9      	bne.n	808497e <strcpy+0x2>
 808498a:	4770      	bx	lr

0808498c <strdup>:
 808498c:	4b02      	ldr	r3, [pc, #8]	; (8084998 <strdup+0xc>)
 808498e:	4601      	mov	r1, r0
 8084990:	6818      	ldr	r0, [r3, #0]
 8084992:	f000 b803 	b.w	808499c <_strdup_r>
 8084996:	bf00      	nop
 8084998:	20000098 	.word	0x20000098

0808499c <_strdup_r>:
 808499c:	b570      	push	{r4, r5, r6, lr}
 808499e:	4604      	mov	r4, r0
 80849a0:	4608      	mov	r0, r1
 80849a2:	460d      	mov	r5, r1
 80849a4:	f000 f80d 	bl	80849c2 <strlen>
 80849a8:	1c46      	adds	r6, r0, #1
 80849aa:	4631      	mov	r1, r6
 80849ac:	4620      	mov	r0, r4
 80849ae:	f7fd fbdd 	bl	808216c <_malloc_r>
 80849b2:	4604      	mov	r4, r0
 80849b4:	b118      	cbz	r0, 80849be <_strdup_r+0x22>
 80849b6:	4632      	mov	r2, r6
 80849b8:	4629      	mov	r1, r5
 80849ba:	f7ff ff81 	bl	80848c0 <memcpy>
 80849be:	4620      	mov	r0, r4
 80849c0:	bd70      	pop	{r4, r5, r6, pc}

080849c2 <strlen>:
 80849c2:	4603      	mov	r3, r0
 80849c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80849c8:	2a00      	cmp	r2, #0
 80849ca:	d1fb      	bne.n	80849c4 <strlen+0x2>
 80849cc:	1a18      	subs	r0, r3, r0
 80849ce:	3801      	subs	r0, #1
 80849d0:	4770      	bx	lr

080849d2 <strncpy>:
 80849d2:	4603      	mov	r3, r0
 80849d4:	b510      	push	{r4, lr}
 80849d6:	3901      	subs	r1, #1
 80849d8:	b132      	cbz	r2, 80849e8 <strncpy+0x16>
 80849da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80849de:	3a01      	subs	r2, #1
 80849e0:	f803 4b01 	strb.w	r4, [r3], #1
 80849e4:	2c00      	cmp	r4, #0
 80849e6:	d1f7      	bne.n	80849d8 <strncpy+0x6>
 80849e8:	2100      	movs	r1, #0
 80849ea:	441a      	add	r2, r3
 80849ec:	4293      	cmp	r3, r2
 80849ee:	d100      	bne.n	80849f2 <strncpy+0x20>
 80849f0:	bd10      	pop	{r4, pc}
 80849f2:	f803 1b01 	strb.w	r1, [r3], #1
 80849f6:	e7f9      	b.n	80849ec <strncpy+0x1a>

080849f8 <_strtol_l.isra.0>:
 80849f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80849fc:	468c      	mov	ip, r1
 80849fe:	4686      	mov	lr, r0
 8084a00:	4e39      	ldr	r6, [pc, #228]	; (8084ae8 <_strtol_l.isra.0+0xf0>)
 8084a02:	4660      	mov	r0, ip
 8084a04:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8084a08:	5da5      	ldrb	r5, [r4, r6]
 8084a0a:	f015 0508 	ands.w	r5, r5, #8
 8084a0e:	d1f8      	bne.n	8084a02 <_strtol_l.isra.0+0xa>
 8084a10:	2c2d      	cmp	r4, #45	; 0x2d
 8084a12:	d133      	bne.n	8084a7c <_strtol_l.isra.0+0x84>
 8084a14:	f04f 0801 	mov.w	r8, #1
 8084a18:	f89c 4000 	ldrb.w	r4, [ip]
 8084a1c:	f100 0c02 	add.w	ip, r0, #2
 8084a20:	2b00      	cmp	r3, #0
 8084a22:	d05c      	beq.n	8084ade <_strtol_l.isra.0+0xe6>
 8084a24:	2b10      	cmp	r3, #16
 8084a26:	d10c      	bne.n	8084a42 <_strtol_l.isra.0+0x4a>
 8084a28:	2c30      	cmp	r4, #48	; 0x30
 8084a2a:	d10a      	bne.n	8084a42 <_strtol_l.isra.0+0x4a>
 8084a2c:	f89c 0000 	ldrb.w	r0, [ip]
 8084a30:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8084a34:	2858      	cmp	r0, #88	; 0x58
 8084a36:	d14d      	bne.n	8084ad4 <_strtol_l.isra.0+0xdc>
 8084a38:	2310      	movs	r3, #16
 8084a3a:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8084a3e:	f10c 0c02 	add.w	ip, ip, #2
 8084a42:	2600      	movs	r6, #0
 8084a44:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8084a48:	3f01      	subs	r7, #1
 8084a4a:	fbb7 f9f3 	udiv	r9, r7, r3
 8084a4e:	4630      	mov	r0, r6
 8084a50:	fb03 7a19 	mls	sl, r3, r9, r7
 8084a54:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 8084a58:	2d09      	cmp	r5, #9
 8084a5a:	d818      	bhi.n	8084a8e <_strtol_l.isra.0+0x96>
 8084a5c:	462c      	mov	r4, r5
 8084a5e:	42a3      	cmp	r3, r4
 8084a60:	dd24      	ble.n	8084aac <_strtol_l.isra.0+0xb4>
 8084a62:	1c75      	adds	r5, r6, #1
 8084a64:	d007      	beq.n	8084a76 <_strtol_l.isra.0+0x7e>
 8084a66:	4581      	cmp	r9, r0
 8084a68:	d31d      	bcc.n	8084aa6 <_strtol_l.isra.0+0xae>
 8084a6a:	d101      	bne.n	8084a70 <_strtol_l.isra.0+0x78>
 8084a6c:	45a2      	cmp	sl, r4
 8084a6e:	db1a      	blt.n	8084aa6 <_strtol_l.isra.0+0xae>
 8084a70:	2601      	movs	r6, #1
 8084a72:	fb00 4003 	mla	r0, r0, r3, r4
 8084a76:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8084a7a:	e7eb      	b.n	8084a54 <_strtol_l.isra.0+0x5c>
 8084a7c:	2c2b      	cmp	r4, #43	; 0x2b
 8084a7e:	bf08      	it	eq
 8084a80:	f89c 4000 	ldrbeq.w	r4, [ip]
 8084a84:	46a8      	mov	r8, r5
 8084a86:	bf08      	it	eq
 8084a88:	f100 0c02 	addeq.w	ip, r0, #2
 8084a8c:	e7c8      	b.n	8084a20 <_strtol_l.isra.0+0x28>
 8084a8e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 8084a92:	2d19      	cmp	r5, #25
 8084a94:	d801      	bhi.n	8084a9a <_strtol_l.isra.0+0xa2>
 8084a96:	3c37      	subs	r4, #55	; 0x37
 8084a98:	e7e1      	b.n	8084a5e <_strtol_l.isra.0+0x66>
 8084a9a:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 8084a9e:	2d19      	cmp	r5, #25
 8084aa0:	d804      	bhi.n	8084aac <_strtol_l.isra.0+0xb4>
 8084aa2:	3c57      	subs	r4, #87	; 0x57
 8084aa4:	e7db      	b.n	8084a5e <_strtol_l.isra.0+0x66>
 8084aa6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8084aaa:	e7e4      	b.n	8084a76 <_strtol_l.isra.0+0x7e>
 8084aac:	1c73      	adds	r3, r6, #1
 8084aae:	d106      	bne.n	8084abe <_strtol_l.isra.0+0xc6>
 8084ab0:	2322      	movs	r3, #34	; 0x22
 8084ab2:	4638      	mov	r0, r7
 8084ab4:	f8ce 3000 	str.w	r3, [lr]
 8084ab8:	b942      	cbnz	r2, 8084acc <_strtol_l.isra.0+0xd4>
 8084aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084abe:	f1b8 0f00 	cmp.w	r8, #0
 8084ac2:	d000      	beq.n	8084ac6 <_strtol_l.isra.0+0xce>
 8084ac4:	4240      	negs	r0, r0
 8084ac6:	2a00      	cmp	r2, #0
 8084ac8:	d0f7      	beq.n	8084aba <_strtol_l.isra.0+0xc2>
 8084aca:	b10e      	cbz	r6, 8084ad0 <_strtol_l.isra.0+0xd8>
 8084acc:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8084ad0:	6011      	str	r1, [r2, #0]
 8084ad2:	e7f2      	b.n	8084aba <_strtol_l.isra.0+0xc2>
 8084ad4:	2430      	movs	r4, #48	; 0x30
 8084ad6:	2b00      	cmp	r3, #0
 8084ad8:	d1b3      	bne.n	8084a42 <_strtol_l.isra.0+0x4a>
 8084ada:	2308      	movs	r3, #8
 8084adc:	e7b1      	b.n	8084a42 <_strtol_l.isra.0+0x4a>
 8084ade:	2c30      	cmp	r4, #48	; 0x30
 8084ae0:	d0a4      	beq.n	8084a2c <_strtol_l.isra.0+0x34>
 8084ae2:	230a      	movs	r3, #10
 8084ae4:	e7ad      	b.n	8084a42 <_strtol_l.isra.0+0x4a>
 8084ae6:	bf00      	nop
 8084ae8:	080851a7 	.word	0x080851a7

08084aec <strtol>:
 8084aec:	4613      	mov	r3, r2
 8084aee:	460a      	mov	r2, r1
 8084af0:	4601      	mov	r1, r0
 8084af2:	4802      	ldr	r0, [pc, #8]	; (8084afc <strtol+0x10>)
 8084af4:	6800      	ldr	r0, [r0, #0]
 8084af6:	f7ff bf7f 	b.w	80849f8 <_strtol_l.isra.0>
 8084afa:	bf00      	nop
 8084afc:	20000098 	.word	0x20000098

08084b00 <dynalib_user>:
 8084b00:	08080031 08080071 08080099 0808009d     1...q...........
 8084b10:	00000000 6e6b6e55 006e776f 656e6f4e     ....Unknown.None
 8084b20:	46695700 53470069 4d55004d 43005354     .WiFi.GSM.UMTS.C
 8084b30:	00414d44 0045544c 45454549 31323038     DMA.LTE.IEEE8021
 8084b40:	4c003435 435f4554 4d5f5441 544c0031     54.LTE_CAT_M1.LT
 8084b50:	41435f45 424e5f54 69680031 6c006867     E_CAT_NB1.high.l
 8084b60:	4300776f 65727275 7620746e 65756c61     ow.Current value
 8084b70:	6e692073 31747570 7325203a 6e69202c     s input1: %s, in
 8084b80:	32747570 7325203a 61745300 00736574     put2: %s.States.
 8084b90:	44206f4e 00617461 64696255 2073746f     No Data.Ubidots 
 8084ba0:	6b6f6f48 73655200 736e6f70 65522065     Hook.Response Re
 8084bb0:	76696563 53006465 65746174 74655300     ceived.State.Set
 8084bc0:	72655620 65736f62 646f4d20 00300065      Verbose Mode.0.
 8084bd0:	61656c43 20646572 62726556 2065736f     Cleared Verbose 
 8084be0:	65646f4d 2e322500 55206631 54004354     Mode.%2.1f UTC.T
 8084bf0:	20656d69 656e6f7a 66666f20 20746573     ime zone offset 
 8084c00:	54006925 00656d69 20253537 6c6c7546     %i.Time.75% Full
 8084c10:	30303100 75462025 4c006c6c 4f20776f     .100% Full.Low O
 8084c20:	25006c69 3a532073 302e3225 2c252566     il.%s S:%2.0f%%,
 8084c30:	253a5120 66302e32 00202525 6e69227b      Q:%2.0f%% .{"in
 8084c40:	31747570 69253a22 6922202c 7475706e     put1":%i, "input
 8084c50:	253a2232 22202c69 706d6574 69253a22     2":%i, "temp":%i
 8084c60:	6122202c 7472656c 253a2273 22202c69     , "alerts":%i, "
 8084c70:	65736572 3a227374 202c6925 6d697422     resets":%i, "tim
 8084c80:	61747365 3a22706d 30756c25 007d3030     estamp":%lu000}.
 8084c90:	6c756148 61437265 72656c6c 6f6f485f     HaulerCaller_Hoo
 8084ca0:	7552006b 6e696e6e 61440067 20796c69     k.Running.Daily 
 8084cb0:	61656c43 0070756e 64616f4c 20676e69     Cleanup.Loading 
 8084cc0:	74737953 44206d65 75616665 0073746c     System Defaults.
 8084cd0:	6d6f7246 20732520 25206f74 74530073     From %s to %s.St
 8084ce0:	20657461 6e617254 69746973 41006e6f     ate Transition.A
 8084cf0:	46432b54 313d4e55 000a0d36 72617073     T+CFUN=16...spar
 8084d00:	65642f6b 65636976 7365732f 6e6f6973     k/device/session
 8084d10:	646e652f 72724500 5320726f 65746174     /end.Error State
 8084d20:	52202d20 74657365 72724500 5320726f      - Reset.Error S
 8084d30:	65746174 50202d20 7265776f 63794320     tate - Power Cyc
 8084d40:	4500656c 726f7272 61745320 2d206574     le.Error State -
 8084d50:	6c754620 6f4d206c 206d6564 65736552      Full Modem Rese
 8084d60:	69530074 6c616e67 73655200 6f437465     t.Signal.ResetCo
 8084d70:	00746e75 706d6554 74617265 00657275     unt.Temperature.
 8084d80:	656c6552 00657361 75706e49 49003174     Release.Input1.I
 8084d90:	7475706e 61480032 522d6472 74657365     nput2.Hard-Reset
 8084da0:	6e655300 6f4e2d64 65560077 736f6272     .Send-Now.Verbos
 8084db0:	6f4d2d65 53006564 542d7465 7a656d69     e-Mode.Set-Timez
 8084dc0:	00656e6f 2d746553 4f545344 65736666     one.Set-DSTOffse
 8084dd0:	65520074 74726f70 706e492d 00737475     t.Report-Inputs.
 8084de0:	41206f4e 7472656c 54534400 66666f20     No Alert.DST off
 8084df0:	20746573 312e3225 00000066              set %2.1f...

08084dfc <_ZTV8MB85RC64>:
	...
 8084e04:	08080145 08080159 08081371 08081407     E...Y...q.......
 8084e14:	08081489                                ....

08084e18 <_ZTV17PublishQueueAsync>:
	...
 8084e20:	0808011d 08080131 080815b1 0808173d     ....1.......=...
 8084e30:	080816fd 080816db 0808187f 08081723     ............#...
 8084e40:	08084b14 08084b1c 08084b21 08084b26     .K...K..!K..&K..
 8084e50:	08084b2a 08084b2f 08084b34 08084b38     *K../K..4K..8K..
 8084e60:	08084b43 08084b4e                       CK..NK..

08084e68 <_ZL13releaseNumber>:
 8084e68:	30302e36 00000000                       6.00....

08084e70 <_ZL17FRAMversionNumber>:
 8084e70:	00000001 74697277 74614465 61662061     ....writeData fa
 8084e80:	64656c69 72756420 20676e69 73617265     iled during eras
 8084e90:	72662065 64416d61 253d7264 00000075     e framAddr=%u...

08084ea0 <_ZTV6MB85RC>:
	...
 8084ea8:	08081291 08081293 08081371 08081407     ........q.......
 8084eb8:	08081489 6c627550 51687369 65756575     ....PublishQueue
 8084ec8:	6e797341 75710063 69657565 6520676e     Async.queueing e
 8084ed8:	746e6576 656d614e 2073253d 61746164     ventName=%s data
 8084ee8:	2073253d 3d6c7474 66206425 7367616c     =%s ttl=%d flags
 8084ef8:	64253d31 616c6620 3d327367 73206425     1=%d flags2=%d s
 8084f08:	3d657a69 70006425 696c6275 6e696873     ize=%d.publishin
 8084f18:	73252067 20732520 3d6c7474 66206425     g %s %s ttl=%d f
 8084f28:	7367616c 0078253d 6c627570 65687369     lags=%x.publishe
 8084f38:	75732064 73656363 6c756673 7000796c     d successfully.p
 8084f48:	696c6275 64656873 69616620 2c64656c     ublished failed,
 8084f58:	6c697720 6572206c 20797274 25206e69      will retry in %
 8084f68:	6d20756c 70610073 75702e70 00007162     lu ms.app.pubq..

08084f78 <_ZTV21PublishQueueAsyncBase>:
	...
 8084f88:	080815b1 080800b9 080800b9 080800b9     ................
 8084f98:	080800b9 080800b9                       ........

08084fa0 <_ZTV25PublishQueueAsyncRetained>:
	...
 8084fa8:	08081699 080816ad 080815b1 0808173d     ............=...
 8084fb8:	080816fd 080816db 0808187f 08081723     ............#...

08084fc8 <_ZTVN5spark13CellularClassE>:
	...
 8084fd0:	08082255 0808224b 08082241 080821bb     U"..K"..A"...!..
 8084fe0:	08082235 08082229 08082cd1 08082cd9     5"..)"...,...,..
 8084ff0:	0808221d 08082215 0808220b 08082201     ."..."..."..."..
 8085000:	080821c5                                .!..

08085004 <_ZTV14CellularSignal>:
	...
 808500c:	08082305 0808230b 08082307 08082319     .#...#...#...#..
 808501c:	08082349 0808236d 0808239d 080823e5     I#..m#...#...#..
 808502c:	fffffffc 00000000 0808240b              .........$..

08085038 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8085040:	0808242b 08082431 0808246f 0808243f     +$..1$..o$..?$..
 8085050:	0808242d                                -$..

08085054 <_ZTV7TwoWire>:
	...
 808505c:	08082a41 08082a8b 08082a63 08082a43     A*...*..c*..C*..
 808506c:	08082a6b 08082a73 08082a7b 08082a83     k*..s*..{*...*..

0808507c <_ZTV9IPAddress>:
	...
 8085084:	08082bf1 08082be1 08082be3 00707061     .+...+...+..app.

08085094 <_ZTVN5spark12NetworkClassE>:
	...
 808509c:	08082c91 08082c9b 08082ca5 08082caf     .,...,...,...,..
 80850ac:	08082cb9 08082cc5 08082cd1 08082cd9     .,...,...,...,..
 80850bc:	08082ce1 08082ced 08082cf5 08082cff     .,...,...,...,..
 80850cc:	08082d09 252d5925 64252d6d 3a482554     .-..%Y-%m-%dT%H:
 80850dc:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

080850ec <_ZTV11USARTSerial>:
	...
 80850f4:	08083339 080833a1 0808337d 08082d65     93...3..}3..e-..
 8085104:	0808334d 08083369 0808335b 08083377     M3..i3..[3..w3..
 8085114:	0808333b 0808333f                       ;3..?3..

0808511c <_ZTV9USBSerial>:
	...
 8085124:	08083431 08083497 0808346f 08082d65     14...4..o4..e-..
 8085134:	08083461 08083433 08083443 08083491     a4..34..C4...4..
 8085144:	08083453 0808342d                       S4..-4..

0808514c <_ZSt7nothrow>:
 808514c:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
 808515c:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

0808516d <day_name.4782>:
 808516d:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
 808517d:	61536972                                 riSat

08085182 <mon_name.4783>:
 8085182:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
 8085192:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
 80851a2:	63654476                                vDec

080851a6 <_ctype_>:
 80851a6:	20202000 20202020 28282020 20282828     .         ((((( 
 80851b6:	20202020 20202020 20202020 20202020                     
 80851c6:	10108820 10101010 10101010 10101010      ...............
 80851d6:	04040410 04040404 10040404 10101010     ................
 80851e6:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80851f6:	01010101 01010101 01010101 10101010     ................
 8085206:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8085216:	02020202 02020202 02020202 10101010     ................
 8085226:	00000020 00000000 00000000 00000000      ...............
	...

080852a7 <link_const_variable_data_end>:
	...

080852a8 <link_constructors_location>:
 80852a8:	080811c1 	.word	0x080811c1
 80852ac:	08081b11 	.word	0x08081b11
 80852b0:	080822d5 	.word	0x080822d5
 80852b4:	08082c81 	.word	0x08082c81
 80852b8:	08082d51 	.word	0x08082d51
 80852bc:	08082dfd 	.word	0x08082dfd
 80852c0:	08083069 	.word	0x08083069
 80852c4:	08083325 	.word	0x08083325
 80852c8:	08083929 	.word	0x08083929

080852cc <link_constructors_end>:
 80852cc:	00000000 	.word	0x00000000
