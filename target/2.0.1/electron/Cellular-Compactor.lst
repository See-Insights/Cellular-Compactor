
/Users/chipmc/Documents/Maker/Particle/Projects/Cellular-Compactor/target/2.0.1/electron/Cellular-Compactor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000051b0  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000804  40024000  080851d0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000fc  20000000  080859d4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006f8  20000100  20000100  00040100  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  08085ad0  08085ad0  00035ad0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  08085afc  08085afc  00035afc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0012de79  00000000  00000000  00035b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00016423  00000000  00000000  00163979  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000026b8  00000000  00000000  00179d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000063f8  00000000  00000000  0017c454  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000299d8  00000000  00000000  0018284c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000325a1  00000000  00000000  001ac224  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000b8832  00000000  00000000  001de7c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000661c  00000000  00000000  00296ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0001e1bb  00000000  00000000  0029d614  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <localtime_r>:
#endif // !(defined(DYNALIB_IMPORT) && defined(PARTICLE_COMPILE_LTO))
DYNALIB_FN(18, services2, mktime32, time32_t(struct tm*))
DYNALIB_FN(19, services2, __ssvfscanf_r, int(struct _reent*, FILE*, const char*, va_list))
DYNALIB_FN(20, services2, _printf_i, int(struct _reent*, struct _prt_data_t*, FILE*, int (*pfunc)(struct _reent *, FILE *, const char *, size_t), va_list*))
DYNALIB_FN(21, services2, localtime32_r, struct tm*(const time32_t*, struct tm*))
DYNALIB_FN(22, services2, localtime_r, struct tm*(const time_t*, struct tm*))
 8080020:	b508      	push	{r3, lr}
 8080022:	4b02      	ldr	r3, [pc, #8]	; (808002c <localtime_r+0xc>)
 8080024:	681b      	ldr	r3, [r3, #0]
 8080026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080028:	9301      	str	r3, [sp, #4]
 808002a:	bd08      	pop	{r3, pc}
 808002c:	0806002c 	.word	0x0806002c

08080030 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080030:	4809      	ldr	r0, [pc, #36]	; (8080058 <module_user_pre_init+0x28>)
 8080032:	490a      	ldr	r1, [pc, #40]	; (808005c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080034:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080036:	4288      	cmp	r0, r1
 8080038:	d005      	beq.n	8080046 <module_user_pre_init+0x16>
 808003a:	4a09      	ldr	r2, [pc, #36]	; (8080060 <module_user_pre_init+0x30>)
 808003c:	4282      	cmp	r2, r0
 808003e:	d002      	beq.n	8080046 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080040:	1a12      	subs	r2, r2, r0
 8080042:	f004 fbe3 	bl	808480c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080046:	4807      	ldr	r0, [pc, #28]	; (8080064 <module_user_pre_init+0x34>)
 8080048:	4a07      	ldr	r2, [pc, #28]	; (8080068 <module_user_pre_init+0x38>)
 808004a:	2100      	movs	r1, #0
 808004c:	1a12      	subs	r2, r2, r0
 808004e:	f004 fc05 	bl	808485c <memset>
    return &link_heap_start;
}
 8080052:	4806      	ldr	r0, [pc, #24]	; (808006c <module_user_pre_init+0x3c>)
 8080054:	bd08      	pop	{r3, pc}
 8080056:	bf00      	nop
 8080058:	20000000 	.word	0x20000000
 808005c:	080859d4 	.word	0x080859d4
 8080060:	200000fc 	.word	0x200000fc
 8080064:	20000100 	.word	0x20000100
 8080068:	200007f8 	.word	0x200007f8
 808006c:	200007f8 	.word	0x200007f8

08080070 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080070:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080072:	f003 facd 	bl	8083610 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080076:	2500      	movs	r5, #0
 8080078:	4e05      	ldr	r6, [pc, #20]	; (8080090 <module_user_init+0x20>)
 808007a:	4c06      	ldr	r4, [pc, #24]	; (8080094 <module_user_init+0x24>)
 808007c:	1ba4      	subs	r4, r4, r6
 808007e:	08a4      	lsrs	r4, r4, #2
 8080080:	42a5      	cmp	r5, r4
 8080082:	d100      	bne.n	8080086 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080084:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080086:	f856 3b04 	ldr.w	r3, [r6], #4
 808008a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808008c:	3501      	adds	r5, #1
 808008e:	e7f7      	b.n	8080080 <module_user_init+0x10>
 8080090:	080851a0 	.word	0x080851a0
 8080094:	080851c4 	.word	0x080851c4

08080098 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080098:	f000 be3a 	b.w	8080d10 <setup>

0808009c <module_user_loop>:
}

void module_user_loop() {
 808009c:	b508      	push	{r3, lr}
    loop();
 808009e:	f000 fc77 	bl	8080990 <loop>
    _post_loop();
}
 80800a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80800a6:	f003 ba75 	b.w	8083594 <_post_loop>

080800aa <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80800aa:	f001 bfe3 	b.w	8082074 <malloc>

080800ae <_Znaj>:
 80800ae:	f001 bfe1 	b.w	8082074 <malloc>

080800b2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80800b2:	f001 bfe7 	b.w	8082084 <free>
	...

080800b8 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800b8:	2100      	movs	r1, #0
 80800ba:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80800bc:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800be:	4a02      	ldr	r2, [pc, #8]	; (80800c8 <__cxa_pure_virtual+0x10>)
 80800c0:	f001 feba 	bl	8081e38 <panic_>
  while (1);
 80800c4:	e7fe      	b.n	80800c4 <__cxa_pure_virtual+0xc>
 80800c6:	bf00      	nop
 80800c8:	08081b99 	.word	0x08081b99

080800cc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800cc:	7800      	ldrb	r0, [r0, #0]
 80800ce:	fab0 f080 	clz	r0, r0
 80800d2:	0940      	lsrs	r0, r0, #5
 80800d4:	4770      	bx	lr

080800d6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800d6:	2301      	movs	r3, #1
 80800d8:	7003      	strb	r3, [r0, #0]
 80800da:	4770      	bx	lr

080800dc <_Z11watchdogISRv>:
  watchdogFlag = false;
}

// Here is were we will put the timer and other ISRs
void watchdogISR() {
  watchdogFlag = true;
 80800dc:	2201      	movs	r2, #1
 80800de:	4b01      	ldr	r3, [pc, #4]	; (80800e4 <_Z11watchdogISRv+0x8>)
 80800e0:	701a      	strb	r2, [r3, #0]
}
 80800e2:	4770      	bx	lr
 80800e4:	20000205 	.word	0x20000205

080800e8 <_Z9input1ISRv>:

void input1ISR() {
  input1Flag = true;
 80800e8:	2201      	movs	r2, #1
 80800ea:	4b01      	ldr	r3, [pc, #4]	; (80800f0 <_Z9input1ISRv+0x8>)
 80800ec:	701a      	strb	r2, [r3, #0]
}
 80800ee:	4770      	bx	lr
 80800f0:	200001ac 	.word	0x200001ac

080800f4 <_Z9input2ISRv>:

void input2ISR() {
  input2Flag = true;
 80800f4:	2201      	movs	r2, #1
 80800f6:	4b01      	ldr	r3, [pc, #4]	; (80800fc <_Z9input2ISRv+0x8>)
 80800f8:	701a      	strb	r2, [r3, #0]
}
 80800fa:	4770      	bx	lr
 80800fc:	200001ad 	.word	0x200001ad

08080100 <_Z7sendNow6String>:
    return 1;                                 // Unfortunately, this will never be sent
  }
  else return 0;
}

int sendNow(String command) {// Function to force sending data in current hour
 8080100:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8080102:	4904      	ldr	r1, [pc, #16]	; (8080114 <_Z7sendNow6String+0x14>)
 8080104:	f002 feb4 	bl	8082e70 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080108:	b118      	cbz	r0, 8080112 <_Z7sendNow6String+0x12>
  {
    state = REPORTING_STATE;
 808010a:	2205      	movs	r2, #5
    return 1;
 808010c:	2001      	movs	r0, #1
    state = REPORTING_STATE;
 808010e:	4b02      	ldr	r3, [pc, #8]	; (8080118 <_Z7sendNow6String+0x18>)
 8080110:	701a      	strb	r2, [r3, #0]
  }
  else return 0;
}
 8080112:	bd08      	pop	{r3, pc}
 8080114:	08084aa4 	.word	0x08084aa4
 8080118:	200001ec 	.word	0x200001ec

0808011c <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
 808011c:	b510      	push	{r4, lr}
 808011e:	4604      	mov	r4, r0
 8080120:	4b02      	ldr	r3, [pc, #8]	; (808012c <_ZN17PublishQueueAsyncD1Ev+0x10>)
 8080122:	6003      	str	r3, [r0, #0]
 8080124:	f001 fa7c 	bl	8081620 <_ZN25PublishQueueAsyncRetainedD1Ev>
 8080128:	4620      	mov	r0, r4
 808012a:	bd10      	pop	{r4, pc}
 808012c:	08084d28 	.word	0x08084d28

08080130 <_ZN17PublishQueueAsyncD0Ev>:
 8080130:	b510      	push	{r4, lr}
 8080132:	4604      	mov	r4, r0
 8080134:	f7ff fff2 	bl	808011c <_ZN17PublishQueueAsyncD1Ev>
 8080138:	4620      	mov	r0, r4
 808013a:	2138      	movs	r1, #56	; 0x38
 808013c:	f003 fbb7 	bl	80838ae <_ZdlPvj>
 8080140:	4620      	mov	r0, r4
 8080142:	bd10      	pop	{r4, pc}

08080144 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
 8080144:	b510      	push	{r4, lr}
 8080146:	4604      	mov	r4, r0
 8080148:	4b02      	ldr	r3, [pc, #8]	; (8080154 <_ZN8MB85RC64D1Ev+0x10>)
 808014a:	6003      	str	r3, [r0, #0]
 808014c:	f001 f864 	bl	8081218 <_ZN6MB85RCD1Ev>
 8080150:	4620      	mov	r0, r4
 8080152:	bd10      	pop	{r4, pc}
 8080154:	08084d0c 	.word	0x08084d0c

08080158 <_ZN8MB85RC64D0Ev>:
 8080158:	b510      	push	{r4, lr}
 808015a:	4604      	mov	r4, r0
 808015c:	f7ff fff2 	bl	8080144 <_ZN8MB85RC64D1Ev>
 8080160:	4620      	mov	r0, r4
 8080162:	2110      	movs	r1, #16
 8080164:	f003 fba3 	bl	80838ae <_ZdlPvj>
 8080168:	4620      	mov	r0, r4
 808016a:	bd10      	pop	{r4, pc}

0808016c <_Z12hardResetNow6String>:
int hardResetNow(String command) {  // Will perform a hard reset on the Electron
 808016c:	b508      	push	{r3, lr}
 808016e:	4905      	ldr	r1, [pc, #20]	; (8080184 <_Z12hardResetNow6String+0x18>)
 8080170:	f002 fe7e 	bl	8082e70 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080174:	b120      	cbz	r0, 8080180 <_Z12hardResetNow6String+0x14>
    digitalWrite(hardResetPin,HIGH);          // This will cut all power to the Electron AND the carrir board
 8080176:	2004      	movs	r0, #4
 8080178:	2101      	movs	r1, #1
 808017a:	f003 faf2 	bl	8083762 <digitalWrite>
 808017e:	2001      	movs	r0, #1
}
 8080180:	bd08      	pop	{r3, pc}
 8080182:	bf00      	nop
 8080184:	08084aa4 	.word	0x08084aa4

08080188 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 8080188:	b510      	push	{r4, lr}
 808018a:	4604      	mov	r4, r0
        if (wakeupSource_) {
 808018c:	6800      	ldr	r0, [r0, #0]
 808018e:	b108      	cbz	r0, 8080194 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 8080190:	f001 ff78 	bl	8082084 <free>
class SystemClass {
 8080194:	4620      	mov	r0, r4
 8080196:	bd10      	pop	{r4, pc}

08080198 <_ZN10CloudClass8syncTimeEv.isra.0>:
    void unsubscribe()
    {
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
 8080198:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808019a:	f001 fedb 	bl	8081f54 <spark_cloud_flag_connected>
        if (!connected()) {
 808019e:	b120      	cbz	r0, 80801aa <_ZN10CloudClass8syncTimeEv.isra.0+0x12>
    }
 80801a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return spark_sync_time(NULL);
 80801a4:	2000      	movs	r0, #0
 80801a6:	f001 bef5 	b.w	8081f94 <spark_sync_time>
    }
 80801aa:	bd08      	pop	{r3, pc}

080801ac <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
 80801ac:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80801ae:	2000      	movs	r0, #0
 80801b0:	f001 fef8 	bl	8081fa4 <spark_sync_time_pending>
 80801b4:	b128      	cbz	r0, 80801c2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80801b6:	f001 fecd 	bl	8081f54 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80801ba:	f080 0001 	eor.w	r0, r0, #1
 80801be:	b2c0      	uxtb	r0, r0
    }
 80801c0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80801c2:	2001      	movs	r0, #1
 80801c4:	e7fc      	b.n	80801c0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

080801c6 <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80801c6:	2000      	movs	r0, #0
 80801c8:	f001 bcfe 	b.w	8081bc8 <hal_timer_millis>

080801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
 80801cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80801ce:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
 80801d2:	6804      	ldr	r4, [r0, #0]
 80801d4:	f88d 3000 	strb.w	r3, [sp]
 80801d8:	f88d 5004 	strb.w	r5, [sp, #4]
 80801dc:	233c      	movs	r3, #60	; 0x3c
 80801de:	68e4      	ldr	r4, [r4, #12]
 80801e0:	47a0      	blx	r4
	}
 80801e2:	b003      	add	sp, #12
 80801e4:	bd30      	pop	{r4, r5, pc}
	...

080801e8 <_Z14UbidotsHandlerPKcS0_>:
{
 80801e8:	b513      	push	{r0, r1, r4, lr}
  if (!data) {                                            // First check to see if there is any data
 80801ea:	460c      	mov	r4, r1
 80801ec:	b951      	cbnz	r1, 8080204 <_Z14UbidotsHandlerPKcS0_+0x1c>
    publishQueue.publish("Ubidots Hook", "No Data",PRIVATE);
 80801ee:	4b17      	ldr	r3, [pc, #92]	; (808024c <_Z14UbidotsHandlerPKcS0_+0x64>)
 80801f0:	f88d 1000 	strb.w	r1, [sp]
 80801f4:	781b      	ldrb	r3, [r3, #0]
 80801f6:	4a16      	ldr	r2, [pc, #88]	; (8080250 <_Z14UbidotsHandlerPKcS0_+0x68>)
  else publishQueue.publish("Ubidots Hook", data,PRIVATE);             // Publish the response code
 80801f8:	4916      	ldr	r1, [pc, #88]	; (8080254 <_Z14UbidotsHandlerPKcS0_+0x6c>)
 80801fa:	4817      	ldr	r0, [pc, #92]	; (8080258 <_Z14UbidotsHandlerPKcS0_+0x70>)
 80801fc:	f7ff ffe6 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
 8080200:	b002      	add	sp, #8
 8080202:	bd10      	pop	{r4, pc}
  int responseCode = atoi(data);                          // Response is only a single number thanks to Template
 8080204:	4608      	mov	r0, r1
 8080206:	f004 faef 	bl	80847e8 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
 808020a:	38c8      	subs	r0, #200	; 0xc8
 808020c:	2801      	cmp	r0, #1
 808020e:	d815      	bhi.n	808023c <_Z14UbidotsHandlerPKcS0_+0x54>
    if(sysStatus.verboseMode) publishQueue.publish("State","Response Received",PRIVATE);
 8080210:	4b12      	ldr	r3, [pc, #72]	; (808025c <_Z14UbidotsHandlerPKcS0_+0x74>)
 8080212:	78db      	ldrb	r3, [r3, #3]
 8080214:	b14b      	cbz	r3, 808022a <_Z14UbidotsHandlerPKcS0_+0x42>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080216:	2300      	movs	r3, #0
 8080218:	f88d 3000 	strb.w	r3, [sp]
 808021c:	4b0b      	ldr	r3, [pc, #44]	; (808024c <_Z14UbidotsHandlerPKcS0_+0x64>)
 808021e:	4a10      	ldr	r2, [pc, #64]	; (8080260 <_Z14UbidotsHandlerPKcS0_+0x78>)
 8080220:	781b      	ldrb	r3, [r3, #0]
 8080222:	4910      	ldr	r1, [pc, #64]	; (8080264 <_Z14UbidotsHandlerPKcS0_+0x7c>)
 8080224:	480c      	ldr	r0, [pc, #48]	; (8080258 <_Z14UbidotsHandlerPKcS0_+0x70>)
 8080226:	f7ff ffd1 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    dataInFlight = false;                                 // Data has been received
 808022a:	2100      	movs	r1, #0
    digitalWrite(blueLED, LOW);                           // Reset the LED and flags
 808022c:	2007      	movs	r0, #7
    dataInFlight = false;                                 // Data has been received
 808022e:	4b0e      	ldr	r3, [pc, #56]	; (8080268 <_Z14UbidotsHandlerPKcS0_+0x80>)
 8080230:	7019      	strb	r1, [r3, #0]
}
 8080232:	b002      	add	sp, #8
 8080234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(blueLED, LOW);                           // Reset the LED and flags
 8080238:	f003 ba93 	b.w	8083762 <digitalWrite>
 808023c:	2300      	movs	r3, #0
  else publishQueue.publish("Ubidots Hook", data,PRIVATE);             // Publish the response code
 808023e:	f88d 3000 	strb.w	r3, [sp]
 8080242:	4b02      	ldr	r3, [pc, #8]	; (808024c <_Z14UbidotsHandlerPKcS0_+0x64>)
 8080244:	4622      	mov	r2, r4
 8080246:	781b      	ldrb	r3, [r3, #0]
 8080248:	e7d6      	b.n	80801f8 <_Z14UbidotsHandlerPKcS0_+0x10>
 808024a:	bf00      	nop
 808024c:	20000158 	.word	0x20000158
 8080250:	08084aa6 	.word	0x08084aa6
 8080254:	08084aae 	.word	0x08084aae
 8080258:	200001b0 	.word	0x200001b0
 808025c:	200001f0 	.word	0x200001f0
 8080260:	08084abb 	.word	0x08084abb
 8080264:	08084acd 	.word	0x08084acd
 8080268:	2000019b 	.word	0x2000019b

0808026c <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
 808026c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808026e:	4912      	ldr	r1, [pc, #72]	; (80802b8 <_Z14setVerboseMode6String+0x4c>)
 8080270:	4605      	mov	r5, r0
 8080272:	f002 fdfd 	bl	8082e70 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080276:	4604      	mov	r4, r0
 8080278:	b178      	cbz	r0, 808029a <_Z14setVerboseMode6String+0x2e>
  {
    sysStatus.verboseMode = true;
 808027a:	2401      	movs	r4, #1
 808027c:	4b0f      	ldr	r3, [pc, #60]	; (80802bc <_Z14setVerboseMode6String+0x50>)
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
 808027e:	4a10      	ldr	r2, [pc, #64]	; (80802c0 <_Z14setVerboseMode6String+0x54>)
    sysStatus.verboseMode = true;
 8080280:	70dc      	strb	r4, [r3, #3]
 8080282:	2300      	movs	r3, #0
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
 8080284:	f88d 3000 	strb.w	r3, [sp]
 8080288:	4b0e      	ldr	r3, [pc, #56]	; (80802c4 <_Z14setVerboseMode6String+0x58>)
 808028a:	781b      	ldrb	r3, [r3, #0]
    return 1;
  }
  else if (command == "0")
  {
    sysStatus.verboseMode = false;
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
 808028c:	490e      	ldr	r1, [pc, #56]	; (80802c8 <_Z14setVerboseMode6String+0x5c>)
 808028e:	480f      	ldr	r0, [pc, #60]	; (80802cc <_Z14setVerboseMode6String+0x60>)
 8080290:	f7ff ff9c 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
 8080294:	2001      	movs	r0, #1
    return 1;
  }
  else return 0;
}
 8080296:	b003      	add	sp, #12
 8080298:	bd30      	pop	{r4, r5, pc}
 808029a:	4628      	mov	r0, r5
 808029c:	490c      	ldr	r1, [pc, #48]	; (80802d0 <_Z14setVerboseMode6String+0x64>)
 808029e:	f002 fde7 	bl	8082e70 <_ZNK6String6equalsEPKc>
  else if (command == "0")
 80802a2:	2800      	cmp	r0, #0
 80802a4:	d0f7      	beq.n	8080296 <_Z14setVerboseMode6String+0x2a>
    sysStatus.verboseMode = false;
 80802a6:	4b05      	ldr	r3, [pc, #20]	; (80802bc <_Z14setVerboseMode6String+0x50>)
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
 80802a8:	4a0a      	ldr	r2, [pc, #40]	; (80802d4 <_Z14setVerboseMode6String+0x68>)
    sysStatus.verboseMode = false;
 80802aa:	70dc      	strb	r4, [r3, #3]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
 80802ac:	4b05      	ldr	r3, [pc, #20]	; (80802c4 <_Z14setVerboseMode6String+0x58>)
 80802ae:	f88d 4000 	strb.w	r4, [sp]
 80802b2:	781b      	ldrb	r3, [r3, #0]
 80802b4:	e7ea      	b.n	808028c <_Z14setVerboseMode6String+0x20>
 80802b6:	bf00      	nop
 80802b8:	08084aa4 	.word	0x08084aa4
 80802bc:	200001f0 	.word	0x200001f0
 80802c0:	08084ad3 	.word	0x08084ad3
 80802c4:	20000158 	.word	0x20000158
 80802c8:	08084af6 	.word	0x08084af6
 80802cc:	200001b0 	.word	0x200001b0
 80802d0:	08084ae4 	.word	0x08084ae4
 80802d4:	08084ae6 	.word	0x08084ae6

080802d8 <_Z11setTimeZone6String>:
  // None for lastHookResponse
  currentStatusWriteNeeded = true;
}

int setTimeZone(String command)
{
 80802d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80802dc:	b0c8      	sub	sp, #288	; 0x120
 80802de:	4680      	mov	r8, r0
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
 80802e0:	f7ff ff5a 	bl	8080198 <_ZN10CloudClass8syncTimeEv.isra.0>
        const system_tick_t start = millis();
 80802e4:	f7ff ff6f 	bl	80801c6 <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80802e8:	f04f 0a00 	mov.w	sl, #0
        const system_tick_t start = millis();
 80802ec:	4681      	mov	r9, r0
        while (_while() && !_condition()) {
 80802ee:	f247 562f 	movw	r6, #29999	; 0x752f
 80802f2:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80802f4:	f7ff ff67 	bl	80801c6 <_ZN11SystemClass6millisEv>
 80802f8:	ebb0 0409 	subs.w	r4, r0, r9
 80802fc:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
 8080300:	42af      	cmp	r7, r5
 8080302:	bf08      	it	eq
 8080304:	42a6      	cmpeq	r6, r4
 8080306:	d305      	bcc.n	8080314 <_Z11setTimeZone6String+0x3c>
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
 8080308:	f7ff ff50 	bl	80801ac <_ZN10CloudClass12syncTimeDoneEv.isra.0>
 808030c:	b910      	cbnz	r0, 8080314 <_Z11setTimeZone6String+0x3c>
            spark_process();
 808030e:	f001 fe11 	bl	8081f34 <spark_process>
        while (_while() && !_condition()) {
 8080312:	e7ef      	b.n	80802f4 <_Z11setTimeZone6String+0x1c>
 8080314:	f7ff ff4a 	bl	80801ac <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8080318:	220a      	movs	r2, #10
 808031a:	f8d8 0000 	ldr.w	r0, [r8]
 808031e:	a903      	add	r1, sp, #12
 8080320:	f004 fb8a 	bl	8084a38 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
 8080324:	f100 030c 	add.w	r3, r0, #12
 8080328:	b2db      	uxtb	r3, r3
 808032a:	2b18      	cmp	r3, #24
 808032c:	d846      	bhi.n	80803bc <_Z11setTimeZone6String+0xe4>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 808032e:	b245      	sxtb	r5, r0
  sysStatus.timezone = (float)tempTimeZoneOffset;
 8080330:	4628      	mov	r0, r5
 8080332:	f003 ffe5 	bl	8084300 <__aeabi_i2f>
  Time.zone(sysStatus.timezone);
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
 8080336:	2401      	movs	r4, #1
  sysStatus.timezone = (float)tempTimeZoneOffset;
 8080338:	4b25      	ldr	r3, [pc, #148]	; (80803d0 <_Z11setTimeZone6String+0xf8>)
 808033a:	6098      	str	r0, [r3, #8]
  Time.zone(sysStatus.timezone);
 808033c:	f002 feb0 	bl	80830a0 <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
 8080340:	4b24      	ldr	r3, [pc, #144]	; (80803d4 <_Z11setTimeZone6String+0xfc>)
 8080342:	701c      	strb	r4, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
 8080344:	f002 ff86 	bl	8083254 <_ZN9TimeClass5localEv>
 8080348:	4606      	mov	r6, r0
 808034a:	f002 ff4a 	bl	80831e2 <_ZN9TimeClass3nowEv>
 808034e:	1a30      	subs	r0, r6, r0
 8080350:	f003 fc08 	bl	8083b64 <__aeabi_i2d>
 8080354:	a31c      	add	r3, pc, #112	; (adr r3, 80803c8 <_Z11setTimeZone6String+0xf0>)
 8080356:	e9d3 2300 	ldrd	r2, r3, [r3]
 808035a:	f003 fd97 	bl	8083e8c <__aeabi_ddiv>
 808035e:	4a1e      	ldr	r2, [pc, #120]	; (80803d8 <_Z11setTimeZone6String+0x100>)
 8080360:	e9cd 0100 	strd	r0, r1, [sp]
 8080364:	210a      	movs	r1, #10
 8080366:	481d      	ldr	r0, [pc, #116]	; (80803dc <_Z11setTimeZone6String+0x104>)
 8080368:	f001 fea4 	bl	80820b4 <snprintf>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 808036c:	f001 fdf2 	bl	8081f54 <spark_cloud_flag_connected>
  if (Particle.connected()) {
 8080370:	b310      	cbz	r0, 80803b8 <_Z11setTimeZone6String+0xe0>
 8080372:	2600      	movs	r6, #0
    snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 8080374:	462b      	mov	r3, r5
 8080376:	f44f 7180 	mov.w	r1, #256	; 0x100
 808037a:	4a19      	ldr	r2, [pc, #100]	; (80803e0 <_Z11setTimeZone6String+0x108>)
 808037c:	4d19      	ldr	r5, [pc, #100]	; (80803e4 <_Z11setTimeZone6String+0x10c>)
 808037e:	a808      	add	r0, sp, #32
 8080380:	f001 fe98 	bl	80820b4 <snprintf>
    publishQueue.publish("Time",data, PRIVATE);
 8080384:	f88d 6000 	strb.w	r6, [sp]
 8080388:	4917      	ldr	r1, [pc, #92]	; (80803e8 <_Z11setTimeZone6String+0x110>)
 808038a:	782b      	ldrb	r3, [r5, #0]
 808038c:	aa08      	add	r2, sp, #32
 808038e:	4817      	ldr	r0, [pc, #92]	; (80803ec <_Z11setTimeZone6String+0x114>)
 8080390:	f7ff ff1c 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
 8080394:	f002 ff25 	bl	80831e2 <_ZN9TimeClass3nowEv>
 8080398:	4602      	mov	r2, r0
 808039a:	17c3      	asrs	r3, r0, #31
 808039c:	a804      	add	r0, sp, #16
 808039e:	f002 fecb 	bl	8083138 <_ZN9TimeClass7timeStrEx>
 80803a2:	f88d 6000 	strb.w	r6, [sp]
 80803a6:	782b      	ldrb	r3, [r5, #0]
 80803a8:	9a04      	ldr	r2, [sp, #16]
 80803aa:	490f      	ldr	r1, [pc, #60]	; (80803e8 <_Z11setTimeZone6String+0x110>)
 80803ac:	480f      	ldr	r0, [pc, #60]	; (80803ec <_Z11setTimeZone6String+0x114>)
 80803ae:	f7ff ff0d 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
 80803b2:	a804      	add	r0, sp, #16
 80803b4:	f002 fce5 	bl	8082d82 <_ZN6StringD1Ev>
  }
  return 1;
 80803b8:	4620      	mov	r0, r4
 80803ba:	e000      	b.n	80803be <_Z11setTimeZone6String+0xe6>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
 80803bc:	2000      	movs	r0, #0
}
 80803be:	b048      	add	sp, #288	; 0x120
 80803c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80803c4:	f3af 8000 	nop.w
 80803c8:	00000000 	.word	0x00000000
 80803cc:	40ac2000 	.word	0x40ac2000
 80803d0:	200001f0 	.word	0x200001f0
 80803d4:	20000204 	.word	0x20000204
 80803d8:	08084afb 	.word	0x08084afb
 80803dc:	20000190 	.word	0x20000190
 80803e0:	08084b05 	.word	0x08084b05
 80803e4:	20000158 	.word	0x20000158
 80803e8:	08084b19 	.word	0x08084b19
 80803ec:	200001b0 	.word	0x200001b0

080803f0 <_Z16takeMeasurementsv>:
bool takeMeasurements() {                                               // We get to this function only after a debounced interrupt (LOW) as indicated by interrupt flags
 80803f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (input1Flag) {                                                     // input1 triggered an interrupt on LOW - and was debounced
 80803f2:	4b36      	ldr	r3, [pc, #216]	; (80804cc <_Z16takeMeasurementsv+0xdc>)
 80803f4:	781a      	ldrb	r2, [r3, #0]
 80803f6:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 80803fa:	2a00      	cmp	r2, #0
 80803fc:	d050      	beq.n	80804a0 <_Z16takeMeasurementsv+0xb0>
    input1Flag = false;
 80803fe:	2200      	movs	r2, #0
    static unsigned long cycleCountStarted = millis();  
 8080400:	4d33      	ldr	r5, [pc, #204]	; (80804d0 <_Z16takeMeasurementsv+0xe0>)
    input1Flag = false;
 8080402:	701a      	strb	r2, [r3, #0]
    static unsigned long cycleCountStarted = millis();  
 8080404:	782b      	ldrb	r3, [r5, #0]
 8080406:	4e33      	ldr	r6, [pc, #204]	; (80804d4 <_Z16takeMeasurementsv+0xe4>)
 8080408:	f013 0f01 	tst.w	r3, #1
 808040c:	f3bf 8f5b 	dmb	ish
 8080410:	d109      	bne.n	8080426 <_Z16takeMeasurementsv+0x36>
 8080412:	4628      	mov	r0, r5
 8080414:	f7ff fe5a 	bl	80800cc <__cxa_guard_acquire>
 8080418:	b128      	cbz	r0, 8080426 <_Z16takeMeasurementsv+0x36>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808041a:	f001 fbc5 	bl	8081ba8 <HAL_Timer_Get_Milli_Seconds>
 808041e:	6030      	str	r0, [r6, #0]
 8080420:	4628      	mov	r0, r5
 8080422:	f7ff fe58 	bl	80800d6 <__cxa_guard_release>
 8080426:	f001 fbbf 	bl	8081ba8 <HAL_Timer_Get_Milli_Seconds>
    if ((millis() - cycleCountStarted > 15000) && current.input1 == 2) {  // What happens if we are on 75% full already and looking to see if flashing and it has been too long (giving 15 seconds for 5 cycles)
 808042a:	6833      	ldr	r3, [r6, #0]
 808042c:	4d2a      	ldr	r5, [pc, #168]	; (80804d8 <_Z16takeMeasurementsv+0xe8>)
 808042e:	1ac0      	subs	r0, r0, r3
 8080430:	f643 2398 	movw	r3, #15000	; 0x3a98
 8080434:	4298      	cmp	r0, r3
 8080436:	d90a      	bls.n	808044e <_Z16takeMeasurementsv+0x5e>
 8080438:	4b28      	ldr	r3, [pc, #160]	; (80804dc <_Z16takeMeasurementsv+0xec>)
 808043a:	781b      	ldrb	r3, [r3, #0]
 808043c:	2b02      	cmp	r3, #2
 808043e:	d106      	bne.n	808044e <_Z16takeMeasurementsv+0x5e>
      cycleCount = 0;                                                   // Reset the cycle counts 
 8080440:	2400      	movs	r4, #0
 8080442:	602c      	str	r4, [r5, #0]
 8080444:	f001 fbb0 	bl	8081ba8 <HAL_Timer_Get_Milli_Seconds>
      cycleCountStarted = millis();
 8080448:	6030      	str	r0, [r6, #0]
}
 808044a:	4620      	mov	r0, r4
 808044c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!cycleCount && current.input1 == 0) {                           // First interrupt and the Light is ON (input1 = LOW)
 808044e:	682b      	ldr	r3, [r5, #0]
 8080450:	b98b      	cbnz	r3, 8080476 <_Z16takeMeasurementsv+0x86>
 8080452:	4a22      	ldr	r2, [pc, #136]	; (80804dc <_Z16takeMeasurementsv+0xec>)
 8080454:	7811      	ldrb	r1, [r2, #0]
 8080456:	b981      	cbnz	r1, 808047a <_Z16takeMeasurementsv+0x8a>
      current.input1 = 2;                                               // Inidication is that we are now 75% full
 8080458:	2302      	movs	r3, #2
      cycleCount++;                                                     // Start counting cycles
 808045a:	2701      	movs	r7, #1
      current.input1 = 2;                                               // Inidication is that we are now 75% full
 808045c:	7013      	strb	r3, [r2, #0]
      strncpy(input1Str,"75% Full",sizeof(input1Str));
 808045e:	4920      	ldr	r1, [pc, #128]	; (80804e0 <_Z16takeMeasurementsv+0xf0>)
 8080460:	2210      	movs	r2, #16
 8080462:	4820      	ldr	r0, [pc, #128]	; (80804e4 <_Z16takeMeasurementsv+0xf4>)
 8080464:	f004 fa5b 	bl	808491e <strncpy>
      cycleCount++;                                                     // Start counting cycles
 8080468:	602f      	str	r7, [r5, #0]
 808046a:	f001 fb9d 	bl	8081ba8 <HAL_Timer_Get_Milli_Seconds>
      currentStatusWriteNeeded = true;
 808046e:	4b1e      	ldr	r3, [pc, #120]	; (80804e8 <_Z16takeMeasurementsv+0xf8>)
      cycleCountStarted = millis();                                     // Start the timer to reset cycleCount if too much time has passed
 8080470:	6030      	str	r0, [r6, #0]
      currentStatusWriteNeeded = true;
 8080472:	701f      	strb	r7, [r3, #0]
      return true;                                                      // We have a change to report
 8080474:	e7e9      	b.n	808044a <_Z16takeMeasurementsv+0x5a>
    else if (cycleCount < cyclesRequired) {
 8080476:	2b04      	cmp	r3, #4
 8080478:	dc03      	bgt.n	8080482 <_Z16takeMeasurementsv+0x92>
      cycleCount++;                                                     // Increment the counter
 808047a:	3301      	adds	r3, #1
      return false;                                                     // No change in state - return false
 808047c:	2400      	movs	r4, #0
      cycleCount++;                                                     // Increment the counter
 808047e:	602b      	str	r3, [r5, #0]
      return false;                                                     // No change in state - return false
 8080480:	e7e3      	b.n	808044a <_Z16takeMeasurementsv+0x5a>
      current.input1 = 1;                                               // We are at 100% full the light is flashing
 8080482:	2501      	movs	r5, #1
 8080484:	4e15      	ldr	r6, [pc, #84]	; (80804dc <_Z16takeMeasurementsv+0xec>)
      strncpy(input1Str,"100% Full",sizeof(input1Str));
 8080486:	2210      	movs	r2, #16
 8080488:	4918      	ldr	r1, [pc, #96]	; (80804ec <_Z16takeMeasurementsv+0xfc>)
 808048a:	4816      	ldr	r0, [pc, #88]	; (80804e4 <_Z16takeMeasurementsv+0xf4>)
      current.input1 = 1;                                               // We are at 100% full the light is flashing
 808048c:	7035      	strb	r5, [r6, #0]
      strncpy(input1Str,"100% Full",sizeof(input1Str));
 808048e:	f004 fa46 	bl	808491e <strncpy>
      detachInterrupt(input1);                                          // Will stop checking input 1 until a reset.                                  
 8080492:	2019      	movs	r0, #25
      currentStatusWriteNeeded = true;
 8080494:	4b14      	ldr	r3, [pc, #80]	; (80804e8 <_Z16takeMeasurementsv+0xf8>)
      current.warningFlag = true;                                       // Set the interrupt disconnected flag which will trigger the blue flashing LED
 8080496:	7435      	strb	r5, [r6, #16]
      currentStatusWriteNeeded = true;
 8080498:	701d      	strb	r5, [r3, #0]
    detachInterrupt(input2);                                            // Will stop checking input 2 until a reset.     
 808049a:	f002 fb35 	bl	8082b08 <_Z15detachInterruptt>
    return true;
 808049e:	e7d4      	b.n	808044a <_Z16takeMeasurementsv+0x5a>
  if (input2Flag) {                                                     // input2 triggered an interrupt by going LOW this is an alert
 80804a0:	4b13      	ldr	r3, [pc, #76]	; (80804f0 <_Z16takeMeasurementsv+0x100>)
 80804a2:	781a      	ldrb	r2, [r3, #0]
 80804a4:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 80804a8:	2a00      	cmp	r2, #0
 80804aa:	d0ce      	beq.n	808044a <_Z16takeMeasurementsv+0x5a>
    input2Flag = false;
 80804ac:	2200      	movs	r2, #0
    current.input2 = 1;                                                 // This is the alert value
 80804ae:	2501      	movs	r5, #1
 80804b0:	4e0a      	ldr	r6, [pc, #40]	; (80804dc <_Z16takeMeasurementsv+0xec>)
    input2Flag = false;
 80804b2:	701a      	strb	r2, [r3, #0]
    strncpy(input1Str,"Low Oil",sizeof(input1Str));
 80804b4:	490f      	ldr	r1, [pc, #60]	; (80804f4 <_Z16takeMeasurementsv+0x104>)
 80804b6:	2210      	movs	r2, #16
 80804b8:	480a      	ldr	r0, [pc, #40]	; (80804e4 <_Z16takeMeasurementsv+0xf4>)
    current.input2 = 1;                                                 // This is the alert value
 80804ba:	7075      	strb	r5, [r6, #1]
    strncpy(input1Str,"Low Oil",sizeof(input1Str));
 80804bc:	f004 fa2f 	bl	808491e <strncpy>
    currentStatusWriteNeeded = true;
 80804c0:	4b09      	ldr	r3, [pc, #36]	; (80804e8 <_Z16takeMeasurementsv+0xf8>)
    detachInterrupt(input2);                                            // Will stop checking input 2 until a reset.     
 80804c2:	201b      	movs	r0, #27
    current.warningFlag = true;                                         // Set the interrupt disconnected flag which will trigger the blue flashing LED
 80804c4:	7435      	strb	r5, [r6, #16]
    currentStatusWriteNeeded = true;
 80804c6:	701d      	strb	r5, [r3, #0]
    detachInterrupt(input2);                                            // Will stop checking input 2 until a reset.     
 80804c8:	e7e7      	b.n	808049a <_Z16takeMeasurementsv+0xaa>
 80804ca:	bf00      	nop
 80804cc:	200001ac 	.word	0x200001ac
 80804d0:	20000150 	.word	0x20000150
 80804d4:	20000160 	.word	0x20000160
 80804d8:	2000015c 	.word	0x2000015c
 80804dc:	20000178 	.word	0x20000178
 80804e0:	08084b1e 	.word	0x08084b1e
 80804e4:	20000000 	.word	0x20000000
 80804e8:	2000019a 	.word	0x2000019a
 80804ec:	08084b27 	.word	0x08084b27
 80804f0:	200001ad 	.word	0x200001ad
 80804f4:	08084b31 	.word	0x08084b31

080804f8 <_Z17getSignalStrengthv>:
void getSignalStrength() {
 80804f8:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
 80804fa:	4d17      	ldr	r5, [pc, #92]	; (8080558 <_Z17getSignalStrengthv+0x60>)
void getSignalStrength() {
 80804fc:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
 80804fe:	ac04      	add	r4, sp, #16
 8080500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8080502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8080504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8080506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8080508:	e895 0003 	ldmia.w	r5, {r0, r1}
 808050c:	e884 0003 	stmia.w	r4, {r0, r1}
  CellularSignal sig = Cellular.RSSI();
 8080510:	4912      	ldr	r1, [pc, #72]	; (808055c <_Z17getSignalStrengthv+0x64>)
 8080512:	a80e      	add	r0, sp, #56	; 0x38
 8080514:	f001 fe58 	bl	80821c8 <_ZN5spark13CellularClass4RSSIEv>
  auto rat = sig.getAccessTechnology();
 8080518:	a80e      	add	r0, sp, #56	; 0x38
 808051a:	f001 fea8 	bl	808226e <_ZNK14CellularSignal19getAccessTechnologyEv>
 808051e:	4604      	mov	r4, r0
  float strengthPercentage = sig.getStrength();
 8080520:	a80e      	add	r0, sp, #56	; 0x38
 8080522:	f001 fead 	bl	8082280 <_ZNK14CellularSignal11getStrengthEv>
 8080526:	4605      	mov	r5, r0
  float qualityPercentage = sig.getQuality();
 8080528:	a80e      	add	r0, sp, #56	; 0x38
 808052a:	f001 fed3 	bl	80822d4 <_ZNK14CellularSignal10getQualityEv>
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
 808052e:	ab18      	add	r3, sp, #96	; 0x60
 8080530:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8080534:	f003 fb28 	bl	8083b88 <__aeabi_f2d>
 8080538:	e9cd 0102 	strd	r0, r1, [sp, #8]
 808053c:	4628      	mov	r0, r5
 808053e:	f003 fb23 	bl	8083b88 <__aeabi_f2d>
 8080542:	e9cd 0100 	strd	r0, r1, [sp]
 8080546:	4a06      	ldr	r2, [pc, #24]	; (8080560 <_Z17getSignalStrengthv+0x68>)
 8080548:	2140      	movs	r1, #64	; 0x40
 808054a:	f854 3c50 	ldr.w	r3, [r4, #-80]
 808054e:	4805      	ldr	r0, [pc, #20]	; (8080564 <_Z17getSignalStrengthv+0x6c>)
 8080550:	f001 fdb0 	bl	80820b4 <snprintf>
}
 8080554:	b019      	add	sp, #100	; 0x64
 8080556:	bd30      	pop	{r4, r5, pc}
 8080558:	08084d48 	.word	0x08084d48
 808055c:	20000210 	.word	0x20000210
 8080560:	08084b39 	.word	0x08084b39
 8080564:	20000104 	.word	0x20000104

08080568 <_Z14getTemperaturev>:
int getTemperature() {
 8080568:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
 808056a:	200a      	movs	r0, #10
 808056c:	f003 f925 	bl	80837ba <analogRead>
  float voltage = reading * 3.3;        // converting that reading to voltage, for 3.3v arduino use 3.3
 8080570:	f003 faf8 	bl	8083b64 <__aeabi_i2d>
 8080574:	a314      	add	r3, pc, #80	; (adr r3, 80805c8 <_Z14getTemperaturev+0x60>)
 8080576:	e9d3 2300 	ldrd	r2, r3, [r3]
 808057a:	f003 fb5d 	bl	8083c38 <__aeabi_dmul>
 808057e:	f003 fdb5 	bl	80840ec <__aeabi_d2f>
  voltage /= 4096.0;                    // Electron is different than the Arduino where there are only 1024 steps
 8080582:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 8080586:	f003 ff0f 	bl	80843a8 <__aeabi_fmul>
  int temperatureC = int(((voltage - 0.5) * 100));  //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
 808058a:	f003 fafd 	bl	8083b88 <__aeabi_f2d>
 808058e:	2200      	movs	r2, #0
 8080590:	4b0f      	ldr	r3, [pc, #60]	; (80805d0 <_Z14getTemperaturev+0x68>)
 8080592:	f003 f999 	bl	80838c8 <__aeabi_dsub>
 8080596:	2200      	movs	r2, #0
 8080598:	4b0e      	ldr	r3, [pc, #56]	; (80805d4 <_Z14getTemperaturev+0x6c>)
 808059a:	f003 fb4d 	bl	8083c38 <__aeabi_dmul>
 808059e:	f003 fd5d 	bl	808405c <__aeabi_d2iz>
  current.temperature = int((temperatureC * 9.0 / 5.0) + 32.0);  // now convert to Fahrenheit
 80805a2:	f003 fadf 	bl	8083b64 <__aeabi_i2d>
 80805a6:	2200      	movs	r2, #0
 80805a8:	4b0b      	ldr	r3, [pc, #44]	; (80805d8 <_Z14getTemperaturev+0x70>)
 80805aa:	f003 fb45 	bl	8083c38 <__aeabi_dmul>
 80805ae:	2200      	movs	r2, #0
 80805b0:	4b0a      	ldr	r3, [pc, #40]	; (80805dc <_Z14getTemperaturev+0x74>)
 80805b2:	f003 fc6b 	bl	8083e8c <__aeabi_ddiv>
 80805b6:	2200      	movs	r2, #0
 80805b8:	4b09      	ldr	r3, [pc, #36]	; (80805e0 <_Z14getTemperaturev+0x78>)
 80805ba:	f003 f987 	bl	80838cc <__adddf3>
 80805be:	f003 fd4d 	bl	808405c <__aeabi_d2iz>
 80805c2:	4b08      	ldr	r3, [pc, #32]	; (80805e4 <_Z14getTemperaturev+0x7c>)
 80805c4:	6098      	str	r0, [r3, #8]
}
 80805c6:	bd08      	pop	{r3, pc}
 80805c8:	66666666 	.word	0x66666666
 80805cc:	400a6666 	.word	0x400a6666
 80805d0:	3fe00000 	.word	0x3fe00000
 80805d4:	40590000 	.word	0x40590000
 80805d8:	40220000 	.word	0x40220000
 80805dc:	40140000 	.word	0x40140000
 80805e0:	40400000 	.word	0x40400000
 80805e4:	20000178 	.word	0x20000178

080805e8 <_Z9sendEventv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80805e8:	2200      	movs	r2, #0
void sendEvent() {                    
 80805ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80805ee:	4b1c      	ldr	r3, [pc, #112]	; (8080660 <_Z9sendEventv+0x78>)
 80805f0:	b0c6      	sub	sp, #280	; 0x118
 80805f2:	4611      	mov	r1, r2
 80805f4:	6858      	ldr	r0, [r3, #4]
 80805f6:	f001 fd05 	bl	8082004 <network_ready>
  if (Cellular.ready()) getSignalStrength();                            // Test signal strength if the cellular modem is on and ready
 80805fa:	b108      	cbz	r0, 8080600 <_Z9sendEventv+0x18>
 80805fc:	f7ff ff7c 	bl	80804f8 <_Z17getSignalStrengthv>
  getTemperature();
 8080600:	f7ff ffb2 	bl	8080568 <_Z14getTemperaturev>
  snprintf(data, sizeof(data), "{\"input1\":%i, \"input2\":%i, \"temp\":%i, \"alerts\":%i, \"resets\":%i, \"timestamp\":%lu000}",current.input1, current.input2, current.temperature, current.alertCount, sysStatus.resetCount, Time.now());
 8080604:	4a17      	ldr	r2, [pc, #92]	; (8080664 <_Z9sendEventv+0x7c>)
 8080606:	4b18      	ldr	r3, [pc, #96]	; (8080668 <_Z9sendEventv+0x80>)
 8080608:	7814      	ldrb	r4, [r2, #0]
 808060a:	7855      	ldrb	r5, [r2, #1]
 808060c:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8080610:	e9d2 6702 	ldrd	r6, r7, [r2, #8]
 8080614:	f002 fde5 	bl	80831e2 <_ZN9TimeClass3nowEv>
 8080618:	4623      	mov	r3, r4
 808061a:	e9cd 8003 	strd	r8, r0, [sp, #12]
 808061e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8080622:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8080626:	4a11      	ldr	r2, [pc, #68]	; (808066c <_Z9sendEventv+0x84>)
 8080628:	9500      	str	r5, [sp, #0]
 808062a:	a806      	add	r0, sp, #24
 808062c:	f001 fd42 	bl	80820b4 <snprintf>
 8080630:	2300      	movs	r3, #0
  publishQueue.publish("HaulerCaller_Hook", data, PRIVATE);
 8080632:	f88d 3000 	strb.w	r3, [sp]
 8080636:	4b0e      	ldr	r3, [pc, #56]	; (8080670 <_Z9sendEventv+0x88>)
 8080638:	490e      	ldr	r1, [pc, #56]	; (8080674 <_Z9sendEventv+0x8c>)
 808063a:	aa06      	add	r2, sp, #24
 808063c:	781b      	ldrb	r3, [r3, #0]
 808063e:	480e      	ldr	r0, [pc, #56]	; (8080678 <_Z9sendEventv+0x90>)
 8080640:	f7ff fdc4 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                  // set the data inflight flag
 8080644:	2201      	movs	r2, #1
 8080646:	4b0d      	ldr	r3, [pc, #52]	; (808067c <_Z9sendEventv+0x94>)
 8080648:	701a      	strb	r2, [r3, #0]
  currentHourlyPeriod = Time.hour();                                    // Change the time period since we have reported for this one
 808064a:	f002 fddb 	bl	8083204 <_ZN9TimeClass4hourEv>
 808064e:	4b0c      	ldr	r3, [pc, #48]	; (8080680 <_Z9sendEventv+0x98>)
 8080650:	6018      	str	r0, [r3, #0]
 8080652:	f001 faa9 	bl	8081ba8 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
 8080656:	4b0b      	ldr	r3, [pc, #44]	; (8080684 <_Z9sendEventv+0x9c>)
 8080658:	6018      	str	r0, [r3, #0]
}
 808065a:	b046      	add	sp, #280	; 0x118
 808065c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8080660:	20000210 	.word	0x20000210
 8080664:	20000178 	.word	0x20000178
 8080668:	200001f0 	.word	0x200001f0
 808066c:	08084b52 	.word	0x08084b52
 8080670:	20000158 	.word	0x20000158
 8080674:	08084ba6 	.word	0x08084ba6
 8080678:	200001b0 	.word	0x200001b0
 808067c:	2000019b 	.word	0x2000019b
 8080680:	2000018c 	.word	0x2000018c
 8080684:	20000208 	.word	0x20000208

08080688 <_Z11petWatchdogv>:
void petWatchdog() {
 8080688:	b508      	push	{r3, lr}
  digitalWrite(donePin, HIGH);                                        // Pet the watchdog
 808068a:	2101      	movs	r1, #1
 808068c:	2006      	movs	r0, #6
 808068e:	f003 f868 	bl	8083762 <digitalWrite>
  digitalWrite(donePin, LOW);
 8080692:	2100      	movs	r1, #0
 8080694:	2006      	movs	r0, #6
 8080696:	f003 f864 	bl	8083762 <digitalWrite>
  watchdogFlag = false;
 808069a:	2200      	movs	r2, #0
 808069c:	4b01      	ldr	r3, [pc, #4]	; (80806a4 <_Z11petWatchdogv+0x1c>)
 808069e:	701a      	strb	r2, [r3, #0]
}
 80806a0:	bd08      	pop	{r3, pc}
 80806a2:	bf00      	nop
 80806a4:	20000205 	.word	0x20000205

080806a8 <_Z17connectToParticlev>:
bool connectToParticle() {
 80806a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        network_on(*this, 0, 0, NULL);
 80806ac:	2300      	movs	r3, #0
 80806ae:	481d      	ldr	r0, [pc, #116]	; (8080724 <_Z17connectToParticlev+0x7c>)
 80806b0:	461a      	mov	r2, r3
 80806b2:	4619      	mov	r1, r3
 80806b4:	6840      	ldr	r0, [r0, #4]
 80806b6:	f001 fcad 	bl	8082014 <network_on>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80806ba:	f44f 7496 	mov.w	r4, #300	; 0x12c
 80806be:	f001 fc41 	bl	8081f44 <spark_cloud_flag_connect>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80806c2:	f04f 0b00 	mov.w	fp, #0
        while (_while() && !_condition()) {
 80806c6:	f240 38e7 	movw	r8, #999	; 0x3e7
 80806ca:	f04f 0900 	mov.w	r9, #0
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80806ce:	f8df a060 	ldr.w	sl, [pc, #96]	; 8080730 <_Z17connectToParticlev+0x88>
        const system_tick_t start = millis();
 80806d2:	f7ff fd78 	bl	80801c6 <_ZN11SystemClass6millisEv>
 80806d6:	4605      	mov	r5, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80806d8:	f7ff fd75 	bl	80801c6 <_ZN11SystemClass6millisEv>
 80806dc:	1b46      	subs	r6, r0, r5
 80806de:	eb61 070b 	sbc.w	r7, r1, fp
        while (_while() && !_condition()) {
 80806e2:	45b9      	cmp	r9, r7
 80806e4:	bf08      	it	eq
 80806e6:	45b0      	cmpeq	r8, r6
 80806e8:	d305      	bcc.n	80806f6 <_Z17connectToParticlev+0x4e>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80806ea:	f001 fc33 	bl	8081f54 <spark_cloud_flag_connected>
 80806ee:	b910      	cbnz	r0, 80806f6 <_Z17connectToParticlev+0x4e>
            spark_process();
 80806f0:	f001 fc20 	bl	8081f34 <spark_process>
        while (_while() && !_condition()) {
 80806f4:	e7f0      	b.n	80806d8 <_Z17connectToParticlev+0x30>
 80806f6:	f001 fc2d 	bl	8081f54 <spark_cloud_flag_connected>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 80806fa:	b120      	cbz	r0, 8080706 <_Z17connectToParticlev+0x5e>
 80806fc:	f001 fc2a 	bl	8081f54 <spark_cloud_flag_connected>
  if (Particle.connected()) {
 8080700:	b950      	cbnz	r0, 8080718 <_Z17connectToParticlev+0x70>
}
 8080702:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return HAL_Timer_Get_Milli_Seconds();
 8080706:	f001 fa4f 	bl	8081ba8 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
 808070a:	f8ca 0000 	str.w	r0, [sl]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
 808070e:	f001 fc11 	bl	8081f34 <spark_process>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 8080712:	3c01      	subs	r4, #1
 8080714:	d1dd      	bne.n	80806d2 <_Z17connectToParticlev+0x2a>
 8080716:	e7f1      	b.n	80806fc <_Z17connectToParticlev+0x54>
    sysStatus.connectedStatus = true;
 8080718:	2301      	movs	r3, #1
 808071a:	4a03      	ldr	r2, [pc, #12]	; (8080728 <_Z17connectToParticlev+0x80>)
 808071c:	7093      	strb	r3, [r2, #2]
    systemStatusWriteNeeded = true;
 808071e:	4a03      	ldr	r2, [pc, #12]	; (808072c <_Z17connectToParticlev+0x84>)
 8080720:	7013      	strb	r3, [r2, #0]
    return 1;                               // Were able to connect successfully
 8080722:	e7ee      	b.n	8080702 <_Z17connectToParticlev+0x5a>
 8080724:	20000210 	.word	0x20000210
 8080728:	200001f0 	.word	0x200001f0
 808072c:	20000204 	.word	0x20000204
 8080730:	200007d4 	.word	0x200007d4

08080734 <_Z8flashLEDv>:
void flashLED() {
 8080734:	b510      	push	{r4, lr}
 8080736:	f001 fa37 	bl	8081ba8 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastTransition > 1000) {
 808073a:	4c09      	ldr	r4, [pc, #36]	; (8080760 <_Z8flashLEDv+0x2c>)
 808073c:	6823      	ldr	r3, [r4, #0]
 808073e:	1ac0      	subs	r0, r0, r3
 8080740:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8080744:	d90b      	bls.n	808075e <_Z8flashLEDv+0x2a>
    digitalWrite(blueLED,!digitalRead(blueLED));
 8080746:	2007      	movs	r0, #7
 8080748:	f003 f824 	bl	8083794 <digitalRead>
 808074c:	fab0 f180 	clz	r1, r0
 8080750:	2007      	movs	r0, #7
 8080752:	0949      	lsrs	r1, r1, #5
 8080754:	f003 f805 	bl	8083762 <digitalWrite>
 8080758:	f001 fa26 	bl	8081ba8 <HAL_Timer_Get_Milli_Seconds>
    lastTransition = millis();
 808075c:	6020      	str	r0, [r4, #0]
}
 808075e:	bd10      	pop	{r4, pc}
 8080760:	20000174 	.word	0x20000174

08080764 <_Z12dailyCleanupv>:
void dailyCleanup() {                                                 // Called from Reporting State ONLY - clean house at the end of the day
 8080764:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8080768:	2400      	movs	r4, #0
  publishQueue.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
 808076a:	4b15      	ldr	r3, [pc, #84]	; (80807c0 <_Z12dailyCleanupv+0x5c>)
 808076c:	f88d 4000 	strb.w	r4, [sp]
 8080770:	4a14      	ldr	r2, [pc, #80]	; (80807c4 <_Z12dailyCleanupv+0x60>)
 8080772:	4915      	ldr	r1, [pc, #84]	; (80807c8 <_Z12dailyCleanupv+0x64>)
 8080774:	781b      	ldrb	r3, [r3, #0]
 8080776:	4815      	ldr	r0, [pc, #84]	; (80807cc <_Z12dailyCleanupv+0x68>)
 8080778:	f7ff fd28 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
 808077c:	4b14      	ldr	r3, [pc, #80]	; (80807d0 <_Z12dailyCleanupv+0x6c>)
 808077e:	f247 582f 	movw	r8, #29999	; 0x752f
 8080782:	70dc      	strb	r4, [r3, #3]
  Particle.syncTime();                                                // Set the clock each day
 8080784:	f7ff fd08 	bl	8080198 <_ZN10CloudClass8syncTimeEv.isra.0>
        const system_tick_t start = millis();
 8080788:	f7ff fd1d 	bl	80801c6 <_ZN11SystemClass6millisEv>
        while (_while() && !_condition()) {
 808078c:	f04f 0900 	mov.w	r9, #0
        const system_tick_t start = millis();
 8080790:	4605      	mov	r5, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 8080792:	f7ff fd18 	bl	80801c6 <_ZN11SystemClass6millisEv>
 8080796:	1b46      	subs	r6, r0, r5
 8080798:	eb61 0704 	sbc.w	r7, r1, r4
        while (_while() && !_condition()) {
 808079c:	45b9      	cmp	r9, r7
 808079e:	bf08      	it	eq
 80807a0:	45b0      	cmpeq	r8, r6
 80807a2:	d305      	bcc.n	80807b0 <_Z12dailyCleanupv+0x4c>
  waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete
 80807a4:	f7ff fd02 	bl	80801ac <_ZN10CloudClass12syncTimeDoneEv.isra.0>
 80807a8:	b910      	cbnz	r0, 80807b0 <_Z12dailyCleanupv+0x4c>
            spark_process();
 80807aa:	f001 fbc3 	bl	8081f34 <spark_process>
        while (_while() && !_condition()) {
 80807ae:	e7f0      	b.n	8080792 <_Z12dailyCleanupv+0x2e>
 80807b0:	f7ff fcfc 	bl	80801ac <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  systemStatusWriteNeeded = true;
 80807b4:	2201      	movs	r2, #1
 80807b6:	4b07      	ldr	r3, [pc, #28]	; (80807d4 <_Z12dailyCleanupv+0x70>)
 80807b8:	701a      	strb	r2, [r3, #0]
}
 80807ba:	b003      	add	sp, #12
 80807bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80807c0:	20000158 	.word	0x20000158
 80807c4:	08084bb8 	.word	0x08084bb8
 80807c8:	08084bc0 	.word	0x08084bc0
 80807cc:	200001b0 	.word	0x200001b0
 80807d0:	200001f0 	.word	0x200001f0
 80807d4:	20000204 	.word	0x20000204

080807d8 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
 80807d8:	b507      	push	{r0, r1, r2, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80807da:	f001 fbbb 	bl	8081f54 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
 80807de:	b148      	cbz	r0, 80807f4 <_Z18loadSystemDefaultsv+0x1c>
 80807e0:	2300      	movs	r3, #0
 80807e2:	f88d 3000 	strb.w	r3, [sp]
 80807e6:	4b0c      	ldr	r3, [pc, #48]	; (8080818 <_Z18loadSystemDefaultsv+0x40>)
 80807e8:	4a0c      	ldr	r2, [pc, #48]	; (808081c <_Z18loadSystemDefaultsv+0x44>)
 80807ea:	781b      	ldrb	r3, [r3, #0]
 80807ec:	490c      	ldr	r1, [pc, #48]	; (8080820 <_Z18loadSystemDefaultsv+0x48>)
 80807ee:	480d      	ldr	r0, [pc, #52]	; (8080824 <_Z18loadSystemDefaultsv+0x4c>)
 80807f0:	f7ff fcec 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
 80807f4:	2300      	movs	r3, #0
  sysStatus.structuresVersion = 1;
 80807f6:	4a0c      	ldr	r2, [pc, #48]	; (8080828 <_Z18loadSystemDefaultsv+0x50>)
 80807f8:	2101      	movs	r1, #1
  sysStatus.verboseMode = false;
 80807fa:	70d3      	strb	r3, [r2, #3]
  sysStatus.timezone = -5;                                          // Default is East Coast Time
 80807fc:	4b0b      	ldr	r3, [pc, #44]	; (808082c <_Z18loadSystemDefaultsv+0x54>)
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
 80807fe:	480c      	ldr	r0, [pc, #48]	; (8080830 <_Z18loadSystemDefaultsv+0x58>)
 8080800:	6093      	str	r3, [r2, #8]
  sysStatus.dstOffset = 1;
 8080802:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8080806:	60d3      	str	r3, [r2, #12]
 8080808:	2314      	movs	r3, #20
  sysStatus.structuresVersion = 1;
 808080a:	7011      	strb	r1, [r2, #0]
}
 808080c:	b003      	add	sp, #12
 808080e:	f85d eb04 	ldr.w	lr, [sp], #4
 8080812:	f000 bdbc 	b.w	808138e <_ZN6MB85RC9writeDataEjPKhj>
 8080816:	bf00      	nop
 8080818:	20000158 	.word	0x20000158
 808081c:	08084bce 	.word	0x08084bce
 8080820:	08084af6 	.word	0x08084af6
 8080824:	200001b0 	.word	0x200001b0
 8080828:	200001f0 	.word	0x200001f0
 808082c:	c0a00000 	.word	0xc0a00000
 8080830:	2000019c 	.word	0x2000019c

08080834 <_Z17checkSystemValuesv>:
void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
 8080834:	b538      	push	{r3, r4, r5, lr}
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
 8080836:	4c15      	ldr	r4, [pc, #84]	; (808088c <_Z17checkSystemValuesv+0x58>)
 8080838:	78e3      	ldrb	r3, [r4, #3]
 808083a:	2b01      	cmp	r3, #1
 808083c:	bf84      	itt	hi
 808083e:	2300      	movhi	r3, #0
 8080840:	70e3      	strbhi	r3, [r4, #3]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
 8080842:	6863      	ldr	r3, [r4, #4]
 8080844:	2bff      	cmp	r3, #255	; 0xff
 8080846:	d901      	bls.n	808084c <_Z17checkSystemValuesv+0x18>
 8080848:	2300      	movs	r3, #0
 808084a:	6063      	str	r3, [r4, #4]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
 808084c:	68a5      	ldr	r5, [r4, #8]
 808084e:	4910      	ldr	r1, [pc, #64]	; (8080890 <_Z17checkSystemValuesv+0x5c>)
 8080850:	4628      	mov	r0, r5
 8080852:	f003 ff47 	bl	80846e4 <__aeabi_fcmplt>
 8080856:	b920      	cbnz	r0, 8080862 <_Z17checkSystemValuesv+0x2e>
 8080858:	4628      	mov	r0, r5
 808085a:	490e      	ldr	r1, [pc, #56]	; (8080894 <_Z17checkSystemValuesv+0x60>)
 808085c:	f003 ff60 	bl	8084720 <__aeabi_fcmpgt>
 8080860:	b108      	cbz	r0, 8080866 <_Z17checkSystemValuesv+0x32>
 8080862:	4b0d      	ldr	r3, [pc, #52]	; (8080898 <_Z17checkSystemValuesv+0x64>)
 8080864:	60a3      	str	r3, [r4, #8]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
 8080866:	68e5      	ldr	r5, [r4, #12]
 8080868:	2100      	movs	r1, #0
 808086a:	4628      	mov	r0, r5
 808086c:	f003 ff3a 	bl	80846e4 <__aeabi_fcmplt>
 8080870:	b928      	cbnz	r0, 808087e <_Z17checkSystemValuesv+0x4a>
 8080872:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8080876:	4628      	mov	r0, r5
 8080878:	f003 ff52 	bl	8084720 <__aeabi_fcmpgt>
 808087c:	b110      	cbz	r0, 8080884 <_Z17checkSystemValuesv+0x50>
 808087e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8080882:	60e3      	str	r3, [r4, #12]
  systemStatusWriteNeeded = true;
 8080884:	2201      	movs	r2, #1
 8080886:	4b05      	ldr	r3, [pc, #20]	; (808089c <_Z17checkSystemValuesv+0x68>)
 8080888:	701a      	strb	r2, [r3, #0]
}
 808088a:	bd38      	pop	{r3, r4, r5, pc}
 808088c:	200001f0 	.word	0x200001f0
 8080890:	c1400000 	.word	0xc1400000
 8080894:	41400000 	.word	0x41400000
 8080898:	c0a00000 	.word	0xc0a00000
 808089c:	20000204 	.word	0x20000204

080808a0 <_Z18checkCurrentValuesv>:
  current.input1 = 0;                                                   // Always reset at startup
 80808a0:	2200      	movs	r2, #0
 80808a2:	4b05      	ldr	r3, [pc, #20]	; (80808b8 <_Z18checkCurrentValuesv+0x18>)
  if (current.alertCount < 0 || current.alertCount > 254) current.alertCount = 0;
 80808a4:	68d9      	ldr	r1, [r3, #12]
  current.input1 = 0;                                                   // Always reset at startup
 80808a6:	801a      	strh	r2, [r3, #0]
  if (current.alertCount < 0 || current.alertCount > 254) current.alertCount = 0;
 80808a8:	29fe      	cmp	r1, #254	; 0xfe
  current.warningFlag = 0;                                    // Always false at startup
 80808aa:	741a      	strb	r2, [r3, #16]
  if (current.alertCount < 0 || current.alertCount > 254) current.alertCount = 0;
 80808ac:	bf88      	it	hi
 80808ae:	60da      	strhi	r2, [r3, #12]
  currentStatusWriteNeeded = true;
 80808b0:	2201      	movs	r2, #1
 80808b2:	4b02      	ldr	r3, [pc, #8]	; (80808bc <_Z18checkCurrentValuesv+0x1c>)
 80808b4:	701a      	strb	r2, [r3, #0]
}
 80808b6:	4770      	bx	lr
 80808b8:	20000178 	.word	0x20000178
 80808bc:	2000019a 	.word	0x2000019a

080808c0 <_Z22publishStateTransitionv>:

void publishStateTransition(void)
{
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 80808c0:	230e      	movs	r3, #14
{
 80808c2:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 80808c4:	4d10      	ldr	r5, [pc, #64]	; (8080908 <_Z22publishStateTransitionv+0x48>)
 80808c6:	4911      	ldr	r1, [pc, #68]	; (808090c <_Z22publishStateTransitionv+0x4c>)
 80808c8:	782a      	ldrb	r2, [r5, #0]
 80808ca:	4c11      	ldr	r4, [pc, #68]	; (8080910 <_Z22publishStateTransitionv+0x50>)
 80808cc:	fb03 1202 	mla	r2, r3, r2, r1
 80808d0:	7820      	ldrb	r0, [r4, #0]
{
 80808d2:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 80808d4:	fb03 1300 	mla	r3, r3, r0, r1
 80808d8:	9200      	str	r2, [sp, #0]
 80808da:	2128      	movs	r1, #40	; 0x28
 80808dc:	4a0d      	ldr	r2, [pc, #52]	; (8080914 <_Z22publishStateTransitionv+0x54>)
 80808de:	a802      	add	r0, sp, #8
 80808e0:	f001 fbe8 	bl	80820b4 <snprintf>
  oldState = state;
 80808e4:	782b      	ldrb	r3, [r5, #0]
 80808e6:	7023      	strb	r3, [r4, #0]
  if (sysStatus.verboseMode) publishQueue.publish("State Transition",stateTransitionString,PRIVATE);
 80808e8:	4b0b      	ldr	r3, [pc, #44]	; (8080918 <_Z22publishStateTransitionv+0x58>)
 80808ea:	78db      	ldrb	r3, [r3, #3]
 80808ec:	b14b      	cbz	r3, 8080902 <_Z22publishStateTransitionv+0x42>
 80808ee:	2300      	movs	r3, #0
 80808f0:	f88d 3000 	strb.w	r3, [sp]
 80808f4:	4b09      	ldr	r3, [pc, #36]	; (808091c <_Z22publishStateTransitionv+0x5c>)
 80808f6:	490a      	ldr	r1, [pc, #40]	; (8080920 <_Z22publishStateTransitionv+0x60>)
 80808f8:	781b      	ldrb	r3, [r3, #0]
 80808fa:	480a      	ldr	r0, [pc, #40]	; (8080924 <_Z22publishStateTransitionv+0x64>)
 80808fc:	aa02      	add	r2, sp, #8
 80808fe:	f7ff fc65 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
 8080902:	b00d      	add	sp, #52	; 0x34
 8080904:	bd30      	pop	{r4, r5, pc}
 8080906:	bf00      	nop
 8080908:	200001ec 	.word	0x200001ec
 808090c:	20000024 	.word	0x20000024
 8080910:	200001ae 	.word	0x200001ae
 8080914:	08084be6 	.word	0x08084be6
 8080918:	200001f0 	.word	0x200001f0
 808091c:	20000158 	.word	0x20000158
 8080920:	08084bf4 	.word	0x08084bf4
 8080924:	200001b0 	.word	0x200001b0

08080928 <_Z14fullModemResetv>:
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
 8080928:	2300      	movs	r3, #0

void fullModemReset()   // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
{
 808092a:	b530      	push	{r4, r5, lr}
 808092c:	b085      	sub	sp, #20
	Particle.disconnect(); 	                                         // Disconnect from the cloud
 808092e:	a801      	add	r0, sp, #4
 8080930:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8080934:	f88d 300c 	strb.w	r3, [sp, #12]
 8080938:	f001 fd97 	bl	808246a <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
 808093c:	f001 f934 	bl	8081ba8 <HAL_Timer_Get_Milli_Seconds>
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 8080940:	f643 2597 	movw	r5, #14999	; 0x3a97
 8080944:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080946:	f001 fb05 	bl	8081f54 <spark_cloud_flag_connected>
 808094a:	b140      	cbz	r0, 808095e <_Z14fullModemResetv+0x36>
 808094c:	f001 f92c 	bl	8081ba8 <HAL_Timer_Get_Milli_Seconds>
 8080950:	1b00      	subs	r0, r0, r4
 8080952:	42a8      	cmp	r0, r5
 8080954:	d803      	bhi.n	808095e <_Z14fullModemResetv+0x36>
		delay(100);
 8080956:	2064      	movs	r0, #100	; 0x64
 8080958:	f001 fbcc 	bl	80820f4 <delay>
	while(Particle.connected() && millis() - startTime < 15000) {
 808095c:	e7f3      	b.n	8080946 <_Z14fullModemResetv+0x1e>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 808095e:	2100      	movs	r1, #0
 8080960:	f247 5230 	movw	r2, #30000	; 0x7530
 8080964:	4608      	mov	r0, r1
 8080966:	4b08      	ldr	r3, [pc, #32]	; (8080988 <_Z14fullModemResetv+0x60>)
 8080968:	f001 f8ae 	bl	8081ac8 <cellular_command>
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
 808096c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080970:	f001 fbc0 	bl	80820f4 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
 8080974:	4b05      	ldr	r3, [pc, #20]	; (808098c <_Z14fullModemResetv+0x64>)
 8080976:	220a      	movs	r2, #10
 8080978:	2101      	movs	r1, #1
 808097a:	681b      	ldr	r3, [r3, #0]
 808097c:	a801      	add	r0, sp, #4
 808097e:	f002 faf3 	bl	8082f68 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 8080982:	b005      	add	sp, #20
 8080984:	bd30      	pop	{r4, r5, pc}
 8080986:	bf00      	nop
 8080988:	08084c05 	.word	0x08084c05
 808098c:	20000154 	.word	0x20000154

08080990 <loop>:
{
 8080990:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch(state) {
 8080994:	4ca3      	ldr	r4, [pc, #652]	; (8080c24 <loop+0x294>)
 8080996:	4ea4      	ldr	r6, [pc, #656]	; (8080c28 <loop+0x298>)
 8080998:	7823      	ldrb	r3, [r4, #0]
 808099a:	4da4      	ldr	r5, [pc, #656]	; (8080c2c <loop+0x29c>)
 808099c:	3b01      	subs	r3, #1
 808099e:	2b05      	cmp	r3, #5
 80809a0:	d84b      	bhi.n	8080a3a <loop+0xaa>
 80809a2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80809a6:	00f7      	.short	0x00f7
 80809a8:	00900006 	.word	0x00900006
 80809ac:	00b7001f 	.word	0x00b7001f
 80809b0:	00d4      	.short	0x00d4
    if (state != oldState) publishStateTransition();
 80809b2:	4b9f      	ldr	r3, [pc, #636]	; (8080c30 <loop+0x2a0>)
 80809b4:	781b      	ldrb	r3, [r3, #0]
 80809b6:	2b02      	cmp	r3, #2
 80809b8:	d001      	beq.n	80809be <loop+0x2e>
 80809ba:	f7ff ff81 	bl	80808c0 <_Z22publishStateTransitionv>
    if (input1Flag) state = DEBOUNCE_FULL_STATE;                        // Need to make sure lights are on for sure - harder since full can flash
 80809be:	4b9d      	ldr	r3, [pc, #628]	; (8080c34 <loop+0x2a4>)
 80809c0:	781b      	ldrb	r3, [r3, #0]
 80809c2:	b10b      	cbz	r3, 80809c8 <loop+0x38>
 80809c4:	2304      	movs	r3, #4
 80809c6:	7023      	strb	r3, [r4, #0]
    if (input2Flag) state = DEBOUNCE_OIL_STATE;                         // Need to make sure lights are on for sure
 80809c8:	4b9b      	ldr	r3, [pc, #620]	; (8080c38 <loop+0x2a8>)
 80809ca:	781b      	ldrb	r3, [r3, #0]
 80809cc:	b10b      	cbz	r3, 80809d2 <loop+0x42>
 80809ce:	2303      	movs	r3, #3
 80809d0:	7023      	strb	r3, [r4, #0]
    if (Time.hour() != currentHourlyPeriod) state = REPORTING_STATE;    // We want to report on the hour
 80809d2:	f002 fc17 	bl	8083204 <_ZN9TimeClass4hourEv>
 80809d6:	4b99      	ldr	r3, [pc, #612]	; (8080c3c <loop+0x2ac>)
 80809d8:	681b      	ldr	r3, [r3, #0]
 80809da:	4298      	cmp	r0, r3
 80809dc:	d02d      	beq.n	8080a3a <loop+0xaa>
          state = REPORTING_STATE;                                      // We need to report the change in alert level
 80809de:	2305      	movs	r3, #5
      state = RESP_WAIT_STATE;                                          // Wait for Response
 80809e0:	7023      	strb	r3, [r4, #0]
 80809e2:	e02a      	b.n	8080a3a <loop+0xaa>
    if (state != oldState) {
 80809e4:	4b92      	ldr	r3, [pc, #584]	; (8080c30 <loop+0x2a0>)
 80809e6:	781b      	ldrb	r3, [r3, #0]
 80809e8:	2b04      	cmp	r3, #4
 80809ea:	d004      	beq.n	80809f6 <loop+0x66>
      debounceCount = 0;                                                // Zero the debounce count the first time we enter this state from another state
 80809ec:	2200      	movs	r2, #0
 80809ee:	4b94      	ldr	r3, [pc, #592]	; (8080c40 <loop+0x2b0>)
 80809f0:	601a      	str	r2, [r3, #0]
      publishStateTransition();
 80809f2:	f7ff ff65 	bl	80808c0 <_Z22publishStateTransitionv>
 80809f6:	f001 f8d7 	bl	8081ba8 <HAL_Timer_Get_Milli_Seconds>
    if ((millis() - debounceTimeStamp > 100) && current.input1 == 0) {  // More debounce since we are looking for a solid light
 80809fa:	4f92      	ldr	r7, [pc, #584]	; (8080c44 <loop+0x2b4>)
 80809fc:	683b      	ldr	r3, [r7, #0]
 80809fe:	46b8      	mov	r8, r7
 8080a00:	1ac0      	subs	r0, r0, r3
 8080a02:	2864      	cmp	r0, #100	; 0x64
 8080a04:	d912      	bls.n	8080a2c <loop+0x9c>
 8080a06:	f896 9000 	ldrb.w	r9, [r6]
 8080a0a:	f1b9 0f00 	cmp.w	r9, #0
 8080a0e:	d10d      	bne.n	8080a2c <loop+0x9c>
 8080a10:	f001 f8ca 	bl	8081ba8 <HAL_Timer_Get_Milli_Seconds>
      debounceTimeStamp = millis();
 8080a14:	6038      	str	r0, [r7, #0]
      if (!digitalRead(input1)) debounceCount++;
 8080a16:	2019      	movs	r0, #25
 8080a18:	f002 febc 	bl	8083794 <digitalRead>
 8080a1c:	4b88      	ldr	r3, [pc, #544]	; (8080c40 <loop+0x2b0>)
 8080a1e:	b368      	cbz	r0, 8080a7c <loop+0xec>
        input1Flag = false;                                             // Reset the interrupt flag
 8080a20:	4a84      	ldr	r2, [pc, #528]	; (8080c34 <loop+0x2a4>)
 8080a22:	f882 9000 	strb.w	r9, [r2]
        state = IDLE_STATE;                                             // Go back to the IDLE_STATE      
 8080a26:	2202      	movs	r2, #2
 8080a28:	7022      	strb	r2, [r4, #0]
 8080a2a:	e02a      	b.n	8080a82 <loop+0xf2>
 8080a2c:	f001 f8bc 	bl	8081ba8 <HAL_Timer_Get_Milli_Seconds>
    else if ((millis() - debounceTimeStamp > 50) && current.input1 == 2) {   // Less debounce since the light should be flashing - will debounce for 1/2 second
 8080a30:	f8d8 3000 	ldr.w	r3, [r8]
 8080a34:	1ac0      	subs	r0, r0, r3
 8080a36:	2832      	cmp	r0, #50	; 0x32
 8080a38:	d82e      	bhi.n	8080a98 <loop+0x108>
  if (watchdogFlag) petWatchdog();
 8080a3a:	4b83      	ldr	r3, [pc, #524]	; (8080c48 <loop+0x2b8>)
 8080a3c:	781b      	ldrb	r3, [r3, #0]
 8080a3e:	b10b      	cbz	r3, 8080a44 <loop+0xb4>
 8080a40:	f7ff fe22 	bl	8080688 <_Z11petWatchdogv>
  if (current.warningFlag) flashLED();                      // Signal that at least one interrupt is disconnected
 8080a44:	7c33      	ldrb	r3, [r6, #16]
 8080a46:	b10b      	cbz	r3, 8080a4c <loop+0xbc>
 8080a48:	f7ff fe74 	bl	8080734 <_Z8flashLEDv>
  if (systemStatusWriteNeeded) {                                      // Batch write updates to FRAM
 8080a4c:	782b      	ldrb	r3, [r5, #0]
 8080a4e:	b13b      	cbz	r3, 8080a60 <loop+0xd0>
 8080a50:	2314      	movs	r3, #20
 8080a52:	2101      	movs	r1, #1
 8080a54:	4a7d      	ldr	r2, [pc, #500]	; (8080c4c <loop+0x2bc>)
 8080a56:	487e      	ldr	r0, [pc, #504]	; (8080c50 <loop+0x2c0>)
 8080a58:	f000 fc99 	bl	808138e <_ZN6MB85RC9writeDataEjPKhj>
    systemStatusWriteNeeded = false;
 8080a5c:	2300      	movs	r3, #0
 8080a5e:	702b      	strb	r3, [r5, #0]
  if (currentStatusWriteNeeded) {
 8080a60:	4c7c      	ldr	r4, [pc, #496]	; (8080c54 <loop+0x2c4>)
 8080a62:	7823      	ldrb	r3, [r4, #0]
 8080a64:	b13b      	cbz	r3, 8080a76 <loop+0xe6>
 8080a66:	2314      	movs	r3, #20
 8080a68:	2150      	movs	r1, #80	; 0x50
 8080a6a:	4a6f      	ldr	r2, [pc, #444]	; (8080c28 <loop+0x298>)
 8080a6c:	4878      	ldr	r0, [pc, #480]	; (8080c50 <loop+0x2c0>)
 8080a6e:	f000 fc8e 	bl	808138e <_ZN6MB85RC9writeDataEjPKhj>
    currentStatusWriteNeeded = false;
 8080a72:	2300      	movs	r3, #0
 8080a74:	7023      	strb	r3, [r4, #0]
}
 8080a76:	b003      	add	sp, #12
 8080a78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (!digitalRead(input1)) debounceCount++;
 8080a7c:	681a      	ldr	r2, [r3, #0]
 8080a7e:	3201      	adds	r2, #1
 8080a80:	601a      	str	r2, [r3, #0]
      if (debounceCount > 100) {                                        // We are looking for 75% which is on solid - hence the 10 second debounce
 8080a82:	681b      	ldr	r3, [r3, #0]
 8080a84:	2b64      	cmp	r3, #100	; 0x64
      if (debounceCount > 10) {                                         // We are looking for the "full" light on  hence the shorter debounce
 8080a86:	ddd8      	ble.n	8080a3a <loop+0xaa>
        if (takeMeasurements()) {
 8080a88:	f7ff fcb2 	bl	80803f0 <_Z16takeMeasurementsv>
 8080a8c:	2800      	cmp	r0, #0
 8080a8e:	d1a6      	bne.n	80809de <loop+0x4e>
          input1Flag = false;
 8080a90:	4b68      	ldr	r3, [pc, #416]	; (8080c34 <loop+0x2a4>)
 8080a92:	7018      	strb	r0, [r3, #0]
    if (!dataInFlight)  state = IDLE_STATE;                             // Response Received
 8080a94:	2302      	movs	r3, #2
 8080a96:	e7a3      	b.n	80809e0 <loop+0x50>
    else if ((millis() - debounceTimeStamp > 50) && current.input1 == 2) {   // Less debounce since the light should be flashing - will debounce for 1/2 second
 8080a98:	7837      	ldrb	r7, [r6, #0]
 8080a9a:	2f02      	cmp	r7, #2
 8080a9c:	d1cd      	bne.n	8080a3a <loop+0xaa>
 8080a9e:	f001 f883 	bl	8081ba8 <HAL_Timer_Get_Milli_Seconds>
      debounceTimeStamp = millis();
 8080aa2:	f8c8 0000 	str.w	r0, [r8]
      if (!digitalRead(input1)) debounceCount++;
 8080aa6:	2019      	movs	r0, #25
 8080aa8:	f002 fe74 	bl	8083794 <digitalRead>
 8080aac:	4b64      	ldr	r3, [pc, #400]	; (8080c40 <loop+0x2b0>)
 8080aae:	b928      	cbnz	r0, 8080abc <loop+0x12c>
 8080ab0:	681a      	ldr	r2, [r3, #0]
 8080ab2:	3201      	adds	r2, #1
 8080ab4:	601a      	str	r2, [r3, #0]
      if (debounceCount > 10) {                                         // We are looking for the "full" light on  hence the shorter debounce
 8080ab6:	681b      	ldr	r3, [r3, #0]
 8080ab8:	2b0a      	cmp	r3, #10
 8080aba:	e7e4      	b.n	8080a86 <loop+0xf6>
        input1Flag = false;                                             // Reset the interrupt flag
 8080abc:	2100      	movs	r1, #0
 8080abe:	4a5d      	ldr	r2, [pc, #372]	; (8080c34 <loop+0x2a4>)
        state = IDLE_STATE;                                             // Go back to the IDLE_STATE      
 8080ac0:	7027      	strb	r7, [r4, #0]
        input1Flag = false;                                             // Reset the interrupt flag
 8080ac2:	7011      	strb	r1, [r2, #0]
        state = IDLE_STATE;                                             // Go back to the IDLE_STATE      
 8080ac4:	e7f7      	b.n	8080ab6 <loop+0x126>
      if (state != oldState) {
 8080ac6:	4b5a      	ldr	r3, [pc, #360]	; (8080c30 <loop+0x2a0>)
 8080ac8:	781b      	ldrb	r3, [r3, #0]
 8080aca:	2b03      	cmp	r3, #3
 8080acc:	d004      	beq.n	8080ad8 <loop+0x148>
        debounceCount = 0;                                              // We are going to reset the counter as we enter this state for the first time
 8080ace:	2200      	movs	r2, #0
 8080ad0:	4b61      	ldr	r3, [pc, #388]	; (8080c58 <loop+0x2c8>)
 8080ad2:	601a      	str	r2, [r3, #0]
        publishStateTransition();
 8080ad4:	f7ff fef4 	bl	80808c0 <_Z22publishStateTransitionv>
 8080ad8:	f001 f866 	bl	8081ba8 <HAL_Timer_Get_Milli_Seconds>
      if (millis() - debounceTimeStamp > 100) {                         // Check the state of this low oil light ten times in a second - all have to show LOW (light on) to pass this state
 8080adc:	4f5f      	ldr	r7, [pc, #380]	; (8080c5c <loop+0x2cc>)
 8080ade:	683b      	ldr	r3, [r7, #0]
 8080ae0:	1ac0      	subs	r0, r0, r3
 8080ae2:	2864      	cmp	r0, #100	; 0x64
 8080ae4:	d9a9      	bls.n	8080a3a <loop+0xaa>
 8080ae6:	f001 f85f 	bl	8081ba8 <HAL_Timer_Get_Milli_Seconds>
        debounceTimeStamp = millis();
 8080aea:	6038      	str	r0, [r7, #0]
        if (!digitalRead(input2)) debounceCount++;                      // Light is on - check
 8080aec:	201b      	movs	r0, #27
 8080aee:	f002 fe51 	bl	8083794 <digitalRead>
 8080af2:	4b59      	ldr	r3, [pc, #356]	; (8080c58 <loop+0x2c8>)
 8080af4:	b940      	cbnz	r0, 8080b08 <loop+0x178>
 8080af6:	681a      	ldr	r2, [r3, #0]
 8080af8:	3201      	adds	r2, #1
 8080afa:	601a      	str	r2, [r3, #0]
        if (debounceCount > 100) {                                      // Low oil light is on (assert low) and we have not yet set this alert - it will take 10 seconds to reach this state
 8080afc:	681b      	ldr	r3, [r3, #0]
 8080afe:	2b64      	cmp	r3, #100	; 0x64
 8080b00:	dd9b      	ble.n	8080a3a <loop+0xaa>
          takeMeasurements();                                           // This will take measurements and set the flags
 8080b02:	f7ff fc75 	bl	80803f0 <_Z16takeMeasurementsv>
 8080b06:	e76a      	b.n	80809de <loop+0x4e>
        input2Flag = false;                                             // Reset the interrupt flag
 8080b08:	2100      	movs	r1, #0
 8080b0a:	4a4b      	ldr	r2, [pc, #300]	; (8080c38 <loop+0x2a8>)
 8080b0c:	7011      	strb	r1, [r2, #0]
        state = IDLE_STATE;                                             // Go back to the IDLE_STATE        
 8080b0e:	2202      	movs	r2, #2
 8080b10:	7022      	strb	r2, [r4, #0]
 8080b12:	e7f3      	b.n	8080afc <loop+0x16c>
    if (state != oldState) publishStateTransition();
 8080b14:	4b46      	ldr	r3, [pc, #280]	; (8080c30 <loop+0x2a0>)
 8080b16:	781b      	ldrb	r3, [r3, #0]
 8080b18:	2b05      	cmp	r3, #5
 8080b1a:	d001      	beq.n	8080b20 <loop+0x190>
 8080b1c:	f7ff fed0 	bl	80808c0 <_Z22publishStateTransitionv>
    if (!sysStatus.connectedStatus) connectToParticle();                // Only attempt to connect if not already New process to get connected
 8080b20:	4b4a      	ldr	r3, [pc, #296]	; (8080c4c <loop+0x2bc>)
 8080b22:	789b      	ldrb	r3, [r3, #2]
 8080b24:	b90b      	cbnz	r3, 8080b2a <loop+0x19a>
 8080b26:	f7ff fdbf 	bl	80806a8 <_Z17connectToParticlev>
 8080b2a:	f001 fa13 	bl	8081f54 <spark_cloud_flag_connected>
    if (Particle.connected()) {
 8080b2e:	b140      	cbz	r0, 8080b42 <loop+0x1b2>
      if (Time.hour() == 0) dailyCleanup();                             // Once a day, clean house
 8080b30:	f002 fb68 	bl	8083204 <_ZN9TimeClass4hourEv>
 8080b34:	b908      	cbnz	r0, 8080b3a <loop+0x1aa>
 8080b36:	f7ff fe15 	bl	8080764 <_Z12dailyCleanupv>
      sendEvent();                                                      // Send data to Ubidots
 8080b3a:	f7ff fd55 	bl	80805e8 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                          // Wait for Response
 8080b3e:	2306      	movs	r3, #6
 8080b40:	e74e      	b.n	80809e0 <loop+0x50>
 8080b42:	f001 f831 	bl	8081ba8 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 8080b46:	4b46      	ldr	r3, [pc, #280]	; (8080c60 <loop+0x2d0>)
 8080b48:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;                                              // Response timed out
 8080b4a:	2301      	movs	r3, #1
 8080b4c:	e748      	b.n	80809e0 <loop+0x50>
    if (state != oldState) publishStateTransition();
 8080b4e:	4b38      	ldr	r3, [pc, #224]	; (8080c30 <loop+0x2a0>)
 8080b50:	781b      	ldrb	r3, [r3, #0]
 8080b52:	2b06      	cmp	r3, #6
 8080b54:	d001      	beq.n	8080b5a <loop+0x1ca>
 8080b56:	f7ff feb3 	bl	80808c0 <_Z22publishStateTransitionv>
    if (!dataInFlight)  state = IDLE_STATE;                             // Response Received
 8080b5a:	4b42      	ldr	r3, [pc, #264]	; (8080c64 <loop+0x2d4>)
 8080b5c:	781b      	ldrb	r3, [r3, #0]
 8080b5e:	2b00      	cmp	r3, #0
 8080b60:	d098      	beq.n	8080a94 <loop+0x104>
 8080b62:	f001 f821 	bl	8081ba8 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {               // If it takes too long - will need to reset
 8080b66:	4b40      	ldr	r3, [pc, #256]	; (8080c68 <loop+0x2d8>)
 8080b68:	681b      	ldr	r3, [r3, #0]
 8080b6a:	1ac0      	subs	r0, r0, r3
 8080b6c:	4b3f      	ldr	r3, [pc, #252]	; (8080c6c <loop+0x2dc>)
 8080b6e:	681b      	ldr	r3, [r3, #0]
 8080b70:	4298      	cmp	r0, r3
 8080b72:	f67f af62 	bls.w	8080a3a <loop+0xaa>
 8080b76:	f001 f817 	bl	8081ba8 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 8080b7a:	4b39      	ldr	r3, [pc, #228]	; (8080c60 <loop+0x2d0>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);    // If the device times out on the Webhook response, it will ensure a new session is started on next connect
 8080b7c:	4a3c      	ldr	r2, [pc, #240]	; (8080c70 <loop+0x2e0>)
      resetTimeStamp = millis();
 8080b7e:	6018      	str	r0, [r3, #0]
 8080b80:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);    // If the device times out on the Webhook response, it will ensure a new session is started on next connect
 8080b82:	f88d 3000 	strb.w	r3, [sp]
 8080b86:	4b3b      	ldr	r3, [pc, #236]	; (8080c74 <loop+0x2e4>)
 8080b88:	493b      	ldr	r1, [pc, #236]	; (8080c78 <loop+0x2e8>)
 8080b8a:	781b      	ldrb	r3, [r3, #0]
 8080b8c:	483b      	ldr	r0, [pc, #236]	; (8080c7c <loop+0x2ec>)
 8080b8e:	f7ff fb1d 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
 8080b92:	e7da      	b.n	8080b4a <loop+0x1ba>
    if (state != oldState) publishStateTransition();
 8080b94:	4b26      	ldr	r3, [pc, #152]	; (8080c30 <loop+0x2a0>)
 8080b96:	781b      	ldrb	r3, [r3, #0]
 8080b98:	2b01      	cmp	r3, #1
 8080b9a:	d001      	beq.n	8080ba0 <loop+0x210>
 8080b9c:	f7ff fe90 	bl	80808c0 <_Z22publishStateTransitionv>
 8080ba0:	f001 f802 	bl	8081ba8 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
 8080ba4:	4b2e      	ldr	r3, [pc, #184]	; (8080c60 <loop+0x2d0>)
 8080ba6:	4a36      	ldr	r2, [pc, #216]	; (8080c80 <loop+0x2f0>)
 8080ba8:	681b      	ldr	r3, [r3, #0]
 8080baa:	6812      	ldr	r2, [r2, #0]
 8080bac:	4413      	add	r3, r2
 8080bae:	4283      	cmp	r3, r0
 8080bb0:	f4bf af43 	bcs.w	8080a3a <loop+0xaa>
      if (sysStatus.resetCount <= 3) {                                  // First try simple reset
 8080bb4:	4c25      	ldr	r4, [pc, #148]	; (8080c4c <loop+0x2bc>)
 8080bb6:	6863      	ldr	r3, [r4, #4]
 8080bb8:	2b03      	cmp	r3, #3
 8080bba:	dc13      	bgt.n	8080be4 <loop+0x254>
 8080bbc:	f001 f9ca 	bl	8081f54 <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
 8080bc0:	b148      	cbz	r0, 8080bd6 <loop+0x246>
 8080bc2:	2300      	movs	r3, #0
 8080bc4:	f88d 3000 	strb.w	r3, [sp]
 8080bc8:	4b2a      	ldr	r3, [pc, #168]	; (8080c74 <loop+0x2e4>)
 8080bca:	4a2e      	ldr	r2, [pc, #184]	; (8080c84 <loop+0x2f4>)
 8080bcc:	781b      	ldrb	r3, [r3, #0]
 8080bce:	492e      	ldr	r1, [pc, #184]	; (8080c88 <loop+0x2f8>)
 8080bd0:	482a      	ldr	r0, [pc, #168]	; (8080c7c <loop+0x2ec>)
 8080bd2:	f7ff fafb 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
 8080bd6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080bda:	f001 fa8b 	bl	80820f4 <delay>
        System.reset();
 8080bde:	f002 f9c0 	bl	8082f62 <_ZN11SystemClass5resetEv>
 8080be2:	e72a      	b.n	8080a3a <loop+0xaa>
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
 8080be4:	f002 fafd 	bl	80831e2 <_ZN9TimeClass3nowEv>
 8080be8:	6923      	ldr	r3, [r4, #16]
 8080bea:	1ac0      	subs	r0, r0, r3
 8080bec:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
 8080bf0:	d94e      	bls.n	8080c90 <loop+0x300>
 8080bf2:	f001 f9af 	bl	8081f54 <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
 8080bf6:	b148      	cbz	r0, 8080c0c <loop+0x27c>
 8080bf8:	2300      	movs	r3, #0
 8080bfa:	f88d 3000 	strb.w	r3, [sp]
 8080bfe:	4b1d      	ldr	r3, [pc, #116]	; (8080c74 <loop+0x2e4>)
 8080c00:	4a22      	ldr	r2, [pc, #136]	; (8080c8c <loop+0x2fc>)
 8080c02:	781b      	ldrb	r3, [r3, #0]
 8080c04:	4920      	ldr	r1, [pc, #128]	; (8080c88 <loop+0x2f8>)
 8080c06:	481d      	ldr	r0, [pc, #116]	; (8080c7c <loop+0x2ec>)
 8080c08:	f7ff fae0 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
 8080c0c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080c10:	f001 fa70 	bl	80820f4 <delay>
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
 8080c14:	2300      	movs	r3, #0
        systemStatusWriteNeeded=true;
 8080c16:	2101      	movs	r1, #1
        digitalWrite(hardResetPin,HIGH);                              // This will cut all power to the Electron AND the carrier board
 8080c18:	2004      	movs	r0, #4
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
 8080c1a:	6063      	str	r3, [r4, #4]
        systemStatusWriteNeeded=true;
 8080c1c:	7029      	strb	r1, [r5, #0]
        digitalWrite(hardResetPin,HIGH);                              // This will cut all power to the Electron AND the carrier board
 8080c1e:	f002 fda0 	bl	8083762 <digitalWrite>
 8080c22:	e70a      	b.n	8080a3a <loop+0xaa>
 8080c24:	200001ec 	.word	0x200001ec
 8080c28:	20000178 	.word	0x20000178
 8080c2c:	20000204 	.word	0x20000204
 8080c30:	200001ae 	.word	0x200001ae
 8080c34:	200001ac 	.word	0x200001ac
 8080c38:	200001ad 	.word	0x200001ad
 8080c3c:	2000018c 	.word	0x2000018c
 8080c40:	20000164 	.word	0x20000164
 8080c44:	2000016c 	.word	0x2000016c
 8080c48:	20000205 	.word	0x20000205
 8080c4c:	200001f0 	.word	0x200001f0
 8080c50:	2000019c 	.word	0x2000019c
 8080c54:	2000019a 	.word	0x2000019a
 8080c58:	20000168 	.word	0x20000168
 8080c5c:	20000170 	.word	0x20000170
 8080c60:	200001e8 	.word	0x200001e8
 8080c64:	2000019b 	.word	0x2000019b
 8080c68:	20000208 	.word	0x20000208
 8080c6c:	20000088 	.word	0x20000088
 8080c70:	08084c11 	.word	0x08084c11
 8080c74:	20000158 	.word	0x20000158
 8080c78:	08084c12 	.word	0x08084c12
 8080c7c:	200001b0 	.word	0x200001b0
 8080c80:	20000020 	.word	0x20000020
 8080c84:	08084c2b 	.word	0x08084c2b
 8080c88:	08084acd 	.word	0x08084acd
 8080c8c:	08084c3f 	.word	0x08084c3f
 8080c90:	f001 f960 	bl	8081f54 <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
 8080c94:	b148      	cbz	r0, 8080caa <loop+0x31a>
 8080c96:	2300      	movs	r3, #0
 8080c98:	f88d 3000 	strb.w	r3, [sp]
 8080c9c:	4b08      	ldr	r3, [pc, #32]	; (8080cc0 <loop+0x330>)
 8080c9e:	4a09      	ldr	r2, [pc, #36]	; (8080cc4 <loop+0x334>)
 8080ca0:	781b      	ldrb	r3, [r3, #0]
 8080ca2:	4909      	ldr	r1, [pc, #36]	; (8080cc8 <loop+0x338>)
 8080ca4:	4809      	ldr	r0, [pc, #36]	; (8080ccc <loop+0x33c>)
 8080ca6:	f7ff fa91 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
 8080caa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080cae:	f001 fa21 	bl	80820f4 <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
 8080cb2:	2300      	movs	r3, #0
 8080cb4:	6063      	str	r3, [r4, #4]
        systemStatusWriteNeeded=true;
 8080cb6:	2301      	movs	r3, #1
 8080cb8:	702b      	strb	r3, [r5, #0]
        fullModemReset();                                             // Full Modem reset and reboots
 8080cba:	f7ff fe35 	bl	8080928 <_Z14fullModemResetv>
 8080cbe:	e6bc      	b.n	8080a3a <loop+0xaa>
 8080cc0:	20000158 	.word	0x20000158
 8080cc4:	08084c59 	.word	0x08084c59
 8080cc8:	08084acd 	.word	0x08084acd
 8080ccc:	200001b0 	.word	0x200001b0

08080cd0 <_Z8isDSTusav>:
  }
  return 1;
}


bool isDSTusa() {
 8080cd0:	b538      	push	{r3, r4, r5, lr}
  // United States of America Summer Timer calculation (2am Local Time - 2nd Sunday in March/ 1st Sunday in November)
  // Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
  // The code works in from months, days and hours in succession toward the two transitions
  int dayOfMonth = Time.day();
 8080cd2:	f002 faa3 	bl	808321c <_ZN9TimeClass3dayEv>
 8080cd6:	4605      	mov	r5, r0
  int month = Time.month();
 8080cd8:	f002 fab4 	bl	8083244 <_ZN9TimeClass5monthEv>
 8080cdc:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
 8080cde:	f002 faa9 	bl	8083234 <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
 8080ce2:	1f23      	subs	r3, r4, #4
 8080ce4:	2b06      	cmp	r3, #6
 8080ce6:	d90e      	bls.n	8080d06 <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
 8080ce8:	1ee3      	subs	r3, r4, #3
 8080cea:	2b08      	cmp	r3, #8
 8080cec:	d80d      	bhi.n	8080d0a <_Z8isDSTusav+0x3a>
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
 8080cee:	3801      	subs	r0, #1
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
 8080cf0:	1a2d      	subs	r5, r5, r0
 8080cf2:	d504      	bpl.n	8080cfe <_Z8isDSTusav+0x2e>
 8080cf4:	2c0b      	cmp	r4, #11
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
 8080cf6:	bf14      	ite	ne
 8080cf8:	2000      	movne	r0, #0
 8080cfa:	2001      	moveq	r0, #1
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
 8080cfc:	bd38      	pop	{r3, r4, r5, pc}
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
 8080cfe:	2d07      	cmp	r5, #7
 8080d00:	dd03      	ble.n	8080d0a <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
 8080d02:	2c03      	cmp	r4, #3
 8080d04:	e7f7      	b.n	8080cf6 <_Z8isDSTusav+0x26>
    return true;
 8080d06:	2001      	movs	r0, #1
 8080d08:	e7f8      	b.n	8080cfc <_Z8isDSTusav+0x2c>
    return false;
 8080d0a:	2000      	movs	r0, #0
 8080d0c:	e7f6      	b.n	8080cfc <_Z8isDSTusav+0x2c>
	...

08080d10 <setup>:
{
 8080d10:	b530      	push	{r4, r5, lr}
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 8080d12:	2400      	movs	r4, #0
 8080d14:	b0a9      	sub	sp, #164	; 0xa4
  pinMode(input1,INPUT_PULLUP);                                         // Voltage Sensor Interrupt pin
 8080d16:	2102      	movs	r1, #2
 8080d18:	2019      	movs	r0, #25
 8080d1a:	f002 fd11 	bl	8083740 <pinMode>
  pinMode(input2,INPUT_PULLUP);                                         // Voltage Sensor Interrupt pin
 8080d1e:	2102      	movs	r1, #2
 8080d20:	201b      	movs	r0, #27
 8080d22:	f002 fd0d 	bl	8083740 <pinMode>
  pinMode(wakeUpPin,INPUT);                                             // This pin is active HIGH
 8080d26:	2100      	movs	r1, #0
 8080d28:	2011      	movs	r0, #17
 8080d2a:	f002 fd09 	bl	8083740 <pinMode>
  pinMode(userSwitch,INPUT);                                            // Momentary contact button on board for direct user input
 8080d2e:	2100      	movs	r1, #0
 8080d30:	2005      	movs	r0, #5
 8080d32:	f002 fd05 	bl	8083740 <pinMode>
  pinMode(blueLED, OUTPUT);                                             // declare the Blue LED Pin as an output
 8080d36:	2101      	movs	r1, #1
 8080d38:	2007      	movs	r0, #7
 8080d3a:	f002 fd01 	bl	8083740 <pinMode>
  pinMode(tmp36Shutdwn,OUTPUT);                                         // Supports shutting down the TMP-36 to save juice
 8080d3e:	2101      	movs	r1, #1
 8080d40:	201d      	movs	r0, #29
 8080d42:	f002 fcfd 	bl	8083740 <pinMode>
  digitalWrite(tmp36Shutdwn, HIGH);                                     // Turns on the temp sensor
 8080d46:	2101      	movs	r1, #1
 8080d48:	201d      	movs	r0, #29
 8080d4a:	f002 fd0a 	bl	8083762 <digitalWrite>
  pinMode(donePin,OUTPUT);                                              // Allows us to pet the watchdog
 8080d4e:	2101      	movs	r1, #1
 8080d50:	2006      	movs	r0, #6
 8080d52:	f002 fcf5 	bl	8083740 <pinMode>
  pinMode(hardResetPin,OUTPUT);                                         // For a hard reset active HIGH
 8080d56:	2101      	movs	r1, #1
 8080d58:	2004      	movs	r0, #4
 8080d5a:	f002 fcf1 	bl	8083740 <pinMode>
  digitalWrite(blueLED,HIGH);                                           // Signal we are in setup() 
 8080d5e:	2101      	movs	r1, #1
 8080d60:	2007      	movs	r0, #7
 8080d62:	f002 fcfe 	bl	8083762 <digitalWrite>
    static String deviceID(void) { return spark_deviceID(); }
 8080d66:	a804      	add	r0, sp, #16
 8080d68:	f001 f8fc 	bl	8081f64 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 8080d6c:	2300      	movs	r3, #0
 8080d6e:	227d      	movs	r2, #125	; 0x7d
 8080d70:	a908      	add	r1, sp, #32
 8080d72:	a804      	add	r0, sp, #16
 8080d74:	f002 f88e 	bl	8082e94 <_ZNK6String8getBytesEPhjj>
 8080d78:	4623      	mov	r3, r4
 8080d7a:	4622      	mov	r2, r4
 8080d7c:	498c      	ldr	r1, [pc, #560]	; (8080fb0 <setup+0x2a0>)
 8080d7e:	e9cd 4400 	strd	r4, r4, [sp]
 8080d82:	a808      	add	r0, sp, #32
 8080d84:	f001 f8fe 	bl	8081f84 <spark_subscribe>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 8080d88:	4623      	mov	r3, r4
 8080d8a:	2204      	movs	r2, #4
 8080d8c:	4989      	ldr	r1, [pc, #548]	; (8080fb4 <setup+0x2a4>)
 8080d8e:	488a      	ldr	r0, [pc, #552]	; (8080fb8 <setup+0x2a8>)
 8080d90:	f001 f8c0 	bl	8081f14 <spark_variable>
 8080d94:	4623      	mov	r3, r4
 8080d96:	2202      	movs	r2, #2
 8080d98:	4988      	ldr	r1, [pc, #544]	; (8080fbc <setup+0x2ac>)
 8080d9a:	4889      	ldr	r0, [pc, #548]	; (8080fc0 <setup+0x2b0>)
 8080d9c:	f001 f8ba 	bl	8081f14 <spark_variable>
 8080da0:	4623      	mov	r3, r4
 8080da2:	2202      	movs	r2, #2
 8080da4:	4987      	ldr	r1, [pc, #540]	; (8080fc4 <setup+0x2b4>)
 8080da6:	4888      	ldr	r0, [pc, #544]	; (8080fc8 <setup+0x2b8>)
 8080da8:	f001 f8b4 	bl	8081f14 <spark_variable>
 8080dac:	4623      	mov	r3, r4
 8080dae:	2204      	movs	r2, #4
 8080db0:	4986      	ldr	r1, [pc, #536]	; (8080fcc <setup+0x2bc>)
 8080db2:	4887      	ldr	r0, [pc, #540]	; (8080fd0 <setup+0x2c0>)
 8080db4:	f001 f8ae 	bl	8081f14 <spark_variable>
 8080db8:	4623      	mov	r3, r4
 8080dba:	2204      	movs	r2, #4
 8080dbc:	4985      	ldr	r1, [pc, #532]	; (8080fd4 <setup+0x2c4>)
 8080dbe:	4886      	ldr	r0, [pc, #536]	; (8080fd8 <setup+0x2c8>)
 8080dc0:	f001 f8a8 	bl	8081f14 <spark_variable>
 8080dc4:	4623      	mov	r3, r4
 8080dc6:	2204      	movs	r2, #4
 8080dc8:	4984      	ldr	r1, [pc, #528]	; (8080fdc <setup+0x2cc>)
 8080dca:	4885      	ldr	r0, [pc, #532]	; (8080fe0 <setup+0x2d0>)
 8080dcc:	f001 f8a2 	bl	8081f14 <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 8080dd0:	4a84      	ldr	r2, [pc, #528]	; (8080fe4 <setup+0x2d4>)
 8080dd2:	4985      	ldr	r1, [pc, #532]	; (8080fe8 <setup+0x2d8>)
 8080dd4:	4885      	ldr	r0, [pc, #532]	; (8080fec <setup+0x2dc>)
 8080dd6:	f001 fb37 	bl	8082448 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080dda:	4a85      	ldr	r2, [pc, #532]	; (8080ff0 <setup+0x2e0>)
 8080ddc:	4985      	ldr	r1, [pc, #532]	; (8080ff4 <setup+0x2e4>)
 8080dde:	4883      	ldr	r0, [pc, #524]	; (8080fec <setup+0x2dc>)
 8080de0:	f001 fb32 	bl	8082448 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080de4:	4a84      	ldr	r2, [pc, #528]	; (8080ff8 <setup+0x2e8>)
 8080de6:	4985      	ldr	r1, [pc, #532]	; (8080ffc <setup+0x2ec>)
 8080de8:	4880      	ldr	r0, [pc, #512]	; (8080fec <setup+0x2dc>)
 8080dea:	f001 fb2d 	bl	8082448 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080dee:	4a84      	ldr	r2, [pc, #528]	; (8081000 <setup+0x2f0>)
 8080df0:	4984      	ldr	r1, [pc, #528]	; (8081004 <setup+0x2f4>)
 8080df2:	487e      	ldr	r0, [pc, #504]	; (8080fec <setup+0x2dc>)
 8080df4:	f001 fb28 	bl	8082448 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080df8:	4a83      	ldr	r2, [pc, #524]	; (8081008 <setup+0x2f8>)
 8080dfa:	4984      	ldr	r1, [pc, #528]	; (808100c <setup+0x2fc>)
 8080dfc:	487b      	ldr	r0, [pc, #492]	; (8080fec <setup+0x2dc>)
 8080dfe:	f001 fb23 	bl	8082448 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  connectToParticle();                                                  // This device is always connected
 8080e02:	f7ff fc51 	bl	80806a8 <_Z17connectToParticlev>
  fram.begin();                                                         // Initialize the FRAM module
 8080e06:	4882      	ldr	r0, [pc, #520]	; (8081010 <setup+0x300>)
 8080e08:	f000 fa34 	bl	8081274 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
 8080e0c:	4621      	mov	r1, r4
 8080e0e:	2301      	movs	r3, #1
 8080e10:	487f      	ldr	r0, [pc, #508]	; (8081010 <setup+0x300>)
 8080e12:	f10d 020b 	add.w	r2, sp, #11
 8080e16:	f000 fa6f 	bl	80812f8 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                               // Check to see if the memory map in the sketch matches the data on the chip
 8080e1a:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8080e1e:	4d7d      	ldr	r5, [pc, #500]	; (8081014 <setup+0x304>)
 8080e20:	2901      	cmp	r1, #1
 8080e22:	f000 8099 	beq.w	8080f58 <setup+0x248>
    fram.erase();                                                       // Reset the FRAM to correct the issue
 8080e26:	487a      	ldr	r0, [pc, #488]	; (8081010 <setup+0x300>)
 8080e28:	f000 fa2e 	bl	8081288 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
 8080e2c:	2304      	movs	r3, #4
 8080e2e:	4621      	mov	r1, r4
 8080e30:	4a79      	ldr	r2, [pc, #484]	; (8081018 <setup+0x308>)
 8080e32:	4877      	ldr	r0, [pc, #476]	; (8081010 <setup+0x300>)
 8080e34:	f000 faab 	bl	808138e <_ZN6MB85RC9writeDataEjPKhj>
    loadSystemDefaults();                                               // Out of the box, we need the device to be awake and connected
 8080e38:	f7ff fcce 	bl	80807d8 <_Z18loadSystemDefaultsv>
        int reason = RESET_REASON_NONE;
 8080e3c:	2400      	movs	r4, #0
  checkSystemValues();                                                  // Make sure System values are all in valid range
 8080e3e:	f7ff fcf9 	bl	8080834 <_Z17checkSystemValuesv>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080e42:	4622      	mov	r2, r4
 8080e44:	4621      	mov	r1, r4
 8080e46:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
 8080e48:	9403      	str	r4, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080e4a:	f000 fe8d 	bl	8081b68 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8080e4e:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
 8080e50:	2b14      	cmp	r3, #20
 8080e52:	f040 8087 	bne.w	8080f64 <setup+0x254>
    systemStatusWriteNeeded = true;                                     // If so, store incremented number - watchdog must have done This
 8080e56:	2201      	movs	r2, #1
    sysStatus.resetCount++;
 8080e58:	686b      	ldr	r3, [r5, #4]
 8080e5a:	3301      	adds	r3, #1
 8080e5c:	606b      	str	r3, [r5, #4]
    systemStatusWriteNeeded = true;                                     // If so, store incremented number - watchdog must have done This
 8080e5e:	4b6f      	ldr	r3, [pc, #444]	; (808101c <setup+0x30c>)
 8080e60:	701a      	strb	r2, [r3, #0]
  Time.setDSTOffset(sysStatus.dstOffset);                               // Set the value from FRAM if in limits
 8080e62:	68e8      	ldr	r0, [r5, #12]
 8080e64:	f002 f93a 	bl	80830dc <_ZN9TimeClass12setDSTOffsetEf>
  DSTRULES() ? Time.beginDST() : Time.endDST();                         // Perform the DST calculation here
 8080e68:	f7ff ff32 	bl	8080cd0 <_Z8isDSTusav>
 8080e6c:	2800      	cmp	r0, #0
 8080e6e:	f000 8084 	beq.w	8080f7a <setup+0x26a>
 8080e72:	f002 f94d 	bl	8083110 <_ZN9TimeClass8beginDSTEv>
  Time.zone(sysStatus.timezone);                                        // Set the Time Zone for our device
 8080e76:	68a8      	ldr	r0, [r5, #8]
 8080e78:	f002 f912 	bl	80830a0 <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
 8080e7c:	f002 f9ea 	bl	8083254 <_ZN9TimeClass5localEv>
 8080e80:	4604      	mov	r4, r0
 8080e82:	f002 f9ae 	bl	80831e2 <_ZN9TimeClass3nowEv>
 8080e86:	1a20      	subs	r0, r4, r0
 8080e88:	f002 fe6c 	bl	8083b64 <__aeabi_i2d>
 8080e8c:	a346      	add	r3, pc, #280	; (adr r3, 8080fa8 <setup+0x298>)
 8080e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080e92:	f002 fffb 	bl	8083e8c <__aeabi_ddiv>
 8080e96:	4a62      	ldr	r2, [pc, #392]	; (8081020 <setup+0x310>)
 8080e98:	e9cd 0100 	strd	r0, r1, [sp]
 8080e9c:	210a      	movs	r1, #10
 8080e9e:	4861      	ldr	r0, [pc, #388]	; (8081024 <setup+0x314>)
 8080ea0:	f001 f908 	bl	80820b4 <snprintf>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
 8080ea4:	2314      	movs	r3, #20
 8080ea6:	2150      	movs	r1, #80	; 0x50
 8080ea8:	4a5f      	ldr	r2, [pc, #380]	; (8081028 <setup+0x318>)
 8080eaa:	4859      	ldr	r0, [pc, #356]	; (8081010 <setup+0x300>)
 8080eac:	f000 fa24 	bl	80812f8 <_ZN6MB85RC8readDataEjPhj>
  checkCurrentValues();                                                 // Make sure all is good
 8080eb0:	f7ff fcf6 	bl	80808a0 <_Z18checkCurrentValuesv>
  currentHourlyPeriod = Time.hour();                                    // The local time hourly period for reporting purposes
 8080eb4:	f002 f9a6 	bl	8083204 <_ZN9TimeClass4hourEv>
 8080eb8:	4b5c      	ldr	r3, [pc, #368]	; (808102c <setup+0x31c>)
 8080eba:	6018      	str	r0, [r3, #0]
  if (!digitalRead(userSwitch)) loadSystemDefaults();                   // Make sure the device wakes up and connects
 8080ebc:	2005      	movs	r0, #5
 8080ebe:	f002 fc69 	bl	8083794 <digitalRead>
 8080ec2:	b908      	cbnz	r0, 8080ec8 <setup+0x1b8>
 8080ec4:	f7ff fc88 	bl	80807d8 <_Z18loadSystemDefaultsv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                      // The watchdog timer will signal us and we have to respond
 8080ec8:	2400      	movs	r4, #0
 8080eca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8080ece:	2201      	movs	r2, #1
 8080ed0:	4957      	ldr	r1, [pc, #348]	; (8081030 <setup+0x320>)
 8080ed2:	2011      	movs	r0, #17
 8080ed4:	9400      	str	r4, [sp, #0]
 8080ed6:	f001 fded 	bl	8082ab4 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(input1, input1ISR, FALLING);                          // We need to watch for the input1 in both rising and falling states even if it was on at reset
 8080eda:	2202      	movs	r2, #2
 8080edc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8080ee0:	4954      	ldr	r1, [pc, #336]	; (8081034 <setup+0x324>)
 8080ee2:	2019      	movs	r0, #25
 8080ee4:	9400      	str	r4, [sp, #0]
 8080ee6:	f001 fde5 	bl	8082ab4 <_Z15attachInterrupttPFvvE13InterruptModeah>
  if (digitalRead(input1))  {                                           // The input is not in an alert state
 8080eea:	2019      	movs	r0, #25
 8080eec:	f002 fc52 	bl	8083794 <digitalRead>
    strncpy(input1Str,"No Alert",sizeof(input1Str));
 8080ef0:	2210      	movs	r2, #16
  if (digitalRead(input1))  {                                           // The input is not in an alert state
 8080ef2:	2800      	cmp	r0, #0
 8080ef4:	d044      	beq.n	8080f80 <setup+0x270>
    strncpy(input1Str,"No Alert",sizeof(input1Str));
 8080ef6:	4950      	ldr	r1, [pc, #320]	; (8081038 <setup+0x328>)
 8080ef8:	4836      	ldr	r0, [pc, #216]	; (8080fd4 <setup+0x2c4>)
 8080efa:	f003 fd10 	bl	808491e <strncpy>
  if (digitalRead(input2))  {                                           // The input is not in an alert state
 8080efe:	201b      	movs	r0, #27
 8080f00:	f002 fc48 	bl	8083794 <digitalRead>
    strncpy(input2Str,"No Alert",sizeof(input2Str));
 8080f04:	2210      	movs	r2, #16
  if (digitalRead(input2))  {                                           // The input is not in an alert state
 8080f06:	2800      	cmp	r0, #0
 8080f08:	d042      	beq.n	8080f90 <setup+0x280>
    strncpy(input2Str,"No Alert",sizeof(input2Str));
 8080f0a:	494b      	ldr	r1, [pc, #300]	; (8081038 <setup+0x328>)
 8080f0c:	4833      	ldr	r0, [pc, #204]	; (8080fdc <setup+0x2cc>)
 8080f0e:	f003 fd06 	bl	808491e <strncpy>
    attachInterrupt(input2, input2ISR, FALLING);                          // On the input2 line, we just need to know when it goes LOW
 8080f12:	2300      	movs	r3, #0
 8080f14:	2202      	movs	r2, #2
 8080f16:	9300      	str	r3, [sp, #0]
 8080f18:	201b      	movs	r0, #27
 8080f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8080f1e:	4947      	ldr	r1, [pc, #284]	; (808103c <setup+0x32c>)
 8080f20:	f001 fdc8 	bl	8082ab4 <_Z15attachInterrupttPFvvE13InterruptModeah>
        return network_ready(*this, 0,  NULL);
 8080f24:	2200      	movs	r2, #0
 8080f26:	4b46      	ldr	r3, [pc, #280]	; (8081040 <setup+0x330>)
 8080f28:	4611      	mov	r1, r2
 8080f2a:	6858      	ldr	r0, [r3, #4]
 8080f2c:	f001 f86a 	bl	8082004 <network_ready>
  if (Cellular.ready()) getSignalStrength();                            // Test signal strength if the cellular modem is on and ready
 8080f30:	b108      	cbz	r0, 8080f36 <setup+0x226>
 8080f32:	f7ff fae1 	bl	80804f8 <_Z17getSignalStrengthv>
  getTemperature();
 8080f36:	f7ff fb17 	bl	8080568 <_Z14getTemperaturev>
  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
 8080f3a:	4b42      	ldr	r3, [pc, #264]	; (8081044 <setup+0x334>)
  digitalWrite(blueLED,LOW);                                            // Signal done with startup
 8080f3c:	2100      	movs	r1, #0
  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
 8080f3e:	781a      	ldrb	r2, [r3, #0]
  digitalWrite(blueLED,LOW);                                            // Signal done with startup
 8080f40:	2007      	movs	r0, #7
  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
 8080f42:	2a01      	cmp	r2, #1
 8080f44:	bf1c      	itt	ne
 8080f46:	2202      	movne	r2, #2
 8080f48:	701a      	strbne	r2, [r3, #0]
  digitalWrite(blueLED,LOW);                                            // Signal done with startup
 8080f4a:	f002 fc0a 	bl	8083762 <digitalWrite>
  String deviceID = System.deviceID();                                  // Multiple Electrons share the same hook - keeps things straight
 8080f4e:	a804      	add	r0, sp, #16
 8080f50:	f001 ff17 	bl	8082d82 <_ZN6StringD1Ev>
}
 8080f54:	b029      	add	sp, #164	; 0xa4
 8080f56:	bd30      	pop	{r4, r5, pc}
 8080f58:	2314      	movs	r3, #20
 8080f5a:	462a      	mov	r2, r5
 8080f5c:	482c      	ldr	r0, [pc, #176]	; (8081010 <setup+0x300>)
 8080f5e:	f000 f9cb 	bl	80812f8 <_ZN6MB85RC8readDataEjPhj>
        return t;
 8080f62:	e76b      	b.n	8080e3c <setup+0x12c>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080f64:	4622      	mov	r2, r4
 8080f66:	4621      	mov	r1, r4
 8080f68:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
 8080f6a:	9403      	str	r4, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080f6c:	f000 fdfc 	bl	8081b68 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8080f70:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
 8080f72:	2b8c      	cmp	r3, #140	; 0x8c
 8080f74:	f47f af75 	bne.w	8080e62 <setup+0x152>
 8080f78:	e76d      	b.n	8080e56 <setup+0x146>
  DSTRULES() ? Time.beginDST() : Time.endDST();                         // Perform the DST calculation here
 8080f7a:	f002 f8d5 	bl	8083128 <_ZN9TimeClass6endDSTEv>
 8080f7e:	e77a      	b.n	8080e76 <setup+0x166>
    strncpy(input1Str,"75% Full",sizeof(input1Str));
 8080f80:	4931      	ldr	r1, [pc, #196]	; (8081048 <setup+0x338>)
 8080f82:	4814      	ldr	r0, [pc, #80]	; (8080fd4 <setup+0x2c4>)
 8080f84:	f003 fccb 	bl	808491e <strncpy>
    current.input1 = 2;                                               // Inidication is that we are now 75% full
 8080f88:	2202      	movs	r2, #2
 8080f8a:	4b27      	ldr	r3, [pc, #156]	; (8081028 <setup+0x318>)
 8080f8c:	701a      	strb	r2, [r3, #0]
 8080f8e:	e7b6      	b.n	8080efe <setup+0x1ee>
    strncpy(input2Str,"Low Oil",sizeof(input2Str));
 8080f90:	492e      	ldr	r1, [pc, #184]	; (808104c <setup+0x33c>)
 8080f92:	4812      	ldr	r0, [pc, #72]	; (8080fdc <setup+0x2cc>)
 8080f94:	f003 fcc3 	bl	808491e <strncpy>
    current.input2 = 1;                                               // Inidication is that we have a low oil alert
 8080f98:	2201      	movs	r2, #1
 8080f9a:	4b23      	ldr	r3, [pc, #140]	; (8081028 <setup+0x318>)
 8080f9c:	705a      	strb	r2, [r3, #1]
    current.warningFlag = true;
 8080f9e:	741a      	strb	r2, [r3, #16]
 8080fa0:	e7c0      	b.n	8080f24 <setup+0x214>
 8080fa2:	bf00      	nop
 8080fa4:	f3af 8000 	nop.w
 8080fa8:	00000000 	.word	0x00000000
 8080fac:	40ac2000 	.word	0x40ac2000
 8080fb0:	080801e9 	.word	0x080801e9
 8080fb4:	20000104 	.word	0x20000104
 8080fb8:	08084c78 	.word	0x08084c78
 8080fbc:	200001f4 	.word	0x200001f4
 8080fc0:	08084c7f 	.word	0x08084c7f
 8080fc4:	20000180 	.word	0x20000180
 8080fc8:	08084c8a 	.word	0x08084c8a
 8080fcc:	08084d70 	.word	0x08084d70
 8080fd0:	08084c96 	.word	0x08084c96
 8080fd4:	20000000 	.word	0x20000000
 8080fd8:	08084c9e 	.word	0x08084c9e
 8080fdc:	20000010 	.word	0x20000010
 8080fe0:	08084ca5 	.word	0x08084ca5
 8080fe4:	08084cac 	.word	0x08084cac
 8080fe8:	0808016d 	.word	0x0808016d
 8080fec:	0808241d 	.word	0x0808241d
 8080ff0:	08084cb7 	.word	0x08084cb7
 8080ff4:	08080101 	.word	0x08080101
 8080ff8:	08084cc0 	.word	0x08084cc0
 8080ffc:	0808026d 	.word	0x0808026d
 8081000:	08084ccd 	.word	0x08084ccd
 8081004:	080802d9 	.word	0x080802d9
 8081008:	08084cda 	.word	0x08084cda
 808100c:	08081051 	.word	0x08081051
 8081010:	2000019c 	.word	0x2000019c
 8081014:	200001f0 	.word	0x200001f0
 8081018:	08084d78 	.word	0x08084d78
 808101c:	20000204 	.word	0x20000204
 8081020:	08084afb 	.word	0x08084afb
 8081024:	20000190 	.word	0x20000190
 8081028:	20000178 	.word	0x20000178
 808102c:	2000018c 	.word	0x2000018c
 8081030:	080800dd 	.word	0x080800dd
 8081034:	080800e9 	.word	0x080800e9
 8081038:	08084ce8 	.word	0x08084ce8
 808103c:	080800f5 	.word	0x080800f5
 8081040:	20000210 	.word	0x20000210
 8081044:	200001ec 	.word	0x200001ec
 8081048:	08084b1e 	.word	0x08084b1e
 808104c:	08084b31 	.word	0x08084b31

08081050 <_Z12setDSTOffset6String>:
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
 8081050:	b570      	push	{r4, r5, r6, lr}
 8081052:	b0c8      	sub	sp, #288	; 0x120
 8081054:	4604      	mov	r4, r0
  time_t t = Time.now();
 8081056:	f002 f8c4 	bl	80831e2 <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
 808105a:	220a      	movs	r2, #10
  time_t t = Time.now();
 808105c:	4605      	mov	r5, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
 808105e:	a903      	add	r1, sp, #12
 8081060:	6820      	ldr	r0, [r4, #0]
 8081062:	f003 fce9 	bl	8084a38 <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
 8081066:	b2c3      	uxtb	r3, r0
 8081068:	2b02      	cmp	r3, #2
 808106a:	d854      	bhi.n	8081116 <_Z12setDSTOffset6String+0xc6>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
 808106c:	b240      	sxtb	r0, r0
 808106e:	f003 f947 	bl	8084300 <__aeabi_i2f>
 8081072:	4604      	mov	r4, r0
 8081074:	f002 f832 	bl	80830dc <_ZN9TimeClass12setDSTOffsetEf>
  systemStatusWriteNeeded = true;
 8081078:	2201      	movs	r2, #1
  sysStatus.dstOffset = (float)tempDSTOffset;
 808107a:	4b2b      	ldr	r3, [pc, #172]	; (8081128 <_Z12setDSTOffset6String+0xd8>)
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
 808107c:	4620      	mov	r0, r4
  sysStatus.dstOffset = (float)tempDSTOffset;
 808107e:	60dc      	str	r4, [r3, #12]
  systemStatusWriteNeeded = true;
 8081080:	4b2a      	ldr	r3, [pc, #168]	; (808112c <_Z12setDSTOffset6String+0xdc>)
 8081082:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
 8081084:	f002 fd80 	bl	8083b88 <__aeabi_f2d>
 8081088:	4a29      	ldr	r2, [pc, #164]	; (8081130 <_Z12setDSTOffset6String+0xe0>)
 808108a:	e9cd 0100 	strd	r0, r1, [sp]
 808108e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8081092:	a808      	add	r0, sp, #32
 8081094:	f001 f80e 	bl	80820b4 <snprintf>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
 8081098:	f002 f886 	bl	80831a8 <_ZN9TimeClass7isValidEv>
 808109c:	b128      	cbz	r0, 80810aa <_Z12setDSTOffset6String+0x5a>
 808109e:	f7ff fe17 	bl	8080cd0 <_Z8isDSTusav>
 80810a2:	2800      	cmp	r0, #0
 80810a4:	d034      	beq.n	8081110 <_Z12setDSTOffset6String+0xc0>
 80810a6:	f002 f833 	bl	8083110 <_ZN9TimeClass8beginDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
 80810aa:	f002 f8d3 	bl	8083254 <_ZN9TimeClass5localEv>
 80810ae:	4604      	mov	r4, r0
 80810b0:	f002 f897 	bl	80831e2 <_ZN9TimeClass3nowEv>
 80810b4:	1a20      	subs	r0, r4, r0
 80810b6:	f002 fd55 	bl	8083b64 <__aeabi_i2d>
 80810ba:	a319      	add	r3, pc, #100	; (adr r3, 8081120 <_Z12setDSTOffset6String+0xd0>)
 80810bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80810c0:	f002 fee4 	bl	8083e8c <__aeabi_ddiv>
 80810c4:	4a1b      	ldr	r2, [pc, #108]	; (8081134 <_Z12setDSTOffset6String+0xe4>)
 80810c6:	e9cd 0100 	strd	r0, r1, [sp]
 80810ca:	210a      	movs	r1, #10
 80810cc:	481a      	ldr	r0, [pc, #104]	; (8081138 <_Z12setDSTOffset6String+0xe8>)
 80810ce:	f000 fff1 	bl	80820b4 <snprintf>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80810d2:	f000 ff3f 	bl	8081f54 <spark_cloud_flag_connected>
  if (Particle.connected()) {
 80810d6:	b1c8      	cbz	r0, 808110c <_Z12setDSTOffset6String+0xbc>
 80810d8:	2600      	movs	r6, #0
 80810da:	4c18      	ldr	r4, [pc, #96]	; (808113c <_Z12setDSTOffset6String+0xec>)
    publishQueue.publish("Time",data, PRIVATE);
 80810dc:	f88d 6000 	strb.w	r6, [sp]
 80810e0:	4917      	ldr	r1, [pc, #92]	; (8081140 <_Z12setDSTOffset6String+0xf0>)
 80810e2:	7823      	ldrb	r3, [r4, #0]
 80810e4:	aa08      	add	r2, sp, #32
 80810e6:	4817      	ldr	r0, [pc, #92]	; (8081144 <_Z12setDSTOffset6String+0xf4>)
 80810e8:	f7ff f870 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
 80810ec:	462a      	mov	r2, r5
 80810ee:	17eb      	asrs	r3, r5, #31
 80810f0:	a804      	add	r0, sp, #16
 80810f2:	f002 f821 	bl	8083138 <_ZN9TimeClass7timeStrEx>
 80810f6:	f88d 6000 	strb.w	r6, [sp]
 80810fa:	7823      	ldrb	r3, [r4, #0]
 80810fc:	9a04      	ldr	r2, [sp, #16]
 80810fe:	4910      	ldr	r1, [pc, #64]	; (8081140 <_Z12setDSTOffset6String+0xf0>)
 8081100:	4810      	ldr	r0, [pc, #64]	; (8081144 <_Z12setDSTOffset6String+0xf4>)
 8081102:	f7ff f863 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
 8081106:	a804      	add	r0, sp, #16
 8081108:	f001 fe3b 	bl	8082d82 <_ZN6StringD1Ev>
  return 1;
 808110c:	2001      	movs	r0, #1
 808110e:	e003      	b.n	8081118 <_Z12setDSTOffset6String+0xc8>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
 8081110:	f002 f80a 	bl	8083128 <_ZN9TimeClass6endDSTEv>
 8081114:	e7c9      	b.n	80810aa <_Z12setDSTOffset6String+0x5a>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
 8081116:	2000      	movs	r0, #0
}
 8081118:	b048      	add	sp, #288	; 0x120
 808111a:	bd70      	pop	{r4, r5, r6, pc}
 808111c:	f3af 8000 	nop.w
 8081120:	00000000 	.word	0x00000000
 8081124:	40ac2000 	.word	0x40ac2000
 8081128:	200001f0 	.word	0x200001f0
 808112c:	20000204 	.word	0x20000204
 8081130:	08084cf1 	.word	0x08084cf1
 8081134:	08084afb 	.word	0x08084afb
 8081138:	20000190 	.word	0x20000190
 808113c:	20000158 	.word	0x20000158
 8081140:	08084b19 	.word	0x08084b19
 8081144:	200001b0 	.word	0x200001b0

08081148 <_GLOBAL__sub_I___appProductID>:
 8081148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        val_(val) {
 808114a:	2400      	movs	r4, #0
 808114c:	2701      	movs	r7, #1
 808114e:	4b25      	ldr	r3, [pc, #148]	; (80811e4 <_GLOBAL__sub_I___appProductID+0x9c>)
              error_(SYSTEM_ERROR_NONE) {
 8081150:	4d25      	ldr	r5, [pc, #148]	; (80811e8 <_GLOBAL__sub_I___appProductID+0xa0>)
 8081152:	601c      	str	r4, [r3, #0]
 8081154:	4b25      	ldr	r3, [pc, #148]	; (80811ec <_GLOBAL__sub_I___appProductID+0xa4>)
SYSTEM_MODE(SEMI_AUTOMATIC);    // This will enable user code to start executing automatically.
 8081156:	4e26      	ldr	r6, [pc, #152]	; (80811f0 <_GLOBAL__sub_I___appProductID+0xa8>)
 8081158:	701f      	strb	r7, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
 808115a:	f002 fa8b 	bl	8083674 <spark_protocol_instance>
 808115e:	4623      	mov	r3, r4
 8081160:	4622      	mov	r2, r4
 8081162:	f642 11fb 	movw	r1, #10747	; 0x29fb
 8081166:	f002 fa8d 	bl	8083684 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
 808116a:	f002 fa83 	bl	8083674 <spark_protocol_instance>
 808116e:	4622      	mov	r2, r4
 8081170:	4623      	mov	r3, r4
 8081172:	2105      	movs	r1, #5
 8081174:	f002 fa8e 	bl	8083694 <spark_protocol_set_product_firmware_version>
    SleepResult() {}
 8081178:	4b1e      	ldr	r3, [pc, #120]	; (80811f4 <_GLOBAL__sub_I___appProductID+0xac>)
              error_(SYSTEM_ERROR_NONE) {
 808117a:	602c      	str	r4, [r5, #0]
    SleepResult() {}
 808117c:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
 808117e:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
 8081180:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
 8081182:	2002      	movs	r0, #2
 8081184:	f000 fe70 	bl	8081e68 <set_system_mode>
 8081188:	4632      	mov	r2, r6
 808118a:	4628      	mov	r0, r5
 808118c:	491a      	ldr	r1, [pc, #104]	; (80811f8 <_GLOBAL__sub_I___appProductID+0xb0>)
 808118e:	f002 fb89 	bl	80838a4 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);         // Means my code will not be held up by Particle processes.
 8081192:	4621      	mov	r1, r4
 8081194:	4638      	mov	r0, r7
 8081196:	f000 fe7f 	bl	8081e98 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
 808119a:	4639      	mov	r1, r7
 808119c:	2004      	movs	r0, #4
 808119e:	f000 fcdb 	bl	8081b58 <HAL_Feature_Set>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
 80811a2:	f002 fb3f 	bl	8083824 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
 80811a6:	4d15      	ldr	r5, [pc, #84]	; (80811fc <_GLOBAL__sub_I___appProductID+0xb4>)
 80811a8:	4601      	mov	r1, r0
 80811aa:	4623      	mov	r3, r4
 80811ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80811b0:	4628      	mov	r0, r5
 80811b2:	f000 f855 	bl	8081260 <_ZN6MB85RCC1ER7TwoWireji>
 80811b6:	4b12      	ldr	r3, [pc, #72]	; (8081200 <_GLOBAL__sub_I___appProductID+0xb8>)
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
 80811b8:	4c12      	ldr	r4, [pc, #72]	; (8081204 <_GLOBAL__sub_I___appProductID+0xbc>)
 80811ba:	602b      	str	r3, [r5, #0]
 80811bc:	4632      	mov	r2, r6
 80811be:	4628      	mov	r0, r5
 80811c0:	4911      	ldr	r1, [pc, #68]	; (8081208 <_GLOBAL__sub_I___appProductID+0xc0>)
 80811c2:	f002 fb6f 	bl	80838a4 <__aeabi_atexit>
 80811c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80811ca:	4620      	mov	r0, r4
 80811cc:	490f      	ldr	r1, [pc, #60]	; (808120c <_GLOBAL__sub_I___appProductID+0xc4>)
 80811ce:	f000 fb4d 	bl	808186c <_ZN25PublishQueueAsyncRetainedC1EPht>
 80811d2:	4b0f      	ldr	r3, [pc, #60]	; (8081210 <_GLOBAL__sub_I___appProductID+0xc8>)
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
 80811d4:	4632      	mov	r2, r6
 80811d6:	6023      	str	r3, [r4, #0]
 80811d8:	4620      	mov	r0, r4
 80811da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
 80811de:	490d      	ldr	r1, [pc, #52]	; (8081214 <_GLOBAL__sub_I___appProductID+0xcc>)
 80811e0:	f002 bb60 	b.w	80838a4 <__aeabi_atexit>
 80811e4:	20000154 	.word	0x20000154
 80811e8:	20000144 	.word	0x20000144
 80811ec:	20000158 	.word	0x20000158
 80811f0:	20000100 	.word	0x20000100
 80811f4:	ffff0000 	.word	0xffff0000
 80811f8:	08080189 	.word	0x08080189
 80811fc:	2000019c 	.word	0x2000019c
 8081200:	08084d0c 	.word	0x08084d0c
 8081204:	200001b0 	.word	0x200001b0
 8081208:	08080145 	.word	0x08080145
 808120c:	40024000 	.word	0x40024000
 8081210:	08084d28 	.word	0x08084d28
 8081214:	0808011d 	.word	0x0808011d

08081218 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
 8081218:	4770      	bx	lr

0808121a <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
 808121a:	b510      	push	{r4, lr}
 808121c:	4604      	mov	r4, r0
}
 808121e:	2110      	movs	r1, #16
 8081220:	f002 fb45 	bl	80838ae <_ZdlPvj>
 8081224:	4620      	mov	r0, r4
 8081226:	bd10      	pop	{r4, pc}

08081228 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
 8081228:	6803      	ldr	r3, [r0, #0]
 808122a:	b2c9      	uxtb	r1, r1
 808122c:	689b      	ldr	r3, [r3, #8]
 808122e:	4718      	bx	r3

08081230 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8081230:	b40e      	push	{r1, r2, r3}
 8081232:	b510      	push	{r4, lr}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8081234:	2300      	movs	r3, #0
    log(LOG_LEVEL_INFO, fmt, args);
 8081236:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 8081238:	2020      	movs	r0, #32
inline void spark::Logger::info(const char *fmt, ...) const {
 808123a:	b08d      	sub	sp, #52	; 0x34
 808123c:	aa0f      	add	r2, sp, #60	; 0x3c
 808123e:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 8081242:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8081246:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 808124a:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 808124c:	201e      	movs	r0, #30
 808124e:	aa04      	add	r2, sp, #16
 8081250:	f000 fdfa 	bl	8081e48 <log_message_v>
}
 8081254:	b00d      	add	sp, #52	; 0x34
 8081256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808125a:	b003      	add	sp, #12
 808125c:	4770      	bx	lr
	...

08081260 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
 8081260:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
 8081262:	4d03      	ldr	r5, [pc, #12]	; (8081270 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
 8081264:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8081268:	e9c0 5100 	strd	r5, r1, [r0]
}
 808126c:	bd30      	pop	{r4, r5, pc}
 808126e:	bf00      	nop
 8081270:	08084db0 	.word	0x08084db0

08081274 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
 8081274:	6840      	ldr	r0, [r0, #4]
 8081276:	f001 bbcf 	b.w	8082a18 <_ZN7TwoWire5beginEv>

0808127a <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 808127a:	b510      	push	{r4, lr}
 808127c:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 808127e:	6800      	ldr	r0, [r0, #0]
 8081280:	f001 fc0d 	bl	8082a9e <_ZN7TwoWire6unlockEv>
 8081284:	4620      	mov	r0, r4
 8081286:	bd10      	pop	{r4, pc}

08081288 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
 8081288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808128c:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
 808128e:	6840      	ldr	r0, [r0, #4]
bool MB85RC::erase() {
 8081290:	b08a      	sub	sp, #40	; 0x28
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081292:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8081294:	f001 fbfa 	bl	8082a8c <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
 8081298:	221e      	movs	r2, #30
 808129a:	2100      	movs	r1, #0
 808129c:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
 808129e:	68a7      	ldr	r7, [r4, #8]
		size_t framAddr = 0;
 80812a0:	2600      	movs	r6, #0
		memset(zero, 0, sizeof(zero));
 80812a2:	f003 fadb 	bl	808485c <memset>

		while(totalLen > 0) {
 80812a6:	b1ef      	cbz	r7, 80812e4 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
 80812a8:	2f1e      	cmp	r7, #30
 80812aa:	46b8      	mov	r8, r7
 80812ac:	bf28      	it	cs
 80812ae:	f04f 081e 	movcs.w	r8, #30
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
 80812b2:	6823      	ldr	r3, [r4, #0]
 80812b4:	4631      	mov	r1, r6
 80812b6:	68dd      	ldr	r5, [r3, #12]
 80812b8:	4620      	mov	r0, r4
 80812ba:	4643      	mov	r3, r8
 80812bc:	aa02      	add	r2, sp, #8
 80812be:	47a8      	blx	r5
			if (!result) {
 80812c0:	4605      	mov	r5, r0
 80812c2:	b958      	cbnz	r0, 80812dc <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
 80812c4:	480a      	ldr	r0, [pc, #40]	; (80812f0 <_ZN6MB85RC5eraseEv+0x68>)
 80812c6:	4632      	mov	r2, r6
 80812c8:	490a      	ldr	r1, [pc, #40]	; (80812f4 <_ZN6MB85RC5eraseEv+0x6c>)
 80812ca:	f7ff ffb1 	bl	8081230 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
 80812ce:	a801      	add	r0, sp, #4
 80812d0:	f7ff ffd3 	bl	808127a <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
 80812d4:	4628      	mov	r0, r5
 80812d6:	b00a      	add	sp, #40	; 0x28
 80812d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
 80812dc:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
 80812e0:	4446      	add	r6, r8
		while(totalLen > 0) {
 80812e2:	e7e0      	b.n	80812a6 <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
 80812e4:	a801      	add	r0, sp, #4
 80812e6:	f7ff ffc8 	bl	808127a <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
 80812ea:	2501      	movs	r5, #1
 80812ec:	e7f2      	b.n	80812d4 <_ZN6MB85RC5eraseEv+0x4c>
 80812ee:	bf00      	nop
 80812f0:	200002fc 	.word	0x200002fc
 80812f4:	08084d7c 	.word	0x08084d7c

080812f8 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
 80812f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80812fc:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
 80812fe:	6840      	ldr	r0, [r0, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
 8081300:	460d      	mov	r5, r1
 8081302:	4616      	mov	r6, r2
 8081304:	461f      	mov	r7, r3
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081306:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8081308:	f001 fbc0 	bl	8082a8c <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
 808130c:	b1a7      	cbz	r7, 8081338 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
 808130e:	68e1      	ldr	r1, [r4, #12]
 8081310:	6860      	ldr	r0, [r4, #4]
 8081312:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8081316:	f001 fbb2 	bl	8082a7e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
 808131a:	0a29      	lsrs	r1, r5, #8
 808131c:	6860      	ldr	r0, [r4, #4]
 808131e:	f7ff ff83 	bl	8081228 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
 8081322:	4629      	mov	r1, r5
 8081324:	6860      	ldr	r0, [r4, #4]
 8081326:	f7ff ff7f 	bl	8081228 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
 808132a:	2100      	movs	r1, #0
 808132c:	6860      	ldr	r0, [r4, #4]
 808132e:	f001 fba9 	bl	8082a84 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
 8081332:	b148      	cbz	r0, 8081348 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
 8081334:	2400      	movs	r4, #0
 8081336:	e000      	b.n	808133a <_ZN6MB85RC8readDataEjPhj+0x42>
 8081338:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
 808133a:	a801      	add	r0, sp, #4
 808133c:	f7ff ff9d 	bl	808127a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
 8081340:	4620      	mov	r0, r4
 8081342:	b003      	add	sp, #12
 8081344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
 8081348:	2f20      	cmp	r7, #32
 808134a:	46b8      	mov	r8, r7
 808134c:	bf28      	it	cs
 808134e:	f04f 0820 	movcs.w	r8, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
 8081352:	7b21      	ldrb	r1, [r4, #12]
 8081354:	2301      	movs	r3, #1
 8081356:	4642      	mov	r2, r8
 8081358:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 808135c:	6860      	ldr	r0, [r4, #4]
 808135e:	f001 fb78 	bl	8082a52 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
 8081362:	f002 fa5f 	bl	8083824 <_Z19__fetch_global_Wirev>
 8081366:	6803      	ldr	r3, [r0, #0]
 8081368:	691b      	ldr	r3, [r3, #16]
 808136a:	4798      	blx	r3
 808136c:	4540      	cmp	r0, r8
 808136e:	dbe1      	blt.n	8081334 <_ZN6MB85RC8readDataEjPhj+0x3c>
 8081370:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
 8081374:	f002 fa56 	bl	8083824 <_Z19__fetch_global_Wirev>
 8081378:	6803      	ldr	r3, [r0, #0]
 808137a:	695b      	ldr	r3, [r3, #20]
 808137c:	4798      	blx	r3
 808137e:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
 8081382:	454e      	cmp	r6, r9
 8081384:	d1f6      	bne.n	8081374 <_ZN6MB85RC8readDataEjPhj+0x7c>
 8081386:	4445      	add	r5, r8
 8081388:	eba7 0708 	sub.w	r7, r7, r8
 808138c:	e7be      	b.n	808130c <_ZN6MB85RC8readDataEjPhj+0x14>

0808138e <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
 808138e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081392:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
 8081394:	6840      	ldr	r0, [r0, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
 8081396:	460e      	mov	r6, r1
 8081398:	4690      	mov	r8, r2
 808139a:	461d      	mov	r5, r3
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808139c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808139e:	f04f 0901 	mov.w	r9, #1
 80813a2:	f001 fb73 	bl	8082a8c <_ZN7TwoWire4lockEv>
	WITH_LOCK(wire) {
 80813a6:	f1b9 0f00 	cmp.w	r9, #0
 80813aa:	d02a      	beq.n	8081402 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
 80813ac:	b34d      	cbz	r5, 8081402 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
 80813ae:	68e1      	ldr	r1, [r4, #12]
 80813b0:	6860      	ldr	r0, [r4, #4]
 80813b2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 80813b6:	f001 fb62 	bl	8082a7e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
 80813ba:	0a31      	lsrs	r1, r6, #8
 80813bc:	6860      	ldr	r0, [r4, #4]
 80813be:	f7ff ff33 	bl	8081228 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
 80813c2:	4631      	mov	r1, r6
 80813c4:	6860      	ldr	r0, [r4, #4]
 80813c6:	f7ff ff2f 	bl	8081228 <_ZN7TwoWire5writeEj>
 80813ca:	4647      	mov	r7, r8
 80813cc:	f1a5 0a1e 	sub.w	sl, r5, #30
 80813d0:	eba6 0b08 	sub.w	fp, r6, r8

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
				wire.write(*data);
 80813d4:	6860      	ldr	r0, [r4, #4]
 80813d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80813da:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
 80813dc:	3d01      	subs	r5, #1
				wire.write(*data);
 80813de:	689b      	ldr	r3, [r3, #8]
 80813e0:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
 80813e2:	4555      	cmp	r5, sl
				data++;
 80813e4:	46b8      	mov	r8, r7
 80813e6:	eb0b 0607 	add.w	r6, fp, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
 80813ea:	d001      	beq.n	80813f0 <_ZN6MB85RC9writeDataEjPKhj+0x62>
 80813ec:	2d00      	cmp	r5, #0
 80813ee:	d1f1      	bne.n	80813d4 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
 80813f0:	2101      	movs	r1, #1
 80813f2:	6860      	ldr	r0, [r4, #4]
 80813f4:	f001 fb46 	bl	8082a84 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
 80813f8:	2800      	cmp	r0, #0
 80813fa:	d0d7      	beq.n	80813ac <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
 80813fc:	f04f 0900 	mov.w	r9, #0
 8081400:	e7d1      	b.n	80813a6 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
 8081402:	a801      	add	r0, sp, #4
 8081404:	f7ff ff39 	bl	808127a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
 8081408:	4648      	mov	r0, r9
 808140a:	b003      	add	sp, #12
 808140c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08081410 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
 8081410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8081414:	460e      	mov	r6, r1
 8081416:	4615      	mov	r5, r2
 8081418:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
 808141a:	6840      	ldr	r0, [r0, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
 808141c:	b08b      	sub	sp, #44	; 0x2c
 808141e:	461c      	mov	r4, r3
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081420:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8081422:	f001 fb33 	bl	8082a8c <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
 8081426:	42ae      	cmp	r6, r5
 8081428:	d229      	bcs.n	808147e <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
 808142a:	4426      	add	r6, r4
			framAddrTo += numBytes;
 808142c:	4425      	add	r5, r4
			while(numBytes > 0) {
 808142e:	b18c      	cbz	r4, 8081454 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
 8081430:	2c1e      	cmp	r4, #30
 8081432:	4627      	mov	r7, r4
 8081434:	bf28      	it	cs
 8081436:	271e      	movcs	r7, #30
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
 8081438:	f8d8 3000 	ldr.w	r3, [r8]
				framAddrFrom -= count;
 808143c:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
 808143e:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8081442:	4631      	mov	r1, r6
 8081444:	463b      	mov	r3, r7
 8081446:	4640      	mov	r0, r8
 8081448:	aa02      	add	r2, sp, #8
				framAddrTo -= count;
 808144a:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
 808144c:	47c8      	blx	r9
				if (!result) {
 808144e:	b948      	cbnz	r0, 8081464 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
 8081450:	2400      	movs	r4, #0
 8081452:	e000      	b.n	8081456 <_ZN6MB85RC8moveDataEjjj+0x46>
 8081454:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
 8081456:	a801      	add	r0, sp, #4
 8081458:	f7ff ff0f 	bl	808127a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
 808145c:	4620      	mov	r0, r4
 808145e:	b00b      	add	sp, #44	; 0x2c
 8081460:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
 8081464:	f8d8 3000 	ldr.w	r3, [r8]
 8081468:	4629      	mov	r1, r5
 808146a:	f8d3 900c 	ldr.w	r9, [r3, #12]
 808146e:	4640      	mov	r0, r8
 8081470:	463b      	mov	r3, r7
 8081472:	aa02      	add	r2, sp, #8
 8081474:	47c8      	blx	r9
				if (!result) {
 8081476:	2800      	cmp	r0, #0
 8081478:	d0ea      	beq.n	8081450 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
 808147a:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
 808147c:	e7d7      	b.n	808142e <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
 808147e:	d9e9      	bls.n	8081454 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
 8081480:	2c00      	cmp	r4, #0
 8081482:	d0e7      	beq.n	8081454 <_ZN6MB85RC8moveDataEjjj+0x44>
				if (count > sizeof(buf)) {
 8081484:	2c1e      	cmp	r4, #30
 8081486:	4627      	mov	r7, r4
 8081488:	bf28      	it	cs
 808148a:	271e      	movcs	r7, #30
				result = readData(framAddrFrom, buf, count);
 808148c:	f8d8 3000 	ldr.w	r3, [r8]
 8081490:	4631      	mov	r1, r6
 8081492:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8081496:	4640      	mov	r0, r8
 8081498:	463b      	mov	r3, r7
 808149a:	aa02      	add	r2, sp, #8
 808149c:	47c8      	blx	r9
				if (!result) {
 808149e:	2800      	cmp	r0, #0
 80814a0:	d0d6      	beq.n	8081450 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
 80814a2:	f8d8 3000 	ldr.w	r3, [r8]
 80814a6:	4629      	mov	r1, r5
 80814a8:	f8d3 900c 	ldr.w	r9, [r3, #12]
 80814ac:	4640      	mov	r0, r8
 80814ae:	463b      	mov	r3, r7
 80814b0:	aa02      	add	r2, sp, #8
 80814b2:	47c8      	blx	r9
				if (!result) {
 80814b4:	2800      	cmp	r0, #0
 80814b6:	d0cb      	beq.n	8081450 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
 80814b8:	443e      	add	r6, r7
				framAddrTo += count;
 80814ba:	443d      	add	r5, r7
				numBytes -= count;
 80814bc:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
 80814be:	e7df      	b.n	8081480 <_ZN6MB85RC8moveDataEjjj+0x70>

080814c0 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
 80814c0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80814c2:	4603      	mov	r3, r0
	switch (__op)
 80814c4:	d102      	bne.n	80814cc <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() =
 80814c6:	6001      	str	r1, [r0, #0]

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
 80814c8:	2000      	movs	r0, #0
 80814ca:	4770      	bx	lr
	  switch (__op)
 80814cc:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80814ce:	bf04      	itt	eq
 80814d0:	e9d1 0100 	ldrdeq	r0, r1, [r1]
 80814d4:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
 80814d8:	e7f6      	b.n	80814c8 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

080814da <_ZN6Thread3runEPv>:

private:

    static os_thread_return_t run(void* param) {
        Data* th = (Data*)param;
        th->started = true;
 80814da:	2301      	movs	r3, #1
    static os_thread_return_t run(void* param) {
 80814dc:	b510      	push	{r4, lr}
        th->started = true;
 80814de:	7403      	strb	r3, [r0, #16]
        if (th->func) {
 80814e0:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
 80814e2:	4604      	mov	r4, r0
        if (th->func) {
 80814e4:	b143      	cbz	r3, 80814f8 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
 80814e6:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80814e8:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
 80814ea:	2301      	movs	r3, #1
        os_thread_exit(nullptr);
 80814ec:	2000      	movs	r0, #0
        th->exited = true;
 80814ee:	7463      	strb	r3, [r4, #17]
    }
 80814f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
 80814f4:	f000 bb28 	b.w	8081b48 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80814f8:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
 80814fa:	2800      	cmp	r0, #0
 80814fc:	d0f5      	beq.n	80814ea <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
 80814fe:	6883      	ldr	r3, [r0, #8]
 8081500:	b90b      	cbnz	r3, 8081506 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
 8081502:	f002 f9da 	bl	80838ba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081506:	68c3      	ldr	r3, [r0, #12]
 8081508:	e7ee      	b.n	80814e8 <_ZN6Thread3runEPv+0xe>

0808150a <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808150a:	4603      	mov	r3, r0
 808150c:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
 808150e:	6842      	ldr	r2, [r0, #4]
 8081510:	681b      	ldr	r3, [r3, #0]
 8081512:	1054      	asrs	r4, r2, #1
 8081514:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8081518:	07d2      	lsls	r2, r2, #31
 808151a:	bf48      	it	mi
 808151c:	590a      	ldrmi	r2, [r1, r4]
      }
 808151e:	bc10      	pop	{r4}
 8081520:	bf48      	it	mi
 8081522:	58d3      	ldrmi	r3, [r2, r3]
 8081524:	4718      	bx	r3

08081526 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 8081526:	b510      	push	{r4, lr}
      if (_M_manager)
 8081528:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 808152a:	4604      	mov	r4, r0
      if (_M_manager)
 808152c:	b113      	cbz	r3, 8081534 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808152e:	2203      	movs	r2, #3
 8081530:	4601      	mov	r1, r0
 8081532:	4798      	blx	r3
    }
 8081534:	4620      	mov	r0, r4
 8081536:	bd10      	pop	{r4, pc}

08081538 <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
 8081538:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
 808153a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
 808153c:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
 8081540:	4605      	mov	r5, r0

	os_mutex_create(&mutex);
 8081542:	3008      	adds	r0, #8
 8081544:	f000 fad8 	bl	8081af8 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
 8081548:	2004      	movs	r0, #4
 808154a:	f7fe fdae 	bl	80800aa <_Znwj>
 808154e:	4604      	mov	r4, r0
 8081550:	b398      	cbz	r0, 80815ba <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
 8081552:	2014      	movs	r0, #20
 8081554:	491a      	ldr	r1, [pc, #104]	; (80815c0 <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
 8081556:	f002 f9ac 	bl	80838b2 <_ZnwjRKSt9nothrow_t>
 808155a:	b130      	cbz	r0, 808156a <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 808155c:	2300      	movs	r3, #0
            exited(false) {
 808155e:	e9c0 3300 	strd	r3, r3, [r0]
 8081562:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8081566:	7403      	strb	r3, [r0, #16]
 8081568:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 808156a:	6020      	str	r0, [r4, #0]
        if (!d_) {
 808156c:	b1a0      	cbz	r0, 8081598 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
 808156e:	4b15      	ldr	r3, [pc, #84]	; (80815c4 <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 8081570:	2202      	movs	r2, #2
        d_->func_param = function_param;
 8081572:	e9c0 3502 	strd	r3, r5, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 8081576:	f44f 6300 	mov.w	r3, #2048	; 0x800
 808157a:	4913      	ldr	r1, [pc, #76]	; (80815c8 <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
 808157c:	e9cd 0300 	strd	r0, r3, [sp]
 8081580:	4b12      	ldr	r3, [pc, #72]	; (80815cc <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
 8081582:	3004      	adds	r0, #4
 8081584:	f000 faa8 	bl	8081ad8 <os_thread_create>
 8081588:	b930      	cbnz	r0, 8081598 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 808158a:	6823      	ldr	r3, [r4, #0]
        while (!d_->started) {
 808158c:	7c1b      	ldrb	r3, [r3, #16]
 808158e:	b9a3      	cbnz	r3, 80815ba <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
 8081590:	2001      	movs	r0, #1
 8081592:	f000 faf9 	bl	8081b88 <HAL_Delay_Milliseconds>
        while (!d_->started) {
 8081596:	e7f8      	b.n	808158a <_ZN21PublishQueueAsyncBase5setupEv+0x52>
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081598:	2300      	movs	r3, #0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808159a:	6826      	ldr	r6, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 808159c:	6023      	str	r3, [r4, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
 808159e:	b166      	cbz	r6, 80815ba <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
 80815a0:	6837      	ldr	r7, [r6, #0]
 80815a2:	b137      	cbz	r7, 80815b2 <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
 80815a4:	4638      	mov	r0, r7
 80815a6:	f7ff ffbe 	bl	8081526 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
 80815aa:	2110      	movs	r1, #16
 80815ac:	4638      	mov	r0, r7
 80815ae:	f002 f97e 	bl	80838ae <_ZdlPvj>
 80815b2:	2114      	movs	r1, #20
 80815b4:	4630      	mov	r0, r6
 80815b6:	f002 f97a 	bl	80838ae <_ZdlPvj>
 80815ba:	606c      	str	r4, [r5, #4]
}
 80815bc:	b003      	add	sp, #12
 80815be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80815c0:	08085044 	.word	0x08085044
 80815c4:	080817d3 	.word	0x080817d3
 80815c8:	08084dc4 	.word	0x08084dc4
 80815cc:	080814db 	.word	0x080814db

080815d0 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
 80815d0:	f247 5130 	movw	r1, #30000	; 0x7530
 80815d4:	4a08      	ldr	r2, [pc, #32]	; (80815f8 <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
 80815d6:	60c1      	str	r1, [r0, #12]
 80815d8:	6002      	str	r2, [r0, #0]
 80815da:	2200      	movs	r2, #0
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80815dc:	4907      	ldr	r1, [pc, #28]	; (80815fc <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
 80815de:	e9c0 2208 	strd	r2, r2, [r0, #32]
 80815e2:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80815e6:	4906      	ldr	r1, [pc, #24]	; (8081600 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
 80815e8:	6042      	str	r2, [r0, #4]
 80815ea:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
 80815ec:	4905      	ldr	r1, [pc, #20]	; (8081604 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
 80815ee:	8502      	strh	r2, [r0, #40]	; 0x28
 80815f0:	6181      	str	r1, [r0, #24]
 80815f2:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
 80815f6:	4770      	bx	lr
 80815f8:	08084e88 	.word	0x08084e88
 80815fc:	0808193d 	.word	0x0808193d
 8081600:	0808150b 	.word	0x0808150b
 8081604:	080814c1 	.word	0x080814c1

08081608 <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
 8081608:	b510      	push	{r4, lr}
 808160a:	4604      	mov	r4, r0
 808160c:	4b03      	ldr	r3, [pc, #12]	; (808161c <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
 808160e:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
 8081612:	f7ff ff88 	bl	8081526 <_ZNSt14_Function_baseD1Ev>
}
 8081616:	4620      	mov	r0, r4
 8081618:	bd10      	pop	{r4, pc}
 808161a:	bf00      	nop
 808161c:	08084e88 	.word	0x08084e88

08081620 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
 8081620:	b510      	push	{r4, lr}
 8081622:	4604      	mov	r4, r0
 8081624:	4b02      	ldr	r3, [pc, #8]	; (8081630 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
 8081626:	6003      	str	r3, [r0, #0]
 8081628:	f7ff ffee 	bl	8081608 <_ZN21PublishQueueAsyncBaseD1Ev>

}
 808162c:	4620      	mov	r0, r4
 808162e:	bd10      	pop	{r4, pc}
 8081630:	08084eb0 	.word	0x08084eb0

08081634 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
 8081634:	b510      	push	{r4, lr}
 8081636:	4604      	mov	r4, r0
}
 8081638:	f7ff fff2 	bl	8081620 <_ZN25PublishQueueAsyncRetainedD1Ev>
 808163c:	4620      	mov	r0, r4
 808163e:	2138      	movs	r1, #56	; 0x38
 8081640:	f002 f935 	bl	80838ae <_ZdlPvj>
 8081644:	4620      	mov	r0, r4
 8081646:	bd10      	pop	{r4, pc}

08081648 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
 8081648:	6880      	ldr	r0, [r0, #8]
 808164a:	f000 ba5d 	b.w	8081b08 <os_mutex_lock>

0808164e <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
 808164e:	6880      	ldr	r0, [r0, #8]
 8081650:	f000 ba62 	b.w	8081b18 <os_mutex_unlock>

08081654 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
 8081654:	b510      	push	{r4, lr}
 8081656:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
 8081658:	6800      	ldr	r0, [r0, #0]
 808165a:	f7ff fff8 	bl	808164e <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
 808165e:	4620      	mov	r0, r4
 8081660:	bd10      	pop	{r4, pc}

08081662 <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
 8081662:	b513      	push	{r0, r1, r4, lr}
 8081664:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
 8081666:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
 8081668:	f7ff ffee 	bl	8081648 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
 808166c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
 808166e:	88dc      	ldrh	r4, [r3, #6]
 8081670:	b2a4      	uxth	r4, r4
 8081672:	b10c      	cbz	r4, 8081678 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
 8081674:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
 8081678:	a801      	add	r0, sp, #4
 808167a:	f7ff ffeb 	bl	8081654 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
 808167e:	4620      	mov	r0, r4
 8081680:	b002      	add	sp, #8
 8081682:	bd10      	pop	{r4, pc}

08081684 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
 8081684:	b513      	push	{r0, r1, r4, lr}
 8081686:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
 8081688:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
 808168a:	f7ff ffdd 	bl	8081648 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
 808168e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8081692:	b943      	cbnz	r3, 80816a6 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
 8081694:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
 8081696:	2401      	movs	r4, #1
		hdr->numEvents = 0;
 8081698:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
 808169a:	a801      	add	r0, sp, #4
 808169c:	f7ff ffda 	bl	8081654 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
 80816a0:	4620      	mov	r0, r4
 80816a2:	b002      	add	sp, #8
 80816a4:	bd10      	pop	{r4, pc}
	bool result = false;
 80816a6:	2400      	movs	r4, #0
 80816a8:	e7f7      	b.n	808169a <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

080816aa <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
 80816aa:	b513      	push	{r0, r1, r4, lr}
 80816ac:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
 80816ae:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
 80816b0:	f7ff ffca 	bl	8081648 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
 80816b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
 80816b6:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
 80816b8:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
 80816ba:	f7ff ffcb 	bl	8081654 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
 80816be:	4620      	mov	r0, r4
 80816c0:	b002      	add	sp, #8
 80816c2:	bd10      	pop	{r4, pc}

080816c4 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
 80816c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80816c8:	4699      	mov	r9, r3
	if (!haveSetup) {
 80816ca:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
 80816ce:	b086      	sub	sp, #24
 80816d0:	4604      	mov	r4, r0
 80816d2:	460f      	mov	r7, r1
 80816d4:	4616      	mov	r6, r2
 80816d6:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
 80816da:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
	if (!haveSetup) {
 80816de:	b913      	cbnz	r3, 80816e6 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
 80816e0:	6803      	ldr	r3, [r0, #0]
 80816e2:	689b      	ldr	r3, [r3, #8]
 80816e4:	4798      	blx	r3
		data = "";
 80816e6:	4b30      	ldr	r3, [pc, #192]	; (80817a8 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe4>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
 80816e8:	4638      	mov	r0, r7
		data = "";
 80816ea:	2e00      	cmp	r6, #0
 80816ec:	bf08      	it	eq
 80816ee:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
 80816f0:	f003 f90d 	bl	808490e <strlen>
 80816f4:	4605      	mov	r5, r0
 80816f6:	4630      	mov	r0, r6
 80816f8:	f003 f909 	bl	808490e <strlen>
 80816fc:	4405      	add	r5, r0
 80816fe:	350a      	adds	r5, #10
	if ((size % 4) != 0) {
 8081700:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
 8081702:	bf1c      	itt	ne
 8081704:	f025 0503 	bicne.w	r5, r5, #3
 8081708:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
 808170a:	4633      	mov	r3, r6
 808170c:	463a      	mov	r2, r7
 808170e:	e9cd 8502 	strd	r8, r5, [sp, #8]
 8081712:	e9cd 9a00 	strd	r9, sl, [sp]
 8081716:	4925      	ldr	r1, [pc, #148]	; (80817ac <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
 8081718:	4825      	ldr	r0, [pc, #148]	; (80817b0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
 808171a:	f7ff fd89 	bl	8081230 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
 808171e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8081720:	3b08      	subs	r3, #8
 8081722:	42ab      	cmp	r3, r5
 8081724:	d212      	bcs.n	808174c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x88>
		return false;
 8081726:	2400      	movs	r4, #0
}
 8081728:	4620      	mov	r0, r4
 808172a:	b006      	add	sp, #24
 808172c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
 8081730:	88cb      	ldrh	r3, [r1, #6]
 8081732:	2b01      	cmp	r3, #1
 8081734:	d036      	beq.n	80817a4 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe0>
			StMutexLock lock(this);
 8081736:	a805      	add	r0, sp, #20
 8081738:	f7ff ff8c 	bl	8081654 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
 808173c:	6823      	ldr	r3, [r4, #0]
 808173e:	4620      	mov	r0, r4
 8081740:	699b      	ldr	r3, [r3, #24]
 8081742:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8081746:	4798      	blx	r3
 8081748:	2800      	cmp	r0, #0
 808174a:	d0ec      	beq.n	8081726 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x62>
 808174c:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
 808174e:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
 8081750:	f7ff ff7a 	bl	8081648 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
 8081754:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8081756:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
 8081758:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
 808175a:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
 808175c:	1ad2      	subs	r2, r2, r3
 808175e:	42aa      	cmp	r2, r5
 8081760:	d3e6      	bcc.n	8081730 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6c>
				eventData->flags = flags1.value() | flags2.value();
 8081762:	ea48 080a 	orr.w	r8, r8, sl
 8081766:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
 808176a:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
 808176e:	6b63      	ldr	r3, [r4, #52]	; 0x34
				strcpy(cp, eventName);
 8081770:	4639      	mov	r1, r7
				cp += sizeof(PublishQueueEventData);
 8081772:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
 8081776:	4640      	mov	r0, r8
 8081778:	f003 f8a6 	bl	80848c8 <strcpy>
				cp += strlen(cp) + 1;
 808177c:	4640      	mov	r0, r8
 808177e:	f003 f8c6 	bl	808490e <strlen>
 8081782:	3001      	adds	r0, #1
				strcpy(cp, data);
 8081784:	4631      	mov	r1, r6
 8081786:	4440      	add	r0, r8
 8081788:	f003 f89e 	bl	80848c8 <strcpy>
				nextFree += size;
 808178c:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
 808178e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
 8081790:	441d      	add	r5, r3
 8081792:	6365      	str	r5, [r4, #52]	; 0x34
				return true;
 8081794:	2401      	movs	r4, #1
				hdr->numEvents++;
 8081796:	88d3      	ldrh	r3, [r2, #6]
 8081798:	3301      	adds	r3, #1
 808179a:	80d3      	strh	r3, [r2, #6]
			StMutexLock lock(this);
 808179c:	a805      	add	r0, sp, #20
 808179e:	f7ff ff59 	bl	8081654 <_ZN11StMutexLockD1Ev>
 80817a2:	e7c1      	b.n	8081728 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
				return false;
 80817a4:	2400      	movs	r4, #0
 80817a6:	e7f9      	b.n	808179c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xd8>
 80817a8:	08084c11 	.word	0x08084c11
 80817ac:	08084dd6 	.word	0x08084dd6
 80817b0:	2000020c 	.word	0x2000020c

080817b4 <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
 80817b4:	4604      	mov	r4, r0
 80817b6:	b508      	push	{r3, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80817b8:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
 80817bc:	69a3      	ldr	r3, [r4, #24]
 80817be:	b90b      	cbnz	r3, 80817c4 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
 80817c0:	f002 f87b 	bl	80838ba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80817c4:	4621      	mov	r1, r4
 80817c6:	4628      	mov	r0, r5
 80817c8:	69e3      	ldr	r3, [r4, #28]
 80817ca:	4798      	blx	r3
		os_thread_yield();
 80817cc:	f000 f98c 	bl	8081ae8 <os_thread_yield>
	while(true) {
 80817d0:	e7f4      	b.n	80817bc <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

080817d2 <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
 80817d2:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
 80817d4:	f7ff ffee 	bl	80817b4 <_ZN21PublishQueueAsyncBase14threadFunctionEv>

080817d8 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
 80817d8:	b538      	push	{r3, r4, r5, lr}
	start += sizeof(PublishQueueEventData);
 80817da:	f101 0408 	add.w	r4, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
 80817de:	4605      	mov	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
 80817e0:	4620      	mov	r0, r4
 80817e2:	f003 f894 	bl	808490e <strlen>
 80817e6:	3001      	adds	r0, #1
 80817e8:	4404      	add	r4, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
 80817ea:	4620      	mov	r0, r4
 80817ec:	f003 f88f 	bl	808490e <strlen>
	size_t offset = start - retainedBuffer;
 80817f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
 80817f2:	3001      	adds	r0, #1
 80817f4:	4420      	add	r0, r4
	size_t offset = start - retainedBuffer;
 80817f6:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
 80817f8:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
 80817fc:	bf1c      	itt	ne
 80817fe:	f1c3 0304 	rsbne	r3, r3, #4
 8081802:	18c0      	addne	r0, r0, r3
}
 8081804:	bd38      	pop	{r3, r4, r5, pc}

08081806 <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
 8081806:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8081808:	4604      	mov	r4, r0
 808180a:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
 808180c:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
 808180e:	f7ff ff1b 	bl	8081648 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
 8081812:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
 8081814:	88fb      	ldrh	r3, [r7, #6]
 8081816:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
 808181a:	b1e6      	cbz	r6, 8081856 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
 808181c:	2b01      	cmp	r3, #1
 808181e:	d922      	bls.n	8081866 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
 8081820:	4629      	mov	r1, r5
 8081822:	4620      	mov	r0, r4
 8081824:	f7ff ffd8 	bl	80817d8 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
 8081828:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
 808182a:	4629      	mov	r1, r5
 808182c:	4620      	mov	r0, r4
 808182e:	f7ff ffd3 	bl	80817d8 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
 8081832:	8e22      	ldrh	r2, [r4, #48]	; 0x30
	uint8_t *next = skipEvent(start);
 8081834:	4601      	mov	r1, r0
	uint8_t *end = &retainedBuffer[retainedBufferSize];
 8081836:	443a      	add	r2, r7
	if (after > 0) {
 8081838:	1a12      	subs	r2, r2, r0
	size_t len = next - start;
 808183a:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
 808183e:	d002      	beq.n	8081846 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
 8081840:	4628      	mov	r0, r5
 8081842:	f002 fff1 	bl	8084828 <memmove>
	nextFree -= len;
 8081846:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8081848:	1b9b      	subs	r3, r3, r6
 808184a:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
 808184c:	88fb      	ldrh	r3, [r7, #6]
	return true;
 808184e:	2601      	movs	r6, #1
	hdr->numEvents--;
 8081850:	3b01      	subs	r3, #1
 8081852:	80fb      	strh	r3, [r7, #6]
	return true;
 8081854:	e001      	b.n	808185a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
 8081856:	2b00      	cmp	r3, #0
 8081858:	d1e7      	bne.n	808182a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
 808185a:	a801      	add	r0, sp, #4
 808185c:	f7ff fefa 	bl	8081654 <_ZN11StMutexLockD1Ev>
}
 8081860:	4630      	mov	r0, r6
 8081862:	b003      	add	sp, #12
 8081864:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
 8081866:	2600      	movs	r6, #0
 8081868:	e7f7      	b.n	808185a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

0808186c <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
 808186c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8081870:	460d      	mov	r5, r1
 8081872:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
 8081874:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
 8081876:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
 8081878:	f7ff feaa 	bl	80815d0 <_ZN21PublishQueueAsyncBaseC1Ev>
 808187c:	4b15      	ldr	r3, [pc, #84]	; (80818d4 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
 808187e:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
 8081882:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
 8081884:	4b14      	ldr	r3, [pc, #80]	; (80818d8 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
 8081886:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
 8081888:	429a      	cmp	r2, r3
 808188a:	4698      	mov	r8, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
 808188c:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
 808188e:	d117      	bne.n	80818c0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
 8081890:	88ab      	ldrh	r3, [r5, #4]
 8081892:	b29b      	uxth	r3, r3
 8081894:	42b3      	cmp	r3, r6
 8081896:	d113      	bne.n	80818c0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
 8081898:	f04f 0900 	mov.w	r9, #0
		uint8_t *end = &retainedBuffer[retainedBufferSize];
 808189c:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
 80818a0:	6367      	str	r7, [r4, #52]	; 0x34
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
 80818a2:	88eb      	ldrh	r3, [r5, #6]
 80818a4:	fa1f f289 	uxth.w	r2, r9
 80818a8:	b29b      	uxth	r3, r3
 80818aa:	429a      	cmp	r2, r3
 80818ac:	d20e      	bcs.n	80818cc <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
 80818ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80818b0:	4620      	mov	r0, r4
 80818b2:	f7ff ff91 	bl	80817d8 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
 80818b6:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
 80818b8:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
 80818ba:	f109 0901 	add.w	r9, r9, #1
 80818be:	d9f0      	bls.n	80818a2 <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
 80818c0:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
 80818c2:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
 80818c6:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
 80818c8:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
 80818ca:	80eb      	strh	r3, [r5, #6]
}
 80818cc:	4620      	mov	r0, r4
 80818ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80818d2:	bf00      	nop
 80818d4:	08084eb0 	.word	0x08084eb0
 80818d8:	d19cab61 	.word	0xd19cab61

080818dc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
 80818dc:	b510      	push	{r4, lr}
 80818de:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
 80818e2:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
 80818e4:	b086      	sub	sp, #24
 80818e6:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
 80818e8:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
 80818ea:	b90a      	cbnz	r2, 80818f0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
 80818ec:	07d9      	lsls	r1, r3, #31
 80818ee:	d505      	bpl.n	80818fc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80818f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 80818f4:	4b0f      	ldr	r3, [pc, #60]	; (8081934 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
 80818f6:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80818f8:	4b0f      	ldr	r3, [pc, #60]	; (8081938 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
 80818fa:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80818fc:	466a      	mov	r2, sp
 80818fe:	ab02      	add	r3, sp, #8
 8081900:	e893 0003 	ldmia.w	r3, {r0, r1}
 8081904:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8081908:	e894 0003 	ldmia.w	r4, {r0, r1}
 808190c:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8081910:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081914:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8081916:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 808191a:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808191c:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808191e:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8081920:	9104      	str	r1, [sp, #16]
 8081922:	68e1      	ldr	r1, [r4, #12]
    class function<_Res(_ArgTypes...)>
 8081924:	4618      	mov	r0, r3
      __b = _GLIBCXX_MOVE(__tmp);
 8081926:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 8081928:	9105      	str	r1, [sp, #20]
 808192a:	f7ff fdfc 	bl	8081526 <_ZNSt14_Function_baseD1Ev>
	}
 808192e:	4620      	mov	r0, r4
 8081930:	b006      	add	sp, #24
 8081932:	bd10      	pop	{r4, pc}
 8081934:	0808150b 	.word	0x0808150b
 8081938:	080814c1 	.word	0x080814c1

0808193c <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
 808193c:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
 808193e:	4b05      	ldr	r3, [pc, #20]	; (8081954 <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
 8081940:	4669      	mov	r1, sp
 8081942:	9300      	str	r3, [sp, #0]
 8081944:	2300      	movs	r3, #0
 8081946:	3010      	adds	r0, #16
 8081948:	9301      	str	r3, [sp, #4]
 808194a:	f7ff ffc7 	bl	80818dc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
 808194e:	b003      	add	sp, #12
 8081950:	f85d fb04 	ldr.w	pc, [sp], #4
 8081954:	08081985 	.word	0x08081985

08081958 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
 8081958:	b513      	push	{r0, r1, r4, lr}
 808195a:	4604      	mov	r4, r0
 808195c:	f000 f924 	bl	8081ba8 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
 8081960:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8081962:	1ac0      	subs	r0, r0, r3
 8081964:	68e3      	ldr	r3, [r4, #12]
 8081966:	4298      	cmp	r0, r3
 8081968:	d308      	bcc.n	808197c <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
 808196a:	4b05      	ldr	r3, [pc, #20]	; (8081980 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
 808196c:	4669      	mov	r1, sp
 808196e:	9300      	str	r3, [sp, #0]
 8081970:	2300      	movs	r3, #0
 8081972:	f104 0010 	add.w	r0, r4, #16
 8081976:	9301      	str	r3, [sp, #4]
 8081978:	f7ff ffb0 	bl	80818dc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
 808197c:	b002      	add	sp, #8
 808197e:	bd10      	pop	{r4, pc}
 8081980:	08081985 	.word	0x08081985

08081984 <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
 8081984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
 8081988:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
 808198c:	4604      	mov	r4, r0
 808198e:	b086      	sub	sp, #24
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
 8081990:	2b00      	cmp	r3, #0
 8081992:	d164      	bne.n	8081a5e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
 8081994:	f000 fade 	bl	8081f54 <spark_cloud_flag_connected>
 8081998:	2800      	cmp	r0, #0
 808199a:	d060      	beq.n	8081a5e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
 808199c:	f000 f904 	bl	8081ba8 <HAL_Timer_Get_Milli_Seconds>
 80819a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80819a2:	1ac0      	subs	r0, r0, r3
 80819a4:	f240 33f1 	movw	r3, #1009	; 0x3f1
 80819a8:	4298      	cmp	r0, r3
 80819aa:	d958      	bls.n	8081a5e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
 80819ac:	6823      	ldr	r3, [r4, #0]
 80819ae:	4620      	mov	r0, r4
 80819b0:	695b      	ldr	r3, [r3, #20]
 80819b2:	4798      	blx	r3
		if (data) {
 80819b4:	4605      	mov	r5, r0
 80819b6:	2800      	cmp	r0, #0
 80819b8:	d051      	beq.n	8081a5e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			isSending = true;
 80819ba:	2301      	movs	r3, #1
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
 80819bc:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
 80819c0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
 80819c4:	4638      	mov	r0, r7
 80819c6:	f002 ffa2 	bl	808490e <strlen>
			PublishFlags flags(PublishFlag(data->flags));
 80819ca:	f895 8004 	ldrb.w	r8, [r5, #4]
			eventData += strlen(eventData) + 1;
 80819ce:	1c46      	adds	r6, r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
 80819d0:	f8cd 8004 	str.w	r8, [sp, #4]
 80819d4:	682b      	ldr	r3, [r5, #0]
			eventData += strlen(eventData) + 1;
 80819d6:	443e      	add	r6, r7
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
 80819d8:	463a      	mov	r2, r7
 80819da:	492a      	ldr	r1, [pc, #168]	; (8081a84 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
 80819dc:	482a      	ldr	r0, [pc, #168]	; (8081a88 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
 80819de:	9300      	str	r3, [sp, #0]
 80819e0:	4633      	mov	r3, r6
 80819e2:	f7ff fc25 	bl	8081230 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
 80819e6:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80819e8:	4632      	mov	r2, r6
 80819ea:	4639      	mov	r1, r7
 80819ec:	f88d 8000 	strb.w	r8, [sp]
 80819f0:	a802      	add	r0, sp, #8
 80819f2:	f000 fe5d 	bl	80826b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
 80819f6:	9d02      	ldr	r5, [sp, #8]
 80819f8:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
 80819fa:	b91b      	cbnz	r3, 8081a04 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
 80819fc:	2001      	movs	r0, #1
 80819fe:	f000 fb79 	bl	80820f4 <delay>
			while(!request.isDone()) {
 8081a02:	e7f8      	b.n	80819f6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8081a04:	2000      	movs	r0, #0
 8081a06:	f000 fa4f 	bl	8081ea8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 8081a0a:	b120      	cbz	r0, 8081a16 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
 8081a0c:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 8081a0e:	b913      	cbnz	r3, 8081a16 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
 8081a10:	f000 fa90 	bl	8081f34 <spark_process>
    }
 8081a14:	e7fa      	b.n	8081a0c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 8081a16:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
 8081a18:	2b01      	cmp	r3, #1
 8081a1a:	d123      	bne.n	8081a64 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
 8081a1c:	491b      	ldr	r1, [pc, #108]	; (8081a8c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
 8081a1e:	481a      	ldr	r0, [pc, #104]	; (8081a88 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
 8081a20:	f7ff fc06 	bl	8081230 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
 8081a24:	6823      	ldr	r3, [r4, #0]
 8081a26:	2100      	movs	r1, #0
 8081a28:	4620      	mov	r0, r4
 8081a2a:	699b      	ldr	r3, [r3, #24]
 8081a2c:	4798      	blx	r3
			isSending = false;
 8081a2e:	2300      	movs	r3, #0
 8081a30:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8081a34:	f000 f8b8 	bl	8081ba8 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
 8081a38:	6260      	str	r0, [r4, #36]	; 0x24
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 8081a3a:	9c03      	ldr	r4, [sp, #12]
 8081a3c:	b17c      	cbz	r4, 8081a5e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
 8081a3e:	6863      	ldr	r3, [r4, #4]
 8081a40:	3b01      	subs	r3, #1
 8081a42:	6063      	str	r3, [r4, #4]
 8081a44:	b95b      	cbnz	r3, 8081a5e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
 8081a46:	6823      	ldr	r3, [r4, #0]
 8081a48:	4620      	mov	r0, r4
 8081a4a:	689b      	ldr	r3, [r3, #8]
 8081a4c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8081a4e:	68a3      	ldr	r3, [r4, #8]
 8081a50:	3b01      	subs	r3, #1
 8081a52:	60a3      	str	r3, [r4, #8]
 8081a54:	b91b      	cbnz	r3, 8081a5e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
 8081a56:	6823      	ldr	r3, [r4, #0]
 8081a58:	4620      	mov	r0, r4
 8081a5a:	68db      	ldr	r3, [r3, #12]
 8081a5c:	4798      	blx	r3
}
 8081a5e:	b006      	add	sp, #24
 8081a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
 8081a64:	68e2      	ldr	r2, [r4, #12]
 8081a66:	490a      	ldr	r1, [pc, #40]	; (8081a90 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
 8081a68:	4807      	ldr	r0, [pc, #28]	; (8081a88 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
 8081a6a:	f7ff fbe1 	bl	8081230 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
 8081a6e:	4b09      	ldr	r3, [pc, #36]	; (8081a94 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
 8081a70:	a904      	add	r1, sp, #16
 8081a72:	9304      	str	r3, [sp, #16]
 8081a74:	2300      	movs	r3, #0
 8081a76:	f104 0010 	add.w	r0, r4, #16
 8081a7a:	9305      	str	r3, [sp, #20]
 8081a7c:	f7ff ff2e 	bl	80818dc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
 8081a80:	e7d5      	b.n	8081a2e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
 8081a82:	bf00      	nop
 8081a84:	08084e17 	.word	0x08084e17
 8081a88:	2000020c 	.word	0x2000020c
 8081a8c:	08084e38 	.word	0x08084e38
 8081a90:	08084e4f 	.word	0x08084e4f
 8081a94:	08081959 	.word	0x08081959

08081a98 <_GLOBAL__sub_I_pubqLogger>:
        name_(name) {
 8081a98:	4b01      	ldr	r3, [pc, #4]	; (8081aa0 <_GLOBAL__sub_I_pubqLogger+0x8>)
 8081a9a:	4a02      	ldr	r2, [pc, #8]	; (8081aa4 <_GLOBAL__sub_I_pubqLogger+0xc>)
 8081a9c:	601a      	str	r2, [r3, #0]
}
 8081a9e:	4770      	bx	lr
 8081aa0:	2000020c 	.word	0x2000020c
 8081aa4:	08084e76 	.word	0x08084e76

08081aa8 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8081aa8:	b508      	push	{r3, lr}
 8081aaa:	4b02      	ldr	r3, [pc, #8]	; (8081ab4 <inet_gethostbyname+0xc>)
 8081aac:	681b      	ldr	r3, [r3, #0]
 8081aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081ab0:	9301      	str	r3, [sp, #4]
 8081ab2:	bd08      	pop	{r3, pc}
 8081ab4:	08060020 	.word	0x08060020

08081ab8 <cellular_signal>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
 8081ab8:	b508      	push	{r3, lr}
 8081aba:	4b02      	ldr	r3, [pc, #8]	; (8081ac4 <cellular_signal+0xc>)
 8081abc:	681b      	ldr	r3, [r3, #0]
 8081abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081ac0:	9301      	str	r3, [sp, #4]
 8081ac2:	bd08      	pop	{r3, pc}
 8081ac4:	08060020 	.word	0x08060020

08081ac8 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8081ac8:	b508      	push	{r3, lr}
 8081aca:	4b02      	ldr	r3, [pc, #8]	; (8081ad4 <cellular_command+0xc>)
 8081acc:	681b      	ldr	r3, [r3, #0]
 8081ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081ad0:	9301      	str	r3, [sp, #4]
 8081ad2:	bd08      	pop	{r3, pc}
 8081ad4:	08060020 	.word	0x08060020

08081ad8 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 8081ad8:	b508      	push	{r3, lr}
 8081ada:	4b02      	ldr	r3, [pc, #8]	; (8081ae4 <os_thread_create+0xc>)
 8081adc:	681b      	ldr	r3, [r3, #0]
 8081ade:	685b      	ldr	r3, [r3, #4]
 8081ae0:	9301      	str	r3, [sp, #4]
 8081ae2:	bd08      	pop	{r3, pc}
 8081ae4:	080401d0 	.word	0x080401d0

08081ae8 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 8081ae8:	b508      	push	{r3, lr}
 8081aea:	4b02      	ldr	r3, [pc, #8]	; (8081af4 <os_thread_yield+0xc>)
 8081aec:	681b      	ldr	r3, [r3, #0]
 8081aee:	68db      	ldr	r3, [r3, #12]
 8081af0:	9301      	str	r3, [sp, #4]
 8081af2:	bd08      	pop	{r3, pc}
 8081af4:	080401d0 	.word	0x080401d0

08081af8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8081af8:	b508      	push	{r3, lr}
 8081afa:	4b02      	ldr	r3, [pc, #8]	; (8081b04 <os_mutex_create+0xc>)
 8081afc:	681b      	ldr	r3, [r3, #0]
 8081afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081b00:	9301      	str	r3, [sp, #4]
 8081b02:	bd08      	pop	{r3, pc}
 8081b04:	080401d0 	.word	0x080401d0

08081b08 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 8081b08:	b508      	push	{r3, lr}
 8081b0a:	4b02      	ldr	r3, [pc, #8]	; (8081b14 <os_mutex_lock+0xc>)
 8081b0c:	681b      	ldr	r3, [r3, #0]
 8081b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081b10:	9301      	str	r3, [sp, #4]
 8081b12:	bd08      	pop	{r3, pc}
 8081b14:	080401d0 	.word	0x080401d0

08081b18 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 8081b18:	b508      	push	{r3, lr}
 8081b1a:	4b02      	ldr	r3, [pc, #8]	; (8081b24 <os_mutex_unlock+0xc>)
 8081b1c:	681b      	ldr	r3, [r3, #0]
 8081b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081b20:	9301      	str	r3, [sp, #4]
 8081b22:	bd08      	pop	{r3, pc}
 8081b24:	080401d0 	.word	0x080401d0

08081b28 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8081b28:	b508      	push	{r3, lr}
 8081b2a:	4b02      	ldr	r3, [pc, #8]	; (8081b34 <os_mutex_recursive_create+0xc>)
 8081b2c:	681b      	ldr	r3, [r3, #0]
 8081b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081b30:	9301      	str	r3, [sp, #4]
 8081b32:	bd08      	pop	{r3, pc}
 8081b34:	080401d0 	.word	0x080401d0

08081b38 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8081b38:	b508      	push	{r3, lr}
 8081b3a:	4b02      	ldr	r3, [pc, #8]	; (8081b44 <os_mutex_recursive_destroy+0xc>)
 8081b3c:	681b      	ldr	r3, [r3, #0]
 8081b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081b40:	9301      	str	r3, [sp, #4]
 8081b42:	bd08      	pop	{r3, pc}
 8081b44:	080401d0 	.word	0x080401d0

08081b48 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 8081b48:	b508      	push	{r3, lr}
 8081b4a:	4b02      	ldr	r3, [pc, #8]	; (8081b54 <os_thread_exit+0xc>)
 8081b4c:	681b      	ldr	r3, [r3, #0]
 8081b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8081b50:	9301      	str	r3, [sp, #4]
 8081b52:	bd08      	pop	{r3, pc}
 8081b54:	080401d0 	.word	0x080401d0

08081b58 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 8081b58:	b508      	push	{r3, lr}
 8081b5a:	4b02      	ldr	r3, [pc, #8]	; (8081b64 <HAL_Feature_Set+0xc>)
 8081b5c:	681b      	ldr	r3, [r3, #0]
 8081b5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8081b60:	9301      	str	r3, [sp, #4]
 8081b62:	bd08      	pop	{r3, pc}
 8081b64:	080401b8 	.word	0x080401b8

08081b68 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 8081b68:	b508      	push	{r3, lr}
 8081b6a:	4b02      	ldr	r3, [pc, #8]	; (8081b74 <HAL_Core_Get_Last_Reset_Info+0xc>)
 8081b6c:	681b      	ldr	r3, [r3, #0]
 8081b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8081b70:	9301      	str	r3, [sp, #4]
 8081b72:	bd08      	pop	{r3, pc}
 8081b74:	080401b8 	.word	0x080401b8

08081b78 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8081b78:	b508      	push	{r3, lr}
 8081b7a:	4b02      	ldr	r3, [pc, #8]	; (8081b84 <HAL_RNG_GetRandomNumber+0xc>)
 8081b7c:	681b      	ldr	r3, [r3, #0]
 8081b7e:	685b      	ldr	r3, [r3, #4]
 8081b80:	9301      	str	r3, [sp, #4]
 8081b82:	bd08      	pop	{r3, pc}
 8081b84:	0804019c 	.word	0x0804019c

08081b88 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
 8081b88:	b508      	push	{r3, lr}
 8081b8a:	4b02      	ldr	r3, [pc, #8]	; (8081b94 <HAL_Delay_Milliseconds+0xc>)
 8081b8c:	681b      	ldr	r3, [r3, #0]
 8081b8e:	689b      	ldr	r3, [r3, #8]
 8081b90:	9301      	str	r3, [sp, #4]
 8081b92:	bd08      	pop	{r3, pc}
 8081b94:	0804019c 	.word	0x0804019c

08081b98 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8081b98:	b508      	push	{r3, lr}
 8081b9a:	4b02      	ldr	r3, [pc, #8]	; (8081ba4 <HAL_Delay_Microseconds+0xc>)
 8081b9c:	681b      	ldr	r3, [r3, #0]
 8081b9e:	68db      	ldr	r3, [r3, #12]
 8081ba0:	9301      	str	r3, [sp, #4]
 8081ba2:	bd08      	pop	{r3, pc}
 8081ba4:	0804019c 	.word	0x0804019c

08081ba8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8081ba8:	b508      	push	{r3, lr}
 8081baa:	4b02      	ldr	r3, [pc, #8]	; (8081bb4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8081bac:	681b      	ldr	r3, [r3, #0]
 8081bae:	695b      	ldr	r3, [r3, #20]
 8081bb0:	9301      	str	r3, [sp, #4]
 8081bb2:	bd08      	pop	{r3, pc}
 8081bb4:	0804019c 	.word	0x0804019c

08081bb8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 8081bb8:	b508      	push	{r3, lr}
 8081bba:	4b02      	ldr	r3, [pc, #8]	; (8081bc4 <hal_rtc_time_is_valid+0xc>)
 8081bbc:	681b      	ldr	r3, [r3, #0]
 8081bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081bc0:	9301      	str	r3, [sp, #4]
 8081bc2:	bd08      	pop	{r3, pc}
 8081bc4:	0804019c 	.word	0x0804019c

08081bc8 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 8081bc8:	b508      	push	{r3, lr}
 8081bca:	4b02      	ldr	r3, [pc, #8]	; (8081bd4 <hal_timer_millis+0xc>)
 8081bcc:	681b      	ldr	r3, [r3, #0]
 8081bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081bd0:	9301      	str	r3, [sp, #4]
 8081bd2:	bd08      	pop	{r3, pc}
 8081bd4:	0804019c 	.word	0x0804019c

08081bd8 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 8081bd8:	b508      	push	{r3, lr}
 8081bda:	4b02      	ldr	r3, [pc, #8]	; (8081be4 <hal_rtc_get_time+0xc>)
 8081bdc:	681b      	ldr	r3, [r3, #0]
 8081bde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8081be0:	9301      	str	r3, [sp, #4]
 8081be2:	bd08      	pop	{r3, pc}
 8081be4:	0804019c 	.word	0x0804019c

08081be8 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 8081be8:	b508      	push	{r3, lr}
 8081bea:	4b02      	ldr	r3, [pc, #8]	; (8081bf4 <HAL_Validate_Pin_Function+0xc>)
 8081bec:	681b      	ldr	r3, [r3, #0]
 8081bee:	685b      	ldr	r3, [r3, #4]
 8081bf0:	9301      	str	r3, [sp, #4]
 8081bf2:	bd08      	pop	{r3, pc}
 8081bf4:	080401b0 	.word	0x080401b0

08081bf8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8081bf8:	b508      	push	{r3, lr}
 8081bfa:	4b02      	ldr	r3, [pc, #8]	; (8081c04 <HAL_Pin_Mode+0xc>)
 8081bfc:	681b      	ldr	r3, [r3, #0]
 8081bfe:	689b      	ldr	r3, [r3, #8]
 8081c00:	9301      	str	r3, [sp, #4]
 8081c02:	bd08      	pop	{r3, pc}
 8081c04:	080401b0 	.word	0x080401b0

08081c08 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8081c08:	b508      	push	{r3, lr}
 8081c0a:	4b02      	ldr	r3, [pc, #8]	; (8081c14 <HAL_Get_Pin_Mode+0xc>)
 8081c0c:	681b      	ldr	r3, [r3, #0]
 8081c0e:	68db      	ldr	r3, [r3, #12]
 8081c10:	9301      	str	r3, [sp, #4]
 8081c12:	bd08      	pop	{r3, pc}
 8081c14:	080401b0 	.word	0x080401b0

08081c18 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8081c18:	b508      	push	{r3, lr}
 8081c1a:	4b02      	ldr	r3, [pc, #8]	; (8081c24 <HAL_GPIO_Write+0xc>)
 8081c1c:	681b      	ldr	r3, [r3, #0]
 8081c1e:	691b      	ldr	r3, [r3, #16]
 8081c20:	9301      	str	r3, [sp, #4]
 8081c22:	bd08      	pop	{r3, pc}
 8081c24:	080401b0 	.word	0x080401b0

08081c28 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 8081c28:	b508      	push	{r3, lr}
 8081c2a:	4b02      	ldr	r3, [pc, #8]	; (8081c34 <HAL_GPIO_Read+0xc>)
 8081c2c:	681b      	ldr	r3, [r3, #0]
 8081c2e:	695b      	ldr	r3, [r3, #20]
 8081c30:	9301      	str	r3, [sp, #4]
 8081c32:	bd08      	pop	{r3, pc}
 8081c34:	080401b0 	.word	0x080401b0

08081c38 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 8081c38:	b508      	push	{r3, lr}
 8081c3a:	4b02      	ldr	r3, [pc, #8]	; (8081c44 <HAL_Interrupts_Attach+0xc>)
 8081c3c:	681b      	ldr	r3, [r3, #0]
 8081c3e:	699b      	ldr	r3, [r3, #24]
 8081c40:	9301      	str	r3, [sp, #4]
 8081c42:	bd08      	pop	{r3, pc}
 8081c44:	080401b0 	.word	0x080401b0

08081c48 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 8081c48:	b508      	push	{r3, lr}
 8081c4a:	4b02      	ldr	r3, [pc, #8]	; (8081c54 <HAL_Interrupts_Detach+0xc>)
 8081c4c:	681b      	ldr	r3, [r3, #0]
 8081c4e:	69db      	ldr	r3, [r3, #28]
 8081c50:	9301      	str	r3, [sp, #4]
 8081c52:	bd08      	pop	{r3, pc}
 8081c54:	080401b0 	.word	0x080401b0

08081c58 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 8081c58:	b508      	push	{r3, lr}
 8081c5a:	4b02      	ldr	r3, [pc, #8]	; (8081c64 <hal_adc_read+0xc>)
 8081c5c:	681b      	ldr	r3, [r3, #0]
 8081c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081c60:	9301      	str	r3, [sp, #4]
 8081c62:	bd08      	pop	{r3, pc}
 8081c64:	080401b0 	.word	0x080401b0

08081c68 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 8081c68:	b508      	push	{r3, lr}
 8081c6a:	4b02      	ldr	r3, [pc, #8]	; (8081c74 <hal_i2c_begin+0xc>)
 8081c6c:	681b      	ldr	r3, [r3, #0]
 8081c6e:	68db      	ldr	r3, [r3, #12]
 8081c70:	9301      	str	r3, [sp, #4]
 8081c72:	bd08      	pop	{r3, pc}
 8081c74:	080401ac 	.word	0x080401ac

08081c78 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 8081c78:	b508      	push	{r3, lr}
 8081c7a:	4b02      	ldr	r3, [pc, #8]	; (8081c84 <hal_i2c_begin_transmission+0xc>)
 8081c7c:	681b      	ldr	r3, [r3, #0]
 8081c7e:	699b      	ldr	r3, [r3, #24]
 8081c80:	9301      	str	r3, [sp, #4]
 8081c82:	bd08      	pop	{r3, pc}
 8081c84:	080401ac 	.word	0x080401ac

08081c88 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 8081c88:	b508      	push	{r3, lr}
 8081c8a:	4b02      	ldr	r3, [pc, #8]	; (8081c94 <hal_i2c_end_transmission+0xc>)
 8081c8c:	681b      	ldr	r3, [r3, #0]
 8081c8e:	69db      	ldr	r3, [r3, #28]
 8081c90:	9301      	str	r3, [sp, #4]
 8081c92:	bd08      	pop	{r3, pc}
 8081c94:	080401ac 	.word	0x080401ac

08081c98 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 8081c98:	b508      	push	{r3, lr}
 8081c9a:	4b02      	ldr	r3, [pc, #8]	; (8081ca4 <hal_i2c_write+0xc>)
 8081c9c:	681b      	ldr	r3, [r3, #0]
 8081c9e:	6a1b      	ldr	r3, [r3, #32]
 8081ca0:	9301      	str	r3, [sp, #4]
 8081ca2:	bd08      	pop	{r3, pc}
 8081ca4:	080401ac 	.word	0x080401ac

08081ca8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 8081ca8:	b508      	push	{r3, lr}
 8081caa:	4b02      	ldr	r3, [pc, #8]	; (8081cb4 <hal_i2c_available+0xc>)
 8081cac:	681b      	ldr	r3, [r3, #0]
 8081cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081cb0:	9301      	str	r3, [sp, #4]
 8081cb2:	bd08      	pop	{r3, pc}
 8081cb4:	080401ac 	.word	0x080401ac

08081cb8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 8081cb8:	b508      	push	{r3, lr}
 8081cba:	4b02      	ldr	r3, [pc, #8]	; (8081cc4 <hal_i2c_read+0xc>)
 8081cbc:	681b      	ldr	r3, [r3, #0]
 8081cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081cc0:	9301      	str	r3, [sp, #4]
 8081cc2:	bd08      	pop	{r3, pc}
 8081cc4:	080401ac 	.word	0x080401ac

08081cc8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 8081cc8:	b508      	push	{r3, lr}
 8081cca:	4b02      	ldr	r3, [pc, #8]	; (8081cd4 <hal_i2c_peek+0xc>)
 8081ccc:	681b      	ldr	r3, [r3, #0]
 8081cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081cd0:	9301      	str	r3, [sp, #4]
 8081cd2:	bd08      	pop	{r3, pc}
 8081cd4:	080401ac 	.word	0x080401ac

08081cd8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 8081cd8:	b508      	push	{r3, lr}
 8081cda:	4b02      	ldr	r3, [pc, #8]	; (8081ce4 <hal_i2c_flush+0xc>)
 8081cdc:	681b      	ldr	r3, [r3, #0]
 8081cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081ce0:	9301      	str	r3, [sp, #4]
 8081ce2:	bd08      	pop	{r3, pc}
 8081ce4:	080401ac 	.word	0x080401ac

08081ce8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 8081ce8:	b508      	push	{r3, lr}
 8081cea:	4b02      	ldr	r3, [pc, #8]	; (8081cf4 <hal_i2c_is_enabled+0xc>)
 8081cec:	681b      	ldr	r3, [r3, #0]
 8081cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081cf0:	9301      	str	r3, [sp, #4]
 8081cf2:	bd08      	pop	{r3, pc}
 8081cf4:	080401ac 	.word	0x080401ac

08081cf8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 8081cf8:	b508      	push	{r3, lr}
 8081cfa:	4b02      	ldr	r3, [pc, #8]	; (8081d04 <hal_i2c_init+0xc>)
 8081cfc:	681b      	ldr	r3, [r3, #0]
 8081cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081d00:	9301      	str	r3, [sp, #4]
 8081d02:	bd08      	pop	{r3, pc}
 8081d04:	080401ac 	.word	0x080401ac

08081d08 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
 8081d08:	b508      	push	{r3, lr}
 8081d0a:	4b02      	ldr	r3, [pc, #8]	; (8081d14 <hal_i2c_lock+0xc>)
 8081d0c:	681b      	ldr	r3, [r3, #0]
 8081d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081d10:	9301      	str	r3, [sp, #4]
 8081d12:	bd08      	pop	{r3, pc}
 8081d14:	080401ac 	.word	0x080401ac

08081d18 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
 8081d18:	b508      	push	{r3, lr}
 8081d1a:	4b02      	ldr	r3, [pc, #8]	; (8081d24 <hal_i2c_unlock+0xc>)
 8081d1c:	681b      	ldr	r3, [r3, #0]
 8081d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081d20:	9301      	str	r3, [sp, #4]
 8081d22:	bd08      	pop	{r3, pc}
 8081d24:	080401ac 	.word	0x080401ac

08081d28 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 8081d28:	b508      	push	{r3, lr}
 8081d2a:	4b02      	ldr	r3, [pc, #8]	; (8081d34 <hal_i2c_request_ex+0xc>)
 8081d2c:	681b      	ldr	r3, [r3, #0]
 8081d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8081d30:	9301      	str	r3, [sp, #4]
 8081d32:	bd08      	pop	{r3, pc}
 8081d34:	080401ac 	.word	0x080401ac

08081d38 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 8081d38:	b508      	push	{r3, lr}
 8081d3a:	4b02      	ldr	r3, [pc, #8]	; (8081d44 <hal_spi_init+0xc>)
 8081d3c:	681b      	ldr	r3, [r3, #0]
 8081d3e:	69db      	ldr	r3, [r3, #28]
 8081d40:	9301      	str	r3, [sp, #4]
 8081d42:	bd08      	pop	{r3, pc}
 8081d44:	080401b4 	.word	0x080401b4

08081d48 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 8081d48:	b508      	push	{r3, lr}
 8081d4a:	4b02      	ldr	r3, [pc, #8]	; (8081d54 <hal_spi_is_enabled+0xc>)
 8081d4c:	681b      	ldr	r3, [r3, #0]
 8081d4e:	6a1b      	ldr	r3, [r3, #32]
 8081d50:	9301      	str	r3, [sp, #4]
 8081d52:	bd08      	pop	{r3, pc}
 8081d54:	080401b4 	.word	0x080401b4

08081d58 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 8081d58:	b508      	push	{r3, lr}
 8081d5a:	4b02      	ldr	r3, [pc, #8]	; (8081d64 <hal_usart_init+0xc>)
 8081d5c:	681b      	ldr	r3, [r3, #0]
 8081d5e:	699b      	ldr	r3, [r3, #24]
 8081d60:	9301      	str	r3, [sp, #4]
 8081d62:	bd08      	pop	{r3, pc}
 8081d64:	080401c4 	.word	0x080401c4

08081d68 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 8081d68:	b508      	push	{r3, lr}
 8081d6a:	4b02      	ldr	r3, [pc, #8]	; (8081d74 <hal_usart_write+0xc>)
 8081d6c:	681b      	ldr	r3, [r3, #0]
 8081d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081d70:	9301      	str	r3, [sp, #4]
 8081d72:	bd08      	pop	{r3, pc}
 8081d74:	080401c4 	.word	0x080401c4

08081d78 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 8081d78:	b508      	push	{r3, lr}
 8081d7a:	4b02      	ldr	r3, [pc, #8]	; (8081d84 <hal_usart_available+0xc>)
 8081d7c:	681b      	ldr	r3, [r3, #0]
 8081d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081d80:	9301      	str	r3, [sp, #4]
 8081d82:	bd08      	pop	{r3, pc}
 8081d84:	080401c4 	.word	0x080401c4

08081d88 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 8081d88:	b508      	push	{r3, lr}
 8081d8a:	4b02      	ldr	r3, [pc, #8]	; (8081d94 <hal_usart_read+0xc>)
 8081d8c:	681b      	ldr	r3, [r3, #0]
 8081d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081d90:	9301      	str	r3, [sp, #4]
 8081d92:	bd08      	pop	{r3, pc}
 8081d94:	080401c4 	.word	0x080401c4

08081d98 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 8081d98:	b508      	push	{r3, lr}
 8081d9a:	4b02      	ldr	r3, [pc, #8]	; (8081da4 <hal_usart_peek+0xc>)
 8081d9c:	681b      	ldr	r3, [r3, #0]
 8081d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081da0:	9301      	str	r3, [sp, #4]
 8081da2:	bd08      	pop	{r3, pc}
 8081da4:	080401c4 	.word	0x080401c4

08081da8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 8081da8:	b508      	push	{r3, lr}
 8081daa:	4b02      	ldr	r3, [pc, #8]	; (8081db4 <hal_usart_flush+0xc>)
 8081dac:	681b      	ldr	r3, [r3, #0]
 8081dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081db0:	9301      	str	r3, [sp, #4]
 8081db2:	bd08      	pop	{r3, pc}
 8081db4:	080401c4 	.word	0x080401c4

08081db8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 8081db8:	b508      	push	{r3, lr}
 8081dba:	4b02      	ldr	r3, [pc, #8]	; (8081dc4 <hal_usart_is_enabled+0xc>)
 8081dbc:	681b      	ldr	r3, [r3, #0]
 8081dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081dc0:	9301      	str	r3, [sp, #4]
 8081dc2:	bd08      	pop	{r3, pc}
 8081dc4:	080401c4 	.word	0x080401c4

08081dc8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 8081dc8:	b508      	push	{r3, lr}
 8081dca:	4b02      	ldr	r3, [pc, #8]	; (8081dd4 <hal_usart_available_data_for_write+0xc>)
 8081dcc:	681b      	ldr	r3, [r3, #0]
 8081dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081dd0:	9301      	str	r3, [sp, #4]
 8081dd2:	bd08      	pop	{r3, pc}
 8081dd4:	080401c4 	.word	0x080401c4

08081dd8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8081dd8:	b508      	push	{r3, lr}
 8081dda:	4b02      	ldr	r3, [pc, #8]	; (8081de4 <HAL_USB_USART_Init+0xc>)
 8081ddc:	681b      	ldr	r3, [r3, #0]
 8081dde:	681b      	ldr	r3, [r3, #0]
 8081de0:	9301      	str	r3, [sp, #4]
 8081de2:	bd08      	pop	{r3, pc}
 8081de4:	0806001c 	.word	0x0806001c

08081de8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8081de8:	b508      	push	{r3, lr}
 8081dea:	4b02      	ldr	r3, [pc, #8]	; (8081df4 <HAL_USB_USART_Available_Data+0xc>)
 8081dec:	681b      	ldr	r3, [r3, #0]
 8081dee:	691b      	ldr	r3, [r3, #16]
 8081df0:	9301      	str	r3, [sp, #4]
 8081df2:	bd08      	pop	{r3, pc}
 8081df4:	0806001c 	.word	0x0806001c

08081df8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8081df8:	b508      	push	{r3, lr}
 8081dfa:	4b02      	ldr	r3, [pc, #8]	; (8081e04 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8081dfc:	681b      	ldr	r3, [r3, #0]
 8081dfe:	695b      	ldr	r3, [r3, #20]
 8081e00:	9301      	str	r3, [sp, #4]
 8081e02:	bd08      	pop	{r3, pc}
 8081e04:	0806001c 	.word	0x0806001c

08081e08 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081e08:	b508      	push	{r3, lr}
 8081e0a:	4b02      	ldr	r3, [pc, #8]	; (8081e14 <HAL_USB_USART_Receive_Data+0xc>)
 8081e0c:	681b      	ldr	r3, [r3, #0]
 8081e0e:	699b      	ldr	r3, [r3, #24]
 8081e10:	9301      	str	r3, [sp, #4]
 8081e12:	bd08      	pop	{r3, pc}
 8081e14:	0806001c 	.word	0x0806001c

08081e18 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081e18:	b508      	push	{r3, lr}
 8081e1a:	4b02      	ldr	r3, [pc, #8]	; (8081e24 <HAL_USB_USART_Send_Data+0xc>)
 8081e1c:	681b      	ldr	r3, [r3, #0]
 8081e1e:	69db      	ldr	r3, [r3, #28]
 8081e20:	9301      	str	r3, [sp, #4]
 8081e22:	bd08      	pop	{r3, pc}
 8081e24:	0806001c 	.word	0x0806001c

08081e28 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8081e28:	b508      	push	{r3, lr}
 8081e2a:	4b02      	ldr	r3, [pc, #8]	; (8081e34 <HAL_USB_USART_Flush_Data+0xc>)
 8081e2c:	681b      	ldr	r3, [r3, #0]
 8081e2e:	6a1b      	ldr	r3, [r3, #32]
 8081e30:	9301      	str	r3, [sp, #4]
 8081e32:	bd08      	pop	{r3, pc}
 8081e34:	0806001c 	.word	0x0806001c

08081e38 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 8081e38:	b508      	push	{r3, lr}
 8081e3a:	4b02      	ldr	r3, [pc, #8]	; (8081e44 <panic_+0xc>)
 8081e3c:	681b      	ldr	r3, [r3, #0]
 8081e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081e40:	9301      	str	r3, [sp, #4]
 8081e42:	bd08      	pop	{r3, pc}
 8081e44:	080201a0 	.word	0x080201a0

08081e48 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 8081e48:	b508      	push	{r3, lr}
 8081e4a:	4b02      	ldr	r3, [pc, #8]	; (8081e54 <log_message_v+0xc>)
 8081e4c:	681b      	ldr	r3, [r3, #0]
 8081e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081e50:	9301      	str	r3, [sp, #4]
 8081e52:	bd08      	pop	{r3, pc}
 8081e54:	080201a0 	.word	0x080201a0

08081e58 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8081e58:	b508      	push	{r3, lr}
 8081e5a:	4b02      	ldr	r3, [pc, #8]	; (8081e64 <system_mode+0xc>)
 8081e5c:	681b      	ldr	r3, [r3, #0]
 8081e5e:	681b      	ldr	r3, [r3, #0]
 8081e60:	9301      	str	r3, [sp, #4]
 8081e62:	bd08      	pop	{r3, pc}
 8081e64:	080401a4 	.word	0x080401a4

08081e68 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8081e68:	b508      	push	{r3, lr}
 8081e6a:	4b02      	ldr	r3, [pc, #8]	; (8081e74 <set_system_mode+0xc>)
 8081e6c:	681b      	ldr	r3, [r3, #0]
 8081e6e:	685b      	ldr	r3, [r3, #4]
 8081e70:	9301      	str	r3, [sp, #4]
 8081e72:	bd08      	pop	{r3, pc}
 8081e74:	080401a4 	.word	0x080401a4

08081e78 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8081e78:	b508      	push	{r3, lr}
 8081e7a:	4b02      	ldr	r3, [pc, #8]	; (8081e84 <system_delay_ms+0xc>)
 8081e7c:	681b      	ldr	r3, [r3, #0]
 8081e7e:	695b      	ldr	r3, [r3, #20]
 8081e80:	9301      	str	r3, [sp, #4]
 8081e82:	bd08      	pop	{r3, pc}
 8081e84:	080401a4 	.word	0x080401a4

08081e88 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 8081e88:	b508      	push	{r3, lr}
 8081e8a:	4b02      	ldr	r3, [pc, #8]	; (8081e94 <system_sleep+0xc>)
 8081e8c:	681b      	ldr	r3, [r3, #0]
 8081e8e:	699b      	ldr	r3, [r3, #24]
 8081e90:	9301      	str	r3, [sp, #4]
 8081e92:	bd08      	pop	{r3, pc}
 8081e94:	080401a4 	.word	0x080401a4

08081e98 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8081e98:	b508      	push	{r3, lr}
 8081e9a:	4b02      	ldr	r3, [pc, #8]	; (8081ea4 <system_thread_set_state+0xc>)
 8081e9c:	681b      	ldr	r3, [r3, #0]
 8081e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081ea0:	9301      	str	r3, [sp, #4]
 8081ea2:	bd08      	pop	{r3, pc}
 8081ea4:	080401a4 	.word	0x080401a4

08081ea8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8081ea8:	b508      	push	{r3, lr}
 8081eaa:	4b02      	ldr	r3, [pc, #8]	; (8081eb4 <application_thread_current+0xc>)
 8081eac:	681b      	ldr	r3, [r3, #0]
 8081eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081eb0:	9301      	str	r3, [sp, #4]
 8081eb2:	bd08      	pop	{r3, pc}
 8081eb4:	080401a4 	.word	0x080401a4

08081eb8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8081eb8:	b508      	push	{r3, lr}
 8081eba:	4b02      	ldr	r3, [pc, #8]	; (8081ec4 <application_thread_invoke+0xc>)
 8081ebc:	681b      	ldr	r3, [r3, #0]
 8081ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081ec0:	9301      	str	r3, [sp, #4]
 8081ec2:	bd08      	pop	{r3, pc}
 8081ec4:	080401a4 	.word	0x080401a4

08081ec8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8081ec8:	b508      	push	{r3, lr}
 8081eca:	4b02      	ldr	r3, [pc, #8]	; (8081ed4 <system_thread_get_state+0xc>)
 8081ecc:	681b      	ldr	r3, [r3, #0]
 8081ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081ed0:	9301      	str	r3, [sp, #4]
 8081ed2:	bd08      	pop	{r3, pc}
 8081ed4:	080401a4 	.word	0x080401a4

08081ed8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8081ed8:	b508      	push	{r3, lr}
 8081eda:	4b03      	ldr	r3, [pc, #12]	; (8081ee8 <system_ctrl_set_app_request_handler+0x10>)
 8081edc:	681b      	ldr	r3, [r3, #0]
 8081ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8081ee2:	9301      	str	r3, [sp, #4]
 8081ee4:	bd08      	pop	{r3, pc}
 8081ee6:	0000      	.short	0x0000
 8081ee8:	080401a4 	.word	0x080401a4

08081eec <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8081eec:	b508      	push	{r3, lr}
 8081eee:	4b03      	ldr	r3, [pc, #12]	; (8081efc <system_ctrl_set_result+0x10>)
 8081ef0:	681b      	ldr	r3, [r3, #0]
 8081ef2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8081ef6:	9301      	str	r3, [sp, #4]
 8081ef8:	bd08      	pop	{r3, pc}
 8081efa:	0000      	.short	0x0000
 8081efc:	080401a4 	.word	0x080401a4

08081f00 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 8081f00:	b508      	push	{r3, lr}
 8081f02:	4b03      	ldr	r3, [pc, #12]	; (8081f10 <system_reset+0x10>)
 8081f04:	681b      	ldr	r3, [r3, #0]
 8081f06:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8081f0a:	9301      	str	r3, [sp, #4]
 8081f0c:	bd08      	pop	{r3, pc}
 8081f0e:	0000      	.short	0x0000
 8081f10:	080401a4 	.word	0x080401a4

08081f14 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 8081f14:	b508      	push	{r3, lr}
 8081f16:	4b02      	ldr	r3, [pc, #8]	; (8081f20 <spark_variable+0xc>)
 8081f18:	681b      	ldr	r3, [r3, #0]
 8081f1a:	681b      	ldr	r3, [r3, #0]
 8081f1c:	9301      	str	r3, [sp, #4]
 8081f1e:	bd08      	pop	{r3, pc}
 8081f20:	080401cc 	.word	0x080401cc

08081f24 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8081f24:	b508      	push	{r3, lr}
 8081f26:	4b02      	ldr	r3, [pc, #8]	; (8081f30 <spark_function+0xc>)
 8081f28:	681b      	ldr	r3, [r3, #0]
 8081f2a:	685b      	ldr	r3, [r3, #4]
 8081f2c:	9301      	str	r3, [sp, #4]
 8081f2e:	bd08      	pop	{r3, pc}
 8081f30:	080401cc 	.word	0x080401cc

08081f34 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8081f34:	b508      	push	{r3, lr}
 8081f36:	4b02      	ldr	r3, [pc, #8]	; (8081f40 <spark_process+0xc>)
 8081f38:	681b      	ldr	r3, [r3, #0]
 8081f3a:	689b      	ldr	r3, [r3, #8]
 8081f3c:	9301      	str	r3, [sp, #4]
 8081f3e:	bd08      	pop	{r3, pc}
 8081f40:	080401cc 	.word	0x080401cc

08081f44 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8081f44:	b508      	push	{r3, lr}
 8081f46:	4b02      	ldr	r3, [pc, #8]	; (8081f50 <spark_cloud_flag_connect+0xc>)
 8081f48:	681b      	ldr	r3, [r3, #0]
 8081f4a:	68db      	ldr	r3, [r3, #12]
 8081f4c:	9301      	str	r3, [sp, #4]
 8081f4e:	bd08      	pop	{r3, pc}
 8081f50:	080401cc 	.word	0x080401cc

08081f54 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8081f54:	b508      	push	{r3, lr}
 8081f56:	4b02      	ldr	r3, [pc, #8]	; (8081f60 <spark_cloud_flag_connected+0xc>)
 8081f58:	681b      	ldr	r3, [r3, #0]
 8081f5a:	695b      	ldr	r3, [r3, #20]
 8081f5c:	9301      	str	r3, [sp, #4]
 8081f5e:	bd08      	pop	{r3, pc}
 8081f60:	080401cc 	.word	0x080401cc

08081f64 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 8081f64:	b508      	push	{r3, lr}
 8081f66:	4b02      	ldr	r3, [pc, #8]	; (8081f70 <spark_deviceID+0xc>)
 8081f68:	681b      	ldr	r3, [r3, #0]
 8081f6a:	69db      	ldr	r3, [r3, #28]
 8081f6c:	9301      	str	r3, [sp, #4]
 8081f6e:	bd08      	pop	{r3, pc}
 8081f70:	080401cc 	.word	0x080401cc

08081f74 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8081f74:	b508      	push	{r3, lr}
 8081f76:	4b02      	ldr	r3, [pc, #8]	; (8081f80 <spark_send_event+0xc>)
 8081f78:	681b      	ldr	r3, [r3, #0]
 8081f7a:	6a1b      	ldr	r3, [r3, #32]
 8081f7c:	9301      	str	r3, [sp, #4]
 8081f7e:	bd08      	pop	{r3, pc}
 8081f80:	080401cc 	.word	0x080401cc

08081f84 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 8081f84:	b508      	push	{r3, lr}
 8081f86:	4b02      	ldr	r3, [pc, #8]	; (8081f90 <spark_subscribe+0xc>)
 8081f88:	681b      	ldr	r3, [r3, #0]
 8081f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081f8c:	9301      	str	r3, [sp, #4]
 8081f8e:	bd08      	pop	{r3, pc}
 8081f90:	080401cc 	.word	0x080401cc

08081f94 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 8081f94:	b508      	push	{r3, lr}
 8081f96:	4b02      	ldr	r3, [pc, #8]	; (8081fa0 <spark_sync_time+0xc>)
 8081f98:	681b      	ldr	r3, [r3, #0]
 8081f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081f9c:	9301      	str	r3, [sp, #4]
 8081f9e:	bd08      	pop	{r3, pc}
 8081fa0:	080401cc 	.word	0x080401cc

08081fa4 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8081fa4:	b508      	push	{r3, lr}
 8081fa6:	4b02      	ldr	r3, [pc, #8]	; (8081fb0 <spark_sync_time_pending+0xc>)
 8081fa8:	681b      	ldr	r3, [r3, #0]
 8081faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081fac:	9301      	str	r3, [sp, #4]
 8081fae:	bd08      	pop	{r3, pc}
 8081fb0:	080401cc 	.word	0x080401cc

08081fb4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8081fb4:	b508      	push	{r3, lr}
 8081fb6:	4b02      	ldr	r3, [pc, #8]	; (8081fc0 <spark_set_random_seed_from_cloud_handler+0xc>)
 8081fb8:	681b      	ldr	r3, [r3, #0]
 8081fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081fbc:	9301      	str	r3, [sp, #4]
 8081fbe:	bd08      	pop	{r3, pc}
 8081fc0:	080401cc 	.word	0x080401cc

08081fc4 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 8081fc4:	b508      	push	{r3, lr}
 8081fc6:	4b02      	ldr	r3, [pc, #8]	; (8081fd0 <spark_cloud_disconnect+0xc>)
 8081fc8:	681b      	ldr	r3, [r3, #0]
 8081fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081fcc:	9301      	str	r3, [sp, #4]
 8081fce:	bd08      	pop	{r3, pc}
 8081fd0:	080401cc 	.word	0x080401cc

08081fd4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8081fd4:	b508      	push	{r3, lr}
 8081fd6:	4b02      	ldr	r3, [pc, #8]	; (8081fe0 <network_connect+0xc>)
 8081fd8:	681b      	ldr	r3, [r3, #0]
 8081fda:	685b      	ldr	r3, [r3, #4]
 8081fdc:	9301      	str	r3, [sp, #4]
 8081fde:	bd08      	pop	{r3, pc}
 8081fe0:	080401c8 	.word	0x080401c8

08081fe4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8081fe4:	b508      	push	{r3, lr}
 8081fe6:	4b02      	ldr	r3, [pc, #8]	; (8081ff0 <network_connecting+0xc>)
 8081fe8:	681b      	ldr	r3, [r3, #0]
 8081fea:	689b      	ldr	r3, [r3, #8]
 8081fec:	9301      	str	r3, [sp, #4]
 8081fee:	bd08      	pop	{r3, pc}
 8081ff0:	080401c8 	.word	0x080401c8

08081ff4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8081ff4:	b508      	push	{r3, lr}
 8081ff6:	4b02      	ldr	r3, [pc, #8]	; (8082000 <network_disconnect+0xc>)
 8081ff8:	681b      	ldr	r3, [r3, #0]
 8081ffa:	68db      	ldr	r3, [r3, #12]
 8081ffc:	9301      	str	r3, [sp, #4]
 8081ffe:	bd08      	pop	{r3, pc}
 8082000:	080401c8 	.word	0x080401c8

08082004 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8082004:	b508      	push	{r3, lr}
 8082006:	4b02      	ldr	r3, [pc, #8]	; (8082010 <network_ready+0xc>)
 8082008:	681b      	ldr	r3, [r3, #0]
 808200a:	691b      	ldr	r3, [r3, #16]
 808200c:	9301      	str	r3, [sp, #4]
 808200e:	bd08      	pop	{r3, pc}
 8082010:	080401c8 	.word	0x080401c8

08082014 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8082014:	b508      	push	{r3, lr}
 8082016:	4b02      	ldr	r3, [pc, #8]	; (8082020 <network_on+0xc>)
 8082018:	681b      	ldr	r3, [r3, #0]
 808201a:	695b      	ldr	r3, [r3, #20]
 808201c:	9301      	str	r3, [sp, #4]
 808201e:	bd08      	pop	{r3, pc}
 8082020:	080401c8 	.word	0x080401c8

08082024 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8082024:	b508      	push	{r3, lr}
 8082026:	4b02      	ldr	r3, [pc, #8]	; (8082030 <network_off+0xc>)
 8082028:	681b      	ldr	r3, [r3, #0]
 808202a:	699b      	ldr	r3, [r3, #24]
 808202c:	9301      	str	r3, [sp, #4]
 808202e:	bd08      	pop	{r3, pc}
 8082030:	080401c8 	.word	0x080401c8

08082034 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8082034:	b508      	push	{r3, lr}
 8082036:	4b02      	ldr	r3, [pc, #8]	; (8082040 <network_listen+0xc>)
 8082038:	681b      	ldr	r3, [r3, #0]
 808203a:	69db      	ldr	r3, [r3, #28]
 808203c:	9301      	str	r3, [sp, #4]
 808203e:	bd08      	pop	{r3, pc}
 8082040:	080401c8 	.word	0x080401c8

08082044 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8082044:	b508      	push	{r3, lr}
 8082046:	4b02      	ldr	r3, [pc, #8]	; (8082050 <network_listening+0xc>)
 8082048:	681b      	ldr	r3, [r3, #0]
 808204a:	6a1b      	ldr	r3, [r3, #32]
 808204c:	9301      	str	r3, [sp, #4]
 808204e:	bd08      	pop	{r3, pc}
 8082050:	080401c8 	.word	0x080401c8

08082054 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8082054:	b508      	push	{r3, lr}
 8082056:	4b02      	ldr	r3, [pc, #8]	; (8082060 <network_set_listen_timeout+0xc>)
 8082058:	681b      	ldr	r3, [r3, #0]
 808205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808205c:	9301      	str	r3, [sp, #4]
 808205e:	bd08      	pop	{r3, pc}
 8082060:	080401c8 	.word	0x080401c8

08082064 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8082064:	b508      	push	{r3, lr}
 8082066:	4b02      	ldr	r3, [pc, #8]	; (8082070 <network_get_listen_timeout+0xc>)
 8082068:	681b      	ldr	r3, [r3, #0]
 808206a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808206c:	9301      	str	r3, [sp, #4]
 808206e:	bd08      	pop	{r3, pc}
 8082070:	080401c8 	.word	0x080401c8

08082074 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8082074:	b508      	push	{r3, lr}
 8082076:	4b02      	ldr	r3, [pc, #8]	; (8082080 <malloc+0xc>)
 8082078:	681b      	ldr	r3, [r3, #0]
 808207a:	681b      	ldr	r3, [r3, #0]
 808207c:	9301      	str	r3, [sp, #4]
 808207e:	bd08      	pop	{r3, pc}
 8082080:	080401a0 	.word	0x080401a0

08082084 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8082084:	b508      	push	{r3, lr}
 8082086:	4b02      	ldr	r3, [pc, #8]	; (8082090 <free+0xc>)
 8082088:	681b      	ldr	r3, [r3, #0]
 808208a:	685b      	ldr	r3, [r3, #4]
 808208c:	9301      	str	r3, [sp, #4]
 808208e:	bd08      	pop	{r3, pc}
 8082090:	080401a0 	.word	0x080401a0

08082094 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8082094:	b508      	push	{r3, lr}
 8082096:	4b02      	ldr	r3, [pc, #8]	; (80820a0 <realloc+0xc>)
 8082098:	681b      	ldr	r3, [r3, #0]
 808209a:	689b      	ldr	r3, [r3, #8]
 808209c:	9301      	str	r3, [sp, #4]
 808209e:	bd08      	pop	{r3, pc}
 80820a0:	080401a0 	.word	0x080401a0

080820a4 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80820a4:	b508      	push	{r3, lr}
 80820a6:	4b02      	ldr	r3, [pc, #8]	; (80820b0 <siprintf+0xc>)
 80820a8:	681b      	ldr	r3, [r3, #0]
 80820aa:	691b      	ldr	r3, [r3, #16]
 80820ac:	9301      	str	r3, [sp, #4]
 80820ae:	bd08      	pop	{r3, pc}
 80820b0:	080401a0 	.word	0x080401a0

080820b4 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80820b4:	b508      	push	{r3, lr}
 80820b6:	4b02      	ldr	r3, [pc, #8]	; (80820c0 <snprintf+0xc>)
 80820b8:	681b      	ldr	r3, [r3, #0]
 80820ba:	69db      	ldr	r3, [r3, #28]
 80820bc:	9301      	str	r3, [sp, #4]
 80820be:	bd08      	pop	{r3, pc}
 80820c0:	080401a0 	.word	0x080401a0

080820c4 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80820c4:	b508      	push	{r3, lr}
 80820c6:	4b02      	ldr	r3, [pc, #8]	; (80820d0 <abort+0xc>)
 80820c8:	681b      	ldr	r3, [r3, #0]
 80820ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80820cc:	9301      	str	r3, [sp, #4]
 80820ce:	bd08      	pop	{r3, pc}
 80820d0:	080401a0 	.word	0x080401a0

080820d4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80820d4:	b508      	push	{r3, lr}
 80820d6:	4b02      	ldr	r3, [pc, #8]	; (80820e0 <_malloc_r+0xc>)
 80820d8:	681b      	ldr	r3, [r3, #0]
 80820da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80820dc:	9301      	str	r3, [sp, #4]
 80820de:	bd08      	pop	{r3, pc}
 80820e0:	080401a0 	.word	0x080401a0

080820e4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80820e4:	b508      	push	{r3, lr}
 80820e6:	4b02      	ldr	r3, [pc, #8]	; (80820f0 <newlib_impure_ptr_callback+0xc>)
 80820e8:	681b      	ldr	r3, [r3, #0]
 80820ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80820ec:	9301      	str	r3, [sp, #4]
 80820ee:	bd08      	pop	{r3, pc}
 80820f0:	080401a0 	.word	0x080401a0

080820f4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80820f4:	2100      	movs	r1, #0
 80820f6:	f7ff bebf 	b.w	8081e78 <system_delay_ms>

080820fa <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80820fa:	b510      	push	{r4, lr}
      if (_M_empty())
 80820fc:	6883      	ldr	r3, [r0, #8]
 80820fe:	4604      	mov	r4, r0
 8082100:	b90b      	cbnz	r3, 8082106 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8082102:	f001 fbda 	bl	80838ba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082106:	68c3      	ldr	r3, [r0, #12]
 8082108:	4798      	blx	r3
      if (_M_manager)
 808210a:	68a3      	ldr	r3, [r4, #8]
 808210c:	b11b      	cbz	r3, 8082116 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808210e:	2203      	movs	r2, #3
 8082110:	4621      	mov	r1, r4
 8082112:	4620      	mov	r0, r4
 8082114:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8082116:	4620      	mov	r0, r4
}
 8082118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 808211c:	2110      	movs	r1, #16
 808211e:	f001 bbc6 	b.w	80838ae <_ZdlPvj>

08082122 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8082122:	2200      	movs	r2, #0
 8082124:	6840      	ldr	r0, [r0, #4]
 8082126:	4611      	mov	r1, r2
 8082128:	f7ff bf6c 	b.w	8082004 <network_ready>

0808212c <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808212c:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 808212e:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 8082130:	b085      	sub	sp, #20
 8082132:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082134:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 8082136:	460f      	mov	r7, r1
 8082138:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 808213a:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808213c:	f002 fbe7 	bl	808490e <strlen>
 8082140:	687b      	ldr	r3, [r7, #4]
 8082142:	b281      	uxth	r1, r0
 8082144:	9600      	str	r6, [sp, #0]
 8082146:	4628      	mov	r0, r5
 8082148:	aa03      	add	r2, sp, #12
 808214a:	f7ff fcad 	bl	8081aa8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808214e:	b130      	cbz	r0, 808215e <_ZN5spark13CellularClass7resolveEPKc+0x32>
 8082150:	4631      	mov	r1, r6
 8082152:	4620      	mov	r0, r4
 8082154:	f000 fd24 	bl	8082ba0 <_ZN9IPAddressC1Em>
    }
 8082158:	4620      	mov	r0, r4
 808215a:	b005      	add	sp, #20
 808215c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808215e:	4620      	mov	r0, r4
 8082160:	a903      	add	r1, sp, #12
 8082162:	f000 fd15 	bl	8082b90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 8082166:	e7f7      	b.n	8082158 <_ZN5spark13CellularClass7resolveEPKc+0x2c>

08082168 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 8082168:	2200      	movs	r2, #0
 808216a:	6840      	ldr	r0, [r0, #4]
 808216c:	4611      	mov	r1, r2
 808216e:	f7ff bf69 	b.w	8082044 <network_listening>

08082172 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 8082172:	2200      	movs	r2, #0
 8082174:	6840      	ldr	r0, [r0, #4]
 8082176:	4611      	mov	r1, r2
 8082178:	f7ff bf74 	b.w	8082064 <network_get_listen_timeout>

0808217c <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 808217c:	2200      	movs	r2, #0
 808217e:	6840      	ldr	r0, [r0, #4]
 8082180:	f7ff bf68 	b.w	8082054 <network_set_listen_timeout>

08082184 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 8082184:	2200      	movs	r2, #0
 8082186:	6840      	ldr	r0, [r0, #4]
 8082188:	f081 0101 	eor.w	r1, r1, #1
 808218c:	f7ff bf52 	b.w	8082034 <network_listen>

08082190 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 8082190:	2300      	movs	r3, #0
 8082192:	6840      	ldr	r0, [r0, #4]
 8082194:	461a      	mov	r2, r3
 8082196:	4619      	mov	r1, r3
 8082198:	f7ff bf44 	b.w	8082024 <network_off>

0808219c <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 808219c:	2300      	movs	r3, #0
 808219e:	6840      	ldr	r0, [r0, #4]
 80821a0:	461a      	mov	r2, r3
 80821a2:	4619      	mov	r1, r3
 80821a4:	f7ff bf36 	b.w	8082014 <network_on>

080821a8 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80821a8:	2200      	movs	r2, #0
 80821aa:	6840      	ldr	r0, [r0, #4]
 80821ac:	4611      	mov	r1, r2
 80821ae:	f7ff bf19 	b.w	8081fe4 <network_connecting>

080821b2 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80821b2:	2200      	movs	r2, #0
 80821b4:	2102      	movs	r1, #2
 80821b6:	6840      	ldr	r0, [r0, #4]
 80821b8:	f7ff bf1c 	b.w	8081ff4 <network_disconnect>

080821bc <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80821bc:	2300      	movs	r3, #0
 80821be:	6840      	ldr	r0, [r0, #4]
 80821c0:	461a      	mov	r2, r3
 80821c2:	f7ff bf07 	b.w	8081fd4 <network_connect>
	...

080821c8 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 80821c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
 80821ca:	2500      	movs	r5, #0
 80821cc:	2618      	movs	r6, #24
 80821ce:	460f      	mov	r7, r1
 80821d0:	4b19      	ldr	r3, [pc, #100]	; (8082238 <_ZN5spark13CellularClass4RSSIEv+0x70>)
 80821d2:	4632      	mov	r2, r6
 80821d4:	6003      	str	r3, [r0, #0]
 80821d6:	3328      	adds	r3, #40	; 0x28
 80821d8:	4629      	mov	r1, r5
 80821da:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80821de:	b089      	sub	sp, #36	; 0x24
 80821e0:	6043      	str	r3, [r0, #4]
 80821e2:	4604      	mov	r4, r0
 80821e4:	3010      	adds	r0, #16
 80821e6:	f002 fb39 	bl	808485c <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 80821ea:	462a      	mov	r2, r5
 80821ec:	4629      	mov	r1, r5
 80821ee:	6878      	ldr	r0, [r7, #4]
 80821f0:	f7ff ff08 	bl	8082004 <network_ready>
 80821f4:	b918      	cbnz	r0, 80821fe <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
 80821f6:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
 80821f8:	4620      	mov	r0, r4
 80821fa:	b009      	add	sp, #36	; 0x24
 80821fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
 80821fe:	4629      	mov	r1, r5
 8082200:	4632      	mov	r2, r6
 8082202:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
 8082204:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
 8082208:	f002 fb28 	bl	808485c <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 808220c:	4668      	mov	r0, sp
 808220e:	a902      	add	r1, sp, #8
        sigext.size = sizeof(sigext);
 8082210:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8082214:	f7ff fc50 	bl	8081ab8 <cellular_signal>
 8082218:	b110      	cbz	r0, 8082220 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
 808221a:	2301      	movs	r3, #1
 808221c:	60a3      	str	r3, [r4, #8]
            return sig;
 808221e:	e7eb      	b.n	80821f8 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
 8082220:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
 8082222:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
 8082224:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
 8082226:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
 8082228:	b90b      	cbnz	r3, 808222e <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
 808222a:	2302      	movs	r3, #2
 808222c:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
 808222e:	4620      	mov	r0, r4
 8082230:	a902      	add	r1, sp, #8
 8082232:	f000 f8a2 	bl	808237a <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
 8082236:	e7df      	b.n	80821f8 <_ZN5spark13CellularClass4RSSIEv+0x30>
 8082238:	08084f0c 	.word	0x08084f0c

0808223c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 808223c:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 808223e:	2428      	movs	r4, #40	; 0x28
 8082240:	4b07      	ldr	r3, [pc, #28]	; (8082260 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8082242:	4622      	mov	r2, r4
 8082244:	4618      	mov	r0, r3
 8082246:	2100      	movs	r1, #0
 8082248:	f002 fb08 	bl	808485c <memset>
        cid = -1;
 808224c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8082250:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8082252:	2204      	movs	r2, #4
 8082254:	4b03      	ldr	r3, [pc, #12]	; (8082264 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 8082256:	8004      	strh	r4, [r0, #0]
 8082258:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 808225a:	4a03      	ldr	r2, [pc, #12]	; (8082268 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 808225c:	601a      	str	r2, [r3, #0]
 808225e:	bd10      	pop	{r4, pc}
 8082260:	20000218 	.word	0x20000218
 8082264:	20000210 	.word	0x20000210
 8082268:	08084ed8 	.word	0x08084ed8

0808226c <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 808226c:	4770      	bx	lr

0808226e <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 808226e:	7d00      	ldrb	r0, [r0, #20]
 8082270:	4770      	bx	lr

08082272 <_ZN14CellularSignalD0Ev>:
 8082272:	b510      	push	{r4, lr}
 8082274:	4604      	mov	r4, r0
 8082276:	2128      	movs	r1, #40	; 0x28
 8082278:	f001 fb19 	bl	80838ae <_ZdlPvj>
 808227c:	4620      	mov	r0, r4
 808227e:	bd10      	pop	{r4, pc}

08082280 <_ZNK14CellularSignal11getStrengthEv>:

float CellularSignal::getStrength() const
{
 8082280:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 8082282:	7d03      	ldrb	r3, [r0, #20]
 8082284:	b15b      	cbz	r3, 808229e <_ZNK14CellularSignal11getStrengthEv+0x1e>
 8082286:	69c0      	ldr	r0, [r0, #28]
 8082288:	2800      	cmp	r0, #0
 808228a:	db08      	blt.n	808229e <_ZNK14CellularSignal11getStrengthEv+0x1e>
        return (float)sig_.strength / 65535.0f * 100.0f;
 808228c:	f002 f838 	bl	8084300 <__aeabi_i2f>
 8082290:	4904      	ldr	r1, [pc, #16]	; (80822a4 <_ZNK14CellularSignal11getStrengthEv+0x24>)
 8082292:	f002 f93d 	bl	8084510 <__aeabi_fdiv>
 8082296:	4904      	ldr	r1, [pc, #16]	; (80822a8 <_ZNK14CellularSignal11getStrengthEv+0x28>)
 8082298:	f002 f886 	bl	80843a8 <__aeabi_fmul>
    }

    return -1.0f;
}
 808229c:	bd08      	pop	{r3, pc}
    return -1.0f;
 808229e:	4803      	ldr	r0, [pc, #12]	; (80822ac <_ZNK14CellularSignal11getStrengthEv+0x2c>)
 80822a0:	e7fc      	b.n	808229c <_ZNK14CellularSignal11getStrengthEv+0x1c>
 80822a2:	bf00      	nop
 80822a4:	477fff00 	.word	0x477fff00
 80822a8:	42c80000 	.word	0x42c80000
 80822ac:	bf800000 	.word	0xbf800000

080822b0 <_ZNK14CellularSignal16getStrengthValueEv>:

float CellularSignal::getStrengthValue() const
{
 80822b0:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 80822b2:	7d03      	ldrb	r3, [r0, #20]
 80822b4:	b14b      	cbz	r3, 80822ca <_ZNK14CellularSignal16getStrengthValueEv+0x1a>
 80822b6:	6980      	ldr	r0, [r0, #24]
 80822b8:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80822bc:	d005      	beq.n	80822ca <_ZNK14CellularSignal16getStrengthValueEv+0x1a>
        return (float)sig_.rssi / 100.0f;
 80822be:	f002 f81f 	bl	8084300 <__aeabi_i2f>
 80822c2:	4903      	ldr	r1, [pc, #12]	; (80822d0 <_ZNK14CellularSignal16getStrengthValueEv+0x20>)
 80822c4:	f002 f924 	bl	8084510 <__aeabi_fdiv>
    }

    return 0.0f;
}
 80822c8:	bd08      	pop	{r3, pc}
    return 0.0f;
 80822ca:	2000      	movs	r0, #0
 80822cc:	e7fc      	b.n	80822c8 <_ZNK14CellularSignal16getStrengthValueEv+0x18>
 80822ce:	bf00      	nop
 80822d0:	42c80000 	.word	0x42c80000

080822d4 <_ZNK14CellularSignal10getQualityEv>:

float CellularSignal::getQuality() const
{
 80822d4:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 80822d6:	7d03      	ldrb	r3, [r0, #20]
 80822d8:	b15b      	cbz	r3, 80822f2 <_ZNK14CellularSignal10getQualityEv+0x1e>
 80822da:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80822dc:	2800      	cmp	r0, #0
 80822de:	db08      	blt.n	80822f2 <_ZNK14CellularSignal10getQualityEv+0x1e>
        return (float)sig_.quality / 65535.0f * 100.0f;
 80822e0:	f002 f80e 	bl	8084300 <__aeabi_i2f>
 80822e4:	4904      	ldr	r1, [pc, #16]	; (80822f8 <_ZNK14CellularSignal10getQualityEv+0x24>)
 80822e6:	f002 f913 	bl	8084510 <__aeabi_fdiv>
 80822ea:	4904      	ldr	r1, [pc, #16]	; (80822fc <_ZNK14CellularSignal10getQualityEv+0x28>)
 80822ec:	f002 f85c 	bl	80843a8 <__aeabi_fmul>
    }

    return -1.0f;
}
 80822f0:	bd08      	pop	{r3, pc}
    return -1.0f;
 80822f2:	4803      	ldr	r0, [pc, #12]	; (8082300 <_ZNK14CellularSignal10getQualityEv+0x2c>)
 80822f4:	e7fc      	b.n	80822f0 <_ZNK14CellularSignal10getQualityEv+0x1c>
 80822f6:	bf00      	nop
 80822f8:	477fff00 	.word	0x477fff00
 80822fc:	42c80000 	.word	0x42c80000
 8082300:	bf800000 	.word	0xbf800000

08082304 <_ZNK14CellularSignal15getQualityValueEv>:

float CellularSignal::getQualityValue() const
{
 8082304:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 8082306:	7d03      	ldrb	r3, [r0, #20]
 8082308:	b14b      	cbz	r3, 808231e <_ZNK14CellularSignal15getQualityValueEv+0x1a>
 808230a:	6a00      	ldr	r0, [r0, #32]
 808230c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8082310:	d005      	beq.n	808231e <_ZNK14CellularSignal15getQualityValueEv+0x1a>
        return (float)sig_.qual / 100.0f;
 8082312:	f001 fff5 	bl	8084300 <__aeabi_i2f>
 8082316:	4903      	ldr	r1, [pc, #12]	; (8082324 <_ZNK14CellularSignal15getQualityValueEv+0x20>)
 8082318:	f002 f8fa 	bl	8084510 <__aeabi_fdiv>
    }

    return 0.0f;
}
 808231c:	bd08      	pop	{r3, pc}
    return 0.0f;
 808231e:	2000      	movs	r0, #0
 8082320:	e7fc      	b.n	808231c <_ZNK14CellularSignal15getQualityValueEv+0x18>
 8082322:	bf00      	nop
 8082324:	42c80000 	.word	0x42c80000

08082328 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
 8082328:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 808232a:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
 808232c:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
 808232e:	da0a      	bge.n	8082346 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
 8082330:	212d      	movs	r1, #45	; 0x2d
 8082332:	f000 fce3 	bl	8082cfc <_ZN5Print5printEc>
 8082336:	4605      	mov	r5, r0
            val = -n;
 8082338:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 808233a:	220a      	movs	r2, #10
 808233c:	4630      	mov	r0, r6
 808233e:	f000 fce0 	bl	8082d02 <_ZN5Print11printNumberEmh>
    }
}
 8082342:	4428      	add	r0, r5
 8082344:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
 8082346:	4621      	mov	r1, r4
        size_t t = 0;
 8082348:	2500      	movs	r5, #0
 808234a:	e7f6      	b.n	808233a <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

0808234c <_ZNK14CellularSignal7printToER5Print>:

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
size_t CellularSignal::printTo(Print& p) const
{
 808234c:	b570      	push	{r4, r5, r6, lr}
 808234e:	460c      	mov	r4, r1
 8082350:	4605      	mov	r5, r0
 8082352:	6881      	ldr	r1, [r0, #8]
 8082354:	4620      	mov	r0, r4
 8082356:	f7ff ffe7 	bl	8082328 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
 808235a:	212c      	movs	r1, #44	; 0x2c
 808235c:	4606      	mov	r6, r0
 808235e:	4620      	mov	r0, r4
 8082360:	f000 fccc 	bl	8082cfc <_ZN5Print5printEc>
 8082364:	68e9      	ldr	r1, [r5, #12]
 8082366:	4406      	add	r6, r0
size_t Print::print(T n, int base)
 8082368:	4620      	mov	r0, r4
 808236a:	f7ff ffdd 	bl	8082328 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print((*this).qual, DEC);
    return n;
}
 808236e:	4430      	add	r0, r6
 8082370:	bd70      	pop	{r4, r5, r6, pc}

08082372 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 8082372:	f1a0 0004 	sub.w	r0, r0, #4
 8082376:	f7ff bfe9 	b.w	808234c <_ZNK14CellularSignal7printToER5Print>

0808237a <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
 808237a:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 808237c:	460d      	mov	r5, r1
 808237e:	f100 0410 	add.w	r4, r0, #16
 8082382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8082386:	e895 0003 	ldmia.w	r5, {r0, r1}
 808238a:	e884 0003 	stmia.w	r4, {r0, r1}
}
 808238e:	2001      	movs	r0, #1
 8082390:	bd30      	pop	{r4, r5, pc}

08082392 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8082392:	4770      	bx	lr

08082394 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 8082394:	2000      	movs	r0, #0
 8082396:	4770      	bx	lr

08082398 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8082398:	b510      	push	{r4, lr}
 808239a:	4604      	mov	r4, r0
 808239c:	2110      	movs	r1, #16
 808239e:	f001 fa86 	bl	80838ae <_ZdlPvj>
 80823a2:	4620      	mov	r0, r4
 80823a4:	bd10      	pop	{r4, pc}

080823a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80823a6:	b508      	push	{r3, lr}
      { delete this; }
 80823a8:	f7ff fff6 	bl	8082398 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80823ac:	bd08      	pop	{r3, pc}

080823ae <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80823ae:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80823b0:	b530      	push	{r4, r5, lr}
        type_(type) {
 80823b2:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80823b6:	6002      	str	r2, [r0, #0]
 80823b8:	8084      	strh	r4, [r0, #4]
 80823ba:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80823bc:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80823be:	680c      	ldr	r4, [r1, #0]
 80823c0:	8085      	strh	r5, [r0, #4]
 80823c2:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80823c4:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80823c6:	bd30      	pop	{r4, r5, pc}

080823c8 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80823c8:	b510      	push	{r4, lr}
 80823ca:	4604      	mov	r4, r0
    free((void*)msg_);
 80823cc:	6800      	ldr	r0, [r0, #0]
 80823ce:	f7ff fe59 	bl	8082084 <free>
}
 80823d2:	4620      	mov	r0, r4
 80823d4:	bd10      	pop	{r4, pc}

080823d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80823d6:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80823d8:	68c4      	ldr	r4, [r0, #12]
 80823da:	b1f4      	cbz	r4, 808241a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
 80823dc:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80823de:	2b02      	cmp	r3, #2
 80823e0:	d103      	bne.n	80823ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80823e2:	f104 000c 	add.w	r0, r4, #12
 80823e6:	f7ff ffef 	bl	80823c8 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80823ea:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80823ec:	b135      	cbz	r5, 80823fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80823ee:	4628      	mov	r0, r5
 80823f0:	f7ff f899 	bl	8081526 <_ZNSt14_Function_baseD1Ev>
 80823f4:	2110      	movs	r1, #16
 80823f6:	4628      	mov	r0, r5
 80823f8:	f001 fa59 	bl	80838ae <_ZdlPvj>
 80823fc:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80823fe:	b135      	cbz	r5, 808240e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8082400:	4628      	mov	r0, r5
 8082402:	f7ff f890 	bl	8081526 <_ZNSt14_Function_baseD1Ev>
 8082406:	2110      	movs	r1, #16
 8082408:	4628      	mov	r0, r5
 808240a:	f001 fa50 	bl	80838ae <_ZdlPvj>
 808240e:	4620      	mov	r0, r4
 8082410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8082414:	2114      	movs	r1, #20
 8082416:	f001 ba4a 	b.w	80838ae <_ZdlPvj>
 808241a:	bd38      	pop	{r3, r4, r5, pc}

0808241c <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 808241c:	b510      	push	{r4, lr}
 808241e:	b088      	sub	sp, #32
 8082420:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8082422:	4668      	mov	r0, sp
 8082424:	f000 fcf7 	bl	8082e16 <_ZN6StringC1EPKc>
    return (*fn)(p);
 8082428:	4669      	mov	r1, sp
 808242a:	a804      	add	r0, sp, #16
 808242c:	f000 fd15 	bl	8082e5a <_ZN6StringC1ERKS_>
 8082430:	a804      	add	r0, sp, #16
 8082432:	47a0      	blx	r4
 8082434:	4604      	mov	r4, r0
 8082436:	a804      	add	r0, sp, #16
 8082438:	f000 fca3 	bl	8082d82 <_ZN6StringD1Ev>
    String p(param);
 808243c:	4668      	mov	r0, sp
 808243e:	f000 fca0 	bl	8082d82 <_ZN6StringD1Ev>
}
 8082442:	4620      	mov	r0, r4
 8082444:	b008      	add	sp, #32
 8082446:	bd10      	pop	{r4, pc}

08082448 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8082448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 808244a:	2300      	movs	r3, #0
         size = sizeof(*this);
 808244c:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 808244e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 8082452:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8082454:	4669      	mov	r1, sp
 8082456:	461a      	mov	r2, r3
 8082458:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 808245a:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 808245e:	f8ad 4000 	strh.w	r4, [sp]
 8082462:	f7ff fd5f 	bl	8081f24 <spark_function>
}
 8082466:	b004      	add	sp, #16
 8082468:	bd10      	pop	{r4, pc}

0808246a <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:
    opts.size = sizeof(opts);
 808246a:	2308      	movs	r3, #8

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 808246c:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
 808246e:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
 8082472:	6803      	ldr	r3, [r0, #0]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8082474:	2100      	movs	r1, #0
    opts.flags = flags_;
 8082476:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
 808247a:	7a03      	ldrb	r3, [r0, #8]
 808247c:	f88d 3003 	strb.w	r3, [sp, #3]
    opts.timeout = timeout_;
 8082480:	6843      	ldr	r3, [r0, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8082482:	4668      	mov	r0, sp
    opts.timeout = timeout_;
 8082484:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 8082486:	f7ff fd9d 	bl	8081fc4 <spark_cloud_disconnect>
}
 808248a:	b003      	add	sp, #12
 808248c:	f85d fb04 	ldr.w	pc, [sp], #4

08082490 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 8082490:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 8082492:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 8082494:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 8082496:	b17c      	cbz	r4, 80824b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 8082498:	6863      	ldr	r3, [r4, #4]
 808249a:	3b01      	subs	r3, #1
 808249c:	6063      	str	r3, [r4, #4]
 808249e:	b95b      	cbnz	r3, 80824b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80824a0:	6823      	ldr	r3, [r4, #0]
 80824a2:	4620      	mov	r0, r4
 80824a4:	689b      	ldr	r3, [r3, #8]
 80824a6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80824a8:	68a3      	ldr	r3, [r4, #8]
 80824aa:	3b01      	subs	r3, #1
 80824ac:	60a3      	str	r3, [r4, #8]
 80824ae:	b91b      	cbnz	r3, 80824b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80824b0:	6823      	ldr	r3, [r4, #0]
 80824b2:	4620      	mov	r0, r4
 80824b4:	68db      	ldr	r3, [r3, #12]
 80824b6:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80824b8:	4628      	mov	r0, r5
 80824ba:	bd38      	pop	{r3, r4, r5, pc}

080824bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80824bc:	680b      	ldr	r3, [r1, #0]
 80824be:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80824c0:	b113      	cbz	r3, 80824c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80824c2:	685a      	ldr	r2, [r3, #4]
 80824c4:	3201      	adds	r2, #1
 80824c6:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
 80824c8:	4770      	bx	lr

080824ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80824ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80824cc:	460e      	mov	r6, r1
 80824ce:	4604      	mov	r4, r0
 80824d0:	f856 3b04 	ldr.w	r3, [r6], #4
 80824d4:	460d      	mov	r5, r1
 80824d6:	a801      	add	r0, sp, #4
 80824d8:	4631      	mov	r1, r6
 80824da:	9300      	str	r3, [sp, #0]
 80824dc:	f7ff ffee 	bl	80824bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80824e0:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80824e2:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80824e4:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80824e6:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80824e8:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80824ea:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80824ec:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80824ee:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80824f0:	f7ff ffce 	bl	8082490 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80824f4:	4630      	mov	r0, r6
 80824f6:	f7ff ffcb 	bl	8082490 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80824fa:	4628      	mov	r0, r5
 80824fc:	2108      	movs	r1, #8
 80824fe:	f001 f9d6 	bl	80838ae <_ZdlPvj>
        return p;
    }
 8082502:	4620      	mov	r0, r4
 8082504:	b002      	add	sp, #8
 8082506:	bd70      	pop	{r4, r5, r6, pc}

08082508 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 8082508:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808250a:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 808250c:	460b      	mov	r3, r1
 808250e:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082510:	c803      	ldmia	r0, {r0, r1}
 8082512:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8082516:	e893 0003 	ldmia.w	r3, {r0, r1}
 808251a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 808251e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8082522:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8082526:	b002      	add	sp, #8
 8082528:	bd10      	pop	{r4, pc}

0808252a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 808252a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 808252c:	b510      	push	{r4, lr}
      if (_M_empty())
 808252e:	b90a      	cbnz	r2, 8082534 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8082530:	f001 f9c3 	bl	80838ba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082534:	68c3      	ldr	r3, [r0, #12]
    }
 8082536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808253a:	4718      	bx	r3

0808253c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808253c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 808253e:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8082540:	f100 0110 	add.w	r1, r0, #16
 8082544:	f7ff fff1 	bl	808252a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 8082548:	bd08      	pop	{r3, pc}

0808254a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 808254a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 808254c:	b510      	push	{r4, lr}
      if (_M_empty())
 808254e:	b90a      	cbnz	r2, 8082554 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8082550:	f001 f9b3 	bl	80838ba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082554:	68c3      	ldr	r3, [r0, #12]
    }
 8082556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808255a:	4718      	bx	r3

0808255c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808255c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 808255e:	6800      	ldr	r0, [r0, #0]
 8082560:	f100 0110 	add.w	r1, r0, #16
 8082564:	f7ff fff1 	bl	808254a <_ZNKSt8functionIFvRKbEEclES1_>
      }
 8082568:	bd08      	pop	{r3, pc}
	...

0808256c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 808256c:	b538      	push	{r3, r4, r5, lr}
 808256e:	2300      	movs	r3, #0
 8082570:	4604      	mov	r4, r0
 8082572:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082574:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 8082576:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082578:	f7fd fd97 	bl	80800aa <_Znwj>
 808257c:	b128      	cbz	r0, 808258a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 808257e:	2301      	movs	r3, #1
 8082580:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 8082584:	4b02      	ldr	r3, [pc, #8]	; (8082590 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8082586:	60c5      	str	r5, [r0, #12]
 8082588:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808258a:	6020      	str	r0, [r4, #0]
	}
 808258c:	4620      	mov	r0, r4
 808258e:	bd38      	pop	{r3, r4, r5, pc}
 8082590:	08084f40 	.word	0x08084f40

08082594 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 8082594:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8082596:	2300      	movs	r3, #0
 8082598:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 808259a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 808259c:	4604      	mov	r4, r0
 808259e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80825a0:	b12b      	cbz	r3, 80825ae <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80825a2:	2202      	movs	r2, #2
 80825a4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80825a6:	68eb      	ldr	r3, [r5, #12]
 80825a8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80825aa:	68ab      	ldr	r3, [r5, #8]
 80825ac:	60a3      	str	r3, [r4, #8]
    }
 80825ae:	4620      	mov	r0, r4
 80825b0:	bd38      	pop	{r3, r4, r5, pc}
	...

080825b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80825b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80825b6:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80825b8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80825ba:	4668      	mov	r0, sp
 80825bc:	f7ff fef7 	bl	80823ae <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80825c0:	f04f 0302 	mov.w	r3, #2
 80825c4:	e8d4 2f4f 	ldrexb	r2, [r4]
 80825c8:	2a00      	cmp	r2, #0
 80825ca:	d103      	bne.n	80825d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80825cc:	e8c4 3f41 	strexb	r1, r3, [r4]
 80825d0:	2900      	cmp	r1, #0
 80825d2:	d1f7      	bne.n	80825c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80825d4:	d125      	bne.n	8082622 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80825d6:	f104 050c 	add.w	r5, r4, #12
 80825da:	4669      	mov	r1, sp
 80825dc:	4628      	mov	r0, r5
 80825de:	f7ff fee6 	bl	80823ae <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80825e2:	2301      	movs	r3, #1
 80825e4:	f3bf 8f5b 	dmb	ish
 80825e8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80825ea:	2000      	movs	r0, #0
 80825ec:	f3bf 8f5b 	dmb	ish
 80825f0:	f104 0308 	add.w	r3, r4, #8
 80825f4:	e853 6f00 	ldrex	r6, [r3]
 80825f8:	e843 0200 	strex	r2, r0, [r3]
 80825fc:	2a00      	cmp	r2, #0
 80825fe:	d1f9      	bne.n	80825f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 8082600:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 8082604:	b16e      	cbz	r6, 8082622 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 8082606:	f7ff fc4f 	bl	8081ea8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 808260a:	b178      	cbz	r0, 808262c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808260c:	4629      	mov	r1, r5
 808260e:	4630      	mov	r0, r6
 8082610:	f7ff ff8b 	bl	808252a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 8082614:	4630      	mov	r0, r6
 8082616:	f7fe ff86 	bl	8081526 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 808261a:	2110      	movs	r1, #16
 808261c:	4630      	mov	r0, r6
 808261e:	f001 f946 	bl	80838ae <_ZdlPvj>
        p_->setError(std::move(error));
 8082622:	4668      	mov	r0, sp
 8082624:	f7ff fed0 	bl	80823c8 <_ZN8particle5ErrorD1Ev>
    }
 8082628:	b009      	add	sp, #36	; 0x24
 808262a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808262c:	4631      	mov	r1, r6
 808262e:	a802      	add	r0, sp, #8
 8082630:	f7ff ffb0 	bl	8082594 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 8082634:	68e0      	ldr	r0, [r4, #12]
 8082636:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 808263a:	b108      	cbz	r0, 8082640 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 808263c:	f002 f94c 	bl	80848d8 <strdup>
        type_(type) {
 8082640:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8082642:	2010      	movs	r0, #16
 8082644:	f8ad 501c 	strh.w	r5, [sp, #28]
 8082648:	f7fd fd2f 	bl	80800aa <_Znwj>
 808264c:	4605      	mov	r5, r0
 808264e:	b1e8      	cbz	r0, 808268c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 8082650:	2700      	movs	r7, #0
 8082652:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082654:	2018      	movs	r0, #24
 8082656:	f7fd fd28 	bl	80800aa <_Znwj>
 808265a:	4604      	mov	r4, r0
 808265c:	b188      	cbz	r0, 8082682 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 808265e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8082660:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8082662:	a802      	add	r0, sp, #8
 8082664:	f7ff ff50 	bl	8082508 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082668:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808266a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808266c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808266e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8082670:	9204      	str	r2, [sp, #16]
 8082672:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8082674:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8082676:	60e3      	str	r3, [r4, #12]
 8082678:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 808267c:	9205      	str	r2, [sp, #20]
 808267e:	f7ff fe96 	bl	80823ae <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 8082682:	4b08      	ldr	r3, [pc, #32]	; (80826a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082684:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8082686:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8082688:	4b07      	ldr	r3, [pc, #28]	; (80826a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 808268a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 808268c:	a806      	add	r0, sp, #24
 808268e:	f7ff fe9b 	bl	80823c8 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8082692:	a802      	add	r0, sp, #8
 8082694:	f7fe ff47 	bl	8081526 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8082698:	2200      	movs	r2, #0
 808269a:	4629      	mov	r1, r5
 808269c:	4803      	ldr	r0, [pc, #12]	; (80826ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 808269e:	f7ff fc0b 	bl	8081eb8 <application_thread_invoke>
 80826a2:	e7b7      	b.n	8082614 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80826a4:	0808253d 	.word	0x0808253d
 80826a8:	080827d5 	.word	0x080827d5
 80826ac:	080820fb 	.word	0x080820fb

080826b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80826b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80826b4:	b08a      	sub	sp, #40	; 0x28
 80826b6:	4605      	mov	r5, r0
 80826b8:	460c      	mov	r4, r1
 80826ba:	4617      	mov	r7, r2
 80826bc:	4698      	mov	r8, r3
 80826be:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80826c2:	f7ff fc47 	bl	8081f54 <spark_cloud_flag_connected>
 80826c6:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80826c8:	4682      	mov	sl, r0
 80826ca:	bb38      	cbnz	r0, 808271c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80826cc:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80826d0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80826d2:	a905      	add	r1, sp, #20
 80826d4:	4630      	mov	r0, r6
 80826d6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80826da:	f7ff fe68 	bl	80823ae <_ZN8particle5ErrorC1EOS0_>
 80826de:	2014      	movs	r0, #20
 80826e0:	f7fd fce3 	bl	80800aa <_Znwj>
 80826e4:	4604      	mov	r4, r0
 80826e6:	b148      	cbz	r0, 80826fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80826e8:	2302      	movs	r3, #2
 80826ea:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80826ec:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80826ee:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80826f2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80826f4:	4631      	mov	r1, r6
 80826f6:	300c      	adds	r0, #12
 80826f8:	f7ff fe59 	bl	80823ae <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80826fc:	4628      	mov	r0, r5
	: __shared_count(__p)
 80826fe:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8082700:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 8082704:	f7ff ff32 	bl	808256c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8082708:	4630      	mov	r0, r6
 808270a:	f7ff fe5d 	bl	80823c8 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 808270e:	a805      	add	r0, sp, #20
 8082710:	f7ff fe5a 	bl	80823c8 <_ZN8particle5ErrorD1Ev>
}
 8082714:	4628      	mov	r0, r5
 8082716:	b00a      	add	sp, #40	; 0x28
 8082718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808271c:	230c      	movs	r3, #12
 808271e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8082722:	2014      	movs	r0, #20
 8082724:	e9cd aa08 	strd	sl, sl, [sp, #32]
 8082728:	9307      	str	r3, [sp, #28]
 808272a:	f7fd fcbe 	bl	80800aa <_Znwj>
 808272e:	4601      	mov	r1, r0
 8082730:	b128      	cbz	r0, 808273e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8082732:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 8082736:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808273a:	f880 a001 	strb.w	sl, [r0, #1]
 808273e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8082740:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 8082742:	f7ff ff13 	bl	808256c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 8082746:	4b22      	ldr	r3, [pc, #136]	; (80827d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8082748:	2008      	movs	r0, #8
 808274a:	9308      	str	r3, [sp, #32]
 808274c:	f7fd fcad 	bl	80800aa <_Znwj>
 8082750:	4682      	mov	sl, r0
 8082752:	b128      	cbz	r0, 8082760 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082754:	9b03      	ldr	r3, [sp, #12]
 8082756:	a904      	add	r1, sp, #16
 8082758:	f840 3b04 	str.w	r3, [r0], #4
 808275c:	f7ff feae 	bl	80824bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8082760:	4642      	mov	r2, r8
 8082762:	4639      	mov	r1, r7
 8082764:	4620      	mov	r0, r4
 8082766:	9600      	str	r6, [sp, #0]
 8082768:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 808276c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8082770:	f7ff fc00 	bl	8081f74 <spark_send_event>
 8082774:	b9b8      	cbnz	r0, 80827a6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 8082776:	9b03      	ldr	r3, [sp, #12]
 8082778:	785b      	ldrb	r3, [r3, #1]
 808277a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 808277e:	b993      	cbnz	r3, 80827a6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 8082780:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 8082784:	a905      	add	r1, sp, #20
 8082786:	a803      	add	r0, sp, #12
 8082788:	9205      	str	r2, [sp, #20]
 808278a:	f8ad 3018 	strh.w	r3, [sp, #24]
 808278e:	f7ff ff11 	bl	80825b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8082792:	a805      	add	r0, sp, #20
 8082794:	f7ff fe18 	bl	80823c8 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8082798:	a805      	add	r0, sp, #20
 808279a:	9909      	ldr	r1, [sp, #36]	; 0x24
 808279c:	f7ff fe95 	bl	80824ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80827a0:	a806      	add	r0, sp, #24
 80827a2:	f7ff fe75 	bl	8082490 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80827a6:	9b03      	ldr	r3, [sp, #12]
 80827a8:	a904      	add	r1, sp, #16
 80827aa:	a806      	add	r0, sp, #24
 80827ac:	9305      	str	r3, [sp, #20]
 80827ae:	f7ff fe85 	bl	80824bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80827b2:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80827b4:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80827b6:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80827b8:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80827ba:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80827bc:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80827be:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80827c0:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80827c2:	f7ff fe65 	bl	8082490 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80827c6:	a804      	add	r0, sp, #16
 80827c8:	f7ff fe62 	bl	8082490 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80827cc:	e7a2      	b.n	8082714 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80827ce:	bf00      	nop
 80827d0:	08082899 	.word	0x08082899

080827d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80827d4:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80827d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80827d8:	4605      	mov	r5, r0
	  switch (__op)
 80827da:	d007      	beq.n	80827ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80827dc:	2a03      	cmp	r2, #3
 80827de:	d018      	beq.n	8082812 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80827e0:	2a01      	cmp	r2, #1
 80827e2:	d101      	bne.n	80827e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80827e4:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80827e6:	6003      	str	r3, [r0, #0]
	}
 80827e8:	2000      	movs	r0, #0
 80827ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80827ec:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80827ee:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80827f0:	f7fd fc5b 	bl	80800aa <_Znwj>
 80827f4:	4604      	mov	r4, r0
 80827f6:	b150      	cbz	r0, 808280e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80827f8:	4631      	mov	r1, r6
 80827fa:	f7ff fecb 	bl	8082594 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80827fe:	6930      	ldr	r0, [r6, #16]
 8082800:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8082804:	b108      	cbz	r0, 808280a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 8082806:	f002 f867 	bl	80848d8 <strdup>
        type_(type) {
 808280a:	6120      	str	r0, [r4, #16]
 808280c:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 808280e:	602c      	str	r4, [r5, #0]
	}
 8082810:	e7ea      	b.n	80827e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 8082812:	6804      	ldr	r4, [r0, #0]
 8082814:	2c00      	cmp	r4, #0
 8082816:	d0e7      	beq.n	80827e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 8082818:	f104 0010 	add.w	r0, r4, #16
 808281c:	f7ff fdd4 	bl	80823c8 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8082820:	4620      	mov	r0, r4
 8082822:	f7fe fe80 	bl	8081526 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8082826:	2118      	movs	r1, #24
 8082828:	4620      	mov	r0, r4
 808282a:	f001 f840 	bl	80838ae <_ZdlPvj>
 808282e:	e7db      	b.n	80827e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

08082830 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8082830:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8082832:	2300      	movs	r3, #0
 8082834:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8082836:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8082838:	4604      	mov	r4, r0
 808283a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 808283c:	b12b      	cbz	r3, 808284a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808283e:	2202      	movs	r2, #2
 8082840:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8082842:	68eb      	ldr	r3, [r5, #12]
 8082844:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8082846:	68ab      	ldr	r3, [r5, #8]
 8082848:	60a3      	str	r3, [r4, #8]
    }
 808284a:	4620      	mov	r0, r4
 808284c:	bd38      	pop	{r3, r4, r5, pc}

0808284e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 808284e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8082850:	b570      	push	{r4, r5, r6, lr}
 8082852:	4604      	mov	r4, r0
	  switch (__op)
 8082854:	d007      	beq.n	8082866 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 8082856:	2a03      	cmp	r2, #3
 8082858:	d012      	beq.n	8082880 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 808285a:	2a01      	cmp	r2, #1
 808285c:	d101      	bne.n	8082862 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 808285e:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8082860:	6003      	str	r3, [r0, #0]
	}
 8082862:	2000      	movs	r0, #0
 8082864:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8082866:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 8082868:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 808286a:	f7fd fc1e 	bl	80800aa <_Znwj>
 808286e:	4605      	mov	r5, r0
 8082870:	b120      	cbz	r0, 808287c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 8082872:	4631      	mov	r1, r6
 8082874:	f7ff ffdc 	bl	8082830 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8082878:	7c33      	ldrb	r3, [r6, #16]
 808287a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 808287c:	6025      	str	r5, [r4, #0]
	}
 808287e:	e7f0      	b.n	8082862 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 8082880:	6804      	ldr	r4, [r0, #0]
 8082882:	2c00      	cmp	r4, #0
 8082884:	d0ed      	beq.n	8082862 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 8082886:	4620      	mov	r0, r4
 8082888:	f7fe fe4d 	bl	8081526 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 808288c:	2114      	movs	r1, #20
 808288e:	4620      	mov	r0, r4
 8082890:	f001 f80d 	bl	80838ae <_ZdlPvj>
 8082894:	e7e5      	b.n	8082862 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

08082898 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8082898:	b5f0      	push	{r4, r5, r6, r7, lr}
 808289a:	4604      	mov	r4, r0
 808289c:	b089      	sub	sp, #36	; 0x24
 808289e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80828a0:	a801      	add	r0, sp, #4
 80828a2:	4611      	mov	r1, r2
 80828a4:	f7ff fe11 	bl	80824ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80828a8:	b1a4      	cbz	r4, 80828d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80828aa:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80828ac:	b11d      	cbz	r5, 80828b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80828ae:	4628      	mov	r0, r5
 80828b0:	f002 f812 	bl	80848d8 <strdup>
 80828b4:	4605      	mov	r5, r0
 80828b6:	a801      	add	r0, sp, #4
 80828b8:	a903      	add	r1, sp, #12
        type_(type) {
 80828ba:	9503      	str	r5, [sp, #12]
 80828bc:	f8ad 4010 	strh.w	r4, [sp, #16]
 80828c0:	f7ff fe78 	bl	80825b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80828c4:	a803      	add	r0, sp, #12
 80828c6:	f7ff fd7f 	bl	80823c8 <_ZN8particle5ErrorD1Ev>
 80828ca:	a802      	add	r0, sp, #8
 80828cc:	f7ff fde0 	bl	8082490 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80828d0:	b009      	add	sp, #36	; 0x24
 80828d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80828d4:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80828d6:	9d01      	ldr	r5, [sp, #4]
 80828d8:	e8d5 2f4f 	ldrexb	r2, [r5]
 80828dc:	2a00      	cmp	r2, #0
 80828de:	d103      	bne.n	80828e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80828e0:	e8c5 3f41 	strexb	r1, r3, [r5]
 80828e4:	2900      	cmp	r1, #0
 80828e6:	d1f7      	bne.n	80828d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80828e8:	d1ef      	bne.n	80828ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80828ea:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80828ec:	f3bf 8f5b 	dmb	ish
 80828f0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80828f2:	f3bf 8f5b 	dmb	ish
 80828f6:	1d2b      	adds	r3, r5, #4
 80828f8:	e853 6f00 	ldrex	r6, [r3]
 80828fc:	e843 4200 	strex	r2, r4, [r3]
 8082900:	2a00      	cmp	r2, #0
 8082902:	d1f9      	bne.n	80828f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 8082904:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 8082908:	2e00      	cmp	r6, #0
 808290a:	d0de      	beq.n	80828ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 808290c:	4620      	mov	r0, r4
 808290e:	f7ff facb 	bl	8081ea8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 8082912:	4607      	mov	r7, r0
 8082914:	b160      	cbz	r0, 8082930 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8082916:	4630      	mov	r0, r6
 8082918:	f105 010c 	add.w	r1, r5, #12
 808291c:	f7ff fe15 	bl	808254a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 8082920:	4630      	mov	r0, r6
 8082922:	f7fe fe00 	bl	8081526 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 8082926:	2110      	movs	r1, #16
 8082928:	4630      	mov	r0, r6
 808292a:	f000 ffc0 	bl	80838ae <_ZdlPvj>
 808292e:	e7cc      	b.n	80828ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8082930:	4631      	mov	r1, r6
 8082932:	a803      	add	r0, sp, #12
 8082934:	f7ff ff7c 	bl	8082830 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8082938:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808293a:	2010      	movs	r0, #16
 808293c:	f88d 301c 	strb.w	r3, [sp, #28]
 8082940:	f7fd fbb3 	bl	80800aa <_Znwj>
 8082944:	4605      	mov	r5, r0
 8082946:	b1d0      	cbz	r0, 808297e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 8082948:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808294a:	2014      	movs	r0, #20
 808294c:	f7fd fbad 	bl	80800aa <_Znwj>
 8082950:	4604      	mov	r4, r0
 8082952:	b178      	cbz	r0, 8082974 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 8082954:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8082956:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8082958:	a803      	add	r0, sp, #12
 808295a:	f7ff fdd5 	bl	8082508 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808295e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8082960:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8082962:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082964:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 8082966:	9205      	str	r2, [sp, #20]
 8082968:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808296a:	60e3      	str	r3, [r4, #12]
 808296c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 8082970:	9206      	str	r2, [sp, #24]
 8082972:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 8082974:	4b06      	ldr	r3, [pc, #24]	; (8082990 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082976:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8082978:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808297a:	4b06      	ldr	r3, [pc, #24]	; (8082994 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 808297c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 808297e:	a803      	add	r0, sp, #12
 8082980:	f7fe fdd1 	bl	8081526 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8082984:	2200      	movs	r2, #0
 8082986:	4629      	mov	r1, r5
 8082988:	4803      	ldr	r0, [pc, #12]	; (8082998 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 808298a:	f7ff fa95 	bl	8081eb8 <application_thread_invoke>
 808298e:	e7c7      	b.n	8082920 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 8082990:	0808255d 	.word	0x0808255d
 8082994:	0808284f 	.word	0x0808284f
 8082998:	080820fb 	.word	0x080820fb

0808299c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 808299c:	4770      	bx	lr

0808299e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808299e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80829a0:	4606      	mov	r6, r0
 80829a2:	4615      	mov	r5, r2
 80829a4:	460c      	mov	r4, r1
 80829a6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80829a8:	42bc      	cmp	r4, r7
 80829aa:	d006      	beq.n	80829ba <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80829ac:	6833      	ldr	r3, [r6, #0]
 80829ae:	4630      	mov	r0, r6
 80829b0:	689b      	ldr	r3, [r3, #8]
 80829b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80829b6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80829b8:	e7f6      	b.n	80829a8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80829ba:	4628      	mov	r0, r5
 80829bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080829be <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80829be:	2200      	movs	r2, #0
 80829c0:	7c00      	ldrb	r0, [r0, #16]
 80829c2:	f7ff b969 	b.w	8081c98 <hal_i2c_write>

080829c6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80829c6:	2100      	movs	r1, #0
 80829c8:	7c00      	ldrb	r0, [r0, #16]
 80829ca:	f7ff b96d 	b.w	8081ca8 <hal_i2c_available>

080829ce <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80829ce:	2100      	movs	r1, #0
 80829d0:	7c00      	ldrb	r0, [r0, #16]
 80829d2:	f7ff b971 	b.w	8081cb8 <hal_i2c_read>

080829d6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80829d6:	2100      	movs	r1, #0
 80829d8:	7c00      	ldrb	r0, [r0, #16]
 80829da:	f7ff b975 	b.w	8081cc8 <hal_i2c_peek>

080829de <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80829de:	2100      	movs	r1, #0
 80829e0:	7c00      	ldrb	r0, [r0, #16]
 80829e2:	f7ff b979 	b.w	8081cd8 <hal_i2c_flush>

080829e6 <_ZN7TwoWireD0Ev>:
 80829e6:	b510      	push	{r4, lr}
 80829e8:	4604      	mov	r4, r0
 80829ea:	2114      	movs	r1, #20
 80829ec:	f000 ff5f 	bl	80838ae <_ZdlPvj>
 80829f0:	4620      	mov	r0, r4
 80829f2:	bd10      	pop	{r4, pc}

080829f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80829f4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80829f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80829fa:	4604      	mov	r4, r0
 80829fc:	4608      	mov	r0, r1
 80829fe:	2100      	movs	r1, #0
 8082a00:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8082a04:	4b03      	ldr	r3, [pc, #12]	; (8082a14 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 8082a06:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 8082a08:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 8082a0a:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 8082a0c:	f7ff f974 	bl	8081cf8 <hal_i2c_init>
}
 8082a10:	4620      	mov	r0, r4
 8082a12:	bd10      	pop	{r4, pc}
 8082a14:	08084f5c 	.word	0x08084f5c

08082a18 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8082a18:	2300      	movs	r3, #0
 8082a1a:	7c00      	ldrb	r0, [r0, #16]
 8082a1c:	461a      	mov	r2, r3
 8082a1e:	4619      	mov	r1, r3
 8082a20:	f7ff b922 	b.w	8081c68 <hal_i2c_begin>

08082a24 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 8082a24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 8082a26:	2200      	movs	r2, #0
 8082a28:	2314      	movs	r3, #20
 8082a2a:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8082a2e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 8082a32:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 8082a34:	7c00      	ldrb	r0, [r0, #16]
 8082a36:	f88d 3008 	strb.w	r3, [sp, #8]
 8082a3a:	684b      	ldr	r3, [r1, #4]
 8082a3c:	9303      	str	r3, [sp, #12]
 8082a3e:	68cb      	ldr	r3, [r1, #12]
 8082a40:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 8082a42:	7a0b      	ldrb	r3, [r1, #8]
 8082a44:	a901      	add	r1, sp, #4
 8082a46:	9305      	str	r3, [sp, #20]
 8082a48:	f7ff f96e 	bl	8081d28 <hal_i2c_request_ex>
}
 8082a4c:	b007      	add	sp, #28
 8082a4e:	f85d fb04 	ldr.w	pc, [sp], #4

08082a52 <_ZN7TwoWire11requestFromEhjh>:
{
 8082a52:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 8082a54:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8082a56:	f88d 1000 	strb.w	r1, [sp]
 8082a5a:	f04f 0164 	mov.w	r1, #100	; 0x64
 8082a5e:	bf18      	it	ne
 8082a60:	2301      	movne	r3, #1
 8082a62:	9103      	str	r1, [sp, #12]
 8082a64:	4669      	mov	r1, sp
    size_ = size;
 8082a66:	9201      	str	r2, [sp, #4]
 8082a68:	f88d 3008 	strb.w	r3, [sp, #8]
 8082a6c:	f7ff ffda 	bl	8082a24 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 8082a70:	b005      	add	sp, #20
 8082a72:	f85d fb04 	ldr.w	pc, [sp], #4

08082a76 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 8082a76:	2200      	movs	r2, #0
 8082a78:	7c00      	ldrb	r0, [r0, #16]
 8082a7a:	f7ff b8fd 	b.w	8081c78 <hal_i2c_begin_transmission>

08082a7e <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 8082a7e:	b2c9      	uxtb	r1, r1
 8082a80:	f7ff bff9 	b.w	8082a76 <_ZN7TwoWire17beginTransmissionEh>

08082a84 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 8082a84:	2200      	movs	r2, #0
 8082a86:	7c00      	ldrb	r0, [r0, #16]
 8082a88:	f7ff b8fe 	b.w	8081c88 <hal_i2c_end_transmission>

08082a8c <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 8082a8c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
 8082a8e:	2100      	movs	r1, #0
 8082a90:	7c00      	ldrb	r0, [r0, #16]
 8082a92:	f7ff f939 	bl	8081d08 <hal_i2c_lock>
}
 8082a96:	fab0 f080 	clz	r0, r0
 8082a9a:	0940      	lsrs	r0, r0, #5
 8082a9c:	bd08      	pop	{r3, pc}

08082a9e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 8082a9e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
 8082aa0:	2100      	movs	r1, #0
 8082aa2:	7c00      	ldrb	r0, [r0, #16]
 8082aa4:	f7ff f938 	bl	8081d18 <hal_i2c_unlock>
}
 8082aa8:	fab0 f080 	clz	r0, r0
 8082aac:	0940      	lsrs	r0, r0, #5
 8082aae:	bd08      	pop	{r3, pc}

08082ab0 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 8082ab0:	4700      	bx	r0
	...

08082ab4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 8082ab4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 8082ab8:	2400      	movs	r4, #0
{
 8082aba:	461d      	mov	r5, r3
 8082abc:	460f      	mov	r7, r1
 8082abe:	4690      	mov	r8, r2
 8082ac0:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
 8082ac2:	f7ff f8c1 	bl	8081c48 <HAL_Interrupts_Detach>
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8082ac6:	2304      	movs	r3, #4
  if (priority >= 0) {
 8082ac8:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8082aca:	f88d 300c 	strb.w	r3, [sp, #12]
    extra.IRQChannelSubPriority = subpriority;
 8082ace:	bfa8      	it	ge
 8082ad0:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    HAL_InterruptExtraConfiguration extra = {0};
 8082ad4:	f8ad 400d 	strh.w	r4, [sp, #13]
 8082ad8:	f88d 400f 	strb.w	r4, [sp, #15]
    return &extra;
 8082adc:	bfa4      	itt	ge
 8082ade:	ac03      	addge	r4, sp, #12
    extra.IRQChannelSubPriority = subpriority;
 8082ae0:	f88d 300e 	strbge.w	r3, [sp, #14]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8082ae4:	463a      	mov	r2, r7
 8082ae6:	4643      	mov	r3, r8
 8082ae8:	4630      	mov	r0, r6
 8082aea:	4906      	ldr	r1, [pc, #24]	; (8082b04 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
 8082aec:	9400      	str	r4, [sp, #0]
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 8082aee:	bfa8      	it	ge
 8082af0:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8082af4:	f7ff f8a0 	bl	8081c38 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 8082af8:	fab0 f080 	clz	r0, r0
 8082afc:	0940      	lsrs	r0, r0, #5
 8082afe:	b004      	add	sp, #16
 8082b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082b04:	08082ab1 	.word	0x08082ab1

08082b08 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
 8082b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082b0a:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
 8082b0c:	f7ff f89c 	bl	8081c48 <HAL_Interrupts_Detach>
 8082b10:	4605      	mov	r5, r0
 8082b12:	b970      	cbnz	r0, 8082b32 <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
 8082b14:	4f08      	ldr	r7, [pc, #32]	; (8082b38 <_Z15detachInterruptt+0x30>)
 8082b16:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
 8082b1a:	b146      	cbz	r6, 8082b2e <_Z15detachInterruptt+0x26>
 8082b1c:	4630      	mov	r0, r6
 8082b1e:	f7fe fd02 	bl	8081526 <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
 8082b22:	2110      	movs	r1, #16
 8082b24:	4630      	mov	r0, r6
 8082b26:	f000 fec2 	bl	80838ae <_ZdlPvj>
        handlers[pin] = nullptr;
 8082b2a:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
    }
    return true;
 8082b2e:	2001      	movs	r0, #1
 8082b30:	e000      	b.n	8082b34 <_Z15detachInterruptt+0x2c>
        return false;
 8082b32:	2000      	movs	r0, #0
}
 8082b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8082b36:	bf00      	nop
 8082b38:	20000240 	.word	0x20000240

08082b3c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8082b3c:	4770      	bx	lr

08082b3e <_ZN9IPAddressD0Ev>:
 8082b3e:	b510      	push	{r4, lr}
 8082b40:	4604      	mov	r4, r0
 8082b42:	2108      	movs	r1, #8
 8082b44:	f000 feb3 	bl	80838ae <_ZdlPvj>
 8082b48:	4620      	mov	r0, r4
 8082b4a:	bd10      	pop	{r4, pc}

08082b4c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8082b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082b4e:	460e      	mov	r6, r1
 8082b50:	2400      	movs	r4, #0
 8082b52:	f100 0708 	add.w	r7, r0, #8
 8082b56:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 8082b58:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 8082b5c:	220a      	movs	r2, #10
 8082b5e:	4630      	mov	r0, r6
 8082b60:	f000 f8cf 	bl	8082d02 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8082b64:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8082b66:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 8082b68:	d101      	bne.n	8082b6e <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 8082b6a:	4620      	mov	r0, r4
 8082b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 8082b6e:	2c00      	cmp	r4, #0
 8082b70:	d0f2      	beq.n	8082b58 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8082b72:	212e      	movs	r1, #46	; 0x2e
 8082b74:	4630      	mov	r0, r6
 8082b76:	f000 f8c1 	bl	8082cfc <_ZN5Print5printEc>
 8082b7a:	4404      	add	r4, r0
 8082b7c:	e7ec      	b.n	8082b58 <_ZNK9IPAddress7printToER5Print+0xc>
	...

08082b80 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 8082b80:	4a02      	ldr	r2, [pc, #8]	; (8082b8c <_ZN9IPAddressC1Ev+0xc>)
 8082b82:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8082b84:	2200      	movs	r2, #0
 8082b86:	6042      	str	r2, [r0, #4]
}
 8082b88:	4770      	bx	lr
 8082b8a:	bf00      	nop
 8082b8c:	08084f84 	.word	0x08084f84

08082b90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 8082b90:	4a02      	ldr	r2, [pc, #8]	; (8082b9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8082b92:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 8082b94:	680a      	ldr	r2, [r1, #0]
 8082b96:	6042      	str	r2, [r0, #4]
}
 8082b98:	4770      	bx	lr
 8082b9a:	bf00      	nop
 8082b9c:	08084f84 	.word	0x08084f84

08082ba0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 8082ba0:	4a01      	ldr	r2, [pc, #4]	; (8082ba8 <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 8082ba2:	e9c0 2100 	strd	r2, r1, [r0]
}
 8082ba6:	4770      	bx	lr
 8082ba8:	08084f84 	.word	0x08084f84

08082bac <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 8082bac:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8082bae:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8082bb2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8082bb6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8082bba:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8082bbe:	6044      	str	r4, [r0, #4]
}
 8082bc0:	bd10      	pop	{r4, pc}
	...

08082bc4 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8082bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082bc6:	4d04      	ldr	r5, [pc, #16]	; (8082bd8 <_ZN9IPAddressC1Ehhhh+0x14>)
 8082bc8:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8082bca:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8082bce:	9500      	str	r5, [sp, #0]
 8082bd0:	f7ff ffec 	bl	8082bac <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8082bd4:	b003      	add	sp, #12
 8082bd6:	bd30      	pop	{r4, r5, pc}
 8082bd8:	08084f84 	.word	0x08084f84

08082bdc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8082bdc:	4b01      	ldr	r3, [pc, #4]	; (8082be4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8082bde:	4a02      	ldr	r2, [pc, #8]	; (8082be8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8082be0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 8082be2:	4770      	bx	lr
 8082be4:	200002fc 	.word	0x200002fc
 8082be8:	08084f90 	.word	0x08084f90

08082bec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8082bec:	2300      	movs	r3, #0
 8082bee:	6840      	ldr	r0, [r0, #4]
 8082bf0:	461a      	mov	r2, r3
 8082bf2:	f7ff b9ef 	b.w	8081fd4 <network_connect>

08082bf6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8082bf6:	2200      	movs	r2, #0
 8082bf8:	2102      	movs	r1, #2
 8082bfa:	6840      	ldr	r0, [r0, #4]
 8082bfc:	f7ff b9fa 	b.w	8081ff4 <network_disconnect>

08082c00 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8082c00:	2200      	movs	r2, #0
 8082c02:	6840      	ldr	r0, [r0, #4]
 8082c04:	4611      	mov	r1, r2
 8082c06:	f7ff b9ed 	b.w	8081fe4 <network_connecting>

08082c0a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8082c0a:	2200      	movs	r2, #0
 8082c0c:	6840      	ldr	r0, [r0, #4]
 8082c0e:	4611      	mov	r1, r2
 8082c10:	f7ff b9f8 	b.w	8082004 <network_ready>

08082c14 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8082c14:	2300      	movs	r3, #0
 8082c16:	6840      	ldr	r0, [r0, #4]
 8082c18:	461a      	mov	r2, r3
 8082c1a:	4619      	mov	r1, r3
 8082c1c:	f7ff b9fa 	b.w	8082014 <network_on>

08082c20 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8082c20:	2300      	movs	r3, #0
 8082c22:	6840      	ldr	r0, [r0, #4]
 8082c24:	461a      	mov	r2, r3
 8082c26:	4619      	mov	r1, r3
 8082c28:	f7ff b9fc 	b.w	8082024 <network_off>

08082c2c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8082c2c:	2200      	movs	r2, #0
 8082c2e:	6840      	ldr	r0, [r0, #4]
 8082c30:	f081 0101 	eor.w	r1, r1, #1
 8082c34:	f7ff b9fe 	b.w	8082034 <network_listen>

08082c38 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8082c38:	2200      	movs	r2, #0
 8082c3a:	6840      	ldr	r0, [r0, #4]
 8082c3c:	f7ff ba0a 	b.w	8082054 <network_set_listen_timeout>

08082c40 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8082c40:	2200      	movs	r2, #0
 8082c42:	6840      	ldr	r0, [r0, #4]
 8082c44:	4611      	mov	r1, r2
 8082c46:	f7ff ba0d 	b.w	8082064 <network_get_listen_timeout>

08082c4a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8082c4a:	2200      	movs	r2, #0
 8082c4c:	6840      	ldr	r0, [r0, #4]
 8082c4e:	4611      	mov	r1, r2
 8082c50:	f7ff b9f8 	b.w	8082044 <network_listening>

08082c54 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8082c54:	b570      	push	{r4, r5, r6, lr}
 8082c56:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8082c58:	2600      	movs	r6, #0
 8082c5a:	b086      	sub	sp, #24
 8082c5c:	4604      	mov	r4, r0
    IPAddress addr;
 8082c5e:	a804      	add	r0, sp, #16
 8082c60:	f7ff ff8e 	bl	8082b80 <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082c64:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 8082c66:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082c68:	f001 fe51 	bl	808490e <strlen>
 8082c6c:	4b0a      	ldr	r3, [pc, #40]	; (8082c98 <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 8082c6e:	9600      	str	r6, [sp, #0]
 8082c70:	b281      	uxth	r1, r0
 8082c72:	685b      	ldr	r3, [r3, #4]
 8082c74:	4628      	mov	r0, r5
 8082c76:	aa03      	add	r2, sp, #12
 8082c78:	f7fe ff16 	bl	8081aa8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082c7c:	b130      	cbz	r0, 8082c8c <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8082c7e:	4631      	mov	r1, r6
 8082c80:	4620      	mov	r0, r4
 8082c82:	f7ff ff8d 	bl	8082ba0 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8082c86:	4620      	mov	r0, r4
 8082c88:	b006      	add	sp, #24
 8082c8a:	bd70      	pop	{r4, r5, r6, pc}
 8082c8c:	4620      	mov	r0, r4
 8082c8e:	a903      	add	r1, sp, #12
 8082c90:	f7ff ff7e 	bl	8082b90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 8082c94:	e7f7      	b.n	8082c86 <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 8082c96:	bf00      	nop
 8082c98:	20000210 	.word	0x20000210

08082c9c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8082c9c:	4b02      	ldr	r3, [pc, #8]	; (8082ca8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8082c9e:	4a03      	ldr	r2, [pc, #12]	; (8082cac <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8082ca0:	601a      	str	r2, [r3, #0]
 8082ca2:	2200      	movs	r2, #0
 8082ca4:	605a      	str	r2, [r3, #4]

} // spark
 8082ca6:	4770      	bx	lr
 8082ca8:	20000300 	.word	0x20000300
 8082cac:	08084f9c 	.word	0x08084f9c

08082cb0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8082cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082cb2:	4606      	mov	r6, r0
 8082cb4:	460d      	mov	r5, r1
  size_t n = 0;
 8082cb6:	2400      	movs	r4, #0
 8082cb8:	188f      	adds	r7, r1, r2
  while (size--) {
 8082cba:	42bd      	cmp	r5, r7
 8082cbc:	d00c      	beq.n	8082cd8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8082cbe:	6833      	ldr	r3, [r6, #0]
 8082cc0:	4630      	mov	r0, r6
 8082cc2:	689b      	ldr	r3, [r3, #8]
 8082cc4:	f815 1b01 	ldrb.w	r1, [r5], #1
 8082cc8:	4798      	blx	r3
     if (chunk>=0)
 8082cca:	1e03      	subs	r3, r0, #0
 8082ccc:	db01      	blt.n	8082cd2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8082cce:	441c      	add	r4, r3
  while (size--) {
 8082cd0:	e7f3      	b.n	8082cba <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8082cd2:	2c00      	cmp	r4, #0
 8082cd4:	bf08      	it	eq
 8082cd6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 8082cd8:	4620      	mov	r0, r4
 8082cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082cdc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 8082cdc:	b570      	push	{r4, r5, r6, lr}
 8082cde:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8082ce0:	460c      	mov	r4, r1
    }
 8082ce2:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8082ce4:	b149      	cbz	r1, 8082cfa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8082ce6:	f001 fe12 	bl	808490e <strlen>
 8082cea:	682b      	ldr	r3, [r5, #0]
 8082cec:	4602      	mov	r2, r0
 8082cee:	4621      	mov	r1, r4
 8082cf0:	4628      	mov	r0, r5
    }
 8082cf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 8082cf6:	68db      	ldr	r3, [r3, #12]
 8082cf8:	4718      	bx	r3
    }
 8082cfa:	bd70      	pop	{r4, r5, r6, pc}

08082cfc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8082cfc:	6803      	ldr	r3, [r0, #0]
 8082cfe:	689b      	ldr	r3, [r3, #8]
 8082d00:	4718      	bx	r3

08082d02 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8082d02:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8082d04:	2a01      	cmp	r2, #1
 8082d06:	bf98      	it	ls
 8082d08:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 8082d0a:	b530      	push	{r4, r5, lr}
 8082d0c:	b08b      	sub	sp, #44	; 0x2c
 8082d0e:	460c      	mov	r4, r1
  *str = '\0';
 8082d10:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 8082d14:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 8082d16:	4625      	mov	r5, r4
 8082d18:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 8082d1c:	fb04 5312 	mls	r3, r4, r2, r5
 8082d20:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8082d22:	2b09      	cmp	r3, #9
 8082d24:	bf94      	ite	ls
 8082d26:	3330      	addls	r3, #48	; 0x30
 8082d28:	3337      	addhi	r3, #55	; 0x37
 8082d2a:	b2db      	uxtb	r3, r3
  } while(n);
 8082d2c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8082d2e:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 8082d32:	d9f0      	bls.n	8082d16 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 8082d34:	f7ff ffd2 	bl	8082cdc <_ZN5Print5writeEPKc>
}
 8082d38:	b00b      	add	sp, #44	; 0x2c
 8082d3a:	bd30      	pop	{r4, r5, pc}

08082d3c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8082d3c:	b510      	push	{r4, lr}
 8082d3e:	4604      	mov	r4, r0
 8082d40:	f7fe fbf1 	bl	8081526 <_ZNSt14_Function_baseD1Ev>
 8082d44:	4620      	mov	r0, r4
 8082d46:	bd10      	pop	{r4, pc}

08082d48 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 8082d48:	2300      	movs	r3, #0
 8082d4a:	4803      	ldr	r0, [pc, #12]	; (8082d58 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8082d4c:	4a03      	ldr	r2, [pc, #12]	; (8082d5c <_GLOBAL__sub_I_RGB+0x14>)
 8082d4e:	4904      	ldr	r1, [pc, #16]	; (8082d60 <_GLOBAL__sub_I_RGB+0x18>)
 8082d50:	6083      	str	r3, [r0, #8]
 8082d52:	f000 bda7 	b.w	80838a4 <__aeabi_atexit>
 8082d56:	bf00      	nop
 8082d58:	20000308 	.word	0x20000308
 8082d5c:	20000100 	.word	0x20000100
 8082d60:	08082d3d 	.word	0x08082d3d

08082d64 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 8082d64:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 8082d66:	2600      	movs	r6, #0
 8082d68:	4604      	mov	r4, r0
 8082d6a:	460d      	mov	r5, r1
 8082d6c:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 8082d70:	f7fe feda 	bl	8081b28 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 8082d74:	4628      	mov	r0, r5
    _spi = spi;
 8082d76:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 8082d78:	f7fe ffde 	bl	8081d38 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 8082d7c:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 8082d7e:	6066      	str	r6, [r4, #4]
}
 8082d80:	bd70      	pop	{r4, r5, r6, pc}

08082d82 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8082d82:	b510      	push	{r4, lr}
 8082d84:	4604      	mov	r4, r0
{
	free(buffer);
 8082d86:	6800      	ldr	r0, [r0, #0]
 8082d88:	f7ff f97c 	bl	8082084 <free>
}
 8082d8c:	4620      	mov	r0, r4
 8082d8e:	bd10      	pop	{r4, pc}

08082d90 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8082d90:	b510      	push	{r4, lr}
 8082d92:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8082d94:	6800      	ldr	r0, [r0, #0]
 8082d96:	b108      	cbz	r0, 8082d9c <_ZN6String10invalidateEv+0xc>
 8082d98:	f7ff f974 	bl	8082084 <free>
	buffer = NULL;
 8082d9c:	2300      	movs	r3, #0
	capacity = len = 0;
 8082d9e:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 8082da2:	6023      	str	r3, [r4, #0]
}
 8082da4:	bd10      	pop	{r4, pc}

08082da6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8082da6:	b538      	push	{r3, r4, r5, lr}
 8082da8:	4604      	mov	r4, r0
 8082daa:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8082dac:	6800      	ldr	r0, [r0, #0]
 8082dae:	3101      	adds	r1, #1
 8082db0:	f7ff f970 	bl	8082094 <realloc>
	if (newbuffer) {
 8082db4:	b110      	cbz	r0, 8082dbc <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8082db6:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 8082dba:	2001      	movs	r0, #1
	}
	return 0;
}
 8082dbc:	bd38      	pop	{r3, r4, r5, pc}

08082dbe <_ZN6String7reserveEj>:
{
 8082dbe:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8082dc0:	6803      	ldr	r3, [r0, #0]
{
 8082dc2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8082dc4:	b123      	cbz	r3, 8082dd0 <_ZN6String7reserveEj+0x12>
 8082dc6:	6843      	ldr	r3, [r0, #4]
 8082dc8:	428b      	cmp	r3, r1
 8082dca:	d301      	bcc.n	8082dd0 <_ZN6String7reserveEj+0x12>
 8082dcc:	2001      	movs	r0, #1
}
 8082dce:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 8082dd0:	4620      	mov	r0, r4
 8082dd2:	f7ff ffe8 	bl	8082da6 <_ZN6String12changeBufferEj>
 8082dd6:	2800      	cmp	r0, #0
 8082dd8:	d0f9      	beq.n	8082dce <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 8082dda:	68a3      	ldr	r3, [r4, #8]
 8082ddc:	2b00      	cmp	r3, #0
 8082dde:	d1f5      	bne.n	8082dcc <_ZN6String7reserveEj+0xe>
 8082de0:	6822      	ldr	r2, [r4, #0]
 8082de2:	7013      	strb	r3, [r2, #0]
 8082de4:	e7f2      	b.n	8082dcc <_ZN6String7reserveEj+0xe>

08082de6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8082de6:	b570      	push	{r4, r5, r6, lr}
 8082de8:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8082dea:	4611      	mov	r1, r2
{
 8082dec:	4604      	mov	r4, r0
 8082dee:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8082df0:	f7ff ffe5 	bl	8082dbe <_ZN6String7reserveEj>
 8082df4:	b920      	cbnz	r0, 8082e00 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 8082df6:	4620      	mov	r0, r4
 8082df8:	f7ff ffca 	bl	8082d90 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 8082dfc:	4620      	mov	r0, r4
 8082dfe:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 8082e00:	462a      	mov	r2, r5
 8082e02:	4631      	mov	r1, r6
 8082e04:	6820      	ldr	r0, [r4, #0]
	len = length;
 8082e06:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8082e08:	f001 fd00 	bl	808480c <memcpy>
	buffer[len] = 0;
 8082e0c:	2100      	movs	r1, #0
 8082e0e:	6822      	ldr	r2, [r4, #0]
 8082e10:	68a3      	ldr	r3, [r4, #8]
 8082e12:	54d1      	strb	r1, [r2, r3]
	return *this;
 8082e14:	e7f2      	b.n	8082dfc <_ZN6String4copyEPKcj+0x16>

08082e16 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 8082e16:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 8082e18:	2300      	movs	r3, #0
String::String(const char *cstr)
 8082e1a:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 8082e1c:	460d      	mov	r5, r1
	capacity = 0;
 8082e1e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8082e22:	6083      	str	r3, [r0, #8]
	flags = 0;
 8082e24:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 8082e26:	b139      	cbz	r1, 8082e38 <_ZN6StringC1EPKc+0x22>
 8082e28:	4608      	mov	r0, r1
 8082e2a:	f001 fd70 	bl	808490e <strlen>
 8082e2e:	4629      	mov	r1, r5
 8082e30:	4602      	mov	r2, r0
 8082e32:	4620      	mov	r0, r4
 8082e34:	f7ff ffd7 	bl	8082de6 <_ZN6String4copyEPKcj>
}
 8082e38:	4620      	mov	r0, r4
 8082e3a:	bd38      	pop	{r3, r4, r5, pc}

08082e3c <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8082e3c:	4288      	cmp	r0, r1
{
 8082e3e:	b510      	push	{r4, lr}
 8082e40:	460b      	mov	r3, r1
 8082e42:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8082e44:	d004      	beq.n	8082e50 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8082e46:	6809      	ldr	r1, [r1, #0]
 8082e48:	b121      	cbz	r1, 8082e54 <_ZN6StringaSERKS_+0x18>
 8082e4a:	689a      	ldr	r2, [r3, #8]
 8082e4c:	f7ff ffcb 	bl	8082de6 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 8082e50:	4620      	mov	r0, r4
 8082e52:	bd10      	pop	{r4, pc}
	else invalidate();
 8082e54:	f7ff ff9c 	bl	8082d90 <_ZN6String10invalidateEv>
 8082e58:	e7fa      	b.n	8082e50 <_ZN6StringaSERKS_+0x14>

08082e5a <_ZN6StringC1ERKS_>:
	buffer = NULL;
 8082e5a:	2300      	movs	r3, #0
String::String(const String &value)
 8082e5c:	b510      	push	{r4, lr}
 8082e5e:	4604      	mov	r4, r0
	capacity = 0;
 8082e60:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8082e64:	6083      	str	r3, [r0, #8]
	flags = 0;
 8082e66:	7303      	strb	r3, [r0, #12]
	*this = value;
 8082e68:	f7ff ffe8 	bl	8082e3c <_ZN6StringaSERKS_>
}
 8082e6c:	4620      	mov	r0, r4
 8082e6e:	bd10      	pop	{r4, pc}

08082e70 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8082e70:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8082e72:	6882      	ldr	r2, [r0, #8]
 8082e74:	b93a      	cbnz	r2, 8082e86 <_ZNK6String6equalsEPKc+0x16>
 8082e76:	b121      	cbz	r1, 8082e82 <_ZNK6String6equalsEPKc+0x12>
 8082e78:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 8082e7a:	fab0 f080 	clz	r0, r0
 8082e7e:	0940      	lsrs	r0, r0, #5
 8082e80:	e000      	b.n	8082e84 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8082e82:	2001      	movs	r0, #1
}
 8082e84:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8082e86:	6800      	ldr	r0, [r0, #0]
 8082e88:	b909      	cbnz	r1, 8082e8e <_ZNK6String6equalsEPKc+0x1e>
 8082e8a:	7800      	ldrb	r0, [r0, #0]
 8082e8c:	e7f5      	b.n	8082e7a <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 8082e8e:	f001 fd11 	bl	80848b4 <strcmp>
 8082e92:	e7f2      	b.n	8082e7a <_ZNK6String6equalsEPKc+0xa>

08082e94 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 8082e94:	b558      	push	{r3, r4, r6, lr}
 8082e96:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 8082e98:	b12a      	cbz	r2, 8082ea6 <_ZNK6String8getBytesEPhjj+0x12>
 8082e9a:	b121      	cbz	r1, 8082ea6 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
 8082e9c:	6884      	ldr	r4, [r0, #8]
 8082e9e:	429c      	cmp	r4, r3
 8082ea0:	d802      	bhi.n	8082ea8 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 8082ea2:	2300      	movs	r3, #0
 8082ea4:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
 8082ea6:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
 8082ea8:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
 8082eaa:	3a01      	subs	r2, #1
	if (n > len - index) n = len - index;
 8082eac:	4294      	cmp	r4, r2
 8082eae:	bf28      	it	cs
 8082eb0:	4614      	movcs	r4, r2
	strncpy((char *)buf, buffer + index, n);
 8082eb2:	6801      	ldr	r1, [r0, #0]
 8082eb4:	4622      	mov	r2, r4
 8082eb6:	4419      	add	r1, r3
 8082eb8:	4630      	mov	r0, r6
 8082eba:	f001 fd30 	bl	808491e <strncpy>
	buf[n] = 0;
 8082ebe:	2300      	movs	r3, #0
 8082ec0:	5533      	strb	r3, [r6, r4]
 8082ec2:	e7f0      	b.n	8082ea6 <_ZNK6String8getBytesEPhjj+0x12>

08082ec4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 8082ec4:	b510      	push	{r4, lr}
 8082ec6:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8082ec8:	6800      	ldr	r0, [r0, #0]
 8082eca:	b118      	cbz	r0, 8082ed4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 8082ecc:	f7ff f8da 	bl	8082084 <free>
            wakeupSource_ = nullptr;
 8082ed0:	2300      	movs	r3, #0
 8082ed2:	6023      	str	r3, [r4, #0]
        }
    }
 8082ed4:	bd10      	pop	{r4, pc}

08082ed6 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8082ed6:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 8082ed8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8082edc:	460d      	mov	r5, r1
        error_ = result.error_;
 8082ede:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 8082ee0:	460b      	mov	r3, r1
 8082ee2:	f853 2f06 	ldr.w	r2, [r3, #6]!
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8082ee6:	4604      	mov	r4, r0
        compatResult_ = result.compatResult_;
 8082ee8:	f8c0 2006 	str.w	r2, [r0, #6]
 8082eec:	889b      	ldrh	r3, [r3, #4]
 8082eee:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 8082ef0:	f7ff ffe8 	bl	8082ec4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
 8082ef4:	682b      	ldr	r3, [r5, #0]
 8082ef6:	b113      	cbz	r3, 8082efe <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 8082ef8:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 8082efa:	2300      	movs	r3, #0
 8082efc:	602b      	str	r3, [r5, #0]
    }
 8082efe:	4620      	mov	r0, r4
 8082f00:	bd38      	pop	{r3, r4, r5, pc}

08082f02 <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
 8082f02:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SleepResult toSleepResult() {
 8082f06:	b510      	push	{r4, lr}
 8082f08:	680a      	ldr	r2, [r1, #0]
        if (error_ || wakeupSource_) {
 8082f0a:	b933      	cbnz	r3, 8082f1a <_ZN17SystemSleepResult13toSleepResultEv+0x18>
 8082f0c:	b932      	cbnz	r2, 8082f1c <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
 8082f0e:	f851 3f06 	ldr.w	r3, [r1, #6]!
 8082f12:	6003      	str	r3, [r0, #0]
 8082f14:	888b      	ldrh	r3, [r1, #4]
 8082f16:	8083      	strh	r3, [r0, #4]
    }
 8082f18:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
 8082f1a:	b122      	cbz	r2, 8082f26 <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
 8082f1c:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
 8082f1e:	2c01      	cmp	r4, #1
 8082f20:	d003      	beq.n	8082f2a <_ZN17SystemSleepResult13toSleepResultEv+0x28>
 8082f22:	2c04      	cmp	r4, #4
 8082f24:	d006      	beq.n	8082f34 <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 8082f26:	2204      	movs	r2, #4
 8082f28:	e005      	b.n	8082f36 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 8082f2a:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 8082f2c:	718c      	strb	r4, [r1, #6]
 8082f2e:	810b      	strh	r3, [r1, #8]
 8082f30:	814a      	strh	r2, [r1, #10]
                    break;
 8082f32:	e7ec      	b.n	8082f0e <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 8082f34:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 8082f36:	810b      	strh	r3, [r1, #8]
 8082f38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8082f3c:	718a      	strb	r2, [r1, #6]
 8082f3e:	814b      	strh	r3, [r1, #10]
                    break;
 8082f40:	e7e5      	b.n	8082f0e <_ZN17SystemSleepResult13toSleepResultEv+0xc>

08082f42 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 8082f42:	b507      	push	{r0, r1, r2, lr}
 8082f44:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 8082f46:	2100      	movs	r1, #0
{
 8082f48:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 8082f4a:	9100      	str	r1, [sp, #0]
 8082f4c:	2001      	movs	r0, #1
 8082f4e:	218c      	movs	r1, #140	; 0x8c
 8082f50:	f7fe ffd6 	bl	8081f00 <system_reset>
}
 8082f54:	b003      	add	sp, #12
 8082f56:	f85d fb04 	ldr.w	pc, [sp], #4

08082f5a <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 8082f5a:	4601      	mov	r1, r0
    reset(0, flags);
 8082f5c:	2000      	movs	r0, #0
 8082f5e:	f7ff bff0 	b.w	8082f42 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

08082f62 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 8082f62:	2000      	movs	r0, #0
 8082f64:	f7ff bff9 	b.w	8082f5a <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

08082f68 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8082f68:	b530      	push	{r4, r5, lr}
 8082f6a:	4604      	mov	r4, r0
 8082f6c:	b085      	sub	sp, #20
 8082f6e:	4608      	mov	r0, r1
 8082f70:	4611      	mov	r1, r2
 8082f72:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 8082f74:	2300      	movs	r3, #0
 8082f76:	f7fe ff87 	bl	8081e88 <system_sleep>
              compatResult_(r) {
 8082f7a:	2300      	movs	r3, #0
 8082f7c:	9301      	str	r3, [sp, #4]
 8082f7e:	f8ad 3008 	strh.w	r3, [sp, #8]
 8082f82:	f88d 300a 	strb.w	r3, [sp, #10]
 8082f86:	f64f 73ff 	movw	r3, #65535	; 0xffff
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
 8082f8a:	4d09      	ldr	r5, [pc, #36]	; (8082fb0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 8082f8c:	a901      	add	r1, sp, #4
 8082f8e:	f8ad 000c 	strh.w	r0, [sp, #12]
 8082f92:	4628      	mov	r0, r5
 8082f94:	f8ad 300e 	strh.w	r3, [sp, #14]
 8082f98:	f7ff ff9d 	bl	8082ed6 <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
 8082f9c:	a801      	add	r0, sp, #4
 8082f9e:	f7ff ff91 	bl	8082ec4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
 8082fa2:	4620      	mov	r0, r4
 8082fa4:	4629      	mov	r1, r5
 8082fa6:	f7ff ffac 	bl	8082f02 <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
 8082faa:	4620      	mov	r0, r4
 8082fac:	b005      	add	sp, #20
 8082fae:	bd30      	pop	{r4, r5, pc}
 8082fb0:	20000318 	.word	0x20000318

08082fb4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8082fb4:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 8082fb6:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8082fb8:	b510      	push	{r4, lr}
 8082fba:	4b08      	ldr	r3, [pc, #32]	; (8082fdc <_GLOBAL__sub_I_System+0x28>)
 8082fbc:	4c08      	ldr	r4, [pc, #32]	; (8082fe0 <_GLOBAL__sub_I_System+0x2c>)
 8082fbe:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 8082fc0:	4b08      	ldr	r3, [pc, #32]	; (8082fe4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 8082fc2:	6020      	str	r0, [r4, #0]
 8082fc4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 8082fc6:	71a0      	strb	r0, [r4, #6]
 8082fc8:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8082fca:	f7fe ff4d 	bl	8081e68 <set_system_mode>
SystemClass System;
 8082fce:	4620      	mov	r0, r4
 8082fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 8082fd4:	4a04      	ldr	r2, [pc, #16]	; (8082fe8 <_GLOBAL__sub_I_System+0x34>)
 8082fd6:	4905      	ldr	r1, [pc, #20]	; (8082fec <_GLOBAL__sub_I_System+0x38>)
 8082fd8:	f000 bc64 	b.w	80838a4 <__aeabi_atexit>
 8082fdc:	20000324 	.word	0x20000324
 8082fe0:	20000318 	.word	0x20000318
 8082fe4:	ffff0000 	.word	0xffff0000
 8082fe8:	20000100 	.word	0x20000100
 8082fec:	08080189 	.word	0x08080189

08082ff0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8082ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 8082ff4:	4a15      	ldr	r2, [pc, #84]	; (808304c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8082ff6:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8083058 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 8082ffa:	e9d2 3200 	ldrd	r3, r2, [r2]
 8082ffe:	18c0      	adds	r0, r0, r3
 8083000:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
 8083004:	4a12      	ldr	r2, [pc, #72]	; (8083050 <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 8083006:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 8083008:	e9d2 3200 	ldrd	r3, r2, [r2]
 808300c:	18c6      	adds	r6, r0, r3
 808300e:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
 8083012:	e9d8 2300 	ldrd	r2, r3, [r8]
 8083016:	42bb      	cmp	r3, r7
 8083018:	bf08      	it	eq
 808301a:	42b2      	cmpeq	r2, r6
 808301c:	d013      	beq.n	8083046 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 808301e:	a903      	add	r1, sp, #12
 8083020:	4668      	mov	r0, sp
 8083022:	e9cd 6700 	strd	r6, r7, [sp]
 8083026:	f7fc fffb 	bl	8080020 <localtime_r>
	calendar_time.tm_year += 1900;
 808302a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808302c:	4d09      	ldr	r5, [pc, #36]	; (8083054 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 808302e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8083032:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 8083034:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8083036:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8083038:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808303a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808303c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 808303e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8083042:	6823      	ldr	r3, [r4, #0]
 8083044:	602b      	str	r3, [r5, #0]
    }
}
 8083046:	b00c      	add	sp, #48	; 0x30
 8083048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808304c:	20000358 	.word	0x20000358
 8083050:	20000350 	.word	0x20000350
 8083054:	2000032c 	.word	0x2000032c
 8083058:	20000360 	.word	0x20000360

0808305c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
 808305c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
 808305e:	2000      	movs	r0, #0
 8083060:	f7fe ffa0 	bl	8081fa4 <spark_sync_time_pending>
 8083064:	b128      	cbz	r0, 8083072 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8083066:	f7fe ff75 	bl	8081f54 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 808306a:	f080 0001 	eor.w	r0, r0, #1
 808306e:	b2c0      	uxtb	r0, r0
    }
 8083070:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 8083072:	2001      	movs	r0, #1
 8083074:	e7fc      	b.n	8083070 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

08083078 <_ZN9TimeClass7weekdayEx>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
 8083078:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 808307a:	f7ff ffb9 	bl	8082ff0 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
 808307e:	4b02      	ldr	r3, [pc, #8]	; (8083088 <_ZN9TimeClass7weekdayEx+0x10>)
 8083080:	6998      	ldr	r0, [r3, #24]
}
 8083082:	3001      	adds	r0, #1
 8083084:	bd08      	pop	{r3, pc}
 8083086:	bf00      	nop
 8083088:	2000032c 	.word	0x2000032c

0808308c <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 808308c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 808308e:	f7ff ffaf 	bl	8082ff0 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 8083092:	4b02      	ldr	r3, [pc, #8]	; (808309c <_ZN9TimeClass5monthEx+0x10>)
 8083094:	6918      	ldr	r0, [r3, #16]
}
 8083096:	3001      	adds	r0, #1
 8083098:	bd08      	pop	{r3, pc}
 808309a:	bf00      	nop
 808309c:	2000032c 	.word	0x2000032c

080830a0 <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80830a0:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80830a2:	490a      	ldr	r1, [pc, #40]	; (80830cc <_ZN9TimeClass4zoneEf+0x2c>)
{
 80830a4:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80830a6:	f001 fb1d 	bl	80846e4 <__aeabi_fcmplt>
 80830aa:	b968      	cbnz	r0, 80830c8 <_ZN9TimeClass4zoneEf+0x28>
 80830ac:	4620      	mov	r0, r4
 80830ae:	4908      	ldr	r1, [pc, #32]	; (80830d0 <_ZN9TimeClass4zoneEf+0x30>)
 80830b0:	f001 fb36 	bl	8084720 <__aeabi_fcmpgt>
 80830b4:	b940      	cbnz	r0, 80830c8 <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80830b6:	4907      	ldr	r1, [pc, #28]	; (80830d4 <_ZN9TimeClass4zoneEf+0x34>)
 80830b8:	4620      	mov	r0, r4
 80830ba:	f001 f975 	bl	80843a8 <__aeabi_fmul>
 80830be:	f001 fb39 	bl	8084734 <__aeabi_f2lz>
 80830c2:	4b05      	ldr	r3, [pc, #20]	; (80830d8 <_ZN9TimeClass4zoneEf+0x38>)
 80830c4:	e9c3 0100 	strd	r0, r1, [r3]
}
 80830c8:	bd10      	pop	{r4, pc}
 80830ca:	bf00      	nop
 80830cc:	c1400000 	.word	0xc1400000
 80830d0:	41600000 	.word	0x41600000
 80830d4:	45610000 	.word	0x45610000
 80830d8:	20000358 	.word	0x20000358

080830dc <_ZN9TimeClass12setDSTOffsetEf>:
{
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
 80830dc:	b510      	push	{r4, lr}
    if (offset < 0 || offset > 2)
 80830de:	2100      	movs	r1, #0
{
 80830e0:	4604      	mov	r4, r0
    if (offset < 0 || offset > 2)
 80830e2:	f001 faff 	bl	80846e4 <__aeabi_fcmplt>
 80830e6:	b970      	cbnz	r0, 8083106 <_ZN9TimeClass12setDSTOffsetEf+0x2a>
 80830e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80830ec:	4620      	mov	r0, r4
 80830ee:	f001 fb17 	bl	8084720 <__aeabi_fcmpgt>
 80830f2:	b940      	cbnz	r0, 8083106 <_ZN9TimeClass12setDSTOffsetEf+0x2a>
    {
        return;
    }
    dst_cache = offset * 3600;
 80830f4:	4904      	ldr	r1, [pc, #16]	; (8083108 <_ZN9TimeClass12setDSTOffsetEf+0x2c>)
 80830f6:	4620      	mov	r0, r4
 80830f8:	f001 f956 	bl	80843a8 <__aeabi_fmul>
 80830fc:	f001 fb1a 	bl	8084734 <__aeabi_f2lz>
 8083100:	4b02      	ldr	r3, [pc, #8]	; (808310c <_ZN9TimeClass12setDSTOffsetEf+0x30>)
 8083102:	e9c3 0100 	strd	r0, r1, [r3]
}
 8083106:	bd10      	pop	{r4, pc}
 8083108:	45610000 	.word	0x45610000
 808310c:	20000090 	.word	0x20000090

08083110 <_ZN9TimeClass8beginDSTEv>:

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
 8083110:	4b03      	ldr	r3, [pc, #12]	; (8083120 <_ZN9TimeClass8beginDSTEv+0x10>)
 8083112:	e9d3 0100 	ldrd	r0, r1, [r3]
 8083116:	4b03      	ldr	r3, [pc, #12]	; (8083124 <_ZN9TimeClass8beginDSTEv+0x14>)
 8083118:	e9c3 0100 	strd	r0, r1, [r3]
}
 808311c:	4770      	bx	lr
 808311e:	bf00      	nop
 8083120:	20000090 	.word	0x20000090
 8083124:	20000350 	.word	0x20000350

08083128 <_ZN9TimeClass6endDSTEv>:

void TimeClass::endDST()
{
    dst_current_cache = 0;
 8083128:	2000      	movs	r0, #0
 808312a:	2100      	movs	r1, #0
 808312c:	4b01      	ldr	r3, [pc, #4]	; (8083134 <_ZN9TimeClass6endDSTEv+0xc>)
 808312e:	e9c3 0100 	strd	r0, r1, [r3]
}
 8083132:	4770      	bx	lr
 8083134:	20000350 	.word	0x20000350

08083138 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8083138:	b530      	push	{r4, r5, lr}
 808313a:	4604      	mov	r4, r0
    t += time_zone_cache;
 808313c:	4818      	ldr	r0, [pc, #96]	; (80831a0 <_ZN9TimeClass7timeStrEx+0x68>)
{
 808313e:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 8083140:	e9d0 1000 	ldrd	r1, r0, [r0]
 8083144:	1852      	adds	r2, r2, r1
 8083146:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 808314a:	4816      	ldr	r0, [pc, #88]	; (80831a4 <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 808314c:	2500      	movs	r5, #0
    t += dst_current_cache;
 808314e:	e9d0 1000 	ldrd	r1, r0, [r0]
 8083152:	1852      	adds	r2, r2, r1
 8083154:	eb40 0303 	adc.w	r3, r0, r3
 8083158:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 808315c:	2224      	movs	r2, #36	; 0x24
 808315e:	2100      	movs	r1, #0
 8083160:	eb0d 0002 	add.w	r0, sp, r2
 8083164:	f001 fb7a 	bl	808485c <memset>
    localtime_r(&t, &calendar_time);
 8083168:	a909      	add	r1, sp, #36	; 0x24
 808316a:	4668      	mov	r0, sp
 808316c:	f7fc ff58 	bl	8080020 <localtime_r>
    char ascstr[26] = {};
 8083170:	2216      	movs	r2, #22
 8083172:	4629      	mov	r1, r5
 8083174:	a803      	add	r0, sp, #12
 8083176:	9502      	str	r5, [sp, #8]
 8083178:	f001 fb70 	bl	808485c <memset>
    asctime_r(&calendar_time, ascstr);
 808317c:	a902      	add	r1, sp, #8
 808317e:	a809      	add	r0, sp, #36	; 0x24
 8083180:	f001 fb0c 	bl	808479c <asctime_r>
    int len = strlen(ascstr);
 8083184:	a802      	add	r0, sp, #8
 8083186:	f001 fbc2 	bl	808490e <strlen>
    ascstr[len-1] = 0; // remove final newline
 808318a:	ab12      	add	r3, sp, #72	; 0x48
 808318c:	4418      	add	r0, r3
 808318e:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 8083192:	a902      	add	r1, sp, #8
 8083194:	4620      	mov	r0, r4
 8083196:	f7ff fe3e 	bl	8082e16 <_ZN6StringC1EPKc>
}
 808319a:	4620      	mov	r0, r4
 808319c:	b013      	add	sp, #76	; 0x4c
 808319e:	bd30      	pop	{r4, r5, pc}
 80831a0:	20000358 	.word	0x20000358
 80831a4:	20000350 	.word	0x20000350

080831a8 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80831a8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80831aa:	2000      	movs	r0, #0
 80831ac:	f7fe fd04 	bl	8081bb8 <hal_rtc_time_is_valid>
    if (rtcstate)
 80831b0:	4604      	mov	r4, r0
 80831b2:	b9a0      	cbnz	r0, 80831de <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80831b4:	f7fe fe50 	bl	8081e58 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80831b8:	2801      	cmp	r0, #1
 80831ba:	d110      	bne.n	80831de <_ZN9TimeClass7isValidEv+0x36>
 80831bc:	4620      	mov	r0, r4
 80831be:	f7fe fe83 	bl	8081ec8 <system_thread_get_state>
 80831c2:	b960      	cbnz	r0, 80831de <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80831c4:	f7ff ff4a 	bl	808305c <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80831c8:	b910      	cbnz	r0, 80831d0 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80831ca:	f7fe feb3 	bl	8081f34 <spark_process>
        while (_while() && !_condition()) {
 80831ce:	e7f9      	b.n	80831c4 <_ZN9TimeClass7isValidEv+0x1c>
 80831d0:	f7ff ff44 	bl	808305c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80831d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80831d8:	2000      	movs	r0, #0
 80831da:	f7fe bced 	b.w	8081bb8 <hal_rtc_time_is_valid>
}
 80831de:	4620      	mov	r0, r4
 80831e0:	bd10      	pop	{r4, pc}

080831e2 <_ZN9TimeClass3nowEv>:
{
 80831e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80831e4:	f7ff ffe0 	bl	80831a8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80831e8:	2210      	movs	r2, #16
 80831ea:	2100      	movs	r1, #0
 80831ec:	4668      	mov	r0, sp
 80831ee:	f001 fb35 	bl	808485c <memset>
    hal_rtc_get_time(&tv, nullptr);
 80831f2:	2100      	movs	r1, #0
 80831f4:	4668      	mov	r0, sp
 80831f6:	f7fe fcef 	bl	8081bd8 <hal_rtc_get_time>
}
 80831fa:	9800      	ldr	r0, [sp, #0]
 80831fc:	b005      	add	sp, #20
 80831fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08083204 <_ZN9TimeClass4hourEv>:
{
 8083204:	b508      	push	{r3, lr}
	return hour(now());
 8083206:	f7ff ffec 	bl	80831e2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 808320a:	17c1      	asrs	r1, r0, #31
 808320c:	f7ff fef0 	bl	8082ff0 <_ZL22Refresh_UnixTime_Cachex>
}
 8083210:	4b01      	ldr	r3, [pc, #4]	; (8083218 <_ZN9TimeClass4hourEv+0x14>)
 8083212:	6898      	ldr	r0, [r3, #8]
 8083214:	bd08      	pop	{r3, pc}
 8083216:	bf00      	nop
 8083218:	2000032c 	.word	0x2000032c

0808321c <_ZN9TimeClass3dayEv>:
{
 808321c:	b508      	push	{r3, lr}
	return day(now());
 808321e:	f7ff ffe0 	bl	80831e2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 8083222:	17c1      	asrs	r1, r0, #31
 8083224:	f7ff fee4 	bl	8082ff0 <_ZL22Refresh_UnixTime_Cachex>
}
 8083228:	4b01      	ldr	r3, [pc, #4]	; (8083230 <_ZN9TimeClass3dayEv+0x14>)
 808322a:	68d8      	ldr	r0, [r3, #12]
 808322c:	bd08      	pop	{r3, pc}
 808322e:	bf00      	nop
 8083230:	2000032c 	.word	0x2000032c

08083234 <_ZN9TimeClass7weekdayEv>:
{
 8083234:	b508      	push	{r3, lr}
	return weekday(now());
 8083236:	f7ff ffd4 	bl	80831e2 <_ZN9TimeClass3nowEv>
}
 808323a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return weekday(now());
 808323e:	17c1      	asrs	r1, r0, #31
 8083240:	f7ff bf1a 	b.w	8083078 <_ZN9TimeClass7weekdayEx>

08083244 <_ZN9TimeClass5monthEv>:
{
 8083244:	b508      	push	{r3, lr}
	return month(now());
 8083246:	f7ff ffcc 	bl	80831e2 <_ZN9TimeClass3nowEv>
}
 808324a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 808324e:	17c1      	asrs	r1, r0, #31
 8083250:	f7ff bf1c 	b.w	808308c <_ZN9TimeClass5monthEx>

08083254 <_ZN9TimeClass5localEv>:
{
 8083254:	b508      	push	{r3, lr}
	return now() + time_zone_cache + dst_current_cache;
 8083256:	f7ff ffc4 	bl	80831e2 <_ZN9TimeClass3nowEv>
 808325a:	4b03      	ldr	r3, [pc, #12]	; (8083268 <_ZN9TimeClass5localEv+0x14>)
 808325c:	4a03      	ldr	r2, [pc, #12]	; (808326c <_ZN9TimeClass5localEv+0x18>)
 808325e:	681b      	ldr	r3, [r3, #0]
 8083260:	6812      	ldr	r2, [r2, #0]
 8083262:	4413      	add	r3, r2
}
 8083264:	4418      	add	r0, r3
 8083266:	bd08      	pop	{r3, pc}
 8083268:	20000358 	.word	0x20000358
 808326c:	20000350 	.word	0x20000350

08083270 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8083270:	4b02      	ldr	r3, [pc, #8]	; (808327c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8083272:	681a      	ldr	r2, [r3, #0]
 8083274:	4b02      	ldr	r3, [pc, #8]	; (8083280 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8083276:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 8083278:	4770      	bx	lr
 808327a:	bf00      	nop
 808327c:	2000008c 	.word	0x2000008c
 8083280:	20000328 	.word	0x20000328

08083284 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 8083284:	4770      	bx	lr

08083286 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8083286:	7441      	strb	r1, [r0, #17]
}
 8083288:	4770      	bx	lr

0808328a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 808328a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 808328c:	7c00      	ldrb	r0, [r0, #16]
 808328e:	f7fe fd9b 	bl	8081dc8 <hal_usart_available_data_for_write>
}
 8083292:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8083296:	bd08      	pop	{r3, pc}

08083298 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8083298:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 808329a:	7c00      	ldrb	r0, [r0, #16]
 808329c:	f7fe fd6c 	bl	8081d78 <hal_usart_available>
}
 80832a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80832a4:	bd08      	pop	{r3, pc}

080832a6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80832a6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80832a8:	7c00      	ldrb	r0, [r0, #16]
 80832aa:	f7fe fd75 	bl	8081d98 <hal_usart_peek>
}
 80832ae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80832b2:	bd08      	pop	{r3, pc}

080832b4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80832b4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80832b6:	7c00      	ldrb	r0, [r0, #16]
 80832b8:	f7fe fd66 	bl	8081d88 <hal_usart_read>
}
 80832bc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80832c0:	bd08      	pop	{r3, pc}

080832c2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80832c2:	7c00      	ldrb	r0, [r0, #16]
 80832c4:	f7fe bd70 	b.w	8081da8 <hal_usart_flush>

080832c8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80832c8:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80832ca:	7c46      	ldrb	r6, [r0, #17]
{
 80832cc:	4604      	mov	r4, r0
 80832ce:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80832d0:	b12e      	cbz	r6, 80832de <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80832d2:	4629      	mov	r1, r5
 80832d4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80832d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80832da:	f7fe bd45 	b.w	8081d68 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80832de:	7c00      	ldrb	r0, [r0, #16]
 80832e0:	f7fe fd72 	bl	8081dc8 <hal_usart_available_data_for_write>
 80832e4:	2800      	cmp	r0, #0
 80832e6:	dcf4      	bgt.n	80832d2 <_ZN11USARTSerial5writeEh+0xa>
}
 80832e8:	4630      	mov	r0, r6
 80832ea:	bd70      	pop	{r4, r5, r6, pc}

080832ec <_ZN11USARTSerialD0Ev>:
 80832ec:	b510      	push	{r4, lr}
 80832ee:	4604      	mov	r4, r0
 80832f0:	2114      	movs	r1, #20
 80832f2:	f000 fadc 	bl	80838ae <_ZdlPvj>
 80832f6:	4620      	mov	r0, r4
 80832f8:	bd10      	pop	{r4, pc}
	...

080832fc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80832fc:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8083300:	b510      	push	{r4, lr}
 8083302:	4604      	mov	r4, r0
 8083304:	4608      	mov	r0, r1
 8083306:	4611      	mov	r1, r2
 8083308:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808330c:	e9c4 c201 	strd	ip, r2, [r4, #4]
 8083310:	4a04      	ldr	r2, [pc, #16]	; (8083324 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 8083312:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8083314:	6022      	str	r2, [r4, #0]
  _blocking = true;
 8083316:	2201      	movs	r2, #1
 8083318:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 808331a:	461a      	mov	r2, r3
 808331c:	f7fe fd1c 	bl	8081d58 <hal_usart_init>
}
 8083320:	4620      	mov	r0, r4
 8083322:	bd10      	pop	{r4, pc}
 8083324:	08084fec 	.word	0x08084fec

08083328 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8083328:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 808332a:	4d0d      	ldr	r5, [pc, #52]	; (8083360 <_Z22__fetch_global_Serial1v+0x38>)
 808332c:	7829      	ldrb	r1, [r5, #0]
 808332e:	f3bf 8f5b 	dmb	ish
 8083332:	f011 0401 	ands.w	r4, r1, #1
 8083336:	d111      	bne.n	808335c <_Z22__fetch_global_Serial1v+0x34>
 8083338:	4628      	mov	r0, r5
 808333a:	f7fc fec7 	bl	80800cc <__cxa_guard_acquire>
 808333e:	b168      	cbz	r0, 808335c <_Z22__fetch_global_Serial1v+0x34>
 8083340:	4621      	mov	r1, r4
 8083342:	4a08      	ldr	r2, [pc, #32]	; (8083364 <_Z22__fetch_global_Serial1v+0x3c>)
 8083344:	4b08      	ldr	r3, [pc, #32]	; (8083368 <_Z22__fetch_global_Serial1v+0x40>)
 8083346:	4809      	ldr	r0, [pc, #36]	; (808336c <_Z22__fetch_global_Serial1v+0x44>)
 8083348:	f7ff ffd8 	bl	80832fc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 808334c:	4628      	mov	r0, r5
 808334e:	f7fc fec2 	bl	80800d6 <__cxa_guard_release>
 8083352:	4a07      	ldr	r2, [pc, #28]	; (8083370 <_Z22__fetch_global_Serial1v+0x48>)
 8083354:	4907      	ldr	r1, [pc, #28]	; (8083374 <_Z22__fetch_global_Serial1v+0x4c>)
 8083356:	4805      	ldr	r0, [pc, #20]	; (808336c <_Z22__fetch_global_Serial1v+0x44>)
 8083358:	f000 faa4 	bl	80838a4 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 808335c:	4803      	ldr	r0, [pc, #12]	; (808336c <_Z22__fetch_global_Serial1v+0x44>)
 808335e:	bd38      	pop	{r3, r4, r5, pc}
 8083360:	20000368 	.word	0x20000368
 8083364:	2000036c 	.word	0x2000036c
 8083368:	200003f0 	.word	0x200003f0
 808336c:	20000474 	.word	0x20000474
 8083370:	20000100 	.word	0x20000100
 8083374:	08083285 	.word	0x08083285

08083378 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8083378:	7441      	strb	r1, [r0, #17]
}
 808337a:	4770      	bx	lr

0808337c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 808337c:	4770      	bx	lr

0808337e <_ZN9USBSerial4readEv>:
{
 808337e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8083380:	2100      	movs	r1, #0
 8083382:	7c00      	ldrb	r0, [r0, #16]
 8083384:	f7fe fd40 	bl	8081e08 <HAL_USB_USART_Receive_Data>
}
 8083388:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808338c:	bd08      	pop	{r3, pc}

0808338e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 808338e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8083390:	2101      	movs	r1, #1
 8083392:	7c00      	ldrb	r0, [r0, #16]
 8083394:	f7fe fd38 	bl	8081e08 <HAL_USB_USART_Receive_Data>
}
 8083398:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808339c:	bd08      	pop	{r3, pc}

0808339e <_ZN9USBSerial17availableForWriteEv>:
{
 808339e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80833a0:	7c00      	ldrb	r0, [r0, #16]
 80833a2:	f7fe fd29 	bl	8081df8 <HAL_USB_USART_Available_Data_For_Write>
}
 80833a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80833aa:	bd08      	pop	{r3, pc}

080833ac <_ZN9USBSerial9availableEv>:
{
 80833ac:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80833ae:	7c00      	ldrb	r0, [r0, #16]
 80833b0:	f7fe fd1a 	bl	8081de8 <HAL_USB_USART_Available_Data>
}
 80833b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80833b8:	bd08      	pop	{r3, pc}

080833ba <_ZN9USBSerial5writeEh>:
{
 80833ba:	b538      	push	{r3, r4, r5, lr}
 80833bc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80833be:	7c00      	ldrb	r0, [r0, #16]
{
 80833c0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80833c2:	f7fe fd19 	bl	8081df8 <HAL_USB_USART_Available_Data_For_Write>
 80833c6:	2800      	cmp	r0, #0
 80833c8:	dc01      	bgt.n	80833ce <_ZN9USBSerial5writeEh+0x14>
 80833ca:	7c60      	ldrb	r0, [r4, #17]
 80833cc:	b128      	cbz	r0, 80833da <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80833ce:	4629      	mov	r1, r5
 80833d0:	7c20      	ldrb	r0, [r4, #16]
 80833d2:	f7fe fd21 	bl	8081e18 <HAL_USB_USART_Send_Data>
 80833d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80833da:	bd38      	pop	{r3, r4, r5, pc}

080833dc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80833dc:	7c00      	ldrb	r0, [r0, #16]
 80833de:	f7fe bd23 	b.w	8081e28 <HAL_USB_USART_Flush_Data>

080833e2 <_ZN9USBSerialD0Ev>:
 80833e2:	b510      	push	{r4, lr}
 80833e4:	4604      	mov	r4, r0
 80833e6:	2114      	movs	r1, #20
 80833e8:	f000 fa61 	bl	80838ae <_ZdlPvj>
 80833ec:	4620      	mov	r0, r4
 80833ee:	bd10      	pop	{r4, pc}

080833f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80833f0:	b510      	push	{r4, lr}
 80833f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80833f6:	4604      	mov	r4, r0
 80833f8:	4608      	mov	r0, r1
 80833fa:	2100      	movs	r1, #0
 80833fc:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8083400:	4b04      	ldr	r3, [pc, #16]	; (8083414 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 8083402:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8083404:	6023      	str	r3, [r4, #0]
  _blocking = true;
 8083406:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 8083408:	4611      	mov	r1, r2
  _blocking = true;
 808340a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 808340c:	f7fe fce4 	bl	8081dd8 <HAL_USB_USART_Init>
}
 8083410:	4620      	mov	r0, r4
 8083412:	bd10      	pop	{r4, pc}
 8083414:	0808501c 	.word	0x0808501c

08083418 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8083418:	b510      	push	{r4, lr}
 808341a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808341c:	2214      	movs	r2, #20
 808341e:	2100      	movs	r1, #0
 8083420:	f001 fa1c 	bl	808485c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8083424:	4b05      	ldr	r3, [pc, #20]	; (808343c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8083426:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 8083428:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 808342a:	4b05      	ldr	r3, [pc, #20]	; (8083440 <_Z19acquireSerialBufferv+0x28>)
 808342c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808342e:	f240 1301 	movw	r3, #257	; 0x101
 8083432:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8083434:	2381      	movs	r3, #129	; 0x81
 8083436:	8223      	strh	r3, [r4, #16]
}
 8083438:	bd10      	pop	{r4, pc}
 808343a:	bf00      	nop
 808343c:	200004b8 	.word	0x200004b8
 8083440:	200005b9 	.word	0x200005b9

08083444 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8083444:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8083446:	4d0f      	ldr	r5, [pc, #60]	; (8083484 <_Z16_fetch_usbserialv+0x40>)
{
 8083448:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 808344a:	a801      	add	r0, sp, #4
 808344c:	f7ff ffe4 	bl	8083418 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8083450:	7829      	ldrb	r1, [r5, #0]
 8083452:	f3bf 8f5b 	dmb	ish
 8083456:	f011 0401 	ands.w	r4, r1, #1
 808345a:	d110      	bne.n	808347e <_Z16_fetch_usbserialv+0x3a>
 808345c:	4628      	mov	r0, r5
 808345e:	f7fc fe35 	bl	80800cc <__cxa_guard_acquire>
 8083462:	b160      	cbz	r0, 808347e <_Z16_fetch_usbserialv+0x3a>
 8083464:	4621      	mov	r1, r4
 8083466:	aa01      	add	r2, sp, #4
 8083468:	4807      	ldr	r0, [pc, #28]	; (8083488 <_Z16_fetch_usbserialv+0x44>)
 808346a:	f7ff ffc1 	bl	80833f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808346e:	4628      	mov	r0, r5
 8083470:	f7fc fe31 	bl	80800d6 <__cxa_guard_release>
 8083474:	4a05      	ldr	r2, [pc, #20]	; (808348c <_Z16_fetch_usbserialv+0x48>)
 8083476:	4906      	ldr	r1, [pc, #24]	; (8083490 <_Z16_fetch_usbserialv+0x4c>)
 8083478:	4803      	ldr	r0, [pc, #12]	; (8083488 <_Z16_fetch_usbserialv+0x44>)
 808347a:	f000 fa13 	bl	80838a4 <__aeabi_atexit>
	return _usbserial;
}
 808347e:	4802      	ldr	r0, [pc, #8]	; (8083488 <_Z16_fetch_usbserialv+0x44>)
 8083480:	b007      	add	sp, #28
 8083482:	bd30      	pop	{r4, r5, pc}
 8083484:	20000488 	.word	0x20000488
 8083488:	20000490 	.word	0x20000490
 808348c:	20000100 	.word	0x20000100
 8083490:	0808337d 	.word	0x0808337d

08083494 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8083494:	b510      	push	{r4, lr}
 8083496:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8083498:	2214      	movs	r2, #20
 808349a:	2100      	movs	r1, #0
 808349c:	f001 f9de 	bl	808485c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80834a0:	4b05      	ldr	r3, [pc, #20]	; (80834b8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80834a2:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80834a4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80834a6:	4b05      	ldr	r3, [pc, #20]	; (80834bc <_Z23acquireUSBSerial1Bufferv+0x28>)
 80834a8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80834aa:	f240 1301 	movw	r3, #257	; 0x101
 80834ae:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80834b0:	2381      	movs	r3, #129	; 0x81
 80834b2:	8223      	strh	r3, [r4, #16]
}
 80834b4:	bd10      	pop	{r4, pc}
 80834b6:	bf00      	nop
 80834b8:	2000063a 	.word	0x2000063a
 80834bc:	2000073b 	.word	0x2000073b

080834c0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80834c0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80834c2:	4c0f      	ldr	r4, [pc, #60]	; (8083500 <_Z17_fetch_usbserial1v+0x40>)
{
 80834c4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80834c6:	a801      	add	r0, sp, #4
 80834c8:	f7ff ffe4 	bl	8083494 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80834cc:	7823      	ldrb	r3, [r4, #0]
 80834ce:	f3bf 8f5b 	dmb	ish
 80834d2:	07db      	lsls	r3, r3, #31
 80834d4:	d410      	bmi.n	80834f8 <_Z17_fetch_usbserial1v+0x38>
 80834d6:	4620      	mov	r0, r4
 80834d8:	f7fc fdf8 	bl	80800cc <__cxa_guard_acquire>
 80834dc:	b160      	cbz	r0, 80834f8 <_Z17_fetch_usbserial1v+0x38>
 80834de:	2101      	movs	r1, #1
 80834e0:	aa01      	add	r2, sp, #4
 80834e2:	4808      	ldr	r0, [pc, #32]	; (8083504 <_Z17_fetch_usbserial1v+0x44>)
 80834e4:	f7ff ff84 	bl	80833f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80834e8:	4620      	mov	r0, r4
 80834ea:	f7fc fdf4 	bl	80800d6 <__cxa_guard_release>
 80834ee:	4a06      	ldr	r2, [pc, #24]	; (8083508 <_Z17_fetch_usbserial1v+0x48>)
 80834f0:	4906      	ldr	r1, [pc, #24]	; (808350c <_Z17_fetch_usbserial1v+0x4c>)
 80834f2:	4804      	ldr	r0, [pc, #16]	; (8083504 <_Z17_fetch_usbserial1v+0x44>)
 80834f4:	f000 f9d6 	bl	80838a4 <__aeabi_atexit>
  return _usbserial1;
}
 80834f8:	4802      	ldr	r0, [pc, #8]	; (8083504 <_Z17_fetch_usbserial1v+0x44>)
 80834fa:	b006      	add	sp, #24
 80834fc:	bd10      	pop	{r4, pc}
 80834fe:	bf00      	nop
 8083500:	2000048c 	.word	0x2000048c
 8083504:	200004a4 	.word	0x200004a4
 8083508:	20000100 	.word	0x20000100
 808350c:	0808337d 	.word	0x0808337d

08083510 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 8083510:	4b01      	ldr	r3, [pc, #4]	; (8083518 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 8083512:	6018      	str	r0, [r3, #0]
    }, nullptr);
 8083514:	4770      	bx	lr
 8083516:	bf00      	nop
 8083518:	20000098 	.word	0x20000098

0808351c <serialEventRun>:
{
 808351c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 808351e:	4b17      	ldr	r3, [pc, #92]	; (808357c <serialEventRun+0x60>)
 8083520:	b143      	cbz	r3, 8083534 <serialEventRun+0x18>
 8083522:	f7ff ff8f 	bl	8083444 <_Z16_fetch_usbserialv>
 8083526:	6803      	ldr	r3, [r0, #0]
 8083528:	691b      	ldr	r3, [r3, #16]
 808352a:	4798      	blx	r3
 808352c:	2800      	cmp	r0, #0
 808352e:	dd01      	ble.n	8083534 <serialEventRun+0x18>
        serialEvent();
 8083530:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 8083534:	4b12      	ldr	r3, [pc, #72]	; (8083580 <serialEventRun+0x64>)
 8083536:	b143      	cbz	r3, 808354a <serialEventRun+0x2e>
 8083538:	f7ff fef6 	bl	8083328 <_Z22__fetch_global_Serial1v>
 808353c:	6803      	ldr	r3, [r0, #0]
 808353e:	691b      	ldr	r3, [r3, #16]
 8083540:	4798      	blx	r3
 8083542:	2800      	cmp	r0, #0
 8083544:	dd01      	ble.n	808354a <serialEventRun+0x2e>
        serialEvent1();
 8083546:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 808354a:	4b0e      	ldr	r3, [pc, #56]	; (8083584 <serialEventRun+0x68>)
 808354c:	b10b      	cbz	r3, 8083552 <serialEventRun+0x36>
 808354e:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 8083552:	4b0d      	ldr	r3, [pc, #52]	; (8083588 <serialEventRun+0x6c>)
 8083554:	b10b      	cbz	r3, 808355a <serialEventRun+0x3e>
 8083556:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 808355a:	4b0c      	ldr	r3, [pc, #48]	; (808358c <serialEventRun+0x70>)
 808355c:	b10b      	cbz	r3, 8083562 <serialEventRun+0x46>
 808355e:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8083562:	4b0b      	ldr	r3, [pc, #44]	; (8083590 <serialEventRun+0x74>)
 8083564:	b143      	cbz	r3, 8083578 <serialEventRun+0x5c>
 8083566:	f7ff ffab 	bl	80834c0 <_Z17_fetch_usbserial1v>
 808356a:	6803      	ldr	r3, [r0, #0]
 808356c:	691b      	ldr	r3, [r3, #16]
 808356e:	4798      	blx	r3
 8083570:	2800      	cmp	r0, #0
 8083572:	dd01      	ble.n	8083578 <serialEventRun+0x5c>
        usbSerialEvent1();
 8083574:	f3af 8000 	nop.w
}
 8083578:	bd08      	pop	{r3, pc}
 808357a:	bf00      	nop
	...

08083594 <_post_loop>:
{
 8083594:	b508      	push	{r3, lr}
	serialEventRun();
 8083596:	f7ff ffc1 	bl	808351c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808359a:	f7fe fb05 	bl	8081ba8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808359e:	4b01      	ldr	r3, [pc, #4]	; (80835a4 <_post_loop+0x10>)
 80835a0:	6018      	str	r0, [r3, #0]
}
 80835a2:	bd08      	pop	{r3, pc}
 80835a4:	200007d4 	.word	0x200007d4

080835a8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80835a8:	4802      	ldr	r0, [pc, #8]	; (80835b4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80835aa:	4a03      	ldr	r2, [pc, #12]	; (80835b8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80835ac:	4903      	ldr	r1, [pc, #12]	; (80835bc <_Z33system_initialize_user_backup_ramv+0x14>)
 80835ae:	1a12      	subs	r2, r2, r0
 80835b0:	f001 b92c 	b.w	808480c <memcpy>
 80835b4:	40024000 	.word	0x40024000
 80835b8:	40024804 	.word	0x40024804
 80835bc:	080851d0 	.word	0x080851d0

080835c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80835c0:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80835c2:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80835c4:	461a      	mov	r2, r3
 80835c6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80835ca:	9300      	str	r3, [sp, #0]
 80835cc:	f7fe fc8e 	bl	8081eec <system_ctrl_set_result>
}
 80835d0:	b003      	add	sp, #12
 80835d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080835d8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80835d8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80835da:	8843      	ldrh	r3, [r0, #2]
 80835dc:	2b0a      	cmp	r3, #10
 80835de:	d008      	beq.n	80835f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80835e0:	2b50      	cmp	r3, #80	; 0x50
 80835e2:	d10b      	bne.n	80835fc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80835e4:	4b09      	ldr	r3, [pc, #36]	; (808360c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80835e6:	681b      	ldr	r3, [r3, #0]
 80835e8:	b14b      	cbz	r3, 80835fe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80835ea:	b003      	add	sp, #12
 80835ec:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80835f0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80835f2:	f7ff ffe5 	bl	80835c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80835f6:	b003      	add	sp, #12
 80835f8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80835fc:	2300      	movs	r3, #0
 80835fe:	461a      	mov	r2, r3
 8083600:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8083604:	9300      	str	r3, [sp, #0]
 8083606:	f7fe fc71 	bl	8081eec <system_ctrl_set_result>
}
 808360a:	e7f4      	b.n	80835f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 808360c:	200007c0 	.word	0x200007c0

08083610 <module_user_init_hook>:
{
 8083610:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8083612:	4c12      	ldr	r4, [pc, #72]	; (808365c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8083614:	2100      	movs	r1, #0
 8083616:	4812      	ldr	r0, [pc, #72]	; (8083660 <module_user_init_hook+0x50>)
 8083618:	f7fe fd64 	bl	80820e4 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 808361c:	4d11      	ldr	r5, [pc, #68]	; (8083664 <module_user_init_hook+0x54>)
 808361e:	6823      	ldr	r3, [r4, #0]
 8083620:	42ab      	cmp	r3, r5
 8083622:	bf0c      	ite	eq
 8083624:	2201      	moveq	r2, #1
 8083626:	2200      	movne	r2, #0
 8083628:	4b0f      	ldr	r3, [pc, #60]	; (8083668 <module_user_init_hook+0x58>)
 808362a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 808362c:	d002      	beq.n	8083634 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 808362e:	f7ff ffbb 	bl	80835a8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8083632:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8083634:	f7fe faa0 	bl	8081b78 <HAL_RNG_GetRandomNumber>
 8083638:	4604      	mov	r4, r0
    srand(seed);
 808363a:	f001 f917 	bl	808486c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 808363e:	4b0b      	ldr	r3, [pc, #44]	; (808366c <module_user_init_hook+0x5c>)
 8083640:	b113      	cbz	r3, 8083648 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 8083642:	4620      	mov	r0, r4
 8083644:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8083648:	2100      	movs	r1, #0
 808364a:	4808      	ldr	r0, [pc, #32]	; (808366c <module_user_init_hook+0x5c>)
 808364c:	f7fe fcb2 	bl	8081fb4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8083650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8083654:	2100      	movs	r1, #0
 8083656:	4806      	ldr	r0, [pc, #24]	; (8083670 <module_user_init_hook+0x60>)
 8083658:	f7fe bc3e 	b.w	8081ed8 <system_ctrl_set_app_request_handler>
 808365c:	40024800 	.word	0x40024800
 8083660:	08083511 	.word	0x08083511
 8083664:	9a271c1e 	.word	0x9a271c1e
 8083668:	200007bc 	.word	0x200007bc
 808366c:	00000000 	.word	0x00000000
 8083670:	080835d9 	.word	0x080835d9

08083674 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
 8083674:	b508      	push	{r3, lr}
 8083676:	4b02      	ldr	r3, [pc, #8]	; (8083680 <spark_protocol_instance+0xc>)
 8083678:	681b      	ldr	r3, [r3, #0]
 808367a:	681b      	ldr	r3, [r3, #0]
 808367c:	9301      	str	r3, [sp, #4]
 808367e:	bd08      	pop	{r3, pc}
 8083680:	0802019c 	.word	0x0802019c

08083684 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
 8083684:	b508      	push	{r3, lr}
 8083686:	4b02      	ldr	r3, [pc, #8]	; (8083690 <spark_protocol_set_product_id+0xc>)
 8083688:	681b      	ldr	r3, [r3, #0]
 808368a:	685b      	ldr	r3, [r3, #4]
 808368c:	9301      	str	r3, [sp, #4]
 808368e:	bd08      	pop	{r3, pc}
 8083690:	0802019c 	.word	0x0802019c

08083694 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
 8083694:	b508      	push	{r3, lr}
 8083696:	4b02      	ldr	r3, [pc, #8]	; (80836a0 <spark_protocol_set_product_firmware_version+0xc>)
 8083698:	681b      	ldr	r3, [r3, #0]
 808369a:	689b      	ldr	r3, [r3, #8]
 808369c:	9301      	str	r3, [sp, #4]
 808369e:	bd08      	pop	{r3, pc}
 80836a0:	0802019c 	.word	0x0802019c

080836a4 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80836a4:	b510      	push	{r4, lr}
 80836a6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80836a8:	6880      	ldr	r0, [r0, #8]
 80836aa:	b108      	cbz	r0, 80836b0 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80836ac:	f7fe fa44 	bl	8081b38 <os_mutex_recursive_destroy>
 80836b0:	4620      	mov	r0, r4
 80836b2:	bd10      	pop	{r4, pc}

080836b4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80836b4:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 80836b6:	b570      	push	{r4, r5, r6, lr}
 80836b8:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80836ba:	d901      	bls.n	80836c0 <pinAvailable+0xc>
    return false;
 80836bc:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80836be:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80836c0:	f1a0 030d 	sub.w	r3, r0, #13
 80836c4:	2b02      	cmp	r3, #2
 80836c6:	d90b      	bls.n	80836e0 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80836c8:	2801      	cmp	r0, #1
 80836ca:	d826      	bhi.n	808371a <pinAvailable+0x66>
 80836cc:	f000 f8aa 	bl	8083824 <_Z19__fetch_global_Wirev>
 80836d0:	2100      	movs	r1, #0
 80836d2:	7c00      	ldrb	r0, [r0, #16]
 80836d4:	f7fe fb08 	bl	8081ce8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80836d8:	f080 0001 	eor.w	r0, r0, #1
 80836dc:	b2c0      	uxtb	r0, r0
 80836de:	e7ee      	b.n	80836be <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80836e0:	4e13      	ldr	r6, [pc, #76]	; (8083730 <pinAvailable+0x7c>)
 80836e2:	7831      	ldrb	r1, [r6, #0]
 80836e4:	f3bf 8f5b 	dmb	ish
 80836e8:	f011 0501 	ands.w	r5, r1, #1
 80836ec:	d10f      	bne.n	808370e <pinAvailable+0x5a>
 80836ee:	4630      	mov	r0, r6
 80836f0:	f7fc fcec 	bl	80800cc <__cxa_guard_acquire>
 80836f4:	b158      	cbz	r0, 808370e <pinAvailable+0x5a>
 80836f6:	4629      	mov	r1, r5
 80836f8:	480e      	ldr	r0, [pc, #56]	; (8083734 <pinAvailable+0x80>)
 80836fa:	f7ff fb33 	bl	8082d64 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80836fe:	4630      	mov	r0, r6
 8083700:	f7fc fce9 	bl	80800d6 <__cxa_guard_release>
 8083704:	4a0c      	ldr	r2, [pc, #48]	; (8083738 <pinAvailable+0x84>)
 8083706:	490d      	ldr	r1, [pc, #52]	; (808373c <pinAvailable+0x88>)
 8083708:	480a      	ldr	r0, [pc, #40]	; (8083734 <pinAvailable+0x80>)
 808370a:	f000 f8cb 	bl	80838a4 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 808370e:	4b09      	ldr	r3, [pc, #36]	; (8083734 <pinAvailable+0x80>)
 8083710:	7818      	ldrb	r0, [r3, #0]
 8083712:	f7fe fb19 	bl	8081d48 <hal_spi_is_enabled>
 8083716:	2800      	cmp	r0, #0
 8083718:	d1d0      	bne.n	80836bc <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 808371a:	3c12      	subs	r4, #18
 808371c:	2c01      	cmp	r4, #1
 808371e:	d805      	bhi.n	808372c <pinAvailable+0x78>
 8083720:	f7ff fe02 	bl	8083328 <_Z22__fetch_global_Serial1v>
 8083724:	7c00      	ldrb	r0, [r0, #16]
 8083726:	f7fe fb47 	bl	8081db8 <hal_usart_is_enabled>
 808372a:	e7d5      	b.n	80836d8 <pinAvailable+0x24>
  return true; // 'pin' is available
 808372c:	2001      	movs	r0, #1
 808372e:	e7c6      	b.n	80836be <pinAvailable+0xa>
 8083730:	200007c4 	.word	0x200007c4
 8083734:	200007c8 	.word	0x200007c8
 8083738:	20000100 	.word	0x20000100
 808373c:	080836a5 	.word	0x080836a5

08083740 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8083740:	282e      	cmp	r0, #46	; 0x2e
{
 8083742:	b538      	push	{r3, r4, r5, lr}
 8083744:	4604      	mov	r4, r0
 8083746:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8083748:	d80a      	bhi.n	8083760 <pinMode+0x20>
 808374a:	29ff      	cmp	r1, #255	; 0xff
 808374c:	d008      	beq.n	8083760 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 808374e:	f7ff ffb1 	bl	80836b4 <pinAvailable>
 8083752:	b128      	cbz	r0, 8083760 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 8083754:	4629      	mov	r1, r5
 8083756:	4620      	mov	r0, r4
}
 8083758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 808375c:	f7fe ba4c 	b.w	8081bf8 <HAL_Pin_Mode>
}
 8083760:	bd38      	pop	{r3, r4, r5, pc}

08083762 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8083762:	b538      	push	{r3, r4, r5, lr}
 8083764:	4604      	mov	r4, r0
 8083766:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8083768:	f7fe fa4e 	bl	8081c08 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 808376c:	28ff      	cmp	r0, #255	; 0xff
 808376e:	d010      	beq.n	8083792 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 8083770:	2806      	cmp	r0, #6
 8083772:	d804      	bhi.n	808377e <digitalWrite+0x1c>
 8083774:	234d      	movs	r3, #77	; 0x4d
 8083776:	fa23 f000 	lsr.w	r0, r3, r0
 808377a:	07c3      	lsls	r3, r0, #31
 808377c:	d409      	bmi.n	8083792 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 808377e:	4620      	mov	r0, r4
 8083780:	f7ff ff98 	bl	80836b4 <pinAvailable>
 8083784:	b128      	cbz	r0, 8083792 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8083786:	4629      	mov	r1, r5
 8083788:	4620      	mov	r0, r4
}
 808378a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 808378e:	f7fe ba43 	b.w	8081c18 <HAL_GPIO_Write>
}
 8083792:	bd38      	pop	{r3, r4, r5, pc}

08083794 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 8083794:	b510      	push	{r4, lr}
 8083796:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8083798:	f7fe fa36 	bl	8081c08 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 808379c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 808379e:	b2db      	uxtb	r3, r3
 80837a0:	2b01      	cmp	r3, #1
 80837a2:	d908      	bls.n	80837b6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80837a4:	4620      	mov	r0, r4
 80837a6:	f7ff ff85 	bl	80836b4 <pinAvailable>
 80837aa:	b120      	cbz	r0, 80837b6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80837ac:	4620      	mov	r0, r4
}
 80837ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80837b2:	f7fe ba39 	b.w	8081c28 <HAL_GPIO_Read>
}
 80837b6:	2000      	movs	r0, #0
 80837b8:	bd10      	pop	{r4, pc}

080837ba <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80837ba:	b510      	push	{r4, lr}
 80837bc:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80837be:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80837c0:	bf9c      	itt	ls
 80837c2:	340a      	addls	r4, #10
 80837c4:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80837c6:	4620      	mov	r0, r4
 80837c8:	f7ff ff74 	bl	80836b4 <pinAvailable>
 80837cc:	b150      	cbz	r0, 80837e4 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80837ce:	2103      	movs	r1, #3
 80837d0:	4620      	mov	r0, r4
 80837d2:	f7fe fa09 	bl	8081be8 <HAL_Validate_Pin_Function>
 80837d6:	2803      	cmp	r0, #3
 80837d8:	d104      	bne.n	80837e4 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80837da:	4620      	mov	r0, r4
}
 80837dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80837e0:	f7fe ba3a 	b.w	8081c58 <hal_adc_read>
}
 80837e4:	2000      	movs	r0, #0
 80837e6:	bd10      	pop	{r4, pc}

080837e8 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80837e8:	2300      	movs	r3, #0
hal_i2c_config_t defaultWireConfig() {
 80837ea:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80837ec:	2520      	movs	r5, #32
 80837ee:	8043      	strh	r3, [r0, #2]
 80837f0:	2314      	movs	r3, #20
		.size = sizeof(hal_i2c_config_t),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80837f2:	4e08      	ldr	r6, [pc, #32]	; (8083814 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x2c>)
hal_i2c_config_t defaultWireConfig() {
 80837f4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80837f6:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80837f8:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80837fa:	6085      	str	r5, [r0, #8]
 80837fc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80837fe:	4628      	mov	r0, r5
 8083800:	f000 f859 	bl	80838b6 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083804:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8083806:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083808:	4628      	mov	r0, r5
 808380a:	f000 f854 	bl	80838b6 <_ZnajRKSt9nothrow_t>
	};
 808380e:	60e0      	str	r0, [r4, #12]

	return config;
}
 8083810:	4620      	mov	r0, r4
 8083812:	bd70      	pop	{r4, r5, r6, pc}
 8083814:	08085044 	.word	0x08085044

08083818 <_Z17acquireWireBufferv>:

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 8083818:	b510      	push	{r4, lr}
 808381a:	4604      	mov	r4, r0
	return defaultWireConfig();
 808381c:	f7ff ffe4 	bl	80837e8 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 8083820:	4620      	mov	r0, r4
 8083822:	bd10      	pop	{r4, pc}

08083824 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 8083824:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8083826:	4d0f      	ldr	r5, [pc, #60]	; (8083864 <_Z19__fetch_global_Wirev+0x40>)
{
 8083828:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808382a:	7829      	ldrb	r1, [r5, #0]
 808382c:	f3bf 8f5b 	dmb	ish
 8083830:	f011 0401 	ands.w	r4, r1, #1
 8083834:	d113      	bne.n	808385e <_Z19__fetch_global_Wirev+0x3a>
 8083836:	4628      	mov	r0, r5
 8083838:	f7fc fc48 	bl	80800cc <__cxa_guard_acquire>
 808383c:	b178      	cbz	r0, 808385e <_Z19__fetch_global_Wirev+0x3a>
 808383e:	a801      	add	r0, sp, #4
 8083840:	f7ff ffea 	bl	8083818 <_Z17acquireWireBufferv>
 8083844:	4621      	mov	r1, r4
 8083846:	aa01      	add	r2, sp, #4
 8083848:	4807      	ldr	r0, [pc, #28]	; (8083868 <_Z19__fetch_global_Wirev+0x44>)
 808384a:	f7ff f8d3 	bl	80829f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 808384e:	4628      	mov	r0, r5
 8083850:	f7fc fc41 	bl	80800d6 <__cxa_guard_release>
 8083854:	4a05      	ldr	r2, [pc, #20]	; (808386c <_Z19__fetch_global_Wirev+0x48>)
 8083856:	4906      	ldr	r1, [pc, #24]	; (8083870 <_Z19__fetch_global_Wirev+0x4c>)
 8083858:	4803      	ldr	r0, [pc, #12]	; (8083868 <_Z19__fetch_global_Wirev+0x44>)
 808385a:	f000 f823 	bl	80838a4 <__aeabi_atexit>
	return wire;
}
 808385e:	4802      	ldr	r0, [pc, #8]	; (8083868 <_Z19__fetch_global_Wirev+0x44>)
 8083860:	b007      	add	sp, #28
 8083862:	bd30      	pop	{r4, r5, pc}
 8083864:	200007d8 	.word	0x200007d8
 8083868:	200007dc 	.word	0x200007dc
 808386c:	20000100 	.word	0x20000100
 8083870:	0808299d 	.word	0x0808299d

08083874 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8083874:	2300      	movs	r3, #0
 8083876:	b513      	push	{r0, r1, r4, lr}
 8083878:	4c07      	ldr	r4, [pc, #28]	; (8083898 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 808387a:	461a      	mov	r2, r3
 808387c:	4619      	mov	r1, r3
 808387e:	4620      	mov	r0, r4
 8083880:	9300      	str	r3, [sp, #0]
 8083882:	f7ff f99f 	bl	8082bc4 <_ZN9IPAddressC1Ehhhh>
 8083886:	4620      	mov	r0, r4
 8083888:	4a04      	ldr	r2, [pc, #16]	; (808389c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 808388a:	4905      	ldr	r1, [pc, #20]	; (80838a0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 808388c:	b002      	add	sp, #8
 808388e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8083892:	f000 b807 	b.w	80838a4 <__aeabi_atexit>
 8083896:	bf00      	nop
 8083898:	200007f0 	.word	0x200007f0
 808389c:	20000100 	.word	0x20000100
 80838a0:	08082b3d 	.word	0x08082b3d

080838a4 <__aeabi_atexit>:
 80838a4:	460b      	mov	r3, r1
 80838a6:	4601      	mov	r1, r0
 80838a8:	4618      	mov	r0, r3
 80838aa:	f000 bfa1 	b.w	80847f0 <__cxa_atexit>

080838ae <_ZdlPvj>:
 80838ae:	f7fc bc00 	b.w	80800b2 <_ZdlPv>

080838b2 <_ZnwjRKSt9nothrow_t>:
 80838b2:	f7fc bbfa 	b.w	80800aa <_Znwj>

080838b6 <_ZnajRKSt9nothrow_t>:
 80838b6:	f7fc bbfa 	b.w	80800ae <_Znaj>

080838ba <_ZSt25__throw_bad_function_callv>:
 80838ba:	b508      	push	{r3, lr}
 80838bc:	f7fe fc02 	bl	80820c4 <abort>

080838c0 <__aeabi_drsub>:
 80838c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80838c4:	e002      	b.n	80838cc <__adddf3>
 80838c6:	bf00      	nop

080838c8 <__aeabi_dsub>:
 80838c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080838cc <__adddf3>:
 80838cc:	b530      	push	{r4, r5, lr}
 80838ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80838d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80838d6:	ea94 0f05 	teq	r4, r5
 80838da:	bf08      	it	eq
 80838dc:	ea90 0f02 	teqeq	r0, r2
 80838e0:	bf1f      	itttt	ne
 80838e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80838e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80838ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80838ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80838f2:	f000 80e2 	beq.w	8083aba <__adddf3+0x1ee>
 80838f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80838fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80838fe:	bfb8      	it	lt
 8083900:	426d      	neglt	r5, r5
 8083902:	dd0c      	ble.n	808391e <__adddf3+0x52>
 8083904:	442c      	add	r4, r5
 8083906:	ea80 0202 	eor.w	r2, r0, r2
 808390a:	ea81 0303 	eor.w	r3, r1, r3
 808390e:	ea82 0000 	eor.w	r0, r2, r0
 8083912:	ea83 0101 	eor.w	r1, r3, r1
 8083916:	ea80 0202 	eor.w	r2, r0, r2
 808391a:	ea81 0303 	eor.w	r3, r1, r3
 808391e:	2d36      	cmp	r5, #54	; 0x36
 8083920:	bf88      	it	hi
 8083922:	bd30      	pophi	{r4, r5, pc}
 8083924:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8083928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808392c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8083930:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8083934:	d002      	beq.n	808393c <__adddf3+0x70>
 8083936:	4240      	negs	r0, r0
 8083938:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808393c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8083940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083944:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8083948:	d002      	beq.n	8083950 <__adddf3+0x84>
 808394a:	4252      	negs	r2, r2
 808394c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8083950:	ea94 0f05 	teq	r4, r5
 8083954:	f000 80a7 	beq.w	8083aa6 <__adddf3+0x1da>
 8083958:	f1a4 0401 	sub.w	r4, r4, #1
 808395c:	f1d5 0e20 	rsbs	lr, r5, #32
 8083960:	db0d      	blt.n	808397e <__adddf3+0xb2>
 8083962:	fa02 fc0e 	lsl.w	ip, r2, lr
 8083966:	fa22 f205 	lsr.w	r2, r2, r5
 808396a:	1880      	adds	r0, r0, r2
 808396c:	f141 0100 	adc.w	r1, r1, #0
 8083970:	fa03 f20e 	lsl.w	r2, r3, lr
 8083974:	1880      	adds	r0, r0, r2
 8083976:	fa43 f305 	asr.w	r3, r3, r5
 808397a:	4159      	adcs	r1, r3
 808397c:	e00e      	b.n	808399c <__adddf3+0xd0>
 808397e:	f1a5 0520 	sub.w	r5, r5, #32
 8083982:	f10e 0e20 	add.w	lr, lr, #32
 8083986:	2a01      	cmp	r2, #1
 8083988:	fa03 fc0e 	lsl.w	ip, r3, lr
 808398c:	bf28      	it	cs
 808398e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8083992:	fa43 f305 	asr.w	r3, r3, r5
 8083996:	18c0      	adds	r0, r0, r3
 8083998:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 808399c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80839a0:	d507      	bpl.n	80839b2 <__adddf3+0xe6>
 80839a2:	f04f 0e00 	mov.w	lr, #0
 80839a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80839aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80839ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80839b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80839b6:	d31b      	bcc.n	80839f0 <__adddf3+0x124>
 80839b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80839bc:	d30c      	bcc.n	80839d8 <__adddf3+0x10c>
 80839be:	0849      	lsrs	r1, r1, #1
 80839c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80839c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80839c8:	f104 0401 	add.w	r4, r4, #1
 80839cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80839d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80839d4:	f080 809a 	bcs.w	8083b0c <__adddf3+0x240>
 80839d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80839dc:	bf08      	it	eq
 80839de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80839e2:	f150 0000 	adcs.w	r0, r0, #0
 80839e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80839ea:	ea41 0105 	orr.w	r1, r1, r5
 80839ee:	bd30      	pop	{r4, r5, pc}
 80839f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80839f4:	4140      	adcs	r0, r0
 80839f6:	eb41 0101 	adc.w	r1, r1, r1
 80839fa:	3c01      	subs	r4, #1
 80839fc:	bf28      	it	cs
 80839fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8083a02:	d2e9      	bcs.n	80839d8 <__adddf3+0x10c>
 8083a04:	f091 0f00 	teq	r1, #0
 8083a08:	bf04      	itt	eq
 8083a0a:	4601      	moveq	r1, r0
 8083a0c:	2000      	moveq	r0, #0
 8083a0e:	fab1 f381 	clz	r3, r1
 8083a12:	bf08      	it	eq
 8083a14:	3320      	addeq	r3, #32
 8083a16:	f1a3 030b 	sub.w	r3, r3, #11
 8083a1a:	f1b3 0220 	subs.w	r2, r3, #32
 8083a1e:	da0c      	bge.n	8083a3a <__adddf3+0x16e>
 8083a20:	320c      	adds	r2, #12
 8083a22:	dd08      	ble.n	8083a36 <__adddf3+0x16a>
 8083a24:	f102 0c14 	add.w	ip, r2, #20
 8083a28:	f1c2 020c 	rsb	r2, r2, #12
 8083a2c:	fa01 f00c 	lsl.w	r0, r1, ip
 8083a30:	fa21 f102 	lsr.w	r1, r1, r2
 8083a34:	e00c      	b.n	8083a50 <__adddf3+0x184>
 8083a36:	f102 0214 	add.w	r2, r2, #20
 8083a3a:	bfd8      	it	le
 8083a3c:	f1c2 0c20 	rsble	ip, r2, #32
 8083a40:	fa01 f102 	lsl.w	r1, r1, r2
 8083a44:	fa20 fc0c 	lsr.w	ip, r0, ip
 8083a48:	bfdc      	itt	le
 8083a4a:	ea41 010c 	orrle.w	r1, r1, ip
 8083a4e:	4090      	lslle	r0, r2
 8083a50:	1ae4      	subs	r4, r4, r3
 8083a52:	bfa2      	ittt	ge
 8083a54:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8083a58:	4329      	orrge	r1, r5
 8083a5a:	bd30      	popge	{r4, r5, pc}
 8083a5c:	ea6f 0404 	mvn.w	r4, r4
 8083a60:	3c1f      	subs	r4, #31
 8083a62:	da1c      	bge.n	8083a9e <__adddf3+0x1d2>
 8083a64:	340c      	adds	r4, #12
 8083a66:	dc0e      	bgt.n	8083a86 <__adddf3+0x1ba>
 8083a68:	f104 0414 	add.w	r4, r4, #20
 8083a6c:	f1c4 0220 	rsb	r2, r4, #32
 8083a70:	fa20 f004 	lsr.w	r0, r0, r4
 8083a74:	fa01 f302 	lsl.w	r3, r1, r2
 8083a78:	ea40 0003 	orr.w	r0, r0, r3
 8083a7c:	fa21 f304 	lsr.w	r3, r1, r4
 8083a80:	ea45 0103 	orr.w	r1, r5, r3
 8083a84:	bd30      	pop	{r4, r5, pc}
 8083a86:	f1c4 040c 	rsb	r4, r4, #12
 8083a8a:	f1c4 0220 	rsb	r2, r4, #32
 8083a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8083a92:	fa01 f304 	lsl.w	r3, r1, r4
 8083a96:	ea40 0003 	orr.w	r0, r0, r3
 8083a9a:	4629      	mov	r1, r5
 8083a9c:	bd30      	pop	{r4, r5, pc}
 8083a9e:	fa21 f004 	lsr.w	r0, r1, r4
 8083aa2:	4629      	mov	r1, r5
 8083aa4:	bd30      	pop	{r4, r5, pc}
 8083aa6:	f094 0f00 	teq	r4, #0
 8083aaa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8083aae:	bf06      	itte	eq
 8083ab0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8083ab4:	3401      	addeq	r4, #1
 8083ab6:	3d01      	subne	r5, #1
 8083ab8:	e74e      	b.n	8083958 <__adddf3+0x8c>
 8083aba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8083abe:	bf18      	it	ne
 8083ac0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8083ac4:	d029      	beq.n	8083b1a <__adddf3+0x24e>
 8083ac6:	ea94 0f05 	teq	r4, r5
 8083aca:	bf08      	it	eq
 8083acc:	ea90 0f02 	teqeq	r0, r2
 8083ad0:	d005      	beq.n	8083ade <__adddf3+0x212>
 8083ad2:	ea54 0c00 	orrs.w	ip, r4, r0
 8083ad6:	bf04      	itt	eq
 8083ad8:	4619      	moveq	r1, r3
 8083ada:	4610      	moveq	r0, r2
 8083adc:	bd30      	pop	{r4, r5, pc}
 8083ade:	ea91 0f03 	teq	r1, r3
 8083ae2:	bf1e      	ittt	ne
 8083ae4:	2100      	movne	r1, #0
 8083ae6:	2000      	movne	r0, #0
 8083ae8:	bd30      	popne	{r4, r5, pc}
 8083aea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8083aee:	d105      	bne.n	8083afc <__adddf3+0x230>
 8083af0:	0040      	lsls	r0, r0, #1
 8083af2:	4149      	adcs	r1, r1
 8083af4:	bf28      	it	cs
 8083af6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8083afa:	bd30      	pop	{r4, r5, pc}
 8083afc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8083b00:	bf3c      	itt	cc
 8083b02:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8083b06:	bd30      	popcc	{r4, r5, pc}
 8083b08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083b0c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8083b10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083b14:	f04f 0000 	mov.w	r0, #0
 8083b18:	bd30      	pop	{r4, r5, pc}
 8083b1a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8083b1e:	bf1a      	itte	ne
 8083b20:	4619      	movne	r1, r3
 8083b22:	4610      	movne	r0, r2
 8083b24:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8083b28:	bf1c      	itt	ne
 8083b2a:	460b      	movne	r3, r1
 8083b2c:	4602      	movne	r2, r0
 8083b2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083b32:	bf06      	itte	eq
 8083b34:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8083b38:	ea91 0f03 	teqeq	r1, r3
 8083b3c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8083b40:	bd30      	pop	{r4, r5, pc}
 8083b42:	bf00      	nop

08083b44 <__aeabi_ui2d>:
 8083b44:	f090 0f00 	teq	r0, #0
 8083b48:	bf04      	itt	eq
 8083b4a:	2100      	moveq	r1, #0
 8083b4c:	4770      	bxeq	lr
 8083b4e:	b530      	push	{r4, r5, lr}
 8083b50:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083b54:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083b58:	f04f 0500 	mov.w	r5, #0
 8083b5c:	f04f 0100 	mov.w	r1, #0
 8083b60:	e750      	b.n	8083a04 <__adddf3+0x138>
 8083b62:	bf00      	nop

08083b64 <__aeabi_i2d>:
 8083b64:	f090 0f00 	teq	r0, #0
 8083b68:	bf04      	itt	eq
 8083b6a:	2100      	moveq	r1, #0
 8083b6c:	4770      	bxeq	lr
 8083b6e:	b530      	push	{r4, r5, lr}
 8083b70:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083b74:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083b78:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8083b7c:	bf48      	it	mi
 8083b7e:	4240      	negmi	r0, r0
 8083b80:	f04f 0100 	mov.w	r1, #0
 8083b84:	e73e      	b.n	8083a04 <__adddf3+0x138>
 8083b86:	bf00      	nop

08083b88 <__aeabi_f2d>:
 8083b88:	0042      	lsls	r2, r0, #1
 8083b8a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8083b8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8083b92:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8083b96:	bf1f      	itttt	ne
 8083b98:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8083b9c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8083ba0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8083ba4:	4770      	bxne	lr
 8083ba6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8083baa:	bf08      	it	eq
 8083bac:	4770      	bxeq	lr
 8083bae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8083bb2:	bf04      	itt	eq
 8083bb4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8083bb8:	4770      	bxeq	lr
 8083bba:	b530      	push	{r4, r5, lr}
 8083bbc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8083bc0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083bc4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083bc8:	e71c      	b.n	8083a04 <__adddf3+0x138>
 8083bca:	bf00      	nop

08083bcc <__aeabi_ul2d>:
 8083bcc:	ea50 0201 	orrs.w	r2, r0, r1
 8083bd0:	bf08      	it	eq
 8083bd2:	4770      	bxeq	lr
 8083bd4:	b530      	push	{r4, r5, lr}
 8083bd6:	f04f 0500 	mov.w	r5, #0
 8083bda:	e00a      	b.n	8083bf2 <__aeabi_l2d+0x16>

08083bdc <__aeabi_l2d>:
 8083bdc:	ea50 0201 	orrs.w	r2, r0, r1
 8083be0:	bf08      	it	eq
 8083be2:	4770      	bxeq	lr
 8083be4:	b530      	push	{r4, r5, lr}
 8083be6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8083bea:	d502      	bpl.n	8083bf2 <__aeabi_l2d+0x16>
 8083bec:	4240      	negs	r0, r0
 8083bee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083bf2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083bf6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083bfa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8083bfe:	f43f aed8 	beq.w	80839b2 <__adddf3+0xe6>
 8083c02:	f04f 0203 	mov.w	r2, #3
 8083c06:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8083c0a:	bf18      	it	ne
 8083c0c:	3203      	addne	r2, #3
 8083c0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8083c12:	bf18      	it	ne
 8083c14:	3203      	addne	r2, #3
 8083c16:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8083c1a:	f1c2 0320 	rsb	r3, r2, #32
 8083c1e:	fa00 fc03 	lsl.w	ip, r0, r3
 8083c22:	fa20 f002 	lsr.w	r0, r0, r2
 8083c26:	fa01 fe03 	lsl.w	lr, r1, r3
 8083c2a:	ea40 000e 	orr.w	r0, r0, lr
 8083c2e:	fa21 f102 	lsr.w	r1, r1, r2
 8083c32:	4414      	add	r4, r2
 8083c34:	e6bd      	b.n	80839b2 <__adddf3+0xe6>
 8083c36:	bf00      	nop

08083c38 <__aeabi_dmul>:
 8083c38:	b570      	push	{r4, r5, r6, lr}
 8083c3a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083c3e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083c42:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8083c46:	bf1d      	ittte	ne
 8083c48:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083c4c:	ea94 0f0c 	teqne	r4, ip
 8083c50:	ea95 0f0c 	teqne	r5, ip
 8083c54:	f000 f8de 	bleq	8083e14 <__aeabi_dmul+0x1dc>
 8083c58:	442c      	add	r4, r5
 8083c5a:	ea81 0603 	eor.w	r6, r1, r3
 8083c5e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8083c62:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8083c66:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8083c6a:	bf18      	it	ne
 8083c6c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8083c70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8083c78:	d038      	beq.n	8083cec <__aeabi_dmul+0xb4>
 8083c7a:	fba0 ce02 	umull	ip, lr, r0, r2
 8083c7e:	f04f 0500 	mov.w	r5, #0
 8083c82:	fbe1 e502 	umlal	lr, r5, r1, r2
 8083c86:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8083c8a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8083c8e:	f04f 0600 	mov.w	r6, #0
 8083c92:	fbe1 5603 	umlal	r5, r6, r1, r3
 8083c96:	f09c 0f00 	teq	ip, #0
 8083c9a:	bf18      	it	ne
 8083c9c:	f04e 0e01 	orrne.w	lr, lr, #1
 8083ca0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8083ca4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8083ca8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8083cac:	d204      	bcs.n	8083cb8 <__aeabi_dmul+0x80>
 8083cae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8083cb2:	416d      	adcs	r5, r5
 8083cb4:	eb46 0606 	adc.w	r6, r6, r6
 8083cb8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8083cbc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8083cc0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8083cc4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8083cc8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8083ccc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083cd0:	bf88      	it	hi
 8083cd2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083cd6:	d81e      	bhi.n	8083d16 <__aeabi_dmul+0xde>
 8083cd8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8083cdc:	bf08      	it	eq
 8083cde:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8083ce2:	f150 0000 	adcs.w	r0, r0, #0
 8083ce6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083cea:	bd70      	pop	{r4, r5, r6, pc}
 8083cec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8083cf0:	ea46 0101 	orr.w	r1, r6, r1
 8083cf4:	ea40 0002 	orr.w	r0, r0, r2
 8083cf8:	ea81 0103 	eor.w	r1, r1, r3
 8083cfc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8083d00:	bfc2      	ittt	gt
 8083d02:	ebd4 050c 	rsbsgt	r5, r4, ip
 8083d06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083d0a:	bd70      	popgt	{r4, r5, r6, pc}
 8083d0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083d10:	f04f 0e00 	mov.w	lr, #0
 8083d14:	3c01      	subs	r4, #1
 8083d16:	f300 80ab 	bgt.w	8083e70 <__aeabi_dmul+0x238>
 8083d1a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8083d1e:	bfde      	ittt	le
 8083d20:	2000      	movle	r0, #0
 8083d22:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8083d26:	bd70      	pople	{r4, r5, r6, pc}
 8083d28:	f1c4 0400 	rsb	r4, r4, #0
 8083d2c:	3c20      	subs	r4, #32
 8083d2e:	da35      	bge.n	8083d9c <__aeabi_dmul+0x164>
 8083d30:	340c      	adds	r4, #12
 8083d32:	dc1b      	bgt.n	8083d6c <__aeabi_dmul+0x134>
 8083d34:	f104 0414 	add.w	r4, r4, #20
 8083d38:	f1c4 0520 	rsb	r5, r4, #32
 8083d3c:	fa00 f305 	lsl.w	r3, r0, r5
 8083d40:	fa20 f004 	lsr.w	r0, r0, r4
 8083d44:	fa01 f205 	lsl.w	r2, r1, r5
 8083d48:	ea40 0002 	orr.w	r0, r0, r2
 8083d4c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8083d50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083d54:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083d58:	fa21 f604 	lsr.w	r6, r1, r4
 8083d5c:	eb42 0106 	adc.w	r1, r2, r6
 8083d60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083d64:	bf08      	it	eq
 8083d66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083d6a:	bd70      	pop	{r4, r5, r6, pc}
 8083d6c:	f1c4 040c 	rsb	r4, r4, #12
 8083d70:	f1c4 0520 	rsb	r5, r4, #32
 8083d74:	fa00 f304 	lsl.w	r3, r0, r4
 8083d78:	fa20 f005 	lsr.w	r0, r0, r5
 8083d7c:	fa01 f204 	lsl.w	r2, r1, r4
 8083d80:	ea40 0002 	orr.w	r0, r0, r2
 8083d84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083d88:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083d8c:	f141 0100 	adc.w	r1, r1, #0
 8083d90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083d94:	bf08      	it	eq
 8083d96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083d9a:	bd70      	pop	{r4, r5, r6, pc}
 8083d9c:	f1c4 0520 	rsb	r5, r4, #32
 8083da0:	fa00 f205 	lsl.w	r2, r0, r5
 8083da4:	ea4e 0e02 	orr.w	lr, lr, r2
 8083da8:	fa20 f304 	lsr.w	r3, r0, r4
 8083dac:	fa01 f205 	lsl.w	r2, r1, r5
 8083db0:	ea43 0302 	orr.w	r3, r3, r2
 8083db4:	fa21 f004 	lsr.w	r0, r1, r4
 8083db8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083dbc:	fa21 f204 	lsr.w	r2, r1, r4
 8083dc0:	ea20 0002 	bic.w	r0, r0, r2
 8083dc4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8083dc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083dcc:	bf08      	it	eq
 8083dce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083dd2:	bd70      	pop	{r4, r5, r6, pc}
 8083dd4:	f094 0f00 	teq	r4, #0
 8083dd8:	d10f      	bne.n	8083dfa <__aeabi_dmul+0x1c2>
 8083dda:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8083dde:	0040      	lsls	r0, r0, #1
 8083de0:	eb41 0101 	adc.w	r1, r1, r1
 8083de4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083de8:	bf08      	it	eq
 8083dea:	3c01      	subeq	r4, #1
 8083dec:	d0f7      	beq.n	8083dde <__aeabi_dmul+0x1a6>
 8083dee:	ea41 0106 	orr.w	r1, r1, r6
 8083df2:	f095 0f00 	teq	r5, #0
 8083df6:	bf18      	it	ne
 8083df8:	4770      	bxne	lr
 8083dfa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8083dfe:	0052      	lsls	r2, r2, #1
 8083e00:	eb43 0303 	adc.w	r3, r3, r3
 8083e04:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8083e08:	bf08      	it	eq
 8083e0a:	3d01      	subeq	r5, #1
 8083e0c:	d0f7      	beq.n	8083dfe <__aeabi_dmul+0x1c6>
 8083e0e:	ea43 0306 	orr.w	r3, r3, r6
 8083e12:	4770      	bx	lr
 8083e14:	ea94 0f0c 	teq	r4, ip
 8083e18:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083e1c:	bf18      	it	ne
 8083e1e:	ea95 0f0c 	teqne	r5, ip
 8083e22:	d00c      	beq.n	8083e3e <__aeabi_dmul+0x206>
 8083e24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083e28:	bf18      	it	ne
 8083e2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083e2e:	d1d1      	bne.n	8083dd4 <__aeabi_dmul+0x19c>
 8083e30:	ea81 0103 	eor.w	r1, r1, r3
 8083e34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083e38:	f04f 0000 	mov.w	r0, #0
 8083e3c:	bd70      	pop	{r4, r5, r6, pc}
 8083e3e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083e42:	bf06      	itte	eq
 8083e44:	4610      	moveq	r0, r2
 8083e46:	4619      	moveq	r1, r3
 8083e48:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083e4c:	d019      	beq.n	8083e82 <__aeabi_dmul+0x24a>
 8083e4e:	ea94 0f0c 	teq	r4, ip
 8083e52:	d102      	bne.n	8083e5a <__aeabi_dmul+0x222>
 8083e54:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8083e58:	d113      	bne.n	8083e82 <__aeabi_dmul+0x24a>
 8083e5a:	ea95 0f0c 	teq	r5, ip
 8083e5e:	d105      	bne.n	8083e6c <__aeabi_dmul+0x234>
 8083e60:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8083e64:	bf1c      	itt	ne
 8083e66:	4610      	movne	r0, r2
 8083e68:	4619      	movne	r1, r3
 8083e6a:	d10a      	bne.n	8083e82 <__aeabi_dmul+0x24a>
 8083e6c:	ea81 0103 	eor.w	r1, r1, r3
 8083e70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083e74:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083e78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083e7c:	f04f 0000 	mov.w	r0, #0
 8083e80:	bd70      	pop	{r4, r5, r6, pc}
 8083e82:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083e86:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8083e8a:	bd70      	pop	{r4, r5, r6, pc}

08083e8c <__aeabi_ddiv>:
 8083e8c:	b570      	push	{r4, r5, r6, lr}
 8083e8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083e92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083e96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8083e9a:	bf1d      	ittte	ne
 8083e9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083ea0:	ea94 0f0c 	teqne	r4, ip
 8083ea4:	ea95 0f0c 	teqne	r5, ip
 8083ea8:	f000 f8a7 	bleq	8083ffa <__aeabi_ddiv+0x16e>
 8083eac:	eba4 0405 	sub.w	r4, r4, r5
 8083eb0:	ea81 0e03 	eor.w	lr, r1, r3
 8083eb4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083eb8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083ebc:	f000 8088 	beq.w	8083fd0 <__aeabi_ddiv+0x144>
 8083ec0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083ec4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8083ec8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8083ecc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8083ed0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8083ed4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8083ed8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8083edc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8083ee0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8083ee4:	429d      	cmp	r5, r3
 8083ee6:	bf08      	it	eq
 8083ee8:	4296      	cmpeq	r6, r2
 8083eea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8083eee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8083ef2:	d202      	bcs.n	8083efa <__aeabi_ddiv+0x6e>
 8083ef4:	085b      	lsrs	r3, r3, #1
 8083ef6:	ea4f 0232 	mov.w	r2, r2, rrx
 8083efa:	1ab6      	subs	r6, r6, r2
 8083efc:	eb65 0503 	sbc.w	r5, r5, r3
 8083f00:	085b      	lsrs	r3, r3, #1
 8083f02:	ea4f 0232 	mov.w	r2, r2, rrx
 8083f06:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8083f0a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8083f0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8083f12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083f16:	bf22      	ittt	cs
 8083f18:	1ab6      	subcs	r6, r6, r2
 8083f1a:	4675      	movcs	r5, lr
 8083f1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8083f20:	085b      	lsrs	r3, r3, #1
 8083f22:	ea4f 0232 	mov.w	r2, r2, rrx
 8083f26:	ebb6 0e02 	subs.w	lr, r6, r2
 8083f2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083f2e:	bf22      	ittt	cs
 8083f30:	1ab6      	subcs	r6, r6, r2
 8083f32:	4675      	movcs	r5, lr
 8083f34:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8083f38:	085b      	lsrs	r3, r3, #1
 8083f3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8083f3e:	ebb6 0e02 	subs.w	lr, r6, r2
 8083f42:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083f46:	bf22      	ittt	cs
 8083f48:	1ab6      	subcs	r6, r6, r2
 8083f4a:	4675      	movcs	r5, lr
 8083f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8083f50:	085b      	lsrs	r3, r3, #1
 8083f52:	ea4f 0232 	mov.w	r2, r2, rrx
 8083f56:	ebb6 0e02 	subs.w	lr, r6, r2
 8083f5a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083f5e:	bf22      	ittt	cs
 8083f60:	1ab6      	subcs	r6, r6, r2
 8083f62:	4675      	movcs	r5, lr
 8083f64:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8083f68:	ea55 0e06 	orrs.w	lr, r5, r6
 8083f6c:	d018      	beq.n	8083fa0 <__aeabi_ddiv+0x114>
 8083f6e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8083f72:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8083f76:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8083f7a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8083f7e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8083f82:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8083f86:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8083f8a:	d1c0      	bne.n	8083f0e <__aeabi_ddiv+0x82>
 8083f8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083f90:	d10b      	bne.n	8083faa <__aeabi_ddiv+0x11e>
 8083f92:	ea41 0100 	orr.w	r1, r1, r0
 8083f96:	f04f 0000 	mov.w	r0, #0
 8083f9a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8083f9e:	e7b6      	b.n	8083f0e <__aeabi_ddiv+0x82>
 8083fa0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083fa4:	bf04      	itt	eq
 8083fa6:	4301      	orreq	r1, r0
 8083fa8:	2000      	moveq	r0, #0
 8083faa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083fae:	bf88      	it	hi
 8083fb0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083fb4:	f63f aeaf 	bhi.w	8083d16 <__aeabi_dmul+0xde>
 8083fb8:	ebb5 0c03 	subs.w	ip, r5, r3
 8083fbc:	bf04      	itt	eq
 8083fbe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8083fc2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8083fc6:	f150 0000 	adcs.w	r0, r0, #0
 8083fca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083fce:	bd70      	pop	{r4, r5, r6, pc}
 8083fd0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8083fd4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8083fd8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8083fdc:	bfc2      	ittt	gt
 8083fde:	ebd4 050c 	rsbsgt	r5, r4, ip
 8083fe2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083fe6:	bd70      	popgt	{r4, r5, r6, pc}
 8083fe8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083fec:	f04f 0e00 	mov.w	lr, #0
 8083ff0:	3c01      	subs	r4, #1
 8083ff2:	e690      	b.n	8083d16 <__aeabi_dmul+0xde>
 8083ff4:	ea45 0e06 	orr.w	lr, r5, r6
 8083ff8:	e68d      	b.n	8083d16 <__aeabi_dmul+0xde>
 8083ffa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083ffe:	ea94 0f0c 	teq	r4, ip
 8084002:	bf08      	it	eq
 8084004:	ea95 0f0c 	teqeq	r5, ip
 8084008:	f43f af3b 	beq.w	8083e82 <__aeabi_dmul+0x24a>
 808400c:	ea94 0f0c 	teq	r4, ip
 8084010:	d10a      	bne.n	8084028 <__aeabi_ddiv+0x19c>
 8084012:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8084016:	f47f af34 	bne.w	8083e82 <__aeabi_dmul+0x24a>
 808401a:	ea95 0f0c 	teq	r5, ip
 808401e:	f47f af25 	bne.w	8083e6c <__aeabi_dmul+0x234>
 8084022:	4610      	mov	r0, r2
 8084024:	4619      	mov	r1, r3
 8084026:	e72c      	b.n	8083e82 <__aeabi_dmul+0x24a>
 8084028:	ea95 0f0c 	teq	r5, ip
 808402c:	d106      	bne.n	808403c <__aeabi_ddiv+0x1b0>
 808402e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8084032:	f43f aefd 	beq.w	8083e30 <__aeabi_dmul+0x1f8>
 8084036:	4610      	mov	r0, r2
 8084038:	4619      	mov	r1, r3
 808403a:	e722      	b.n	8083e82 <__aeabi_dmul+0x24a>
 808403c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8084040:	bf18      	it	ne
 8084042:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8084046:	f47f aec5 	bne.w	8083dd4 <__aeabi_dmul+0x19c>
 808404a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808404e:	f47f af0d 	bne.w	8083e6c <__aeabi_dmul+0x234>
 8084052:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8084056:	f47f aeeb 	bne.w	8083e30 <__aeabi_dmul+0x1f8>
 808405a:	e712      	b.n	8083e82 <__aeabi_dmul+0x24a>

0808405c <__aeabi_d2iz>:
 808405c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8084060:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8084064:	d215      	bcs.n	8084092 <__aeabi_d2iz+0x36>
 8084066:	d511      	bpl.n	808408c <__aeabi_d2iz+0x30>
 8084068:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808406c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8084070:	d912      	bls.n	8084098 <__aeabi_d2iz+0x3c>
 8084072:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8084076:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808407a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808407e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8084082:	fa23 f002 	lsr.w	r0, r3, r2
 8084086:	bf18      	it	ne
 8084088:	4240      	negne	r0, r0
 808408a:	4770      	bx	lr
 808408c:	f04f 0000 	mov.w	r0, #0
 8084090:	4770      	bx	lr
 8084092:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8084096:	d105      	bne.n	80840a4 <__aeabi_d2iz+0x48>
 8084098:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 808409c:	bf08      	it	eq
 808409e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80840a2:	4770      	bx	lr
 80840a4:	f04f 0000 	mov.w	r0, #0
 80840a8:	4770      	bx	lr
 80840aa:	bf00      	nop

080840ac <__aeabi_d2uiz>:
 80840ac:	004a      	lsls	r2, r1, #1
 80840ae:	d211      	bcs.n	80840d4 <__aeabi_d2uiz+0x28>
 80840b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80840b4:	d211      	bcs.n	80840da <__aeabi_d2uiz+0x2e>
 80840b6:	d50d      	bpl.n	80840d4 <__aeabi_d2uiz+0x28>
 80840b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80840bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80840c0:	d40e      	bmi.n	80840e0 <__aeabi_d2uiz+0x34>
 80840c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80840c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80840ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80840ce:	fa23 f002 	lsr.w	r0, r3, r2
 80840d2:	4770      	bx	lr
 80840d4:	f04f 0000 	mov.w	r0, #0
 80840d8:	4770      	bx	lr
 80840da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80840de:	d102      	bne.n	80840e6 <__aeabi_d2uiz+0x3a>
 80840e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80840e4:	4770      	bx	lr
 80840e6:	f04f 0000 	mov.w	r0, #0
 80840ea:	4770      	bx	lr

080840ec <__aeabi_d2f>:
 80840ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80840f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80840f4:	bf24      	itt	cs
 80840f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80840fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80840fe:	d90d      	bls.n	808411c <__aeabi_d2f+0x30>
 8084100:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8084104:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8084108:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 808410c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8084110:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8084114:	bf08      	it	eq
 8084116:	f020 0001 	biceq.w	r0, r0, #1
 808411a:	4770      	bx	lr
 808411c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8084120:	d121      	bne.n	8084166 <__aeabi_d2f+0x7a>
 8084122:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8084126:	bfbc      	itt	lt
 8084128:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 808412c:	4770      	bxlt	lr
 808412e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8084132:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8084136:	f1c2 0218 	rsb	r2, r2, #24
 808413a:	f1c2 0c20 	rsb	ip, r2, #32
 808413e:	fa10 f30c 	lsls.w	r3, r0, ip
 8084142:	fa20 f002 	lsr.w	r0, r0, r2
 8084146:	bf18      	it	ne
 8084148:	f040 0001 	orrne.w	r0, r0, #1
 808414c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8084150:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8084154:	fa03 fc0c 	lsl.w	ip, r3, ip
 8084158:	ea40 000c 	orr.w	r0, r0, ip
 808415c:	fa23 f302 	lsr.w	r3, r3, r2
 8084160:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8084164:	e7cc      	b.n	8084100 <__aeabi_d2f+0x14>
 8084166:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808416a:	d107      	bne.n	808417c <__aeabi_d2f+0x90>
 808416c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8084170:	bf1e      	ittt	ne
 8084172:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8084176:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808417a:	4770      	bxne	lr
 808417c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8084180:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8084184:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084188:	4770      	bx	lr
 808418a:	bf00      	nop

0808418c <__aeabi_frsub>:
 808418c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8084190:	e002      	b.n	8084198 <__addsf3>
 8084192:	bf00      	nop

08084194 <__aeabi_fsub>:
 8084194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08084198 <__addsf3>:
 8084198:	0042      	lsls	r2, r0, #1
 808419a:	bf1f      	itttt	ne
 808419c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80841a0:	ea92 0f03 	teqne	r2, r3
 80841a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80841a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80841ac:	d06a      	beq.n	8084284 <__addsf3+0xec>
 80841ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80841b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80841b6:	bfc1      	itttt	gt
 80841b8:	18d2      	addgt	r2, r2, r3
 80841ba:	4041      	eorgt	r1, r0
 80841bc:	4048      	eorgt	r0, r1
 80841be:	4041      	eorgt	r1, r0
 80841c0:	bfb8      	it	lt
 80841c2:	425b      	neglt	r3, r3
 80841c4:	2b19      	cmp	r3, #25
 80841c6:	bf88      	it	hi
 80841c8:	4770      	bxhi	lr
 80841ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80841ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80841d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80841d6:	bf18      	it	ne
 80841d8:	4240      	negne	r0, r0
 80841da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80841de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80841e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80841e6:	bf18      	it	ne
 80841e8:	4249      	negne	r1, r1
 80841ea:	ea92 0f03 	teq	r2, r3
 80841ee:	d03f      	beq.n	8084270 <__addsf3+0xd8>
 80841f0:	f1a2 0201 	sub.w	r2, r2, #1
 80841f4:	fa41 fc03 	asr.w	ip, r1, r3
 80841f8:	eb10 000c 	adds.w	r0, r0, ip
 80841fc:	f1c3 0320 	rsb	r3, r3, #32
 8084200:	fa01 f103 	lsl.w	r1, r1, r3
 8084204:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8084208:	d502      	bpl.n	8084210 <__addsf3+0x78>
 808420a:	4249      	negs	r1, r1
 808420c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8084210:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8084214:	d313      	bcc.n	808423e <__addsf3+0xa6>
 8084216:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808421a:	d306      	bcc.n	808422a <__addsf3+0x92>
 808421c:	0840      	lsrs	r0, r0, #1
 808421e:	ea4f 0131 	mov.w	r1, r1, rrx
 8084222:	f102 0201 	add.w	r2, r2, #1
 8084226:	2afe      	cmp	r2, #254	; 0xfe
 8084228:	d251      	bcs.n	80842ce <__addsf3+0x136>
 808422a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808422e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8084232:	bf08      	it	eq
 8084234:	f020 0001 	biceq.w	r0, r0, #1
 8084238:	ea40 0003 	orr.w	r0, r0, r3
 808423c:	4770      	bx	lr
 808423e:	0049      	lsls	r1, r1, #1
 8084240:	eb40 0000 	adc.w	r0, r0, r0
 8084244:	3a01      	subs	r2, #1
 8084246:	bf28      	it	cs
 8084248:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 808424c:	d2ed      	bcs.n	808422a <__addsf3+0x92>
 808424e:	fab0 fc80 	clz	ip, r0
 8084252:	f1ac 0c08 	sub.w	ip, ip, #8
 8084256:	ebb2 020c 	subs.w	r2, r2, ip
 808425a:	fa00 f00c 	lsl.w	r0, r0, ip
 808425e:	bfaa      	itet	ge
 8084260:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8084264:	4252      	neglt	r2, r2
 8084266:	4318      	orrge	r0, r3
 8084268:	bfbc      	itt	lt
 808426a:	40d0      	lsrlt	r0, r2
 808426c:	4318      	orrlt	r0, r3
 808426e:	4770      	bx	lr
 8084270:	f092 0f00 	teq	r2, #0
 8084274:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8084278:	bf06      	itte	eq
 808427a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 808427e:	3201      	addeq	r2, #1
 8084280:	3b01      	subne	r3, #1
 8084282:	e7b5      	b.n	80841f0 <__addsf3+0x58>
 8084284:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8084288:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808428c:	bf18      	it	ne
 808428e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8084292:	d021      	beq.n	80842d8 <__addsf3+0x140>
 8084294:	ea92 0f03 	teq	r2, r3
 8084298:	d004      	beq.n	80842a4 <__addsf3+0x10c>
 808429a:	f092 0f00 	teq	r2, #0
 808429e:	bf08      	it	eq
 80842a0:	4608      	moveq	r0, r1
 80842a2:	4770      	bx	lr
 80842a4:	ea90 0f01 	teq	r0, r1
 80842a8:	bf1c      	itt	ne
 80842aa:	2000      	movne	r0, #0
 80842ac:	4770      	bxne	lr
 80842ae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80842b2:	d104      	bne.n	80842be <__addsf3+0x126>
 80842b4:	0040      	lsls	r0, r0, #1
 80842b6:	bf28      	it	cs
 80842b8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80842bc:	4770      	bx	lr
 80842be:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80842c2:	bf3c      	itt	cc
 80842c4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80842c8:	4770      	bxcc	lr
 80842ca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80842ce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80842d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80842d6:	4770      	bx	lr
 80842d8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80842dc:	bf16      	itet	ne
 80842de:	4608      	movne	r0, r1
 80842e0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80842e4:	4601      	movne	r1, r0
 80842e6:	0242      	lsls	r2, r0, #9
 80842e8:	bf06      	itte	eq
 80842ea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80842ee:	ea90 0f01 	teqeq	r0, r1
 80842f2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80842f6:	4770      	bx	lr

080842f8 <__aeabi_ui2f>:
 80842f8:	f04f 0300 	mov.w	r3, #0
 80842fc:	e004      	b.n	8084308 <__aeabi_i2f+0x8>
 80842fe:	bf00      	nop

08084300 <__aeabi_i2f>:
 8084300:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8084304:	bf48      	it	mi
 8084306:	4240      	negmi	r0, r0
 8084308:	ea5f 0c00 	movs.w	ip, r0
 808430c:	bf08      	it	eq
 808430e:	4770      	bxeq	lr
 8084310:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8084314:	4601      	mov	r1, r0
 8084316:	f04f 0000 	mov.w	r0, #0
 808431a:	e01c      	b.n	8084356 <__aeabi_l2f+0x2a>

0808431c <__aeabi_ul2f>:
 808431c:	ea50 0201 	orrs.w	r2, r0, r1
 8084320:	bf08      	it	eq
 8084322:	4770      	bxeq	lr
 8084324:	f04f 0300 	mov.w	r3, #0
 8084328:	e00a      	b.n	8084340 <__aeabi_l2f+0x14>
 808432a:	bf00      	nop

0808432c <__aeabi_l2f>:
 808432c:	ea50 0201 	orrs.w	r2, r0, r1
 8084330:	bf08      	it	eq
 8084332:	4770      	bxeq	lr
 8084334:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8084338:	d502      	bpl.n	8084340 <__aeabi_l2f+0x14>
 808433a:	4240      	negs	r0, r0
 808433c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8084340:	ea5f 0c01 	movs.w	ip, r1
 8084344:	bf02      	ittt	eq
 8084346:	4684      	moveq	ip, r0
 8084348:	4601      	moveq	r1, r0
 808434a:	2000      	moveq	r0, #0
 808434c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8084350:	bf08      	it	eq
 8084352:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8084356:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808435a:	fabc f28c 	clz	r2, ip
 808435e:	3a08      	subs	r2, #8
 8084360:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8084364:	db10      	blt.n	8084388 <__aeabi_l2f+0x5c>
 8084366:	fa01 fc02 	lsl.w	ip, r1, r2
 808436a:	4463      	add	r3, ip
 808436c:	fa00 fc02 	lsl.w	ip, r0, r2
 8084370:	f1c2 0220 	rsb	r2, r2, #32
 8084374:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8084378:	fa20 f202 	lsr.w	r2, r0, r2
 808437c:	eb43 0002 	adc.w	r0, r3, r2
 8084380:	bf08      	it	eq
 8084382:	f020 0001 	biceq.w	r0, r0, #1
 8084386:	4770      	bx	lr
 8084388:	f102 0220 	add.w	r2, r2, #32
 808438c:	fa01 fc02 	lsl.w	ip, r1, r2
 8084390:	f1c2 0220 	rsb	r2, r2, #32
 8084394:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8084398:	fa21 f202 	lsr.w	r2, r1, r2
 808439c:	eb43 0002 	adc.w	r0, r3, r2
 80843a0:	bf08      	it	eq
 80843a2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80843a6:	4770      	bx	lr

080843a8 <__aeabi_fmul>:
 80843a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80843ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80843b0:	bf1e      	ittt	ne
 80843b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80843b6:	ea92 0f0c 	teqne	r2, ip
 80843ba:	ea93 0f0c 	teqne	r3, ip
 80843be:	d06f      	beq.n	80844a0 <__aeabi_fmul+0xf8>
 80843c0:	441a      	add	r2, r3
 80843c2:	ea80 0c01 	eor.w	ip, r0, r1
 80843c6:	0240      	lsls	r0, r0, #9
 80843c8:	bf18      	it	ne
 80843ca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80843ce:	d01e      	beq.n	808440e <__aeabi_fmul+0x66>
 80843d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80843d4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80843d8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80843dc:	fba0 3101 	umull	r3, r1, r0, r1
 80843e0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80843e4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80843e8:	bf3e      	ittt	cc
 80843ea:	0049      	lslcc	r1, r1, #1
 80843ec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80843f0:	005b      	lslcc	r3, r3, #1
 80843f2:	ea40 0001 	orr.w	r0, r0, r1
 80843f6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80843fa:	2afd      	cmp	r2, #253	; 0xfd
 80843fc:	d81d      	bhi.n	808443a <__aeabi_fmul+0x92>
 80843fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8084402:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8084406:	bf08      	it	eq
 8084408:	f020 0001 	biceq.w	r0, r0, #1
 808440c:	4770      	bx	lr
 808440e:	f090 0f00 	teq	r0, #0
 8084412:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8084416:	bf08      	it	eq
 8084418:	0249      	lsleq	r1, r1, #9
 808441a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808441e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8084422:	3a7f      	subs	r2, #127	; 0x7f
 8084424:	bfc2      	ittt	gt
 8084426:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808442a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808442e:	4770      	bxgt	lr
 8084430:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084434:	f04f 0300 	mov.w	r3, #0
 8084438:	3a01      	subs	r2, #1
 808443a:	dc5d      	bgt.n	80844f8 <__aeabi_fmul+0x150>
 808443c:	f112 0f19 	cmn.w	r2, #25
 8084440:	bfdc      	itt	le
 8084442:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8084446:	4770      	bxle	lr
 8084448:	f1c2 0200 	rsb	r2, r2, #0
 808444c:	0041      	lsls	r1, r0, #1
 808444e:	fa21 f102 	lsr.w	r1, r1, r2
 8084452:	f1c2 0220 	rsb	r2, r2, #32
 8084456:	fa00 fc02 	lsl.w	ip, r0, r2
 808445a:	ea5f 0031 	movs.w	r0, r1, rrx
 808445e:	f140 0000 	adc.w	r0, r0, #0
 8084462:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8084466:	bf08      	it	eq
 8084468:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808446c:	4770      	bx	lr
 808446e:	f092 0f00 	teq	r2, #0
 8084472:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8084476:	bf02      	ittt	eq
 8084478:	0040      	lsleq	r0, r0, #1
 808447a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808447e:	3a01      	subeq	r2, #1
 8084480:	d0f9      	beq.n	8084476 <__aeabi_fmul+0xce>
 8084482:	ea40 000c 	orr.w	r0, r0, ip
 8084486:	f093 0f00 	teq	r3, #0
 808448a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808448e:	bf02      	ittt	eq
 8084490:	0049      	lsleq	r1, r1, #1
 8084492:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8084496:	3b01      	subeq	r3, #1
 8084498:	d0f9      	beq.n	808448e <__aeabi_fmul+0xe6>
 808449a:	ea41 010c 	orr.w	r1, r1, ip
 808449e:	e78f      	b.n	80843c0 <__aeabi_fmul+0x18>
 80844a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80844a4:	ea92 0f0c 	teq	r2, ip
 80844a8:	bf18      	it	ne
 80844aa:	ea93 0f0c 	teqne	r3, ip
 80844ae:	d00a      	beq.n	80844c6 <__aeabi_fmul+0x11e>
 80844b0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80844b4:	bf18      	it	ne
 80844b6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80844ba:	d1d8      	bne.n	808446e <__aeabi_fmul+0xc6>
 80844bc:	ea80 0001 	eor.w	r0, r0, r1
 80844c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80844c4:	4770      	bx	lr
 80844c6:	f090 0f00 	teq	r0, #0
 80844ca:	bf17      	itett	ne
 80844cc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80844d0:	4608      	moveq	r0, r1
 80844d2:	f091 0f00 	teqne	r1, #0
 80844d6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80844da:	d014      	beq.n	8084506 <__aeabi_fmul+0x15e>
 80844dc:	ea92 0f0c 	teq	r2, ip
 80844e0:	d101      	bne.n	80844e6 <__aeabi_fmul+0x13e>
 80844e2:	0242      	lsls	r2, r0, #9
 80844e4:	d10f      	bne.n	8084506 <__aeabi_fmul+0x15e>
 80844e6:	ea93 0f0c 	teq	r3, ip
 80844ea:	d103      	bne.n	80844f4 <__aeabi_fmul+0x14c>
 80844ec:	024b      	lsls	r3, r1, #9
 80844ee:	bf18      	it	ne
 80844f0:	4608      	movne	r0, r1
 80844f2:	d108      	bne.n	8084506 <__aeabi_fmul+0x15e>
 80844f4:	ea80 0001 	eor.w	r0, r0, r1
 80844f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80844fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8084500:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084504:	4770      	bx	lr
 8084506:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808450a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808450e:	4770      	bx	lr

08084510 <__aeabi_fdiv>:
 8084510:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8084514:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8084518:	bf1e      	ittt	ne
 808451a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808451e:	ea92 0f0c 	teqne	r2, ip
 8084522:	ea93 0f0c 	teqne	r3, ip
 8084526:	d069      	beq.n	80845fc <__aeabi_fdiv+0xec>
 8084528:	eba2 0203 	sub.w	r2, r2, r3
 808452c:	ea80 0c01 	eor.w	ip, r0, r1
 8084530:	0249      	lsls	r1, r1, #9
 8084532:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8084536:	d037      	beq.n	80845a8 <__aeabi_fdiv+0x98>
 8084538:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808453c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8084540:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8084544:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8084548:	428b      	cmp	r3, r1
 808454a:	bf38      	it	cc
 808454c:	005b      	lslcc	r3, r3, #1
 808454e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8084552:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8084556:	428b      	cmp	r3, r1
 8084558:	bf24      	itt	cs
 808455a:	1a5b      	subcs	r3, r3, r1
 808455c:	ea40 000c 	orrcs.w	r0, r0, ip
 8084560:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8084564:	bf24      	itt	cs
 8084566:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808456a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808456e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8084572:	bf24      	itt	cs
 8084574:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8084578:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808457c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8084580:	bf24      	itt	cs
 8084582:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8084586:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808458a:	011b      	lsls	r3, r3, #4
 808458c:	bf18      	it	ne
 808458e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8084592:	d1e0      	bne.n	8084556 <__aeabi_fdiv+0x46>
 8084594:	2afd      	cmp	r2, #253	; 0xfd
 8084596:	f63f af50 	bhi.w	808443a <__aeabi_fmul+0x92>
 808459a:	428b      	cmp	r3, r1
 808459c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80845a0:	bf08      	it	eq
 80845a2:	f020 0001 	biceq.w	r0, r0, #1
 80845a6:	4770      	bx	lr
 80845a8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80845ac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80845b0:	327f      	adds	r2, #127	; 0x7f
 80845b2:	bfc2      	ittt	gt
 80845b4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80845b8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80845bc:	4770      	bxgt	lr
 80845be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80845c2:	f04f 0300 	mov.w	r3, #0
 80845c6:	3a01      	subs	r2, #1
 80845c8:	e737      	b.n	808443a <__aeabi_fmul+0x92>
 80845ca:	f092 0f00 	teq	r2, #0
 80845ce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80845d2:	bf02      	ittt	eq
 80845d4:	0040      	lsleq	r0, r0, #1
 80845d6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80845da:	3a01      	subeq	r2, #1
 80845dc:	d0f9      	beq.n	80845d2 <__aeabi_fdiv+0xc2>
 80845de:	ea40 000c 	orr.w	r0, r0, ip
 80845e2:	f093 0f00 	teq	r3, #0
 80845e6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80845ea:	bf02      	ittt	eq
 80845ec:	0049      	lsleq	r1, r1, #1
 80845ee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80845f2:	3b01      	subeq	r3, #1
 80845f4:	d0f9      	beq.n	80845ea <__aeabi_fdiv+0xda>
 80845f6:	ea41 010c 	orr.w	r1, r1, ip
 80845fa:	e795      	b.n	8084528 <__aeabi_fdiv+0x18>
 80845fc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8084600:	ea92 0f0c 	teq	r2, ip
 8084604:	d108      	bne.n	8084618 <__aeabi_fdiv+0x108>
 8084606:	0242      	lsls	r2, r0, #9
 8084608:	f47f af7d 	bne.w	8084506 <__aeabi_fmul+0x15e>
 808460c:	ea93 0f0c 	teq	r3, ip
 8084610:	f47f af70 	bne.w	80844f4 <__aeabi_fmul+0x14c>
 8084614:	4608      	mov	r0, r1
 8084616:	e776      	b.n	8084506 <__aeabi_fmul+0x15e>
 8084618:	ea93 0f0c 	teq	r3, ip
 808461c:	d104      	bne.n	8084628 <__aeabi_fdiv+0x118>
 808461e:	024b      	lsls	r3, r1, #9
 8084620:	f43f af4c 	beq.w	80844bc <__aeabi_fmul+0x114>
 8084624:	4608      	mov	r0, r1
 8084626:	e76e      	b.n	8084506 <__aeabi_fmul+0x15e>
 8084628:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808462c:	bf18      	it	ne
 808462e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8084632:	d1ca      	bne.n	80845ca <__aeabi_fdiv+0xba>
 8084634:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8084638:	f47f af5c 	bne.w	80844f4 <__aeabi_fmul+0x14c>
 808463c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8084640:	f47f af3c 	bne.w	80844bc <__aeabi_fmul+0x114>
 8084644:	e75f      	b.n	8084506 <__aeabi_fmul+0x15e>
 8084646:	bf00      	nop

08084648 <__gesf2>:
 8084648:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 808464c:	e006      	b.n	808465c <__cmpsf2+0x4>
 808464e:	bf00      	nop

08084650 <__lesf2>:
 8084650:	f04f 0c01 	mov.w	ip, #1
 8084654:	e002      	b.n	808465c <__cmpsf2+0x4>
 8084656:	bf00      	nop

08084658 <__cmpsf2>:
 8084658:	f04f 0c01 	mov.w	ip, #1
 808465c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8084660:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8084664:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8084668:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808466c:	bf18      	it	ne
 808466e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8084672:	d011      	beq.n	8084698 <__cmpsf2+0x40>
 8084674:	b001      	add	sp, #4
 8084676:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808467a:	bf18      	it	ne
 808467c:	ea90 0f01 	teqne	r0, r1
 8084680:	bf58      	it	pl
 8084682:	ebb2 0003 	subspl.w	r0, r2, r3
 8084686:	bf88      	it	hi
 8084688:	17c8      	asrhi	r0, r1, #31
 808468a:	bf38      	it	cc
 808468c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8084690:	bf18      	it	ne
 8084692:	f040 0001 	orrne.w	r0, r0, #1
 8084696:	4770      	bx	lr
 8084698:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808469c:	d102      	bne.n	80846a4 <__cmpsf2+0x4c>
 808469e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80846a2:	d105      	bne.n	80846b0 <__cmpsf2+0x58>
 80846a4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80846a8:	d1e4      	bne.n	8084674 <__cmpsf2+0x1c>
 80846aa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80846ae:	d0e1      	beq.n	8084674 <__cmpsf2+0x1c>
 80846b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80846b4:	4770      	bx	lr
 80846b6:	bf00      	nop

080846b8 <__aeabi_cfrcmple>:
 80846b8:	4684      	mov	ip, r0
 80846ba:	4608      	mov	r0, r1
 80846bc:	4661      	mov	r1, ip
 80846be:	e7ff      	b.n	80846c0 <__aeabi_cfcmpeq>

080846c0 <__aeabi_cfcmpeq>:
 80846c0:	b50f      	push	{r0, r1, r2, r3, lr}
 80846c2:	f7ff ffc9 	bl	8084658 <__cmpsf2>
 80846c6:	2800      	cmp	r0, #0
 80846c8:	bf48      	it	mi
 80846ca:	f110 0f00 	cmnmi.w	r0, #0
 80846ce:	bd0f      	pop	{r0, r1, r2, r3, pc}

080846d0 <__aeabi_fcmpeq>:
 80846d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80846d4:	f7ff fff4 	bl	80846c0 <__aeabi_cfcmpeq>
 80846d8:	bf0c      	ite	eq
 80846da:	2001      	moveq	r0, #1
 80846dc:	2000      	movne	r0, #0
 80846de:	f85d fb08 	ldr.w	pc, [sp], #8
 80846e2:	bf00      	nop

080846e4 <__aeabi_fcmplt>:
 80846e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80846e8:	f7ff ffea 	bl	80846c0 <__aeabi_cfcmpeq>
 80846ec:	bf34      	ite	cc
 80846ee:	2001      	movcc	r0, #1
 80846f0:	2000      	movcs	r0, #0
 80846f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80846f6:	bf00      	nop

080846f8 <__aeabi_fcmple>:
 80846f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80846fc:	f7ff ffe0 	bl	80846c0 <__aeabi_cfcmpeq>
 8084700:	bf94      	ite	ls
 8084702:	2001      	movls	r0, #1
 8084704:	2000      	movhi	r0, #0
 8084706:	f85d fb08 	ldr.w	pc, [sp], #8
 808470a:	bf00      	nop

0808470c <__aeabi_fcmpge>:
 808470c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084710:	f7ff ffd2 	bl	80846b8 <__aeabi_cfrcmple>
 8084714:	bf94      	ite	ls
 8084716:	2001      	movls	r0, #1
 8084718:	2000      	movhi	r0, #0
 808471a:	f85d fb08 	ldr.w	pc, [sp], #8
 808471e:	bf00      	nop

08084720 <__aeabi_fcmpgt>:
 8084720:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084724:	f7ff ffc8 	bl	80846b8 <__aeabi_cfrcmple>
 8084728:	bf34      	ite	cc
 808472a:	2001      	movcc	r0, #1
 808472c:	2000      	movcs	r0, #0
 808472e:	f85d fb08 	ldr.w	pc, [sp], #8
 8084732:	bf00      	nop

08084734 <__aeabi_f2lz>:
 8084734:	b510      	push	{r4, lr}
 8084736:	2100      	movs	r1, #0
 8084738:	4604      	mov	r4, r0
 808473a:	f7ff ffd3 	bl	80846e4 <__aeabi_fcmplt>
 808473e:	b920      	cbnz	r0, 808474a <__aeabi_f2lz+0x16>
 8084740:	4620      	mov	r0, r4
 8084742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8084746:	f000 b809 	b.w	808475c <__aeabi_f2ulz>
 808474a:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 808474e:	f000 f805 	bl	808475c <__aeabi_f2ulz>
 8084752:	4240      	negs	r0, r0
 8084754:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8084758:	bd10      	pop	{r4, pc}
 808475a:	bf00      	nop

0808475c <__aeabi_f2ulz>:
 808475c:	b5d0      	push	{r4, r6, r7, lr}
 808475e:	f7ff fa13 	bl	8083b88 <__aeabi_f2d>
 8084762:	2200      	movs	r2, #0
 8084764:	4b0b      	ldr	r3, [pc, #44]	; (8084794 <__aeabi_f2ulz+0x38>)
 8084766:	4606      	mov	r6, r0
 8084768:	460f      	mov	r7, r1
 808476a:	f7ff fa65 	bl	8083c38 <__aeabi_dmul>
 808476e:	f7ff fc9d 	bl	80840ac <__aeabi_d2uiz>
 8084772:	4604      	mov	r4, r0
 8084774:	f7ff f9e6 	bl	8083b44 <__aeabi_ui2d>
 8084778:	2200      	movs	r2, #0
 808477a:	4b07      	ldr	r3, [pc, #28]	; (8084798 <__aeabi_f2ulz+0x3c>)
 808477c:	f7ff fa5c 	bl	8083c38 <__aeabi_dmul>
 8084780:	4602      	mov	r2, r0
 8084782:	460b      	mov	r3, r1
 8084784:	4630      	mov	r0, r6
 8084786:	4639      	mov	r1, r7
 8084788:	f7ff f89e 	bl	80838c8 <__aeabi_dsub>
 808478c:	f7ff fc8e 	bl	80840ac <__aeabi_d2uiz>
 8084790:	4621      	mov	r1, r4
 8084792:	bdd0      	pop	{r4, r6, r7, pc}
 8084794:	3df00000 	.word	0x3df00000
 8084798:	41f00000 	.word	0x41f00000

0808479c <asctime_r>:
 808479c:	b510      	push	{r4, lr}
 808479e:	460c      	mov	r4, r1
 80847a0:	6941      	ldr	r1, [r0, #20]
 80847a2:	b086      	sub	sp, #24
 80847a4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80847a8:	6903      	ldr	r3, [r0, #16]
 80847aa:	6982      	ldr	r2, [r0, #24]
 80847ac:	9104      	str	r1, [sp, #16]
 80847ae:	6801      	ldr	r1, [r0, #0]
 80847b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80847b4:	9103      	str	r1, [sp, #12]
 80847b6:	6841      	ldr	r1, [r0, #4]
 80847b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80847bc:	9102      	str	r1, [sp, #8]
 80847be:	6881      	ldr	r1, [r0, #8]
 80847c0:	9101      	str	r1, [sp, #4]
 80847c2:	68c1      	ldr	r1, [r0, #12]
 80847c4:	4620      	mov	r0, r4
 80847c6:	9100      	str	r1, [sp, #0]
 80847c8:	4904      	ldr	r1, [pc, #16]	; (80847dc <asctime_r+0x40>)
 80847ca:	440b      	add	r3, r1
 80847cc:	4904      	ldr	r1, [pc, #16]	; (80847e0 <asctime_r+0x44>)
 80847ce:	440a      	add	r2, r1
 80847d0:	4904      	ldr	r1, [pc, #16]	; (80847e4 <asctime_r+0x48>)
 80847d2:	f7fd fc67 	bl	80820a4 <siprintf>
 80847d6:	4620      	mov	r0, r4
 80847d8:	b006      	add	sp, #24
 80847da:	bd10      	pop	{r4, pc}
 80847dc:	0808507a 	.word	0x0808507a
 80847e0:	08085065 	.word	0x08085065
 80847e4:	08085045 	.word	0x08085045

080847e8 <atoi>:
 80847e8:	220a      	movs	r2, #10
 80847ea:	2100      	movs	r1, #0
 80847ec:	f000 b924 	b.w	8084a38 <strtol>

080847f0 <__cxa_atexit>:
 80847f0:	b510      	push	{r4, lr}
 80847f2:	4604      	mov	r4, r0
 80847f4:	4804      	ldr	r0, [pc, #16]	; (8084808 <__cxa_atexit+0x18>)
 80847f6:	4613      	mov	r3, r2
 80847f8:	b120      	cbz	r0, 8084804 <__cxa_atexit+0x14>
 80847fa:	460a      	mov	r2, r1
 80847fc:	2002      	movs	r0, #2
 80847fe:	4621      	mov	r1, r4
 8084800:	f3af 8000 	nop.w
 8084804:	bd10      	pop	{r4, pc}
 8084806:	bf00      	nop
 8084808:	00000000 	.word	0x00000000

0808480c <memcpy>:
 808480c:	440a      	add	r2, r1
 808480e:	4291      	cmp	r1, r2
 8084810:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8084814:	d100      	bne.n	8084818 <memcpy+0xc>
 8084816:	4770      	bx	lr
 8084818:	b510      	push	{r4, lr}
 808481a:	f811 4b01 	ldrb.w	r4, [r1], #1
 808481e:	4291      	cmp	r1, r2
 8084820:	f803 4f01 	strb.w	r4, [r3, #1]!
 8084824:	d1f9      	bne.n	808481a <memcpy+0xe>
 8084826:	bd10      	pop	{r4, pc}

08084828 <memmove>:
 8084828:	4288      	cmp	r0, r1
 808482a:	b510      	push	{r4, lr}
 808482c:	eb01 0402 	add.w	r4, r1, r2
 8084830:	d902      	bls.n	8084838 <memmove+0x10>
 8084832:	4284      	cmp	r4, r0
 8084834:	4623      	mov	r3, r4
 8084836:	d807      	bhi.n	8084848 <memmove+0x20>
 8084838:	1e43      	subs	r3, r0, #1
 808483a:	42a1      	cmp	r1, r4
 808483c:	d008      	beq.n	8084850 <memmove+0x28>
 808483e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8084842:	f803 2f01 	strb.w	r2, [r3, #1]!
 8084846:	e7f8      	b.n	808483a <memmove+0x12>
 8084848:	4601      	mov	r1, r0
 808484a:	4402      	add	r2, r0
 808484c:	428a      	cmp	r2, r1
 808484e:	d100      	bne.n	8084852 <memmove+0x2a>
 8084850:	bd10      	pop	{r4, pc}
 8084852:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8084856:	f802 4d01 	strb.w	r4, [r2, #-1]!
 808485a:	e7f7      	b.n	808484c <memmove+0x24>

0808485c <memset>:
 808485c:	4603      	mov	r3, r0
 808485e:	4402      	add	r2, r0
 8084860:	4293      	cmp	r3, r2
 8084862:	d100      	bne.n	8084866 <memset+0xa>
 8084864:	4770      	bx	lr
 8084866:	f803 1b01 	strb.w	r1, [r3], #1
 808486a:	e7f9      	b.n	8084860 <memset+0x4>

0808486c <srand>:
 808486c:	b538      	push	{r3, r4, r5, lr}
 808486e:	4b0d      	ldr	r3, [pc, #52]	; (80848a4 <srand+0x38>)
 8084870:	4604      	mov	r4, r0
 8084872:	681d      	ldr	r5, [r3, #0]
 8084874:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8084876:	b97b      	cbnz	r3, 8084898 <srand+0x2c>
 8084878:	2018      	movs	r0, #24
 808487a:	f7fd fbfb 	bl	8082074 <malloc>
 808487e:	4a0a      	ldr	r2, [pc, #40]	; (80848a8 <srand+0x3c>)
 8084880:	4b0a      	ldr	r3, [pc, #40]	; (80848ac <srand+0x40>)
 8084882:	63a8      	str	r0, [r5, #56]	; 0x38
 8084884:	e9c0 2300 	strd	r2, r3, [r0]
 8084888:	4b09      	ldr	r3, [pc, #36]	; (80848b0 <srand+0x44>)
 808488a:	2201      	movs	r2, #1
 808488c:	6083      	str	r3, [r0, #8]
 808488e:	230b      	movs	r3, #11
 8084890:	8183      	strh	r3, [r0, #12]
 8084892:	2300      	movs	r3, #0
 8084894:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8084898:	2200      	movs	r2, #0
 808489a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808489c:	611c      	str	r4, [r3, #16]
 808489e:	615a      	str	r2, [r3, #20]
 80848a0:	bd38      	pop	{r3, r4, r5, pc}
 80848a2:	bf00      	nop
 80848a4:	20000098 	.word	0x20000098
 80848a8:	abcd330e 	.word	0xabcd330e
 80848ac:	e66d1234 	.word	0xe66d1234
 80848b0:	0005deec 	.word	0x0005deec

080848b4 <strcmp>:
 80848b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80848b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80848bc:	2a01      	cmp	r2, #1
 80848be:	bf28      	it	cs
 80848c0:	429a      	cmpcs	r2, r3
 80848c2:	d0f7      	beq.n	80848b4 <strcmp>
 80848c4:	1ad0      	subs	r0, r2, r3
 80848c6:	4770      	bx	lr

080848c8 <strcpy>:
 80848c8:	4603      	mov	r3, r0
 80848ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80848ce:	f803 2b01 	strb.w	r2, [r3], #1
 80848d2:	2a00      	cmp	r2, #0
 80848d4:	d1f9      	bne.n	80848ca <strcpy+0x2>
 80848d6:	4770      	bx	lr

080848d8 <strdup>:
 80848d8:	4b02      	ldr	r3, [pc, #8]	; (80848e4 <strdup+0xc>)
 80848da:	4601      	mov	r1, r0
 80848dc:	6818      	ldr	r0, [r3, #0]
 80848de:	f000 b803 	b.w	80848e8 <_strdup_r>
 80848e2:	bf00      	nop
 80848e4:	20000098 	.word	0x20000098

080848e8 <_strdup_r>:
 80848e8:	b570      	push	{r4, r5, r6, lr}
 80848ea:	4604      	mov	r4, r0
 80848ec:	4608      	mov	r0, r1
 80848ee:	460d      	mov	r5, r1
 80848f0:	f000 f80d 	bl	808490e <strlen>
 80848f4:	1c46      	adds	r6, r0, #1
 80848f6:	4631      	mov	r1, r6
 80848f8:	4620      	mov	r0, r4
 80848fa:	f7fd fbeb 	bl	80820d4 <_malloc_r>
 80848fe:	4604      	mov	r4, r0
 8084900:	b118      	cbz	r0, 808490a <_strdup_r+0x22>
 8084902:	4632      	mov	r2, r6
 8084904:	4629      	mov	r1, r5
 8084906:	f7ff ff81 	bl	808480c <memcpy>
 808490a:	4620      	mov	r0, r4
 808490c:	bd70      	pop	{r4, r5, r6, pc}

0808490e <strlen>:
 808490e:	4603      	mov	r3, r0
 8084910:	f813 2b01 	ldrb.w	r2, [r3], #1
 8084914:	2a00      	cmp	r2, #0
 8084916:	d1fb      	bne.n	8084910 <strlen+0x2>
 8084918:	1a18      	subs	r0, r3, r0
 808491a:	3801      	subs	r0, #1
 808491c:	4770      	bx	lr

0808491e <strncpy>:
 808491e:	4603      	mov	r3, r0
 8084920:	b510      	push	{r4, lr}
 8084922:	3901      	subs	r1, #1
 8084924:	b132      	cbz	r2, 8084934 <strncpy+0x16>
 8084926:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808492a:	3a01      	subs	r2, #1
 808492c:	f803 4b01 	strb.w	r4, [r3], #1
 8084930:	2c00      	cmp	r4, #0
 8084932:	d1f7      	bne.n	8084924 <strncpy+0x6>
 8084934:	2100      	movs	r1, #0
 8084936:	441a      	add	r2, r3
 8084938:	4293      	cmp	r3, r2
 808493a:	d100      	bne.n	808493e <strncpy+0x20>
 808493c:	bd10      	pop	{r4, pc}
 808493e:	f803 1b01 	strb.w	r1, [r3], #1
 8084942:	e7f9      	b.n	8084938 <strncpy+0x1a>

08084944 <_strtol_l.isra.0>:
 8084944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8084948:	468c      	mov	ip, r1
 808494a:	4686      	mov	lr, r0
 808494c:	4e39      	ldr	r6, [pc, #228]	; (8084a34 <_strtol_l.isra.0+0xf0>)
 808494e:	4660      	mov	r0, ip
 8084950:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8084954:	5da5      	ldrb	r5, [r4, r6]
 8084956:	f015 0508 	ands.w	r5, r5, #8
 808495a:	d1f8      	bne.n	808494e <_strtol_l.isra.0+0xa>
 808495c:	2c2d      	cmp	r4, #45	; 0x2d
 808495e:	d133      	bne.n	80849c8 <_strtol_l.isra.0+0x84>
 8084960:	f04f 0801 	mov.w	r8, #1
 8084964:	f89c 4000 	ldrb.w	r4, [ip]
 8084968:	f100 0c02 	add.w	ip, r0, #2
 808496c:	2b00      	cmp	r3, #0
 808496e:	d05c      	beq.n	8084a2a <_strtol_l.isra.0+0xe6>
 8084970:	2b10      	cmp	r3, #16
 8084972:	d10c      	bne.n	808498e <_strtol_l.isra.0+0x4a>
 8084974:	2c30      	cmp	r4, #48	; 0x30
 8084976:	d10a      	bne.n	808498e <_strtol_l.isra.0+0x4a>
 8084978:	f89c 0000 	ldrb.w	r0, [ip]
 808497c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8084980:	2858      	cmp	r0, #88	; 0x58
 8084982:	d14d      	bne.n	8084a20 <_strtol_l.isra.0+0xdc>
 8084984:	2310      	movs	r3, #16
 8084986:	f89c 4001 	ldrb.w	r4, [ip, #1]
 808498a:	f10c 0c02 	add.w	ip, ip, #2
 808498e:	2600      	movs	r6, #0
 8084990:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8084994:	3f01      	subs	r7, #1
 8084996:	fbb7 f9f3 	udiv	r9, r7, r3
 808499a:	4630      	mov	r0, r6
 808499c:	fb03 7a19 	mls	sl, r3, r9, r7
 80849a0:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80849a4:	2d09      	cmp	r5, #9
 80849a6:	d818      	bhi.n	80849da <_strtol_l.isra.0+0x96>
 80849a8:	462c      	mov	r4, r5
 80849aa:	42a3      	cmp	r3, r4
 80849ac:	dd24      	ble.n	80849f8 <_strtol_l.isra.0+0xb4>
 80849ae:	1c75      	adds	r5, r6, #1
 80849b0:	d007      	beq.n	80849c2 <_strtol_l.isra.0+0x7e>
 80849b2:	4581      	cmp	r9, r0
 80849b4:	d31d      	bcc.n	80849f2 <_strtol_l.isra.0+0xae>
 80849b6:	d101      	bne.n	80849bc <_strtol_l.isra.0+0x78>
 80849b8:	45a2      	cmp	sl, r4
 80849ba:	db1a      	blt.n	80849f2 <_strtol_l.isra.0+0xae>
 80849bc:	2601      	movs	r6, #1
 80849be:	fb00 4003 	mla	r0, r0, r3, r4
 80849c2:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80849c6:	e7eb      	b.n	80849a0 <_strtol_l.isra.0+0x5c>
 80849c8:	2c2b      	cmp	r4, #43	; 0x2b
 80849ca:	bf08      	it	eq
 80849cc:	f89c 4000 	ldrbeq.w	r4, [ip]
 80849d0:	46a8      	mov	r8, r5
 80849d2:	bf08      	it	eq
 80849d4:	f100 0c02 	addeq.w	ip, r0, #2
 80849d8:	e7c8      	b.n	808496c <_strtol_l.isra.0+0x28>
 80849da:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80849de:	2d19      	cmp	r5, #25
 80849e0:	d801      	bhi.n	80849e6 <_strtol_l.isra.0+0xa2>
 80849e2:	3c37      	subs	r4, #55	; 0x37
 80849e4:	e7e1      	b.n	80849aa <_strtol_l.isra.0+0x66>
 80849e6:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80849ea:	2d19      	cmp	r5, #25
 80849ec:	d804      	bhi.n	80849f8 <_strtol_l.isra.0+0xb4>
 80849ee:	3c57      	subs	r4, #87	; 0x57
 80849f0:	e7db      	b.n	80849aa <_strtol_l.isra.0+0x66>
 80849f2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80849f6:	e7e4      	b.n	80849c2 <_strtol_l.isra.0+0x7e>
 80849f8:	1c73      	adds	r3, r6, #1
 80849fa:	d106      	bne.n	8084a0a <_strtol_l.isra.0+0xc6>
 80849fc:	2322      	movs	r3, #34	; 0x22
 80849fe:	4638      	mov	r0, r7
 8084a00:	f8ce 3000 	str.w	r3, [lr]
 8084a04:	b942      	cbnz	r2, 8084a18 <_strtol_l.isra.0+0xd4>
 8084a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084a0a:	f1b8 0f00 	cmp.w	r8, #0
 8084a0e:	d000      	beq.n	8084a12 <_strtol_l.isra.0+0xce>
 8084a10:	4240      	negs	r0, r0
 8084a12:	2a00      	cmp	r2, #0
 8084a14:	d0f7      	beq.n	8084a06 <_strtol_l.isra.0+0xc2>
 8084a16:	b10e      	cbz	r6, 8084a1c <_strtol_l.isra.0+0xd8>
 8084a18:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8084a1c:	6011      	str	r1, [r2, #0]
 8084a1e:	e7f2      	b.n	8084a06 <_strtol_l.isra.0+0xc2>
 8084a20:	2430      	movs	r4, #48	; 0x30
 8084a22:	2b00      	cmp	r3, #0
 8084a24:	d1b3      	bne.n	808498e <_strtol_l.isra.0+0x4a>
 8084a26:	2308      	movs	r3, #8
 8084a28:	e7b1      	b.n	808498e <_strtol_l.isra.0+0x4a>
 8084a2a:	2c30      	cmp	r4, #48	; 0x30
 8084a2c:	d0a4      	beq.n	8084978 <_strtol_l.isra.0+0x34>
 8084a2e:	230a      	movs	r3, #10
 8084a30:	e7ad      	b.n	808498e <_strtol_l.isra.0+0x4a>
 8084a32:	bf00      	nop
 8084a34:	0808509f 	.word	0x0808509f

08084a38 <strtol>:
 8084a38:	4613      	mov	r3, r2
 8084a3a:	460a      	mov	r2, r1
 8084a3c:	4601      	mov	r1, r0
 8084a3e:	4802      	ldr	r0, [pc, #8]	; (8084a48 <strtol+0x10>)
 8084a40:	6800      	ldr	r0, [r0, #0]
 8084a42:	f7ff bf7f 	b.w	8084944 <_strtol_l.isra.0>
 8084a46:	bf00      	nop
 8084a48:	20000098 	.word	0x20000098

08084a4c <dynalib_user>:
 8084a4c:	08080031 08080071 08080099 0808009d     1...q...........
 8084a5c:	00000000 6e6b6e55 006e776f 656e6f4e     ....Unknown.None
 8084a6c:	46695700 53470069 4d55004d 43005354     .WiFi.GSM.UMTS.C
 8084a7c:	00414d44 0045544c 45454549 31323038     DMA.LTE.IEEE8021
 8084a8c:	4c003435 435f4554 4d5f5441 544c0031     54.LTE_CAT_M1.LT
 8084a9c:	41435f45 424e5f54 6f4e0031 74614420     E_CAT_NB1.No Dat
 8084aac:	62550061 746f6469 6f482073 52006b6f     a.Ubidots Hook.R
 8084abc:	6f707365 2065736e 65636552 64657669     esponse Received
 8084acc:	61745300 53006574 56207465 6f627265     .State.Set Verbo
 8084adc:	4d206573 0065646f 6c430030 65726165     se Mode.0.Cleare
 8084aec:	65562064 736f6272 6f4d2065 25006564     d Verbose Mode.%
 8084afc:	66312e32 43545520 6d695400 6f7a2065     2.1f UTC.Time zo
 8084b0c:	6f20656e 65736666 69252074 6d695400     ne offset %i.Tim
 8084b1c:	35370065 75462025 31006c6c 20253030     e.75% Full.100% 
 8084b2c:	6c6c7546 776f4c00 6c694f20 20732500     Full.Low Oil.%s 
 8084b3c:	32253a53 2566302e 51202c25 2e32253a     S:%2.0f%%, Q:%2.
 8084b4c:	25256630 227b0020 75706e69 3a223174     0f%% .{"input1":
 8084b5c:	202c6925 706e6922 22327475 2c69253a     %i, "input2":%i,
 8084b6c:	65742220 3a22706d 202c6925 656c6122      "temp":%i, "ale
 8084b7c:	22737472 2c69253a 65722220 73746573     rts":%i, "resets
 8084b8c:	69253a22 7422202c 73656d69 706d6174     ":%i, "timestamp
 8084b9c:	6c253a22 30303075 6148007d 72656c75     ":%lu000}.Hauler
 8084bac:	6c6c6143 485f7265 006b6f6f 6e6e7552     Caller_Hook.Runn
 8084bbc:	00676e69 6c696144 6c432079 756e6165     ing.Daily Cleanu
 8084bcc:	6f4c0070 6e696461 79532067 6d657473     p.Loading System
 8084bdc:	66654420 746c7561 72460073 25206d6f      Defaults.From %
 8084bec:	6f742073 00732520 74617453 72542065     s to %s.State Tr
 8084bfc:	69736e61 6e6f6974 2b544100 4e554643     ansition.AT+CFUN
 8084c0c:	0d36313d 7073000a 2f6b7261 69766564     =16...spark/devi
 8084c1c:	732f6563 69737365 652f6e6f 4500646e     ce/session/end.E
 8084c2c:	726f7272 61745320 2d206574 73655220     rror State - Res
 8084c3c:	45007465 726f7272 61745320 2d206574     et.Error State -
 8084c4c:	776f5020 43207265 656c6379 72724500      Power Cycle.Err
 8084c5c:	5320726f 65746174 46202d20 206c6c75     or State - Full 
 8084c6c:	65646f4d 6552206d 00746573 6e676953     Modem Reset.Sign
 8084c7c:	52006c61 74657365 6e756f43 65540074     al.ResetCount.Te
 8084c8c:	7265706d 72757461 65520065 7361656c     mperature.Releas
 8084c9c:	6e490065 31747570 706e4900 00327475     e.Input1.Input2.
 8084cac:	64726148 7365522d 53007465 2d646e65     Hard-Reset.Send-
 8084cbc:	00776f4e 62726556 2d65736f 65646f4d     Now.Verbose-Mode
 8084ccc:	74655300 6d69542d 6e6f7a65 65530065     .Set-Timezone.Se
 8084cdc:	53442d74 66664f54 00746573 41206f4e     t-DSTOffset.No A
 8084cec:	7472656c 54534400 66666f20 20746573     lert.DST offset 
 8084cfc:	312e3225 00000066                       %2.1f...

08084d04 <_ZTV8MB85RC64>:
	...
 8084d0c:	08080145 08080159 080812f9 0808138f     E...Y...........
 8084d1c:	08081411                                ....

08084d20 <_ZTV17PublishQueueAsync>:
	...
 8084d28:	0808011d 08080131 08081539 080816c5     ....1...9.......
 8084d38:	08081685 08081663 08081807 080816ab     ....c...........
 8084d48:	08084a60 08084a68 08084a6d 08084a72     `J..hJ..mJ..rJ..
 8084d58:	08084a76 08084a7b 08084a80 08084a84     vJ..{J...J...J..
 8084d68:	08084a8f 08084a9a                       .J...J..

08084d70 <_ZL13releaseNumber>:
 8084d70:	30302e35 00000000                       5.00....

08084d78 <_ZL17FRAMversionNumber>:
 8084d78:	00000001 74697277 74614465 61662061     ....writeData fa
 8084d88:	64656c69 72756420 20676e69 73617265     iled during eras
 8084d98:	72662065 64416d61 253d7264 00000075     e framAddr=%u...

08084da8 <_ZTV6MB85RC>:
	...
 8084db0:	08081219 0808121b 080812f9 0808138f     ................
 8084dc0:	08081411 6c627550 51687369 65756575     ....PublishQueue
 8084dd0:	6e797341 75710063 69657565 6520676e     Async.queueing e
 8084de0:	746e6576 656d614e 2073253d 61746164     ventName=%s data
 8084df0:	2073253d 3d6c7474 66206425 7367616c     =%s ttl=%d flags
 8084e00:	64253d31 616c6620 3d327367 73206425     1=%d flags2=%d s
 8084e10:	3d657a69 70006425 696c6275 6e696873     ize=%d.publishin
 8084e20:	73252067 20732520 3d6c7474 66206425     g %s %s ttl=%d f
 8084e30:	7367616c 0078253d 6c627570 65687369     lags=%x.publishe
 8084e40:	75732064 73656363 6c756673 7000796c     d successfully.p
 8084e50:	696c6275 64656873 69616620 2c64656c     ublished failed,
 8084e60:	6c697720 6572206c 20797274 25206e69      will retry in %
 8084e70:	6d20756c 70610073 75702e70 00007162     lu ms.app.pubq..

08084e80 <_ZTV21PublishQueueAsyncBase>:
	...
 8084e90:	08081539 080800b9 080800b9 080800b9     9...............
 8084ea0:	080800b9 080800b9                       ........

08084ea8 <_ZTV25PublishQueueAsyncRetained>:
	...
 8084eb0:	08081621 08081635 08081539 080816c5     !...5...9.......
 8084ec0:	08081685 08081663 08081807 080816ab     ....c...........

08084ed0 <_ZTVN5spark13CellularClassE>:
	...
 8084ed8:	080821bd 080821b3 080821a9 08082123     .!...!...!..#!..
 8084ee8:	0808219d 08082191 08082185 0808217d     .!...!...!..}!..
 8084ef8:	08082173 08082169 0808212d              s!..i!..-!..

08084f04 <_ZTV14CellularSignal>:
	...
 8084f0c:	0808226d 08082273 0808226f 08082281     m"..s"..o"..."..
 8084f1c:	080822b1 080822d5 08082305 0808234d     ."..."...#..M#..
 8084f2c:	fffffffc 00000000 08082373              ........s#..

08084f38 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8084f40:	08082393 08082399 080823d7 080823a7     .#...#...#...#..
 8084f50:	08082395                                .#..

08084f54 <_ZTV7TwoWire>:
	...
 8084f5c:	0808299d 080829e7 080829bf 0808299f     .)...)...)...)..
 8084f6c:	080829c7 080829cf 080829d7 080829df     .)...)...)...)..

08084f7c <_ZTV9IPAddress>:
	...
 8084f84:	08082b4d 08082b3d 08082b3f 00707061     M+..=+..?+..app.

08084f94 <_ZTVN5spark12NetworkClassE>:
	...
 8084f9c:	08082bed 08082bf7 08082c01 08082c0b     .+...+...,...,..
 8084fac:	08082c15 08082c21 08082c2d 08082c39     .,..!,..-,..9,..
 8084fbc:	08082c41 08082c4b 08082c55 252d5925     A,..K,..U,..%Y-%
 8084fcc:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
 8084fdc:	74637361 00656d69                       asctime.

08084fe4 <_ZTV11USARTSerial>:
	...
 8084fec:	08083285 080832ed 080832c9 08082cb1     .2...2...2...,..
 8084ffc:	08083299 080832b5 080832a7 080832c3     .2...2...2...2..
 808500c:	08083287 0808328b                       .2...2..

08085014 <_ZTV9USBSerial>:
	...
 808501c:	0808337d 080833e3 080833bb 08082cb1     }3...3...3...,..
 808502c:	080833ad 0808337f 0808338f 080833dd     .3...3...3...3..
 808503c:	0808339f 08083379                       .3..y3..

08085044 <_ZSt7nothrow>:
 8085044:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
 8085054:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

08085065 <day_name.4782>:
 8085065:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
 8085075:	61536972                                 riSat

0808507a <mon_name.4783>:
 808507a:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
 808508a:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
 808509a:	63654476                                vDec

0808509e <_ctype_>:
 808509e:	20202000 20202020 28282020 20282828     .         ((((( 
 80850ae:	20202020 20202020 20202020 20202020                     
 80850be:	10108820 10101010 10101010 10101010      ...............
 80850ce:	04040410 04040404 10040404 10101010     ................
 80850de:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80850ee:	01010101 01010101 01010101 10101010     ................
 80850fe:	42421010 42424242 02020202 02020202     ..BBBBBB........
 808510e:	02020202 02020202 02020202 10101010     ................
 808511e:	00000020 00000000 00000000 00000000      ...............
	...

0808519f <link_const_variable_data_end>:
	...

080851a0 <link_constructors_location>:
 80851a0:	08081149 	.word	0x08081149
 80851a4:	08081a99 	.word	0x08081a99
 80851a8:	0808223d 	.word	0x0808223d
 80851ac:	08082bdd 	.word	0x08082bdd
 80851b0:	08082c9d 	.word	0x08082c9d
 80851b4:	08082d49 	.word	0x08082d49
 80851b8:	08082fb5 	.word	0x08082fb5
 80851bc:	08083271 	.word	0x08083271
 80851c0:	08083875 	.word	0x08083875

080851c4 <link_constructors_end>:
	...
