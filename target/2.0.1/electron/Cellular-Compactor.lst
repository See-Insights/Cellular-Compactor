
/Users/chipmc/Documents/Maker/Particle/Projects/Cellular-Compactor/target/2.0.1/electron/Cellular-Compactor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000050e0  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000804  40024000  08085100  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000fc  20000000  08085904  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006e8  20000100  20000100  00040100  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  08085a00  08085a00  00035a00  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  08085a2c  08085a2c  00035a2c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0012dd15  00000000  00000000  00035a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001642b  00000000  00000000  00163745  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000026b8  00000000  00000000  00179b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000063c0  00000000  00000000  0017c228  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000299d8  00000000  00000000  001825e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00032424  00000000  00000000  001abfc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000b881c  00000000  00000000  001de3e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00006618  00000000  00000000  00296c00  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0001e197  00000000  00000000  0029d218  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <localtime_r>:
#endif // !(defined(DYNALIB_IMPORT) && defined(PARTICLE_COMPILE_LTO))
DYNALIB_FN(18, services2, mktime32, time32_t(struct tm*))
DYNALIB_FN(19, services2, __ssvfscanf_r, int(struct _reent*, FILE*, const char*, va_list))
DYNALIB_FN(20, services2, _printf_i, int(struct _reent*, struct _prt_data_t*, FILE*, int (*pfunc)(struct _reent *, FILE *, const char *, size_t), va_list*))
DYNALIB_FN(21, services2, localtime32_r, struct tm*(const time32_t*, struct tm*))
DYNALIB_FN(22, services2, localtime_r, struct tm*(const time_t*, struct tm*))
 8080020:	b508      	push	{r3, lr}
 8080022:	4b02      	ldr	r3, [pc, #8]	; (808002c <localtime_r+0xc>)
 8080024:	681b      	ldr	r3, [r3, #0]
 8080026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080028:	9301      	str	r3, [sp, #4]
 808002a:	bd08      	pop	{r3, pc}
 808002c:	0806002c 	.word	0x0806002c

08080030 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080030:	4809      	ldr	r0, [pc, #36]	; (8080058 <module_user_pre_init+0x28>)
 8080032:	490a      	ldr	r1, [pc, #40]	; (808005c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080034:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080036:	4288      	cmp	r0, r1
 8080038:	d005      	beq.n	8080046 <module_user_pre_init+0x16>
 808003a:	4a09      	ldr	r2, [pc, #36]	; (8080060 <module_user_pre_init+0x30>)
 808003c:	4282      	cmp	r2, r0
 808003e:	d002      	beq.n	8080046 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080040:	1a12      	subs	r2, r2, r0
 8080042:	f004 fb7f 	bl	8084744 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080046:	4807      	ldr	r0, [pc, #28]	; (8080064 <module_user_pre_init+0x34>)
 8080048:	4a07      	ldr	r2, [pc, #28]	; (8080068 <module_user_pre_init+0x38>)
 808004a:	2100      	movs	r1, #0
 808004c:	1a12      	subs	r2, r2, r0
 808004e:	f004 fba1 	bl	8084794 <memset>
    return &link_heap_start;
}
 8080052:	4806      	ldr	r0, [pc, #24]	; (808006c <module_user_pre_init+0x3c>)
 8080054:	bd08      	pop	{r3, pc}
 8080056:	bf00      	nop
 8080058:	20000000 	.word	0x20000000
 808005c:	08085904 	.word	0x08085904
 8080060:	200000fc 	.word	0x200000fc
 8080064:	20000100 	.word	0x20000100
 8080068:	200007e8 	.word	0x200007e8
 808006c:	200007e8 	.word	0x200007e8

08080070 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080070:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080072:	f003 fa69 	bl	8083548 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080076:	2500      	movs	r5, #0
 8080078:	4e05      	ldr	r6, [pc, #20]	; (8080090 <module_user_init+0x20>)
 808007a:	4c06      	ldr	r4, [pc, #24]	; (8080094 <module_user_init+0x24>)
 808007c:	1ba4      	subs	r4, r4, r6
 808007e:	08a4      	lsrs	r4, r4, #2
 8080080:	42a5      	cmp	r5, r4
 8080082:	d100      	bne.n	8080086 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080084:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080086:	f856 3b04 	ldr.w	r3, [r6], #4
 808008a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808008c:	3501      	adds	r5, #1
 808008e:	e7f7      	b.n	8080080 <module_user_init+0x10>
 8080090:	080850d4 	.word	0x080850d4
 8080094:	080850f8 	.word	0x080850f8

08080098 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080098:	f000 bde2 	b.w	8080c60 <setup>

0808009c <module_user_loop>:
}

void module_user_loop() {
 808009c:	b508      	push	{r3, lr}
    loop();
 808009e:	f000 fc41 	bl	8080924 <loop>
    _post_loop();
}
 80800a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80800a6:	f003 ba11 	b.w	80834cc <_post_loop>

080800aa <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80800aa:	f001 bf7f 	b.w	8081fac <malloc>

080800ae <_Znaj>:
 80800ae:	f001 bf7d 	b.w	8081fac <malloc>

080800b2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80800b2:	f001 bf83 	b.w	8081fbc <free>
	...

080800b8 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800b8:	2100      	movs	r1, #0
 80800ba:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80800bc:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80800be:	4a02      	ldr	r2, [pc, #8]	; (80800c8 <__cxa_pure_virtual+0x10>)
 80800c0:	f001 fe56 	bl	8081d70 <panic_>
  while (1);
 80800c4:	e7fe      	b.n	80800c4 <__cxa_pure_virtual+0xc>
 80800c6:	bf00      	nop
 80800c8:	08081ad1 	.word	0x08081ad1

080800cc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800cc:	7800      	ldrb	r0, [r0, #0]
 80800ce:	fab0 f080 	clz	r0, r0
 80800d2:	0940      	lsrs	r0, r0, #5
 80800d4:	4770      	bx	lr

080800d6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800d6:	2301      	movs	r3, #1
 80800d8:	7003      	strb	r3, [r0, #0]
 80800da:	4770      	bx	lr

080800dc <_Z11watchdogISRv>:
  watchdogFlag = false;
}

// Here is were we will put the timer and other ISRs
void watchdogISR() {
  watchdogFlag = true;
 80800dc:	2201      	movs	r2, #1
 80800de:	4b01      	ldr	r3, [pc, #4]	; (80800e4 <_Z11watchdogISRv+0x8>)
 80800e0:	701a      	strb	r2, [r3, #0]
}
 80800e2:	4770      	bx	lr
 80800e4:	200001f5 	.word	0x200001f5

080800e8 <_Z9input1ISRv>:

void input1ISR() {
  input1Flag = true;
 80800e8:	2201      	movs	r2, #1
 80800ea:	4b01      	ldr	r3, [pc, #4]	; (80800f0 <_Z9input1ISRv+0x8>)
 80800ec:	701a      	strb	r2, [r3, #0]
}
 80800ee:	4770      	bx	lr
 80800f0:	2000019c 	.word	0x2000019c

080800f4 <_Z9input2ISRv>:

// Here is were we will put the timer and other ISRs
void input2ISR() {
  input2Flag = true;
 80800f4:	2201      	movs	r2, #1
 80800f6:	4b01      	ldr	r3, [pc, #4]	; (80800fc <_Z9input2ISRv+0x8>)
 80800f8:	701a      	strb	r2, [r3, #0]
}
 80800fa:	4770      	bx	lr
 80800fc:	2000019d 	.word	0x2000019d

08080100 <_Z7sendNow6String>:
    return 1;                                 // Unfortunately, this will never be sent
  }
  else return 0;
}

int sendNow(String command) {// Function to force sending data in current hour
 8080100:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8080102:	4904      	ldr	r1, [pc, #16]	; (8080114 <_Z7sendNow6String+0x14>)
 8080104:	f002 fe50 	bl	8082da8 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080108:	b118      	cbz	r0, 8080112 <_Z7sendNow6String+0x12>
  {
    state = REPORTING_STATE;
 808010a:	2205      	movs	r2, #5
    return 1;
 808010c:	2001      	movs	r0, #1
    state = REPORTING_STATE;
 808010e:	4b02      	ldr	r3, [pc, #8]	; (8080118 <_Z7sendNow6String+0x18>)
 8080110:	701a      	strb	r2, [r3, #0]
  }
  else return 0;
}
 8080112:	bd08      	pop	{r3, pc}
 8080114:	080849dc 	.word	0x080849dc
 8080118:	200001dc 	.word	0x200001dc

0808011c <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
 808011c:	b510      	push	{r4, lr}
 808011e:	4604      	mov	r4, r0
 8080120:	4b02      	ldr	r3, [pc, #8]	; (808012c <_ZN17PublishQueueAsyncD1Ev+0x10>)
 8080122:	6003      	str	r3, [r0, #0]
 8080124:	f001 fa18 	bl	8081558 <_ZN25PublishQueueAsyncRetainedD1Ev>
 8080128:	4620      	mov	r0, r4
 808012a:	bd10      	pop	{r4, pc}
 808012c:	08084c60 	.word	0x08084c60

08080130 <_ZN17PublishQueueAsyncD0Ev>:
 8080130:	b510      	push	{r4, lr}
 8080132:	4604      	mov	r4, r0
 8080134:	f7ff fff2 	bl	808011c <_ZN17PublishQueueAsyncD1Ev>
 8080138:	4620      	mov	r0, r4
 808013a:	2138      	movs	r1, #56	; 0x38
 808013c:	f003 fb53 	bl	80837e6 <_ZdlPvj>
 8080140:	4620      	mov	r0, r4
 8080142:	bd10      	pop	{r4, pc}

08080144 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
 8080144:	b510      	push	{r4, lr}
 8080146:	4604      	mov	r4, r0
 8080148:	4b02      	ldr	r3, [pc, #8]	; (8080154 <_ZN8MB85RC64D1Ev+0x10>)
 808014a:	6003      	str	r3, [r0, #0]
 808014c:	f001 f800 	bl	8081150 <_ZN6MB85RCD1Ev>
 8080150:	4620      	mov	r0, r4
 8080152:	bd10      	pop	{r4, pc}
 8080154:	08084c44 	.word	0x08084c44

08080158 <_ZN8MB85RC64D0Ev>:
 8080158:	b510      	push	{r4, lr}
 808015a:	4604      	mov	r4, r0
 808015c:	f7ff fff2 	bl	8080144 <_ZN8MB85RC64D1Ev>
 8080160:	4620      	mov	r0, r4
 8080162:	2110      	movs	r1, #16
 8080164:	f003 fb3f 	bl	80837e6 <_ZdlPvj>
 8080168:	4620      	mov	r0, r4
 808016a:	bd10      	pop	{r4, pc}

0808016c <_Z12hardResetNow6String>:
int hardResetNow(String command) {  // Will perform a hard reset on the Electron
 808016c:	b508      	push	{r3, lr}
 808016e:	4905      	ldr	r1, [pc, #20]	; (8080184 <_Z12hardResetNow6String+0x18>)
 8080170:	f002 fe1a 	bl	8082da8 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080174:	b120      	cbz	r0, 8080180 <_Z12hardResetNow6String+0x14>
    digitalWrite(hardResetPin,HIGH);          // This will cut all power to the Electron AND the carrir board
 8080176:	2004      	movs	r0, #4
 8080178:	2101      	movs	r1, #1
 808017a:	f003 fa8e 	bl	808369a <digitalWrite>
 808017e:	2001      	movs	r0, #1
}
 8080180:	bd08      	pop	{r3, pc}
 8080182:	bf00      	nop
 8080184:	080849dc 	.word	0x080849dc

08080188 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 8080188:	b510      	push	{r4, lr}
 808018a:	4604      	mov	r4, r0
        if (wakeupSource_) {
 808018c:	6800      	ldr	r0, [r0, #0]
 808018e:	b108      	cbz	r0, 8080194 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 8080190:	f001 ff14 	bl	8081fbc <free>
class SystemClass {
 8080194:	4620      	mov	r0, r4
 8080196:	bd10      	pop	{r4, pc}

08080198 <_ZN10CloudClass8syncTimeEv.isra.0>:
    void unsubscribe()
    {
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
 8080198:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808019a:	f001 fe77 	bl	8081e8c <spark_cloud_flag_connected>
        if (!connected()) {
 808019e:	b120      	cbz	r0, 80801aa <_ZN10CloudClass8syncTimeEv.isra.0+0x12>
    }
 80801a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return spark_sync_time(NULL);
 80801a4:	2000      	movs	r0, #0
 80801a6:	f001 be91 	b.w	8081ecc <spark_sync_time>
    }
 80801aa:	bd08      	pop	{r3, pc}

080801ac <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
 80801ac:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80801ae:	2000      	movs	r0, #0
 80801b0:	f001 fe94 	bl	8081edc <spark_sync_time_pending>
 80801b4:	b128      	cbz	r0, 80801c2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80801b6:	f001 fe69 	bl	8081e8c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80801ba:	f080 0001 	eor.w	r0, r0, #1
 80801be:	b2c0      	uxtb	r0, r0
    }
 80801c0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80801c2:	2001      	movs	r0, #1
 80801c4:	e7fc      	b.n	80801c0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

080801c6 <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80801c6:	2000      	movs	r0, #0
 80801c8:	f001 bc9a 	b.w	8081b00 <hal_timer_millis>

080801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
 80801cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80801ce:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
 80801d2:	6804      	ldr	r4, [r0, #0]
 80801d4:	f88d 3000 	strb.w	r3, [sp]
 80801d8:	f88d 5004 	strb.w	r5, [sp, #4]
 80801dc:	233c      	movs	r3, #60	; 0x3c
 80801de:	68e4      	ldr	r4, [r4, #12]
 80801e0:	47a0      	blx	r4
	}
 80801e2:	b003      	add	sp, #12
 80801e4:	bd30      	pop	{r4, r5, pc}
	...

080801e8 <_Z14UbidotsHandlerPKcS0_>:
{
 80801e8:	b513      	push	{r0, r1, r4, lr}
  if (!data) {                                            // First check to see if there is any data
 80801ea:	460c      	mov	r4, r1
 80801ec:	b951      	cbnz	r1, 8080204 <_Z14UbidotsHandlerPKcS0_+0x1c>
    publishQueue.publish("Ubidots Hook", "No Data",PRIVATE);
 80801ee:	4b17      	ldr	r3, [pc, #92]	; (808024c <_Z14UbidotsHandlerPKcS0_+0x64>)
 80801f0:	f88d 1000 	strb.w	r1, [sp]
 80801f4:	781b      	ldrb	r3, [r3, #0]
 80801f6:	4a16      	ldr	r2, [pc, #88]	; (8080250 <_Z14UbidotsHandlerPKcS0_+0x68>)
  else publishQueue.publish("Ubidots Hook", data,PRIVATE);             // Publish the response code
 80801f8:	4916      	ldr	r1, [pc, #88]	; (8080254 <_Z14UbidotsHandlerPKcS0_+0x6c>)
 80801fa:	4817      	ldr	r0, [pc, #92]	; (8080258 <_Z14UbidotsHandlerPKcS0_+0x70>)
 80801fc:	f7ff ffe6 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
 8080200:	b002      	add	sp, #8
 8080202:	bd10      	pop	{r4, pc}
  int responseCode = atoi(data);                          // Response is only a single number thanks to Template
 8080204:	4608      	mov	r0, r1
 8080206:	f004 fa8b 	bl	8084720 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
 808020a:	38c8      	subs	r0, #200	; 0xc8
 808020c:	2801      	cmp	r0, #1
 808020e:	d815      	bhi.n	808023c <_Z14UbidotsHandlerPKcS0_+0x54>
    if(sysStatus.verboseMode) publishQueue.publish("State","Response Received",PRIVATE);
 8080210:	4b12      	ldr	r3, [pc, #72]	; (808025c <_Z14UbidotsHandlerPKcS0_+0x74>)
 8080212:	78db      	ldrb	r3, [r3, #3]
 8080214:	b14b      	cbz	r3, 808022a <_Z14UbidotsHandlerPKcS0_+0x42>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080216:	2300      	movs	r3, #0
 8080218:	f88d 3000 	strb.w	r3, [sp]
 808021c:	4b0b      	ldr	r3, [pc, #44]	; (808024c <_Z14UbidotsHandlerPKcS0_+0x64>)
 808021e:	4a10      	ldr	r2, [pc, #64]	; (8080260 <_Z14UbidotsHandlerPKcS0_+0x78>)
 8080220:	781b      	ldrb	r3, [r3, #0]
 8080222:	4910      	ldr	r1, [pc, #64]	; (8080264 <_Z14UbidotsHandlerPKcS0_+0x7c>)
 8080224:	480c      	ldr	r0, [pc, #48]	; (8080258 <_Z14UbidotsHandlerPKcS0_+0x70>)
 8080226:	f7ff ffd1 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    dataInFlight = false;                                 // Data has been received
 808022a:	2100      	movs	r1, #0
    digitalWrite(blueLED, LOW);                           // Reset the LED and flags
 808022c:	2007      	movs	r0, #7
    dataInFlight = false;                                 // Data has been received
 808022e:	4b0e      	ldr	r3, [pc, #56]	; (8080268 <_Z14UbidotsHandlerPKcS0_+0x80>)
 8080230:	7019      	strb	r1, [r3, #0]
}
 8080232:	b002      	add	sp, #8
 8080234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(blueLED, LOW);                           // Reset the LED and flags
 8080238:	f003 ba2f 	b.w	808369a <digitalWrite>
 808023c:	2300      	movs	r3, #0
  else publishQueue.publish("Ubidots Hook", data,PRIVATE);             // Publish the response code
 808023e:	f88d 3000 	strb.w	r3, [sp]
 8080242:	4b02      	ldr	r3, [pc, #8]	; (808024c <_Z14UbidotsHandlerPKcS0_+0x64>)
 8080244:	4622      	mov	r2, r4
 8080246:	781b      	ldrb	r3, [r3, #0]
 8080248:	e7d6      	b.n	80801f8 <_Z14UbidotsHandlerPKcS0_+0x10>
 808024a:	bf00      	nop
 808024c:	20000154 	.word	0x20000154
 8080250:	080849de 	.word	0x080849de
 8080254:	080849e6 	.word	0x080849e6
 8080258:	200001a0 	.word	0x200001a0
 808025c:	200001e0 	.word	0x200001e0
 8080260:	080849f3 	.word	0x080849f3
 8080264:	08084a05 	.word	0x08084a05
 8080268:	2000018b 	.word	0x2000018b

0808026c <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
 808026c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808026e:	4912      	ldr	r1, [pc, #72]	; (80802b8 <_Z14setVerboseMode6String+0x4c>)
 8080270:	4605      	mov	r5, r0
 8080272:	f002 fd99 	bl	8082da8 <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080276:	4604      	mov	r4, r0
 8080278:	b178      	cbz	r0, 808029a <_Z14setVerboseMode6String+0x2e>
  {
    sysStatus.verboseMode = true;
 808027a:	2401      	movs	r4, #1
 808027c:	4b0f      	ldr	r3, [pc, #60]	; (80802bc <_Z14setVerboseMode6String+0x50>)
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
 808027e:	4a10      	ldr	r2, [pc, #64]	; (80802c0 <_Z14setVerboseMode6String+0x54>)
    sysStatus.verboseMode = true;
 8080280:	70dc      	strb	r4, [r3, #3]
 8080282:	2300      	movs	r3, #0
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
 8080284:	f88d 3000 	strb.w	r3, [sp]
 8080288:	4b0e      	ldr	r3, [pc, #56]	; (80802c4 <_Z14setVerboseMode6String+0x58>)
 808028a:	781b      	ldrb	r3, [r3, #0]
    return 1;
  }
  else if (command == "0")
  {
    sysStatus.verboseMode = false;
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
 808028c:	490e      	ldr	r1, [pc, #56]	; (80802c8 <_Z14setVerboseMode6String+0x5c>)
 808028e:	480f      	ldr	r0, [pc, #60]	; (80802cc <_Z14setVerboseMode6String+0x60>)
 8080290:	f7ff ff9c 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
 8080294:	2001      	movs	r0, #1
    return 1;
  }
  else return 0;
}
 8080296:	b003      	add	sp, #12
 8080298:	bd30      	pop	{r4, r5, pc}
 808029a:	4628      	mov	r0, r5
 808029c:	490c      	ldr	r1, [pc, #48]	; (80802d0 <_Z14setVerboseMode6String+0x64>)
 808029e:	f002 fd83 	bl	8082da8 <_ZNK6String6equalsEPKc>
  else if (command == "0")
 80802a2:	2800      	cmp	r0, #0
 80802a4:	d0f7      	beq.n	8080296 <_Z14setVerboseMode6String+0x2a>
    sysStatus.verboseMode = false;
 80802a6:	4b05      	ldr	r3, [pc, #20]	; (80802bc <_Z14setVerboseMode6String+0x50>)
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
 80802a8:	4a0a      	ldr	r2, [pc, #40]	; (80802d4 <_Z14setVerboseMode6String+0x68>)
    sysStatus.verboseMode = false;
 80802aa:	70dc      	strb	r4, [r3, #3]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
 80802ac:	4b05      	ldr	r3, [pc, #20]	; (80802c4 <_Z14setVerboseMode6String+0x58>)
 80802ae:	f88d 4000 	strb.w	r4, [sp]
 80802b2:	781b      	ldrb	r3, [r3, #0]
 80802b4:	e7ea      	b.n	808028c <_Z14setVerboseMode6String+0x20>
 80802b6:	bf00      	nop
 80802b8:	080849dc 	.word	0x080849dc
 80802bc:	200001e0 	.word	0x200001e0
 80802c0:	08084a0b 	.word	0x08084a0b
 80802c4:	20000154 	.word	0x20000154
 80802c8:	08084a2e 	.word	0x08084a2e
 80802cc:	200001a0 	.word	0x200001a0
 80802d0:	08084a1c 	.word	0x08084a1c
 80802d4:	08084a1e 	.word	0x08084a1e

080802d8 <_Z11setTimeZone6String>:
  // None for lastHookResponse
  currentStatusWriteNeeded = true;
}

int setTimeZone(String command)
{
 80802d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80802dc:	b0c8      	sub	sp, #288	; 0x120
 80802de:	4680      	mov	r8, r0
  char * pEND;
  char data[256];
  Particle.syncTime();                                                        // Set the clock each day
 80802e0:	f7ff ff5a 	bl	8080198 <_ZN10CloudClass8syncTimeEv.isra.0>
        const system_tick_t start = millis();
 80802e4:	f7ff ff6f 	bl	80801c6 <_ZN11SystemClass6millisEv>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80802e8:	f04f 0a00 	mov.w	sl, #0
        const system_tick_t start = millis();
 80802ec:	4681      	mov	r9, r0
        while (_while() && !_condition()) {
 80802ee:	f247 562f 	movw	r6, #29999	; 0x752f
 80802f2:	2700      	movs	r7, #0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80802f4:	f7ff ff67 	bl	80801c6 <_ZN11SystemClass6millisEv>
 80802f8:	ebb0 0409 	subs.w	r4, r0, r9
 80802fc:	eb61 050a 	sbc.w	r5, r1, sl
        while (_while() && !_condition()) {
 8080300:	42af      	cmp	r7, r5
 8080302:	bf08      	it	eq
 8080304:	42a6      	cmpeq	r6, r4
 8080306:	d305      	bcc.n	8080314 <_Z11setTimeZone6String+0x3c>
  waitFor(Particle.syncTimeDone,30000);                                       // Wait for up to 30 seconds for the SyncTime to complete
 8080308:	f7ff ff50 	bl	80801ac <_ZN10CloudClass12syncTimeDoneEv.isra.0>
 808030c:	b910      	cbnz	r0, 8080314 <_Z11setTimeZone6String+0x3c>
            spark_process();
 808030e:	f001 fdad 	bl	8081e6c <spark_process>
        while (_while() && !_condition()) {
 8080312:	e7ef      	b.n	80802f4 <_Z11setTimeZone6String+0x1c>
 8080314:	f7ff ff4a 	bl	80801ac <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8080318:	220a      	movs	r2, #10
 808031a:	f8d8 0000 	ldr.w	r0, [r8]
 808031e:	a903      	add	r1, sp, #12
 8080320:	f004 fb26 	bl	8084970 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
 8080324:	f100 030c 	add.w	r3, r0, #12
 8080328:	b2db      	uxtb	r3, r3
 808032a:	2b18      	cmp	r3, #24
 808032c:	d846      	bhi.n	80803bc <_Z11setTimeZone6String+0xe4>
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 808032e:	b245      	sxtb	r5, r0
  sysStatus.timezone = (float)tempTimeZoneOffset;
 8080330:	4628      	mov	r0, r5
 8080332:	f003 ff81 	bl	8084238 <__aeabi_i2f>
  Time.zone(sysStatus.timezone);
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
 8080336:	2401      	movs	r4, #1
  sysStatus.timezone = (float)tempTimeZoneOffset;
 8080338:	4b25      	ldr	r3, [pc, #148]	; (80803d0 <_Z11setTimeZone6String+0xf8>)
 808033a:	6098      	str	r0, [r3, #8]
  Time.zone(sysStatus.timezone);
 808033c:	f002 fe4c 	bl	8082fd8 <_ZN9TimeClass4zoneEf>
  systemStatusWriteNeeded = true;                                             // Need to store to FRAM back in the main loop
 8080340:	4b24      	ldr	r3, [pc, #144]	; (80803d4 <_Z11setTimeZone6String+0xfc>)
 8080342:	701c      	strb	r4, [r3, #0]
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
 8080344:	f002 ff22 	bl	808318c <_ZN9TimeClass5localEv>
 8080348:	4606      	mov	r6, r0
 808034a:	f002 fee6 	bl	808311a <_ZN9TimeClass3nowEv>
 808034e:	1a30      	subs	r0, r6, r0
 8080350:	f003 fba4 	bl	8083a9c <__aeabi_i2d>
 8080354:	a31c      	add	r3, pc, #112	; (adr r3, 80803c8 <_Z11setTimeZone6String+0xf0>)
 8080356:	e9d3 2300 	ldrd	r2, r3, [r3]
 808035a:	f003 fd33 	bl	8083dc4 <__aeabi_ddiv>
 808035e:	4a1e      	ldr	r2, [pc, #120]	; (80803d8 <_Z11setTimeZone6String+0x100>)
 8080360:	e9cd 0100 	strd	r0, r1, [sp]
 8080364:	210a      	movs	r1, #10
 8080366:	481d      	ldr	r0, [pc, #116]	; (80803dc <_Z11setTimeZone6String+0x104>)
 8080368:	f001 fe40 	bl	8081fec <snprintf>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 808036c:	f001 fd8e 	bl	8081e8c <spark_cloud_flag_connected>
  if (Particle.connected()) {
 8080370:	b310      	cbz	r0, 80803b8 <_Z11setTimeZone6String+0xe0>
 8080372:	2600      	movs	r6, #0
    snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 8080374:	462b      	mov	r3, r5
 8080376:	f44f 7180 	mov.w	r1, #256	; 0x100
 808037a:	4a19      	ldr	r2, [pc, #100]	; (80803e0 <_Z11setTimeZone6String+0x108>)
 808037c:	4d19      	ldr	r5, [pc, #100]	; (80803e4 <_Z11setTimeZone6String+0x10c>)
 808037e:	a808      	add	r0, sp, #32
 8080380:	f001 fe34 	bl	8081fec <snprintf>
    publishQueue.publish("Time",data, PRIVATE);
 8080384:	f88d 6000 	strb.w	r6, [sp]
 8080388:	4917      	ldr	r1, [pc, #92]	; (80803e8 <_Z11setTimeZone6String+0x110>)
 808038a:	782b      	ldrb	r3, [r5, #0]
 808038c:	aa08      	add	r2, sp, #32
 808038e:	4817      	ldr	r0, [pc, #92]	; (80803ec <_Z11setTimeZone6String+0x114>)
 8080390:	f7ff ff1c 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(Time.now()), PRIVATE);
 8080394:	f002 fec1 	bl	808311a <_ZN9TimeClass3nowEv>
 8080398:	4602      	mov	r2, r0
 808039a:	17c3      	asrs	r3, r0, #31
 808039c:	a804      	add	r0, sp, #16
 808039e:	f002 fe67 	bl	8083070 <_ZN9TimeClass7timeStrEx>
 80803a2:	f88d 6000 	strb.w	r6, [sp]
 80803a6:	782b      	ldrb	r3, [r5, #0]
 80803a8:	9a04      	ldr	r2, [sp, #16]
 80803aa:	490f      	ldr	r1, [pc, #60]	; (80803e8 <_Z11setTimeZone6String+0x110>)
 80803ac:	480f      	ldr	r0, [pc, #60]	; (80803ec <_Z11setTimeZone6String+0x114>)
 80803ae:	f7ff ff0d 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
 80803b2:	a804      	add	r0, sp, #16
 80803b4:	f002 fc81 	bl	8082cba <_ZN6StringD1Ev>
  }
  return 1;
 80803b8:	4620      	mov	r0, r4
 80803ba:	e000      	b.n	80803be <_Z11setTimeZone6String+0xe6>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;       // Make sure it falls in a valid range or send a "fail" result
 80803bc:	2000      	movs	r0, #0
}
 80803be:	b048      	add	sp, #288	; 0x120
 80803c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80803c4:	f3af 8000 	nop.w
 80803c8:	00000000 	.word	0x00000000
 80803cc:	40ac2000 	.word	0x40ac2000
 80803d0:	200001e0 	.word	0x200001e0
 80803d4:	200001f4 	.word	0x200001f4
 80803d8:	08084a33 	.word	0x08084a33
 80803dc:	20000180 	.word	0x20000180
 80803e0:	08084a3d 	.word	0x08084a3d
 80803e4:	20000154 	.word	0x20000154
 80803e8:	08084a51 	.word	0x08084a51
 80803ec:	200001a0 	.word	0x200001a0

080803f0 <_Z9sendEventv>:
void sendEvent() {                    
 80803f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  snprintf(data, sizeof(data), "{\"input1\":%i, \"input2\":%i, \"temp\":%i, \"alerts\":%i, \"resets\":%i, \"timestamp\":%lu000}",current.input1, current.input2, current.temperature, current.alertCount, sysStatus.resetCount, Time.now());
 80803f4:	4a17      	ldr	r2, [pc, #92]	; (8080454 <_Z9sendEventv+0x64>)
 80803f6:	4b18      	ldr	r3, [pc, #96]	; (8080458 <_Z9sendEventv+0x68>)
void sendEvent() {                    
 80803f8:	b0c6      	sub	sp, #280	; 0x118
  snprintf(data, sizeof(data), "{\"input1\":%i, \"input2\":%i, \"temp\":%i, \"alerts\":%i, \"resets\":%i, \"timestamp\":%lu000}",current.input1, current.input2, current.temperature, current.alertCount, sysStatus.resetCount, Time.now());
 80803fa:	7814      	ldrb	r4, [r2, #0]
 80803fc:	7855      	ldrb	r5, [r2, #1]
 80803fe:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8080402:	e9d2 6702 	ldrd	r6, r7, [r2, #8]
 8080406:	f002 fe88 	bl	808311a <_ZN9TimeClass3nowEv>
 808040a:	4623      	mov	r3, r4
 808040c:	e9cd 8003 	strd	r8, r0, [sp, #12]
 8080410:	f44f 7180 	mov.w	r1, #256	; 0x100
 8080414:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8080418:	4a10      	ldr	r2, [pc, #64]	; (808045c <_Z9sendEventv+0x6c>)
 808041a:	9500      	str	r5, [sp, #0]
 808041c:	a806      	add	r0, sp, #24
 808041e:	f001 fde5 	bl	8081fec <snprintf>
  publishQueue.publish("HaulerCaller_Hook", data, PRIVATE);
 8080422:	2300      	movs	r3, #0
 8080424:	f88d 3000 	strb.w	r3, [sp]
 8080428:	4b0d      	ldr	r3, [pc, #52]	; (8080460 <_Z9sendEventv+0x70>)
 808042a:	490e      	ldr	r1, [pc, #56]	; (8080464 <_Z9sendEventv+0x74>)
 808042c:	aa06      	add	r2, sp, #24
 808042e:	781b      	ldrb	r3, [r3, #0]
 8080430:	480d      	ldr	r0, [pc, #52]	; (8080468 <_Z9sendEventv+0x78>)
 8080432:	f7ff fecb 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                  // set the data inflight flag
 8080436:	2201      	movs	r2, #1
 8080438:	4b0c      	ldr	r3, [pc, #48]	; (808046c <_Z9sendEventv+0x7c>)
 808043a:	701a      	strb	r2, [r3, #0]
  currentHourlyPeriod = Time.hour();                                    // Change the time period since we have reported for this one
 808043c:	f002 fe7e 	bl	808313c <_ZN9TimeClass4hourEv>
 8080440:	4b0b      	ldr	r3, [pc, #44]	; (8080470 <_Z9sendEventv+0x80>)
 8080442:	6018      	str	r0, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8080444:	f001 fb4c 	bl	8081ae0 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
 8080448:	4b0a      	ldr	r3, [pc, #40]	; (8080474 <_Z9sendEventv+0x84>)
 808044a:	6018      	str	r0, [r3, #0]
}
 808044c:	b046      	add	sp, #280	; 0x118
 808044e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8080452:	bf00      	nop
 8080454:	20000168 	.word	0x20000168
 8080458:	200001e0 	.word	0x200001e0
 808045c:	08084a56 	.word	0x08084a56
 8080460:	20000154 	.word	0x20000154
 8080464:	08084aaa 	.word	0x08084aaa
 8080468:	200001a0 	.word	0x200001a0
 808046c:	2000018b 	.word	0x2000018b
 8080470:	2000017c 	.word	0x2000017c
 8080474:	200001f8 	.word	0x200001f8

08080478 <_Z17getSignalStrengthv>:
void getSignalStrength() {
 8080478:	b530      	push	{r4, r5, lr}
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
 808047a:	4d17      	ldr	r5, [pc, #92]	; (80804d8 <_Z17getSignalStrengthv+0x60>)
void getSignalStrength() {
 808047c:	b099      	sub	sp, #100	; 0x64
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
 808047e:	ac04      	add	r4, sp, #16
 8080480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8080482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8080484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8080486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8080488:	e895 0003 	ldmia.w	r5, {r0, r1}
 808048c:	e884 0003 	stmia.w	r4, {r0, r1}
  CellularSignal sig = Cellular.RSSI();
 8080490:	4912      	ldr	r1, [pc, #72]	; (80804dc <_Z17getSignalStrengthv+0x64>)
 8080492:	a80e      	add	r0, sp, #56	; 0x38
 8080494:	f001 fe34 	bl	8082100 <_ZN5spark13CellularClass4RSSIEv>
  auto rat = sig.getAccessTechnology();
 8080498:	a80e      	add	r0, sp, #56	; 0x38
 808049a:	f001 fe84 	bl	80821a6 <_ZNK14CellularSignal19getAccessTechnologyEv>
 808049e:	4604      	mov	r4, r0
  float strengthPercentage = sig.getStrength();
 80804a0:	a80e      	add	r0, sp, #56	; 0x38
 80804a2:	f001 fe89 	bl	80821b8 <_ZNK14CellularSignal11getStrengthEv>
 80804a6:	4605      	mov	r5, r0
  float qualityPercentage = sig.getQuality();
 80804a8:	a80e      	add	r0, sp, #56	; 0x38
 80804aa:	f001 feaf 	bl	808220c <_ZNK14CellularSignal10getQualityEv>
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
 80804ae:	ab18      	add	r3, sp, #96	; 0x60
 80804b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80804b4:	f003 fb04 	bl	8083ac0 <__aeabi_f2d>
 80804b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80804bc:	4628      	mov	r0, r5
 80804be:	f003 faff 	bl	8083ac0 <__aeabi_f2d>
 80804c2:	e9cd 0100 	strd	r0, r1, [sp]
 80804c6:	4a06      	ldr	r2, [pc, #24]	; (80804e0 <_Z17getSignalStrengthv+0x68>)
 80804c8:	2140      	movs	r1, #64	; 0x40
 80804ca:	f854 3c50 	ldr.w	r3, [r4, #-80]
 80804ce:	4805      	ldr	r0, [pc, #20]	; (80804e4 <_Z17getSignalStrengthv+0x6c>)
 80804d0:	f001 fd8c 	bl	8081fec <snprintf>
}
 80804d4:	b019      	add	sp, #100	; 0x64
 80804d6:	bd30      	pop	{r4, r5, pc}
 80804d8:	08084c80 	.word	0x08084c80
 80804dc:	20000200 	.word	0x20000200
 80804e0:	08084abc 	.word	0x08084abc
 80804e4:	20000104 	.word	0x20000104

080804e8 <_Z14getTemperaturev>:
int getTemperature() {
 80804e8:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
 80804ea:	200a      	movs	r0, #10
 80804ec:	f003 f901 	bl	80836f2 <analogRead>
  float voltage = reading * 3.3;        // converting that reading to voltage, for 3.3v arduino use 3.3
 80804f0:	f003 fad4 	bl	8083a9c <__aeabi_i2d>
 80804f4:	a314      	add	r3, pc, #80	; (adr r3, 8080548 <_Z14getTemperaturev+0x60>)
 80804f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80804fa:	f003 fb39 	bl	8083b70 <__aeabi_dmul>
 80804fe:	f003 fd91 	bl	8084024 <__aeabi_d2f>
  voltage /= 4096.0;                    // Electron is different than the Arduino where there are only 1024 steps
 8080502:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 8080506:	f003 feeb 	bl	80842e0 <__aeabi_fmul>
  int temperatureC = int(((voltage - 0.5) * 100));  //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
 808050a:	f003 fad9 	bl	8083ac0 <__aeabi_f2d>
 808050e:	2200      	movs	r2, #0
 8080510:	4b0f      	ldr	r3, [pc, #60]	; (8080550 <_Z14getTemperaturev+0x68>)
 8080512:	f003 f975 	bl	8083800 <__aeabi_dsub>
 8080516:	2200      	movs	r2, #0
 8080518:	4b0e      	ldr	r3, [pc, #56]	; (8080554 <_Z14getTemperaturev+0x6c>)
 808051a:	f003 fb29 	bl	8083b70 <__aeabi_dmul>
 808051e:	f003 fd39 	bl	8083f94 <__aeabi_d2iz>
  current.temperature = int((temperatureC * 9.0 / 5.0) + 32.0);  // now convert to Fahrenheit
 8080522:	f003 fabb 	bl	8083a9c <__aeabi_i2d>
 8080526:	2200      	movs	r2, #0
 8080528:	4b0b      	ldr	r3, [pc, #44]	; (8080558 <_Z14getTemperaturev+0x70>)
 808052a:	f003 fb21 	bl	8083b70 <__aeabi_dmul>
 808052e:	2200      	movs	r2, #0
 8080530:	4b0a      	ldr	r3, [pc, #40]	; (808055c <_Z14getTemperaturev+0x74>)
 8080532:	f003 fc47 	bl	8083dc4 <__aeabi_ddiv>
 8080536:	2200      	movs	r2, #0
 8080538:	4b09      	ldr	r3, [pc, #36]	; (8080560 <_Z14getTemperaturev+0x78>)
 808053a:	f003 f963 	bl	8083804 <__adddf3>
 808053e:	f003 fd29 	bl	8083f94 <__aeabi_d2iz>
 8080542:	4b08      	ldr	r3, [pc, #32]	; (8080564 <_Z14getTemperaturev+0x7c>)
 8080544:	6098      	str	r0, [r3, #8]
}
 8080546:	bd08      	pop	{r3, pc}
 8080548:	66666666 	.word	0x66666666
 808054c:	400a6666 	.word	0x400a6666
 8080550:	3fe00000 	.word	0x3fe00000
 8080554:	40590000 	.word	0x40590000
 8080558:	40220000 	.word	0x40220000
 808055c:	40140000 	.word	0x40140000
 8080560:	40400000 	.word	0x40400000
 8080564:	20000168 	.word	0x20000168

08080568 <_Z16takeMeasurementsv>:
bool takeMeasurements() {                                               // For clarity - 0 = no alert, 1 = alert (), 2 = 75% full and is flashing - Returns "True" if flashing
 8080568:	b570      	push	{r4, r5, r6, lr}
  if (input1Flag) {                                                     // input1 triggered an interrupt on FALLING
 808056a:	4e22      	ldr	r6, [pc, #136]	; (80805f4 <_Z16takeMeasurementsv+0x8c>)
 808056c:	4c22      	ldr	r4, [pc, #136]	; (80805f8 <_Z16takeMeasurementsv+0x90>)
 808056e:	7832      	ldrb	r2, [r6, #0]
 8080570:	b16a      	cbz	r2, 808058e <_Z16takeMeasurementsv+0x26>
    if (!cycleCount) {                                                  // First interrupt and the Light is ON (input1 = LOW)
 8080572:	4d22      	ldr	r5, [pc, #136]	; (80805fc <_Z16takeMeasurementsv+0x94>)
 8080574:	682b      	ldr	r3, [r5, #0]
 8080576:	bb6b      	cbnz	r3, 80805d4 <_Z16takeMeasurementsv+0x6c>
      current.input1 = 2;                                               // Inidication is that we are now 75% full
 8080578:	2302      	movs	r3, #2
      strncpy(input1Str,"75% Full",sizeof(input1Str));
 808057a:	2210      	movs	r2, #16
 808057c:	4920      	ldr	r1, [pc, #128]	; (8080600 <_Z16takeMeasurementsv+0x98>)
 808057e:	4821      	ldr	r0, [pc, #132]	; (8080604 <_Z16takeMeasurementsv+0x9c>)
      current.input1 = 2;                                               // Inidication is that we are now 75% full
 8080580:	7023      	strb	r3, [r4, #0]
      strncpy(input1Str,"75% Full",sizeof(input1Str));
 8080582:	f004 f968 	bl	8084856 <strncpy>
      cycleCount++;                                                     // Start counting cycles
 8080586:	2301      	movs	r3, #1
    else if (cycleCount < cyclesRequired) cycleCount++;                 // Increment the counter
 8080588:	602b      	str	r3, [r5, #0]
    input1Flag = false;
 808058a:	2300      	movs	r3, #0
 808058c:	7033      	strb	r3, [r6, #0]
  if (input2Flag) {                                                     // input1 triggered an interrupt by going LOW this is an alert
 808058e:	4d1e      	ldr	r5, [pc, #120]	; (8080608 <_Z16takeMeasurementsv+0xa0>)
 8080590:	782b      	ldrb	r3, [r5, #0]
 8080592:	b163      	cbz	r3, 80805ae <_Z16takeMeasurementsv+0x46>
    current.input2 = 1;                                                 // This is the alert value
 8080594:	2601      	movs	r6, #1
    strncpy(input1Str,"Low Oil",sizeof(input1Str));
 8080596:	2210      	movs	r2, #16
 8080598:	491c      	ldr	r1, [pc, #112]	; (808060c <_Z16takeMeasurementsv+0xa4>)
 808059a:	481a      	ldr	r0, [pc, #104]	; (8080604 <_Z16takeMeasurementsv+0x9c>)
    current.input2 = 1;                                                 // This is the alert value
 808059c:	7066      	strb	r6, [r4, #1]
    strncpy(input1Str,"Low Oil",sizeof(input1Str));
 808059e:	f004 f95a 	bl	8084856 <strncpy>
    detachInterrupt(input2);                                            // Stop checking until next reset
 80805a2:	201b      	movs	r0, #27
 80805a4:	f002 fa4c 	bl	8082a40 <_Z15detachInterruptt>
    input2Flag = false;
 80805a8:	2300      	movs	r3, #0
    current.interruptDisconnected = true;                               // Set the interrupt disconnected flag which will trigger the blue flashing LED
 80805aa:	7426      	strb	r6, [r4, #16]
    input2Flag = false;
 80805ac:	702b      	strb	r3, [r5, #0]
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80805ae:	2200      	movs	r2, #0
 80805b0:	4b17      	ldr	r3, [pc, #92]	; (8080610 <_Z16takeMeasurementsv+0xa8>)
 80805b2:	4611      	mov	r1, r2
 80805b4:	6858      	ldr	r0, [r3, #4]
 80805b6:	f001 fcc1 	bl	8081f3c <network_ready>
  if (Cellular.ready()) getSignalStrength();                            // Test signal strength if the cellular modem is on and ready
 80805ba:	b108      	cbz	r0, 80805c0 <_Z16takeMeasurementsv+0x58>
 80805bc:	f7ff ff5c 	bl	8080478 <_Z17getSignalStrengthv>
  getTemperature();
 80805c0:	f7ff ff92 	bl	80804e8 <_Z14getTemperaturev>
  currentStatusWriteNeeded = true;
 80805c4:	2201      	movs	r2, #1
  if (current.input1 == 1) return true;                                 // We need to know if flashing was discovered - then we need to report
 80805c6:	7820      	ldrb	r0, [r4, #0]
  currentStatusWriteNeeded = true;
 80805c8:	4b12      	ldr	r3, [pc, #72]	; (8080614 <_Z16takeMeasurementsv+0xac>)
 80805ca:	701a      	strb	r2, [r3, #0]
}
 80805cc:	1a83      	subs	r3, r0, r2
 80805ce:	4258      	negs	r0, r3
 80805d0:	4158      	adcs	r0, r3
 80805d2:	bd70      	pop	{r4, r5, r6, pc}
    else if (cycleCount < cyclesRequired) cycleCount++;                 // Increment the counter
 80805d4:	2b04      	cmp	r3, #4
 80805d6:	dc01      	bgt.n	80805dc <_Z16takeMeasurementsv+0x74>
 80805d8:	3301      	adds	r3, #1
 80805da:	e7d5      	b.n	8080588 <_Z16takeMeasurementsv+0x20>
      current.input1 = 1;                                               // We are at 100% full the light is flashing
 80805dc:	2501      	movs	r5, #1
      strncpy(input1Str,"100% Full",sizeof(input1Str));
 80805de:	2210      	movs	r2, #16
 80805e0:	490d      	ldr	r1, [pc, #52]	; (8080618 <_Z16takeMeasurementsv+0xb0>)
 80805e2:	4808      	ldr	r0, [pc, #32]	; (8080604 <_Z16takeMeasurementsv+0x9c>)
      current.input1 = 1;                                               // We are at 100% full the light is flashing
 80805e4:	7025      	strb	r5, [r4, #0]
      strncpy(input1Str,"100% Full",sizeof(input1Str));
 80805e6:	f004 f936 	bl	8084856 <strncpy>
      detachInterrupt(input1);                                          // Stop monitoring the input - wait for reset
 80805ea:	2019      	movs	r0, #25
 80805ec:	f002 fa28 	bl	8082a40 <_Z15detachInterruptt>
      current.interruptDisconnected = true;                             // Set the interrupt disconnected flag which will trigger the blue flashing LED
 80805f0:	7425      	strb	r5, [r4, #16]
 80805f2:	e7ca      	b.n	808058a <_Z16takeMeasurementsv+0x22>
 80805f4:	2000019c 	.word	0x2000019c
 80805f8:	20000168 	.word	0x20000168
 80805fc:	20000158 	.word	0x20000158
 8080600:	08084ad5 	.word	0x08084ad5
 8080604:	20000000 	.word	0x20000000
 8080608:	2000019d 	.word	0x2000019d
 808060c:	08084ae8 	.word	0x08084ae8
 8080610:	20000200 	.word	0x20000200
 8080614:	2000018a 	.word	0x2000018a
 8080618:	08084ade 	.word	0x08084ade

0808061c <_Z11petWatchdogv>:
void petWatchdog() {
 808061c:	b508      	push	{r3, lr}
  digitalWrite(donePin, HIGH);                                        // Pet the watchdog
 808061e:	2101      	movs	r1, #1
 8080620:	2006      	movs	r0, #6
 8080622:	f003 f83a 	bl	808369a <digitalWrite>
  digitalWrite(donePin, LOW);
 8080626:	2100      	movs	r1, #0
 8080628:	2006      	movs	r0, #6
 808062a:	f003 f836 	bl	808369a <digitalWrite>
  watchdogFlag = false;
 808062e:	2200      	movs	r2, #0
 8080630:	4b01      	ldr	r3, [pc, #4]	; (8080638 <_Z11petWatchdogv+0x1c>)
 8080632:	701a      	strb	r2, [r3, #0]
}
 8080634:	bd08      	pop	{r3, pc}
 8080636:	bf00      	nop
 8080638:	200001f5 	.word	0x200001f5

0808063c <_Z17connectToParticlev>:
bool connectToParticle() {
 808063c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        network_on(*this, 0, 0, NULL);
 8080640:	2300      	movs	r3, #0
 8080642:	481d      	ldr	r0, [pc, #116]	; (80806b8 <_Z17connectToParticlev+0x7c>)
 8080644:	461a      	mov	r2, r3
 8080646:	4619      	mov	r1, r3
 8080648:	6840      	ldr	r0, [r0, #4]
 808064a:	f001 fc7f 	bl	8081f4c <network_on>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 808064e:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8080652:	f001 fc13 	bl	8081e7c <spark_cloud_flag_connect>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 8080656:	f04f 0b00 	mov.w	fp, #0
        while (_while() && !_condition()) {
 808065a:	f240 38e7 	movw	r8, #999	; 0x3e7
 808065e:	f04f 0900 	mov.w	r9, #0
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080662:	f8df a060 	ldr.w	sl, [pc, #96]	; 80806c4 <_Z17connectToParticlev+0x88>
        const system_tick_t start = millis();
 8080666:	f7ff fdae 	bl	80801c6 <_ZN11SystemClass6millisEv>
 808066a:	4605      	mov	r5, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 808066c:	f7ff fdab 	bl	80801c6 <_ZN11SystemClass6millisEv>
 8080670:	1b46      	subs	r6, r0, r5
 8080672:	eb61 070b 	sbc.w	r7, r1, fp
        while (_while() && !_condition()) {
 8080676:	45b9      	cmp	r9, r7
 8080678:	bf08      	it	eq
 808067a:	45b0      	cmpeq	r8, r6
 808067c:	d305      	bcc.n	808068a <_Z17connectToParticlev+0x4e>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 808067e:	f001 fc05 	bl	8081e8c <spark_cloud_flag_connected>
 8080682:	b910      	cbnz	r0, 808068a <_Z17connectToParticlev+0x4e>
            spark_process();
 8080684:	f001 fbf2 	bl	8081e6c <spark_process>
        while (_while() && !_condition()) {
 8080688:	e7f0      	b.n	808066c <_Z17connectToParticlev+0x30>
 808068a:	f001 fbff 	bl	8081e8c <spark_cloud_flag_connected>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 808068e:	b120      	cbz	r0, 808069a <_Z17connectToParticlev+0x5e>
 8080690:	f001 fbfc 	bl	8081e8c <spark_cloud_flag_connected>
  if (Particle.connected()) {
 8080694:	b950      	cbnz	r0, 80806ac <_Z17connectToParticlev+0x70>
}
 8080696:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return HAL_Timer_Get_Milli_Seconds();
 808069a:	f001 fa21 	bl	8081ae0 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
 808069e:	f8ca 0000 	str.w	r0, [sl]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
 80806a2:	f001 fbe3 	bl	8081e6c <spark_process>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 80806a6:	3c01      	subs	r4, #1
 80806a8:	d1dd      	bne.n	8080666 <_Z17connectToParticlev+0x2a>
 80806aa:	e7f1      	b.n	8080690 <_Z17connectToParticlev+0x54>
    sysStatus.connectedStatus = true;
 80806ac:	2301      	movs	r3, #1
 80806ae:	4a03      	ldr	r2, [pc, #12]	; (80806bc <_Z17connectToParticlev+0x80>)
 80806b0:	7093      	strb	r3, [r2, #2]
    systemStatusWriteNeeded = true;
 80806b2:	4a03      	ldr	r2, [pc, #12]	; (80806c0 <_Z17connectToParticlev+0x84>)
 80806b4:	7013      	strb	r3, [r2, #0]
    return 1;                               // Were able to connect successfully
 80806b6:	e7ee      	b.n	8080696 <_Z17connectToParticlev+0x5a>
 80806b8:	20000200 	.word	0x20000200
 80806bc:	200001e0 	.word	0x200001e0
 80806c0:	200001f4 	.word	0x200001f4
 80806c4:	200007c4 	.word	0x200007c4

080806c8 <_Z8flashLEDv>:
void flashLED() {
 80806c8:	b510      	push	{r4, lr}
 80806ca:	f001 fa09 	bl	8081ae0 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - lastTransition > 1000) {
 80806ce:	4c09      	ldr	r4, [pc, #36]	; (80806f4 <_Z8flashLEDv+0x2c>)
 80806d0:	6823      	ldr	r3, [r4, #0]
 80806d2:	1ac0      	subs	r0, r0, r3
 80806d4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80806d8:	d90b      	bls.n	80806f2 <_Z8flashLEDv+0x2a>
    digitalWrite(blueLED,!digitalRead(blueLED));
 80806da:	2007      	movs	r0, #7
 80806dc:	f002 fff6 	bl	80836cc <digitalRead>
 80806e0:	fab0 f180 	clz	r1, r0
 80806e4:	2007      	movs	r0, #7
 80806e6:	0949      	lsrs	r1, r1, #5
 80806e8:	f002 ffd7 	bl	808369a <digitalWrite>
 80806ec:	f001 f9f8 	bl	8081ae0 <HAL_Timer_Get_Milli_Seconds>
    lastTransition = millis();
 80806f0:	6020      	str	r0, [r4, #0]
}
 80806f2:	bd10      	pop	{r4, pc}
 80806f4:	20000164 	.word	0x20000164

080806f8 <_Z12dailyCleanupv>:
void dailyCleanup() {                                                 // Called from Reporting State ONLY - clean house at the end of the day
 80806f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80806fc:	2400      	movs	r4, #0
  publishQueue.publish("Daily Cleanup","Running", PRIVATE);               // Make sure this is being run
 80806fe:	4b15      	ldr	r3, [pc, #84]	; (8080754 <_Z12dailyCleanupv+0x5c>)
 8080700:	f88d 4000 	strb.w	r4, [sp]
 8080704:	4a14      	ldr	r2, [pc, #80]	; (8080758 <_Z12dailyCleanupv+0x60>)
 8080706:	4915      	ldr	r1, [pc, #84]	; (808075c <_Z12dailyCleanupv+0x64>)
 8080708:	781b      	ldrb	r3, [r3, #0]
 808070a:	4815      	ldr	r0, [pc, #84]	; (8080760 <_Z12dailyCleanupv+0x68>)
 808070c:	f7ff fd5e 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
 8080710:	4b14      	ldr	r3, [pc, #80]	; (8080764 <_Z12dailyCleanupv+0x6c>)
 8080712:	f247 582f 	movw	r8, #29999	; 0x752f
 8080716:	70dc      	strb	r4, [r3, #3]
  Particle.syncTime();                                                // Set the clock each day
 8080718:	f7ff fd3e 	bl	8080198 <_ZN10CloudClass8syncTimeEv.isra.0>
        const system_tick_t start = millis();
 808071c:	f7ff fd53 	bl	80801c6 <_ZN11SystemClass6millisEv>
        while (_while() && !_condition()) {
 8080720:	f04f 0900 	mov.w	r9, #0
        const system_tick_t start = millis();
 8080724:	4605      	mov	r5, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 8080726:	f7ff fd4e 	bl	80801c6 <_ZN11SystemClass6millisEv>
 808072a:	1b46      	subs	r6, r0, r5
 808072c:	eb61 0704 	sbc.w	r7, r1, r4
        while (_while() && !_condition()) {
 8080730:	45b9      	cmp	r9, r7
 8080732:	bf08      	it	eq
 8080734:	45b0      	cmpeq	r8, r6
 8080736:	d305      	bcc.n	8080744 <_Z12dailyCleanupv+0x4c>
  waitFor(Particle.syncTimeDone,30000);                               // Wait for up to 30 seconds for the SyncTime to complete
 8080738:	f7ff fd38 	bl	80801ac <_ZN10CloudClass12syncTimeDoneEv.isra.0>
 808073c:	b910      	cbnz	r0, 8080744 <_Z12dailyCleanupv+0x4c>
            spark_process();
 808073e:	f001 fb95 	bl	8081e6c <spark_process>
        while (_while() && !_condition()) {
 8080742:	e7f0      	b.n	8080726 <_Z12dailyCleanupv+0x2e>
 8080744:	f7ff fd32 	bl	80801ac <_ZN10CloudClass12syncTimeDoneEv.isra.0>
  systemStatusWriteNeeded = true;
 8080748:	2201      	movs	r2, #1
 808074a:	4b07      	ldr	r3, [pc, #28]	; (8080768 <_Z12dailyCleanupv+0x70>)
 808074c:	701a      	strb	r2, [r3, #0]
}
 808074e:	b003      	add	sp, #12
 8080750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8080754:	20000154 	.word	0x20000154
 8080758:	08084af0 	.word	0x08084af0
 808075c:	08084af8 	.word	0x08084af8
 8080760:	200001a0 	.word	0x200001a0
 8080764:	200001e0 	.word	0x200001e0
 8080768:	200001f4 	.word	0x200001f4

0808076c <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                         // Default settings for the device - connected, not-low power and always on
 808076c:	b507      	push	{r0, r1, r2, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
 808076e:	f001 fb8d 	bl	8081e8c <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
 8080772:	b148      	cbz	r0, 8080788 <_Z18loadSystemDefaultsv+0x1c>
 8080774:	2300      	movs	r3, #0
 8080776:	f88d 3000 	strb.w	r3, [sp]
 808077a:	4b0c      	ldr	r3, [pc, #48]	; (80807ac <_Z18loadSystemDefaultsv+0x40>)
 808077c:	4a0c      	ldr	r2, [pc, #48]	; (80807b0 <_Z18loadSystemDefaultsv+0x44>)
 808077e:	781b      	ldrb	r3, [r3, #0]
 8080780:	490c      	ldr	r1, [pc, #48]	; (80807b4 <_Z18loadSystemDefaultsv+0x48>)
 8080782:	480d      	ldr	r0, [pc, #52]	; (80807b8 <_Z18loadSystemDefaultsv+0x4c>)
 8080784:	f7ff fd22 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.verboseMode = false;
 8080788:	2300      	movs	r3, #0
  sysStatus.structuresVersion = 1;
 808078a:	4a0c      	ldr	r2, [pc, #48]	; (80807bc <_Z18loadSystemDefaultsv+0x50>)
 808078c:	2101      	movs	r1, #1
  sysStatus.verboseMode = false;
 808078e:	70d3      	strb	r3, [r2, #3]
  sysStatus.timezone = -5;                                          // Default is East Coast Time
 8080790:	4b0b      	ldr	r3, [pc, #44]	; (80807c0 <_Z18loadSystemDefaultsv+0x54>)
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
 8080792:	480c      	ldr	r0, [pc, #48]	; (80807c4 <_Z18loadSystemDefaultsv+0x58>)
 8080794:	6093      	str	r3, [r2, #8]
  sysStatus.dstOffset = 1;
 8080796:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 808079a:	60d3      	str	r3, [r2, #12]
 808079c:	2314      	movs	r3, #20
  sysStatus.structuresVersion = 1;
 808079e:	7011      	strb	r1, [r2, #0]
}
 80807a0:	b003      	add	sp, #12
 80807a2:	f85d eb04 	ldr.w	lr, [sp], #4
 80807a6:	f000 bd8e 	b.w	80812c6 <_ZN6MB85RC9writeDataEjPKhj>
 80807aa:	bf00      	nop
 80807ac:	20000154 	.word	0x20000154
 80807b0:	08084b06 	.word	0x08084b06
 80807b4:	08084a2e 	.word	0x08084a2e
 80807b8:	200001a0 	.word	0x200001a0
 80807bc:	200001e0 	.word	0x200001e0
 80807c0:	c0a00000 	.word	0xc0a00000
 80807c4:	2000018c 	.word	0x2000018c

080807c8 <_Z17checkSystemValuesv>:
void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range
 80807c8:	b538      	push	{r3, r4, r5, lr}
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
 80807ca:	4c15      	ldr	r4, [pc, #84]	; (8080820 <_Z17checkSystemValuesv+0x58>)
 80807cc:	78e3      	ldrb	r3, [r4, #3]
 80807ce:	2b01      	cmp	r3, #1
 80807d0:	bf84      	itt	hi
 80807d2:	2300      	movhi	r3, #0
 80807d4:	70e3      	strbhi	r3, [r4, #3]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
 80807d6:	6863      	ldr	r3, [r4, #4]
 80807d8:	2bff      	cmp	r3, #255	; 0xff
 80807da:	d901      	bls.n	80807e0 <_Z17checkSystemValuesv+0x18>
 80807dc:	2300      	movs	r3, #0
 80807de:	6063      	str	r3, [r4, #4]
  if (sysStatus.timezone < -12 || sysStatus.timezone > 12) sysStatus.timezone = -5;
 80807e0:	68a5      	ldr	r5, [r4, #8]
 80807e2:	4910      	ldr	r1, [pc, #64]	; (8080824 <_Z17checkSystemValuesv+0x5c>)
 80807e4:	4628      	mov	r0, r5
 80807e6:	f003 ff19 	bl	808461c <__aeabi_fcmplt>
 80807ea:	b920      	cbnz	r0, 80807f6 <_Z17checkSystemValuesv+0x2e>
 80807ec:	4628      	mov	r0, r5
 80807ee:	490e      	ldr	r1, [pc, #56]	; (8080828 <_Z17checkSystemValuesv+0x60>)
 80807f0:	f003 ff32 	bl	8084658 <__aeabi_fcmpgt>
 80807f4:	b108      	cbz	r0, 80807fa <_Z17checkSystemValuesv+0x32>
 80807f6:	4b0d      	ldr	r3, [pc, #52]	; (808082c <_Z17checkSystemValuesv+0x64>)
 80807f8:	60a3      	str	r3, [r4, #8]
  if (sysStatus.dstOffset < 0 || sysStatus.dstOffset > 2) sysStatus.dstOffset = 1;
 80807fa:	68e5      	ldr	r5, [r4, #12]
 80807fc:	2100      	movs	r1, #0
 80807fe:	4628      	mov	r0, r5
 8080800:	f003 ff0c 	bl	808461c <__aeabi_fcmplt>
 8080804:	b928      	cbnz	r0, 8080812 <_Z17checkSystemValuesv+0x4a>
 8080806:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 808080a:	4628      	mov	r0, r5
 808080c:	f003 ff24 	bl	8084658 <__aeabi_fcmpgt>
 8080810:	b110      	cbz	r0, 8080818 <_Z17checkSystemValuesv+0x50>
 8080812:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8080816:	60e3      	str	r3, [r4, #12]
  systemStatusWriteNeeded = true;
 8080818:	2201      	movs	r2, #1
 808081a:	4b05      	ldr	r3, [pc, #20]	; (8080830 <_Z17checkSystemValuesv+0x68>)
 808081c:	701a      	strb	r2, [r3, #0]
}
 808081e:	bd38      	pop	{r3, r4, r5, pc}
 8080820:	200001e0 	.word	0x200001e0
 8080824:	c1400000 	.word	0xc1400000
 8080828:	41400000 	.word	0x41400000
 808082c:	c0a00000 	.word	0xc0a00000
 8080830:	200001f4 	.word	0x200001f4

08080834 <_Z18checkCurrentValuesv>:
  current.input1 = 0;                                                   // Always reset at startup
 8080834:	2200      	movs	r2, #0
 8080836:	4b05      	ldr	r3, [pc, #20]	; (808084c <_Z18checkCurrentValuesv+0x18>)
  if (current.alertCount < 0 || current.alertCount > 254) current.alertCount = 0;
 8080838:	68d9      	ldr	r1, [r3, #12]
  current.input1 = 0;                                                   // Always reset at startup
 808083a:	801a      	strh	r2, [r3, #0]
  if (current.alertCount < 0 || current.alertCount > 254) current.alertCount = 0;
 808083c:	29fe      	cmp	r1, #254	; 0xfe
  current.interruptDisconnected = 0;                                    // Always false at startup
 808083e:	741a      	strb	r2, [r3, #16]
  if (current.alertCount < 0 || current.alertCount > 254) current.alertCount = 0;
 8080840:	bf88      	it	hi
 8080842:	60da      	strhi	r2, [r3, #12]
  currentStatusWriteNeeded = true;
 8080844:	2201      	movs	r2, #1
 8080846:	4b02      	ldr	r3, [pc, #8]	; (8080850 <_Z18checkCurrentValuesv+0x1c>)
 8080848:	701a      	strb	r2, [r3, #0]
}
 808084a:	4770      	bx	lr
 808084c:	20000168 	.word	0x20000168
 8080850:	2000018a 	.word	0x2000018a

08080854 <_Z22publishStateTransitionv>:

void publishStateTransition(void)
{
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 8080854:	230e      	movs	r3, #14
{
 8080856:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 8080858:	4d10      	ldr	r5, [pc, #64]	; (808089c <_Z22publishStateTransitionv+0x48>)
 808085a:	4911      	ldr	r1, [pc, #68]	; (80808a0 <_Z22publishStateTransitionv+0x4c>)
 808085c:	782a      	ldrb	r2, [r5, #0]
 808085e:	4c11      	ldr	r4, [pc, #68]	; (80808a4 <_Z22publishStateTransitionv+0x50>)
 8080860:	fb03 1202 	mla	r2, r3, r2, r1
 8080864:	7820      	ldrb	r0, [r4, #0]
{
 8080866:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 8080868:	fb03 1300 	mla	r3, r3, r0, r1
 808086c:	9200      	str	r2, [sp, #0]
 808086e:	2128      	movs	r1, #40	; 0x28
 8080870:	4a0d      	ldr	r2, [pc, #52]	; (80808a8 <_Z22publishStateTransitionv+0x54>)
 8080872:	a802      	add	r0, sp, #8
 8080874:	f001 fbba 	bl	8081fec <snprintf>
  oldState = state;
 8080878:	782b      	ldrb	r3, [r5, #0]
 808087a:	7023      	strb	r3, [r4, #0]
  if (sysStatus.verboseMode) publishQueue.publish("State Transition",stateTransitionString,PRIVATE);
 808087c:	4b0b      	ldr	r3, [pc, #44]	; (80808ac <_Z22publishStateTransitionv+0x58>)
 808087e:	78db      	ldrb	r3, [r3, #3]
 8080880:	b14b      	cbz	r3, 8080896 <_Z22publishStateTransitionv+0x42>
 8080882:	2300      	movs	r3, #0
 8080884:	f88d 3000 	strb.w	r3, [sp]
 8080888:	4b09      	ldr	r3, [pc, #36]	; (80808b0 <_Z22publishStateTransitionv+0x5c>)
 808088a:	490a      	ldr	r1, [pc, #40]	; (80808b4 <_Z22publishStateTransitionv+0x60>)
 808088c:	781b      	ldrb	r3, [r3, #0]
 808088e:	480a      	ldr	r0, [pc, #40]	; (80808b8 <_Z22publishStateTransitionv+0x64>)
 8080890:	aa02      	add	r2, sp, #8
 8080892:	f7ff fc9b 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
 8080896:	b00d      	add	sp, #52	; 0x34
 8080898:	bd30      	pop	{r4, r5, pc}
 808089a:	bf00      	nop
 808089c:	200001dc 	.word	0x200001dc
 80808a0:	20000024 	.word	0x20000024
 80808a4:	2000019e 	.word	0x2000019e
 80808a8:	08084b1e 	.word	0x08084b1e
 80808ac:	200001e0 	.word	0x200001e0
 80808b0:	20000154 	.word	0x20000154
 80808b4:	08084b2c 	.word	0x08084b2c
 80808b8:	200001a0 	.word	0x200001a0

080808bc <_Z14fullModemResetv>:
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
 80808bc:	2300      	movs	r3, #0

void fullModemReset()   // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
{
 80808be:	b530      	push	{r4, r5, lr}
 80808c0:	b085      	sub	sp, #20
	Particle.disconnect(); 	                                         // Disconnect from the cloud
 80808c2:	a801      	add	r0, sp, #4
 80808c4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80808c8:	f88d 300c 	strb.w	r3, [sp, #12]
 80808cc:	f001 fd69 	bl	80823a2 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
 80808d0:	f001 f906 	bl	8081ae0 <HAL_Timer_Get_Milli_Seconds>
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 80808d4:	f643 2597 	movw	r5, #14999	; 0x3a97
 80808d8:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80808da:	f001 fad7 	bl	8081e8c <spark_cloud_flag_connected>
 80808de:	b140      	cbz	r0, 80808f2 <_Z14fullModemResetv+0x36>
 80808e0:	f001 f8fe 	bl	8081ae0 <HAL_Timer_Get_Milli_Seconds>
 80808e4:	1b00      	subs	r0, r0, r4
 80808e6:	42a8      	cmp	r0, r5
 80808e8:	d803      	bhi.n	80808f2 <_Z14fullModemResetv+0x36>
		delay(100);
 80808ea:	2064      	movs	r0, #100	; 0x64
 80808ec:	f001 fb9e 	bl	808202c <delay>
	while(Particle.connected() && millis() - startTime < 15000) {
 80808f0:	e7f3      	b.n	80808da <_Z14fullModemResetv+0x1e>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 80808f2:	2100      	movs	r1, #0
 80808f4:	f247 5230 	movw	r2, #30000	; 0x7530
 80808f8:	4608      	mov	r0, r1
 80808fa:	4b08      	ldr	r3, [pc, #32]	; (808091c <_Z14fullModemResetv+0x60>)
 80808fc:	f001 f880 	bl	8081a00 <cellular_command>
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
 8080900:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080904:	f001 fb92 	bl	808202c <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
 8080908:	4b05      	ldr	r3, [pc, #20]	; (8080920 <_Z14fullModemResetv+0x64>)
 808090a:	220a      	movs	r2, #10
 808090c:	2101      	movs	r1, #1
 808090e:	681b      	ldr	r3, [r3, #0]
 8080910:	a801      	add	r0, sp, #4
 8080912:	f002 fac5 	bl	8082ea0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 8080916:	b005      	add	sp, #20
 8080918:	bd30      	pop	{r4, r5, pc}
 808091a:	bf00      	nop
 808091c:	08084b3d 	.word	0x08084b3d
 8080920:	20000150 	.word	0x20000150

08080924 <loop>:
{
 8080924:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  switch(state) {
 8080928:	4ca2      	ldr	r4, [pc, #648]	; (8080bb4 <loop+0x290>)
 808092a:	4ea3      	ldr	r6, [pc, #652]	; (8080bb8 <loop+0x294>)
 808092c:	7823      	ldrb	r3, [r4, #0]
 808092e:	4da3      	ldr	r5, [pc, #652]	; (8080bbc <loop+0x298>)
 8080930:	3b01      	subs	r3, #1
 8080932:	2b05      	cmp	r3, #5
 8080934:	d844      	bhi.n	80809c0 <loop+0x9c>
 8080936:	e8df f013 	tbh	[pc, r3, lsl #1]
 808093a:	00dd      	.short	0x00dd
 808093c:	00800006 	.word	0x00800006
 8080940:	009b001f 	.word	0x009b001f
 8080944:	00ba      	.short	0x00ba
    if (state != oldState) publishStateTransition();
 8080946:	4b9e      	ldr	r3, [pc, #632]	; (8080bc0 <loop+0x29c>)
 8080948:	781b      	ldrb	r3, [r3, #0]
 808094a:	2b02      	cmp	r3, #2
 808094c:	d001      	beq.n	8080952 <loop+0x2e>
 808094e:	f7ff ff81 	bl	8080854 <_Z22publishStateTransitionv>
    if (input1Flag) state = DEBOUNCE_FULL_STATE;                        // Need to make sure lights are on for sure - harder since full can flash
 8080952:	4b9c      	ldr	r3, [pc, #624]	; (8080bc4 <loop+0x2a0>)
 8080954:	781b      	ldrb	r3, [r3, #0]
 8080956:	b10b      	cbz	r3, 808095c <loop+0x38>
 8080958:	2304      	movs	r3, #4
 808095a:	7023      	strb	r3, [r4, #0]
    if (input2Flag) state = DEBOUNCE_OIL_STATE;                         // Need to make sure lights are on for sure
 808095c:	4b9a      	ldr	r3, [pc, #616]	; (8080bc8 <loop+0x2a4>)
 808095e:	781b      	ldrb	r3, [r3, #0]
 8080960:	b10b      	cbz	r3, 8080966 <loop+0x42>
 8080962:	2303      	movs	r3, #3
 8080964:	7023      	strb	r3, [r4, #0]
    if (Time.hour() != currentHourlyPeriod) state = REPORTING_STATE;    // We want to report on the hour
 8080966:	f002 fbe9 	bl	808313c <_ZN9TimeClass4hourEv>
 808096a:	4b98      	ldr	r3, [pc, #608]	; (8080bcc <loop+0x2a8>)
 808096c:	681b      	ldr	r3, [r3, #0]
 808096e:	4298      	cmp	r0, r3
 8080970:	d026      	beq.n	80809c0 <loop+0x9c>
        state = REPORTING_STATE;
 8080972:	2305      	movs	r3, #5
      state = RESP_WAIT_STATE;                                          // Wait for Response
 8080974:	7023      	strb	r3, [r4, #0]
 8080976:	e023      	b.n	80809c0 <loop+0x9c>
    if (state != oldState) {
 8080978:	4b91      	ldr	r3, [pc, #580]	; (8080bc0 <loop+0x29c>)
 808097a:	4f95      	ldr	r7, [pc, #596]	; (8080bd0 <loop+0x2ac>)
 808097c:	781b      	ldrb	r3, [r3, #0]
 808097e:	2b04      	cmp	r3, #4
 8080980:	d004      	beq.n	808098c <loop+0x68>
 8080982:	f001 f8ad 	bl	8081ae0 <HAL_Timer_Get_Milli_Seconds>
      debounceTimeStamp = millis();                                     // Start the debounce timer
 8080986:	6038      	str	r0, [r7, #0]
      publishStateTransition();
 8080988:	f7ff ff64 	bl	8080854 <_Z22publishStateTransitionv>
 808098c:	f001 f8a8 	bl	8081ae0 <HAL_Timer_Get_Milli_Seconds>
    if ((millis() - debounceTimeStamp > 10000) && current.input1 == 0) {// Wait for 10 seconds unless we are looking for a flashing light if current.input1 = 0 then we are looking for solid on
 8080990:	683b      	ldr	r3, [r7, #0]
 8080992:	1ac0      	subs	r0, r0, r3
 8080994:	f242 7310 	movw	r3, #10000	; 0x2710
 8080998:	4298      	cmp	r0, r3
 808099a:	d90b      	bls.n	80809b4 <loop+0x90>
 808099c:	f896 8000 	ldrb.w	r8, [r6]
 80809a0:	f1b8 0f00 	cmp.w	r8, #0
 80809a4:	d106      	bne.n	80809b4 <loop+0x90>
      if (!digitalRead(input1)) {                                       // We are looking for the "full" light on and not yet at 75% which is on solid - hence the debounce
 80809a6:	2019      	movs	r0, #25
 80809a8:	f002 fe90 	bl	80836cc <digitalRead>
 80809ac:	bb48      	cbnz	r0, 8080a02 <loop+0xde>
        takeMeasurements();
 80809ae:	f7ff fddb 	bl	8080568 <_Z16takeMeasurementsv>
 80809b2:	e7de      	b.n	8080972 <loop+0x4e>
 80809b4:	f001 f894 	bl	8081ae0 <HAL_Timer_Get_Milli_Seconds>
    else if ((millis() - debounceTimeStamp > 200) && current.input1 ==2) {  // Less debounce since the light should be flashing
 80809b8:	683b      	ldr	r3, [r7, #0]
 80809ba:	1ac0      	subs	r0, r0, r3
 80809bc:	28c8      	cmp	r0, #200	; 0xc8
 80809be:	d825      	bhi.n	8080a0c <loop+0xe8>
  if (watchdogFlag) petWatchdog();
 80809c0:	4b84      	ldr	r3, [pc, #528]	; (8080bd4 <loop+0x2b0>)
 80809c2:	781b      	ldrb	r3, [r3, #0]
 80809c4:	b10b      	cbz	r3, 80809ca <loop+0xa6>
 80809c6:	f7ff fe29 	bl	808061c <_Z11petWatchdogv>
  if (current.interruptDisconnected) flashLED();                      // Signal that at least one interrupt is disconnected
 80809ca:	7c33      	ldrb	r3, [r6, #16]
 80809cc:	b10b      	cbz	r3, 80809d2 <loop+0xae>
 80809ce:	f7ff fe7b 	bl	80806c8 <_Z8flashLEDv>
  if (systemStatusWriteNeeded) {                                      // Batch write updates to FRAM
 80809d2:	782b      	ldrb	r3, [r5, #0]
 80809d4:	b13b      	cbz	r3, 80809e6 <loop+0xc2>
 80809d6:	2314      	movs	r3, #20
 80809d8:	2101      	movs	r1, #1
 80809da:	4a7f      	ldr	r2, [pc, #508]	; (8080bd8 <loop+0x2b4>)
 80809dc:	487f      	ldr	r0, [pc, #508]	; (8080bdc <loop+0x2b8>)
 80809de:	f000 fc72 	bl	80812c6 <_ZN6MB85RC9writeDataEjPKhj>
    systemStatusWriteNeeded = false;
 80809e2:	2300      	movs	r3, #0
 80809e4:	702b      	strb	r3, [r5, #0]
  if (currentStatusWriteNeeded) {
 80809e6:	4c7e      	ldr	r4, [pc, #504]	; (8080be0 <loop+0x2bc>)
 80809e8:	7823      	ldrb	r3, [r4, #0]
 80809ea:	b13b      	cbz	r3, 80809fc <loop+0xd8>
 80809ec:	2314      	movs	r3, #20
 80809ee:	2150      	movs	r1, #80	; 0x50
 80809f0:	4a71      	ldr	r2, [pc, #452]	; (8080bb8 <loop+0x294>)
 80809f2:	487a      	ldr	r0, [pc, #488]	; (8080bdc <loop+0x2b8>)
 80809f4:	f000 fc67 	bl	80812c6 <_ZN6MB85RC9writeDataEjPKhj>
    currentStatusWriteNeeded = false;
 80809f8:	2300      	movs	r3, #0
 80809fa:	7023      	strb	r3, [r4, #0]
}
 80809fc:	b002      	add	sp, #8
 80809fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        input1Flag = false;
 8080a02:	4b70      	ldr	r3, [pc, #448]	; (8080bc4 <loop+0x2a0>)
 8080a04:	f883 8000 	strb.w	r8, [r3]
          state = IDLE_STATE;
 8080a08:	2302      	movs	r3, #2
 8080a0a:	e7b3      	b.n	8080974 <loop+0x50>
    else if ((millis() - debounceTimeStamp > 200) && current.input1 ==2) {  // Less debounce since the light should be flashing
 8080a0c:	f896 8000 	ldrb.w	r8, [r6]
 8080a10:	f1b8 0f02 	cmp.w	r8, #2
 8080a14:	d1d4      	bne.n	80809c0 <loop+0x9c>
 8080a16:	f001 f863 	bl	8081ae0 <HAL_Timer_Get_Milli_Seconds>
      debounceTimeStamp = millis();                                     // We need to reset as we will be coming back here often
 8080a1a:	6038      	str	r0, [r7, #0]
      if (!digitalRead(input1)) {                                       // Remember we came to this state on a falling interrupt - is it still low?
 8080a1c:	2019      	movs	r0, #25
 8080a1e:	f002 fe55 	bl	80836cc <digitalRead>
 8080a22:	b920      	cbnz	r0, 8080a2e <loop+0x10a>
        if (takeMeasurements()) state = REPORTING_STATE;                // The input1 is still low so off to takeMeasurements  - if returned true then the light was found to be flashing - if not more flashes needed
 8080a24:	f7ff fda0 	bl	8080568 <_Z16takeMeasurementsv>
 8080a28:	2800      	cmp	r0, #0
 8080a2a:	d1a2      	bne.n	8080972 <loop+0x4e>
 8080a2c:	e7ec      	b.n	8080a08 <loop+0xe4>
        input1Flag = false;                                             // False alarm must have been noise - not flashing
 8080a2e:	2200      	movs	r2, #0
 8080a30:	4b64      	ldr	r3, [pc, #400]	; (8080bc4 <loop+0x2a0>)
        state = IDLE_STATE;   
 8080a32:	f884 8000 	strb.w	r8, [r4]
        input1Flag = false;                                             // False alarm must have been noise - not flashing
 8080a36:	701a      	strb	r2, [r3, #0]
        state = IDLE_STATE;   
 8080a38:	e7c2      	b.n	80809c0 <loop+0x9c>
      if (state != oldState) {
 8080a3a:	4b61      	ldr	r3, [pc, #388]	; (8080bc0 <loop+0x29c>)
 8080a3c:	4f69      	ldr	r7, [pc, #420]	; (8080be4 <loop+0x2c0>)
 8080a3e:	781b      	ldrb	r3, [r3, #0]
 8080a40:	2b03      	cmp	r3, #3
 8080a42:	d004      	beq.n	8080a4e <loop+0x12a>
 8080a44:	f001 f84c 	bl	8081ae0 <HAL_Timer_Get_Milli_Seconds>
        debounceTimeStamp = millis();                                     // Start the debounce timer
 8080a48:	6038      	str	r0, [r7, #0]
        publishStateTransition();
 8080a4a:	f7ff ff03 	bl	8080854 <_Z22publishStateTransitionv>
 8080a4e:	f001 f847 	bl	8081ae0 <HAL_Timer_Get_Milli_Seconds>
      if (millis() - debounceTimeStamp > 10000) {                         // Wait for 10 seconds unless we are looking for a flashing light
 8080a52:	683b      	ldr	r3, [r7, #0]
 8080a54:	1ac0      	subs	r0, r0, r3
 8080a56:	f242 7310 	movw	r3, #10000	; 0x2710
 8080a5a:	4298      	cmp	r0, r3
 8080a5c:	d9b0      	bls.n	80809c0 <loop+0x9c>
        if (!digitalRead(input2)) {                                       // Low oil light is on (assert low) and we have not yet set this alert
 8080a5e:	201b      	movs	r0, #27
 8080a60:	f002 fe34 	bl	80836cc <digitalRead>
 8080a64:	2800      	cmp	r0, #0
 8080a66:	d0a2      	beq.n	80809ae <loop+0x8a>
          input2Flag = false;                                             // False alarm the input is no longer low - remember there is no alert flag once low oil is on
 8080a68:	2200      	movs	r2, #0
 8080a6a:	4b57      	ldr	r3, [pc, #348]	; (8080bc8 <loop+0x2a4>)
 8080a6c:	701a      	strb	r2, [r3, #0]
 8080a6e:	e7cb      	b.n	8080a08 <loop+0xe4>
    if (state != oldState) publishStateTransition();
 8080a70:	4b53      	ldr	r3, [pc, #332]	; (8080bc0 <loop+0x29c>)
 8080a72:	781b      	ldrb	r3, [r3, #0]
 8080a74:	2b05      	cmp	r3, #5
 8080a76:	d001      	beq.n	8080a7c <loop+0x158>
 8080a78:	f7ff feec 	bl	8080854 <_Z22publishStateTransitionv>
    if (!sysStatus.connectedStatus) connectToParticle();                // Only attempt to connect if not already New process to get connected
 8080a7c:	4b56      	ldr	r3, [pc, #344]	; (8080bd8 <loop+0x2b4>)
 8080a7e:	789b      	ldrb	r3, [r3, #2]
 8080a80:	b90b      	cbnz	r3, 8080a86 <loop+0x162>
 8080a82:	f7ff fddb 	bl	808063c <_Z17connectToParticlev>
 8080a86:	f001 fa01 	bl	8081e8c <spark_cloud_flag_connected>
    if (Particle.connected()) {
 8080a8a:	b150      	cbz	r0, 8080aa2 <loop+0x17e>
      if (Time.hour() == 0) dailyCleanup();                             // Once a day, clean house
 8080a8c:	f002 fb56 	bl	808313c <_ZN9TimeClass4hourEv>
 8080a90:	b908      	cbnz	r0, 8080a96 <loop+0x172>
 8080a92:	f7ff fe31 	bl	80806f8 <_Z12dailyCleanupv>
      takeMeasurements();                                               // Update Temp, Battery and Signal Strength values
 8080a96:	f7ff fd67 	bl	8080568 <_Z16takeMeasurementsv>
      sendEvent();                                                      // Send data to Ubidots
 8080a9a:	f7ff fca9 	bl	80803f0 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                          // Wait for Response
 8080a9e:	2306      	movs	r3, #6
 8080aa0:	e768      	b.n	8080974 <loop+0x50>
 8080aa2:	f001 f81d 	bl	8081ae0 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 8080aa6:	4b50      	ldr	r3, [pc, #320]	; (8080be8 <loop+0x2c4>)
 8080aa8:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;                                              // Response timed out
 8080aaa:	2301      	movs	r3, #1
 8080aac:	e762      	b.n	8080974 <loop+0x50>
    if (state != oldState) publishStateTransition();
 8080aae:	4b44      	ldr	r3, [pc, #272]	; (8080bc0 <loop+0x29c>)
 8080ab0:	781b      	ldrb	r3, [r3, #0]
 8080ab2:	2b06      	cmp	r3, #6
 8080ab4:	d001      	beq.n	8080aba <loop+0x196>
 8080ab6:	f7ff fecd 	bl	8080854 <_Z22publishStateTransitionv>
    if (!dataInFlight)  state = IDLE_STATE;                             // Response Received
 8080aba:	4b4c      	ldr	r3, [pc, #304]	; (8080bec <loop+0x2c8>)
 8080abc:	781b      	ldrb	r3, [r3, #0]
 8080abe:	2b00      	cmp	r3, #0
 8080ac0:	d0a2      	beq.n	8080a08 <loop+0xe4>
 8080ac2:	f001 f80d 	bl	8081ae0 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {               // If it takes too long - will need to reset
 8080ac6:	4b4a      	ldr	r3, [pc, #296]	; (8080bf0 <loop+0x2cc>)
 8080ac8:	681b      	ldr	r3, [r3, #0]
 8080aca:	1ac0      	subs	r0, r0, r3
 8080acc:	4b49      	ldr	r3, [pc, #292]	; (8080bf4 <loop+0x2d0>)
 8080ace:	681b      	ldr	r3, [r3, #0]
 8080ad0:	4298      	cmp	r0, r3
 8080ad2:	f67f af75 	bls.w	80809c0 <loop+0x9c>
 8080ad6:	f001 f803 	bl	8081ae0 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 8080ada:	4b43      	ldr	r3, [pc, #268]	; (8080be8 <loop+0x2c4>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);    // If the device times out on the Webhook response, it will ensure a new session is started on next connect
 8080adc:	4a46      	ldr	r2, [pc, #280]	; (8080bf8 <loop+0x2d4>)
      resetTimeStamp = millis();
 8080ade:	6018      	str	r0, [r3, #0]
 8080ae0:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);    // If the device times out on the Webhook response, it will ensure a new session is started on next connect
 8080ae2:	f88d 3000 	strb.w	r3, [sp]
 8080ae6:	4b45      	ldr	r3, [pc, #276]	; (8080bfc <loop+0x2d8>)
 8080ae8:	4945      	ldr	r1, [pc, #276]	; (8080c00 <loop+0x2dc>)
 8080aea:	781b      	ldrb	r3, [r3, #0]
 8080aec:	4845      	ldr	r0, [pc, #276]	; (8080c04 <loop+0x2e0>)
 8080aee:	f7ff fb6d 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
 8080af2:	e7da      	b.n	8080aaa <loop+0x186>
    if (state != oldState) publishStateTransition();
 8080af4:	4b32      	ldr	r3, [pc, #200]	; (8080bc0 <loop+0x29c>)
 8080af6:	781b      	ldrb	r3, [r3, #0]
 8080af8:	2b01      	cmp	r3, #1
 8080afa:	d001      	beq.n	8080b00 <loop+0x1dc>
 8080afc:	f7ff feaa 	bl	8080854 <_Z22publishStateTransitionv>
 8080b00:	f000 ffee 	bl	8081ae0 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait) {
 8080b04:	4b38      	ldr	r3, [pc, #224]	; (8080be8 <loop+0x2c4>)
 8080b06:	4a40      	ldr	r2, [pc, #256]	; (8080c08 <loop+0x2e4>)
 8080b08:	681b      	ldr	r3, [r3, #0]
 8080b0a:	6812      	ldr	r2, [r2, #0]
 8080b0c:	4413      	add	r3, r2
 8080b0e:	4283      	cmp	r3, r0
 8080b10:	f4bf af56 	bcs.w	80809c0 <loop+0x9c>
      if (sysStatus.resetCount <= 3) {                                  // First try simple reset
 8080b14:	4c30      	ldr	r4, [pc, #192]	; (8080bd8 <loop+0x2b4>)
 8080b16:	6863      	ldr	r3, [r4, #4]
 8080b18:	2b03      	cmp	r3, #3
 8080b1a:	dc13      	bgt.n	8080b44 <loop+0x220>
 8080b1c:	f001 f9b6 	bl	8081e8c <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
 8080b20:	b148      	cbz	r0, 8080b36 <loop+0x212>
 8080b22:	2300      	movs	r3, #0
 8080b24:	f88d 3000 	strb.w	r3, [sp]
 8080b28:	4b34      	ldr	r3, [pc, #208]	; (8080bfc <loop+0x2d8>)
 8080b2a:	4a38      	ldr	r2, [pc, #224]	; (8080c0c <loop+0x2e8>)
 8080b2c:	781b      	ldrb	r3, [r3, #0]
 8080b2e:	4938      	ldr	r1, [pc, #224]	; (8080c10 <loop+0x2ec>)
 8080b30:	4834      	ldr	r0, [pc, #208]	; (8080c04 <loop+0x2e0>)
 8080b32:	f7ff fb4b 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
 8080b36:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080b3a:	f001 fa77 	bl	808202c <delay>
        System.reset();
 8080b3e:	f002 f9ac 	bl	8082e9a <_ZN11SystemClass5resetEv>
 8080b42:	e73d      	b.n	80809c0 <loop+0x9c>
      else if (Time.now() - sysStatus.lastHookResponse > 7200L) { //It has been more than two hours since a sucessful hook response
 8080b44:	f002 fae9 	bl	808311a <_ZN9TimeClass3nowEv>
 8080b48:	6923      	ldr	r3, [r4, #16]
 8080b4a:	1ac0      	subs	r0, r0, r3
 8080b4c:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
 8080b50:	d918      	bls.n	8080b84 <loop+0x260>
 8080b52:	f001 f99b 	bl	8081e8c <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
 8080b56:	b148      	cbz	r0, 8080b6c <loop+0x248>
 8080b58:	2300      	movs	r3, #0
 8080b5a:	f88d 3000 	strb.w	r3, [sp]
 8080b5e:	4b27      	ldr	r3, [pc, #156]	; (8080bfc <loop+0x2d8>)
 8080b60:	4a2c      	ldr	r2, [pc, #176]	; (8080c14 <loop+0x2f0>)
 8080b62:	781b      	ldrb	r3, [r3, #0]
 8080b64:	492a      	ldr	r1, [pc, #168]	; (8080c10 <loop+0x2ec>)
 8080b66:	4827      	ldr	r0, [pc, #156]	; (8080c04 <loop+0x2e0>)
 8080b68:	f7ff fb30 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
 8080b6c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080b70:	f001 fa5c 	bl	808202c <delay>
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
 8080b74:	2300      	movs	r3, #0
        systemStatusWriteNeeded=true;
 8080b76:	2101      	movs	r1, #1
        digitalWrite(hardResetPin,HIGH);                              // This will cut all power to the Electron AND the carrier board
 8080b78:	2004      	movs	r0, #4
        sysStatus.resetCount = 0;                                  // Zero the ResetCount
 8080b7a:	6063      	str	r3, [r4, #4]
        systemStatusWriteNeeded=true;
 8080b7c:	7029      	strb	r1, [r5, #0]
        digitalWrite(hardResetPin,HIGH);                              // This will cut all power to the Electron AND the carrier board
 8080b7e:	f002 fd8c 	bl	808369a <digitalWrite>
 8080b82:	e71d      	b.n	80809c0 <loop+0x9c>
 8080b84:	f001 f982 	bl	8081e8c <spark_cloud_flag_connected>
        if (Particle.connected()) publishQueue.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
 8080b88:	b148      	cbz	r0, 8080b9e <loop+0x27a>
 8080b8a:	2300      	movs	r3, #0
 8080b8c:	f88d 3000 	strb.w	r3, [sp]
 8080b90:	4b1a      	ldr	r3, [pc, #104]	; (8080bfc <loop+0x2d8>)
 8080b92:	4a21      	ldr	r2, [pc, #132]	; (8080c18 <loop+0x2f4>)
 8080b94:	781b      	ldrb	r3, [r3, #0]
 8080b96:	491e      	ldr	r1, [pc, #120]	; (8080c10 <loop+0x2ec>)
 8080b98:	481a      	ldr	r0, [pc, #104]	; (8080c04 <loop+0x2e0>)
 8080b9a:	f7ff fb17 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
        delay(2000);
 8080b9e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080ba2:	f001 fa43 	bl	808202c <delay>
        sysStatus.resetCount = 0;                                     // Zero the ResetCount
 8080ba6:	2300      	movs	r3, #0
 8080ba8:	6063      	str	r3, [r4, #4]
        systemStatusWriteNeeded=true;
 8080baa:	2301      	movs	r3, #1
 8080bac:	702b      	strb	r3, [r5, #0]
        fullModemReset();                                             // Full Modem reset and reboots
 8080bae:	f7ff fe85 	bl	80808bc <_Z14fullModemResetv>
 8080bb2:	e705      	b.n	80809c0 <loop+0x9c>
 8080bb4:	200001dc 	.word	0x200001dc
 8080bb8:	20000168 	.word	0x20000168
 8080bbc:	200001f4 	.word	0x200001f4
 8080bc0:	2000019e 	.word	0x2000019e
 8080bc4:	2000019c 	.word	0x2000019c
 8080bc8:	2000019d 	.word	0x2000019d
 8080bcc:	2000017c 	.word	0x2000017c
 8080bd0:	2000015c 	.word	0x2000015c
 8080bd4:	200001f5 	.word	0x200001f5
 8080bd8:	200001e0 	.word	0x200001e0
 8080bdc:	2000018c 	.word	0x2000018c
 8080be0:	2000018a 	.word	0x2000018a
 8080be4:	20000160 	.word	0x20000160
 8080be8:	200001d8 	.word	0x200001d8
 8080bec:	2000018b 	.word	0x2000018b
 8080bf0:	200001f8 	.word	0x200001f8
 8080bf4:	20000088 	.word	0x20000088
 8080bf8:	08084b49 	.word	0x08084b49
 8080bfc:	20000154 	.word	0x20000154
 8080c00:	08084b4a 	.word	0x08084b4a
 8080c04:	200001a0 	.word	0x200001a0
 8080c08:	20000020 	.word	0x20000020
 8080c0c:	08084b63 	.word	0x08084b63
 8080c10:	08084a05 	.word	0x08084a05
 8080c14:	08084b77 	.word	0x08084b77
 8080c18:	08084b91 	.word	0x08084b91

08080c1c <_Z8isDSTusav>:
  }
  return 1;
}


bool isDSTusa() {
 8080c1c:	b538      	push	{r3, r4, r5, lr}
  // United States of America Summer Timer calculation (2am Local Time - 2nd Sunday in March/ 1st Sunday in November)
  // Adapted from @ScruffR's code posted here https://community.particle.io/t/daylight-savings-problem/38424/4
  // The code works in from months, days and hours in succession toward the two transitions
  int dayOfMonth = Time.day();
 8080c1e:	f002 fa99 	bl	8083154 <_ZN9TimeClass3dayEv>
 8080c22:	4605      	mov	r5, r0
  int month = Time.month();
 8080c24:	f002 faaa 	bl	808317c <_ZN9TimeClass5monthEv>
 8080c28:	4604      	mov	r4, r0
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
 8080c2a:	f002 fa9f 	bl	808316c <_ZN9TimeClass7weekdayEv>

  // By Month - inside or outside the DST window
  if (month >= 4 && month <= 10)
 8080c2e:	1f23      	subs	r3, r4, #4
 8080c30:	2b06      	cmp	r3, #6
 8080c32:	d90e      	bls.n	8080c52 <_Z8isDSTusav+0x36>
  { // April to October definetly DST
    return true;
  }
  else if (month < 3 || month > 11)
 8080c34:	1ee3      	subs	r3, r4, #3
 8080c36:	2b08      	cmp	r3, #8
 8080c38:	d80d      	bhi.n	8080c56 <_Z8isDSTusav+0x3a>
  int dayOfWeek = Time.weekday() - 1; // make Sunday 0 .. Saturday 6
 8080c3a:	3801      	subs	r0, #1
  }

  boolean beforeFirstSunday = (dayOfMonth - dayOfWeek < 0);
  boolean secondSundayOrAfter = (dayOfMonth - dayOfWeek > 7);

  if (beforeFirstSunday && !secondSundayOrAfter) return (month == 11);
 8080c3c:	1a2d      	subs	r5, r5, r0
 8080c3e:	d504      	bpl.n	8080c4a <_Z8isDSTusav+0x2e>
 8080c40:	2c0b      	cmp	r4, #11
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
 8080c42:	bf14      	ite	ne
 8080c44:	2000      	movne	r0, #0
 8080c46:	2001      	moveq	r0, #1
  if (secSinceMidnightLocal >= 2*3600)
  { //  In the US, Daylight Time is based on local time
    return !dayStartedAs;
  }
  return dayStartedAs;
 8080c48:	bd38      	pop	{r3, r4, r5, pc}
  else if (!beforeFirstSunday && !secondSundayOrAfter) return false;
 8080c4a:	2d07      	cmp	r5, #7
 8080c4c:	dd03      	ble.n	8080c56 <_Z8isDSTusav+0x3a>
  else if (!beforeFirstSunday && secondSundayOrAfter) return (month == 3);
 8080c4e:	2c03      	cmp	r4, #3
 8080c50:	e7f7      	b.n	8080c42 <_Z8isDSTusav+0x26>
    return true;
 8080c52:	2001      	movs	r0, #1
 8080c54:	e7f8      	b.n	8080c48 <_Z8isDSTusav+0x2c>
    return false;
 8080c56:	2000      	movs	r0, #0
 8080c58:	e7f6      	b.n	8080c48 <_Z8isDSTusav+0x2c>
 8080c5a:	0000      	movs	r0, r0
 8080c5c:	0000      	movs	r0, r0
	...

08080c60 <setup>:
{
 8080c60:	b530      	push	{r4, r5, lr}
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 8080c62:	2400      	movs	r4, #0
 8080c64:	b0a9      	sub	sp, #164	; 0xa4
  pinMode(input1,INPUT_PULLUP);                                         // Voltage Sensor Interrupt pin
 8080c66:	2102      	movs	r1, #2
 8080c68:	2019      	movs	r0, #25
 8080c6a:	f002 fd05 	bl	8083678 <pinMode>
  pinMode(input2,INPUT_PULLUP);                                         // Voltage Sensor Interrupt pin
 8080c6e:	2102      	movs	r1, #2
 8080c70:	201b      	movs	r0, #27
 8080c72:	f002 fd01 	bl	8083678 <pinMode>
  pinMode(wakeUpPin,INPUT);                                             // This pin is active HIGH
 8080c76:	2100      	movs	r1, #0
 8080c78:	2011      	movs	r0, #17
 8080c7a:	f002 fcfd 	bl	8083678 <pinMode>
  pinMode(userSwitch,INPUT);                                            // Momentary contact button on board for direct user input
 8080c7e:	2100      	movs	r1, #0
 8080c80:	2005      	movs	r0, #5
 8080c82:	f002 fcf9 	bl	8083678 <pinMode>
  pinMode(blueLED, OUTPUT);                                             // declare the Blue LED Pin as an output
 8080c86:	2101      	movs	r1, #1
 8080c88:	2007      	movs	r0, #7
 8080c8a:	f002 fcf5 	bl	8083678 <pinMode>
  pinMode(tmp36Shutdwn,OUTPUT);                                         // Supports shutting down the TMP-36 to save juice
 8080c8e:	2101      	movs	r1, #1
 8080c90:	201d      	movs	r0, #29
 8080c92:	f002 fcf1 	bl	8083678 <pinMode>
  digitalWrite(tmp36Shutdwn, HIGH);                                     // Turns on the temp sensor
 8080c96:	2101      	movs	r1, #1
 8080c98:	201d      	movs	r0, #29
 8080c9a:	f002 fcfe 	bl	808369a <digitalWrite>
  pinMode(donePin,OUTPUT);                                              // Allows us to pet the watchdog
 8080c9e:	2101      	movs	r1, #1
 8080ca0:	2006      	movs	r0, #6
 8080ca2:	f002 fce9 	bl	8083678 <pinMode>
  pinMode(hardResetPin,OUTPUT);                                         // For a hard reset active HIGH
 8080ca6:	2101      	movs	r1, #1
 8080ca8:	2004      	movs	r0, #4
 8080caa:	f002 fce5 	bl	8083678 <pinMode>
  digitalWrite(blueLED,HIGH);                                           // Signal we are in setup() 
 8080cae:	2101      	movs	r1, #1
 8080cb0:	2007      	movs	r0, #7
 8080cb2:	f002 fcf2 	bl	808369a <digitalWrite>
    static String deviceID(void) { return spark_deviceID(); }
 8080cb6:	a804      	add	r0, sp, #16
 8080cb8:	f001 f8f0 	bl	8081e9c <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 8080cbc:	2300      	movs	r3, #0
 8080cbe:	227d      	movs	r2, #125	; 0x7d
 8080cc0:	a908      	add	r1, sp, #32
 8080cc2:	a804      	add	r0, sp, #16
 8080cc4:	f002 f882 	bl	8082dcc <_ZNK6String8getBytesEPhjj>
 8080cc8:	4623      	mov	r3, r4
 8080cca:	4622      	mov	r2, r4
 8080ccc:	4986      	ldr	r1, [pc, #536]	; (8080ee8 <setup+0x288>)
 8080cce:	e9cd 4400 	strd	r4, r4, [sp]
 8080cd2:	a808      	add	r0, sp, #32
 8080cd4:	f001 f8f2 	bl	8081ebc <spark_subscribe>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 8080cd8:	4623      	mov	r3, r4
 8080cda:	2204      	movs	r2, #4
 8080cdc:	4983      	ldr	r1, [pc, #524]	; (8080eec <setup+0x28c>)
 8080cde:	4884      	ldr	r0, [pc, #528]	; (8080ef0 <setup+0x290>)
 8080ce0:	f001 f8b4 	bl	8081e4c <spark_variable>
 8080ce4:	4623      	mov	r3, r4
 8080ce6:	2202      	movs	r2, #2
 8080ce8:	4982      	ldr	r1, [pc, #520]	; (8080ef4 <setup+0x294>)
 8080cea:	4883      	ldr	r0, [pc, #524]	; (8080ef8 <setup+0x298>)
 8080cec:	f001 f8ae 	bl	8081e4c <spark_variable>
 8080cf0:	4623      	mov	r3, r4
 8080cf2:	2202      	movs	r2, #2
 8080cf4:	4981      	ldr	r1, [pc, #516]	; (8080efc <setup+0x29c>)
 8080cf6:	4882      	ldr	r0, [pc, #520]	; (8080f00 <setup+0x2a0>)
 8080cf8:	f001 f8a8 	bl	8081e4c <spark_variable>
 8080cfc:	4623      	mov	r3, r4
 8080cfe:	2204      	movs	r2, #4
 8080d00:	4980      	ldr	r1, [pc, #512]	; (8080f04 <setup+0x2a4>)
 8080d02:	4881      	ldr	r0, [pc, #516]	; (8080f08 <setup+0x2a8>)
 8080d04:	f001 f8a2 	bl	8081e4c <spark_variable>
 8080d08:	4623      	mov	r3, r4
 8080d0a:	2204      	movs	r2, #4
 8080d0c:	497f      	ldr	r1, [pc, #508]	; (8080f0c <setup+0x2ac>)
 8080d0e:	4880      	ldr	r0, [pc, #512]	; (8080f10 <setup+0x2b0>)
 8080d10:	f001 f89c 	bl	8081e4c <spark_variable>
 8080d14:	4623      	mov	r3, r4
 8080d16:	2204      	movs	r2, #4
 8080d18:	497e      	ldr	r1, [pc, #504]	; (8080f14 <setup+0x2b4>)
 8080d1a:	487f      	ldr	r0, [pc, #508]	; (8080f18 <setup+0x2b8>)
 8080d1c:	f001 f896 	bl	8081e4c <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 8080d20:	4a7e      	ldr	r2, [pc, #504]	; (8080f1c <setup+0x2bc>)
 8080d22:	497f      	ldr	r1, [pc, #508]	; (8080f20 <setup+0x2c0>)
 8080d24:	487f      	ldr	r0, [pc, #508]	; (8080f24 <setup+0x2c4>)
 8080d26:	f001 fb2b 	bl	8082380 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080d2a:	4a7f      	ldr	r2, [pc, #508]	; (8080f28 <setup+0x2c8>)
 8080d2c:	497f      	ldr	r1, [pc, #508]	; (8080f2c <setup+0x2cc>)
 8080d2e:	487d      	ldr	r0, [pc, #500]	; (8080f24 <setup+0x2c4>)
 8080d30:	f001 fb26 	bl	8082380 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080d34:	4a7e      	ldr	r2, [pc, #504]	; (8080f30 <setup+0x2d0>)
 8080d36:	497f      	ldr	r1, [pc, #508]	; (8080f34 <setup+0x2d4>)
 8080d38:	487a      	ldr	r0, [pc, #488]	; (8080f24 <setup+0x2c4>)
 8080d3a:	f001 fb21 	bl	8082380 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080d3e:	4a7e      	ldr	r2, [pc, #504]	; (8080f38 <setup+0x2d8>)
 8080d40:	497e      	ldr	r1, [pc, #504]	; (8080f3c <setup+0x2dc>)
 8080d42:	4878      	ldr	r0, [pc, #480]	; (8080f24 <setup+0x2c4>)
 8080d44:	f001 fb1c 	bl	8082380 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080d48:	4a7d      	ldr	r2, [pc, #500]	; (8080f40 <setup+0x2e0>)
 8080d4a:	497e      	ldr	r1, [pc, #504]	; (8080f44 <setup+0x2e4>)
 8080d4c:	4875      	ldr	r0, [pc, #468]	; (8080f24 <setup+0x2c4>)
 8080d4e:	f001 fb17 	bl	8082380 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  connectToParticle();                                                  // This device is always connected
 8080d52:	f7ff fc73 	bl	808063c <_Z17connectToParticlev>
  fram.begin();                                                         // Initialize the FRAM module
 8080d56:	487c      	ldr	r0, [pc, #496]	; (8080f48 <setup+0x2e8>)
 8080d58:	f000 fa28 	bl	80811ac <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
 8080d5c:	4621      	mov	r1, r4
 8080d5e:	2301      	movs	r3, #1
 8080d60:	4879      	ldr	r0, [pc, #484]	; (8080f48 <setup+0x2e8>)
 8080d62:	f10d 020b 	add.w	r2, sp, #11
 8080d66:	f000 fa63 	bl	8081230 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                               // Check to see if the memory map in the sketch matches the data on the chip
 8080d6a:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8080d6e:	4d77      	ldr	r5, [pc, #476]	; (8080f4c <setup+0x2ec>)
 8080d70:	2901      	cmp	r1, #1
 8080d72:	f000 808e 	beq.w	8080e92 <setup+0x232>
    fram.erase();                                                       // Reset the FRAM to correct the issue
 8080d76:	4874      	ldr	r0, [pc, #464]	; (8080f48 <setup+0x2e8>)
 8080d78:	f000 fa22 	bl	80811c0 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
 8080d7c:	2304      	movs	r3, #4
 8080d7e:	4621      	mov	r1, r4
 8080d80:	4a73      	ldr	r2, [pc, #460]	; (8080f50 <setup+0x2f0>)
 8080d82:	4871      	ldr	r0, [pc, #452]	; (8080f48 <setup+0x2e8>)
 8080d84:	f000 fa9f 	bl	80812c6 <_ZN6MB85RC9writeDataEjPKhj>
    loadSystemDefaults();                                               // Out of the box, we need the device to be awake and connected
 8080d88:	f7ff fcf0 	bl	808076c <_Z18loadSystemDefaultsv>
        int reason = RESET_REASON_NONE;
 8080d8c:	2400      	movs	r4, #0
  checkSystemValues();                                                  // Make sure System values are all in valid range
 8080d8e:	f7ff fd1b 	bl	80807c8 <_Z17checkSystemValuesv>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080d92:	4622      	mov	r2, r4
 8080d94:	4621      	mov	r1, r4
 8080d96:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
 8080d98:	9403      	str	r4, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080d9a:	f000 fe81 	bl	8081aa0 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8080d9e:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
 8080da0:	2b14      	cmp	r3, #20
 8080da2:	d17c      	bne.n	8080e9e <setup+0x23e>
    systemStatusWriteNeeded = true;                                     // If so, store incremented number - watchdog must have done This
 8080da4:	2201      	movs	r2, #1
    sysStatus.resetCount++;
 8080da6:	686b      	ldr	r3, [r5, #4]
 8080da8:	3301      	adds	r3, #1
 8080daa:	606b      	str	r3, [r5, #4]
    systemStatusWriteNeeded = true;                                     // If so, store incremented number - watchdog must have done This
 8080dac:	4b69      	ldr	r3, [pc, #420]	; (8080f54 <setup+0x2f4>)
 8080dae:	701a      	strb	r2, [r3, #0]
  Time.setDSTOffset(sysStatus.dstOffset);                               // Set the value from FRAM if in limits
 8080db0:	68e8      	ldr	r0, [r5, #12]
 8080db2:	f002 f92f 	bl	8083014 <_ZN9TimeClass12setDSTOffsetEf>
  DSTRULES() ? Time.beginDST() : Time.endDST();                         // Perform the DST calculation here
 8080db6:	f7ff ff31 	bl	8080c1c <_Z8isDSTusav>
 8080dba:	2800      	cmp	r0, #0
 8080dbc:	d07a      	beq.n	8080eb4 <setup+0x254>
 8080dbe:	f002 f943 	bl	8083048 <_ZN9TimeClass8beginDSTEv>
  Time.zone(sysStatus.timezone);                                        // Set the Time Zone for our device
 8080dc2:	68a8      	ldr	r0, [r5, #8]
 8080dc4:	f002 f908 	bl	8082fd8 <_ZN9TimeClass4zoneEf>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);   // Load the offset string
 8080dc8:	f002 f9e0 	bl	808318c <_ZN9TimeClass5localEv>
 8080dcc:	4604      	mov	r4, r0
 8080dce:	f002 f9a4 	bl	808311a <_ZN9TimeClass3nowEv>
 8080dd2:	1a20      	subs	r0, r4, r0
 8080dd4:	f002 fe62 	bl	8083a9c <__aeabi_i2d>
 8080dd8:	a341      	add	r3, pc, #260	; (adr r3, 8080ee0 <setup+0x280>)
 8080dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080dde:	f002 fff1 	bl	8083dc4 <__aeabi_ddiv>
 8080de2:	4a5d      	ldr	r2, [pc, #372]	; (8080f58 <setup+0x2f8>)
 8080de4:	e9cd 0100 	strd	r0, r1, [sp]
 8080de8:	210a      	movs	r1, #10
 8080dea:	485c      	ldr	r0, [pc, #368]	; (8080f5c <setup+0x2fc>)
 8080dec:	f001 f8fe 	bl	8081fec <snprintf>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
 8080df0:	2314      	movs	r3, #20
 8080df2:	2150      	movs	r1, #80	; 0x50
 8080df4:	4a5a      	ldr	r2, [pc, #360]	; (8080f60 <setup+0x300>)
 8080df6:	4854      	ldr	r0, [pc, #336]	; (8080f48 <setup+0x2e8>)
 8080df8:	f000 fa1a 	bl	8081230 <_ZN6MB85RC8readDataEjPhj>
  checkCurrentValues();                                                 // Make sure all is good
 8080dfc:	f7ff fd1a 	bl	8080834 <_Z18checkCurrentValuesv>
  currentHourlyPeriod = Time.hour();                                    // The local time hourly period for reporting purposes
 8080e00:	f002 f99c 	bl	808313c <_ZN9TimeClass4hourEv>
 8080e04:	4b57      	ldr	r3, [pc, #348]	; (8080f64 <setup+0x304>)
 8080e06:	6018      	str	r0, [r3, #0]
  if (!digitalRead(userSwitch)) loadSystemDefaults();                   // Make sure the device wakes up and connects
 8080e08:	2005      	movs	r0, #5
 8080e0a:	f002 fc5f 	bl	80836cc <digitalRead>
 8080e0e:	b908      	cbnz	r0, 8080e14 <setup+0x1b4>
 8080e10:	f7ff fcac 	bl	808076c <_Z18loadSystemDefaultsv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                      // The watchdog timer will signal us and we have to respond
 8080e14:	2300      	movs	r3, #0
 8080e16:	2201      	movs	r2, #1
 8080e18:	4953      	ldr	r1, [pc, #332]	; (8080f68 <setup+0x308>)
 8080e1a:	9300      	str	r3, [sp, #0]
 8080e1c:	2011      	movs	r0, #17
 8080e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8080e22:	f001 fde3 	bl	80829ec <_Z15attachInterrupttPFvvE13InterruptModeah>
  if (digitalRead(input1))  {                                           // The input is not in an alert state
 8080e26:	2019      	movs	r0, #25
 8080e28:	f002 fc50 	bl	80836cc <digitalRead>
    strncpy(input1Str,"No Alert",sizeof(input1Str));
 8080e2c:	2210      	movs	r2, #16
  if (digitalRead(input1))  {                                           // The input is not in an alert state
 8080e2e:	2800      	cmp	r0, #0
 8080e30:	d043      	beq.n	8080eba <setup+0x25a>
    strncpy(input1Str,"No Alert",sizeof(input1Str));
 8080e32:	494e      	ldr	r1, [pc, #312]	; (8080f6c <setup+0x30c>)
 8080e34:	4835      	ldr	r0, [pc, #212]	; (8080f0c <setup+0x2ac>)
 8080e36:	f003 fd0e 	bl	8084856 <strncpy>
  attachInterrupt(input1, input1ISR, FALLING);                          // We need to watch for the input1 in both rising and falling states even if it was on at reset
 8080e3a:	2400      	movs	r4, #0
 8080e3c:	2202      	movs	r2, #2
 8080e3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8080e42:	494b      	ldr	r1, [pc, #300]	; (8080f70 <setup+0x310>)
 8080e44:	2019      	movs	r0, #25
 8080e46:	9400      	str	r4, [sp, #0]
 8080e48:	f001 fdd0 	bl	80829ec <_Z15attachInterrupttPFvvE13InterruptModeah>
  if (digitalRead(input2))  {                                           // The input is not in an alert state
 8080e4c:	201b      	movs	r0, #27
 8080e4e:	f002 fc3d 	bl	80836cc <digitalRead>
    strncpy(input2Str,"No Alert",sizeof(input2Str));
 8080e52:	2210      	movs	r2, #16
  if (digitalRead(input2))  {                                           // The input is not in an alert state
 8080e54:	2800      	cmp	r0, #0
 8080e56:	d038      	beq.n	8080eca <setup+0x26a>
    strncpy(input2Str,"No Alert",sizeof(input2Str));
 8080e58:	4944      	ldr	r1, [pc, #272]	; (8080f6c <setup+0x30c>)
 8080e5a:	482e      	ldr	r0, [pc, #184]	; (8080f14 <setup+0x2b4>)
 8080e5c:	f003 fcfb 	bl	8084856 <strncpy>
    attachInterrupt(input2, input2ISR, FALLING);                          // On the input2 line, we just need to know when it goes LOW
 8080e60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8080e64:	2202      	movs	r2, #2
 8080e66:	201b      	movs	r0, #27
 8080e68:	4942      	ldr	r1, [pc, #264]	; (8080f74 <setup+0x314>)
 8080e6a:	9400      	str	r4, [sp, #0]
 8080e6c:	f001 fdbe 	bl	80829ec <_Z15attachInterrupttPFvvE13InterruptModeah>
  takeMeasurements();
 8080e70:	f7ff fb7a 	bl	8080568 <_Z16takeMeasurementsv>
  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
 8080e74:	4b40      	ldr	r3, [pc, #256]	; (8080f78 <setup+0x318>)
  digitalWrite(blueLED,LOW);                                            // Signal done with startup
 8080e76:	2100      	movs	r1, #0
  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
 8080e78:	781a      	ldrb	r2, [r3, #0]
  digitalWrite(blueLED,LOW);                                            // Signal done with startup
 8080e7a:	2007      	movs	r0, #7
  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
 8080e7c:	2a01      	cmp	r2, #1
 8080e7e:	bf1c      	itt	ne
 8080e80:	2202      	movne	r2, #2
 8080e82:	701a      	strbne	r2, [r3, #0]
  digitalWrite(blueLED,LOW);                                            // Signal done with startup
 8080e84:	f002 fc09 	bl	808369a <digitalWrite>
  String deviceID = System.deviceID();                                  // Multiple Electrons share the same hook - keeps things straight
 8080e88:	a804      	add	r0, sp, #16
 8080e8a:	f001 ff16 	bl	8082cba <_ZN6StringD1Ev>
}
 8080e8e:	b029      	add	sp, #164	; 0xa4
 8080e90:	bd30      	pop	{r4, r5, pc}
 8080e92:	2314      	movs	r3, #20
 8080e94:	462a      	mov	r2, r5
 8080e96:	482c      	ldr	r0, [pc, #176]	; (8080f48 <setup+0x2e8>)
 8080e98:	f000 f9ca 	bl	8081230 <_ZN6MB85RC8readDataEjPhj>
        return t;
 8080e9c:	e776      	b.n	8080d8c <setup+0x12c>
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080e9e:	4622      	mov	r2, r4
 8080ea0:	4621      	mov	r1, r4
 8080ea2:	a803      	add	r0, sp, #12
        int reason = RESET_REASON_NONE;
 8080ea4:	9403      	str	r4, [sp, #12]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080ea6:	f000 fdfb 	bl	8081aa0 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8080eaa:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET || System.resetReason() == RESET_REASON_USER) { // Check to see if we are starting from a pin reset or a reset in the sketch
 8080eac:	2b8c      	cmp	r3, #140	; 0x8c
 8080eae:	f47f af7f 	bne.w	8080db0 <setup+0x150>
 8080eb2:	e777      	b.n	8080da4 <setup+0x144>
  DSTRULES() ? Time.beginDST() : Time.endDST();                         // Perform the DST calculation here
 8080eb4:	f002 f8d4 	bl	8083060 <_ZN9TimeClass6endDSTEv>
 8080eb8:	e783      	b.n	8080dc2 <setup+0x162>
    strncpy(input1Str,"75% Full",sizeof(input1Str));
 8080eba:	4930      	ldr	r1, [pc, #192]	; (8080f7c <setup+0x31c>)
 8080ebc:	4813      	ldr	r0, [pc, #76]	; (8080f0c <setup+0x2ac>)
 8080ebe:	f003 fcca 	bl	8084856 <strncpy>
    current.input1 = 2;                                               // Inidication is that we are now 75% full
 8080ec2:	2202      	movs	r2, #2
 8080ec4:	4b26      	ldr	r3, [pc, #152]	; (8080f60 <setup+0x300>)
 8080ec6:	701a      	strb	r2, [r3, #0]
 8080ec8:	e7b7      	b.n	8080e3a <setup+0x1da>
    strncpy(input2Str,"Low Oil",sizeof(input2Str));
 8080eca:	492d      	ldr	r1, [pc, #180]	; (8080f80 <setup+0x320>)
 8080ecc:	4811      	ldr	r0, [pc, #68]	; (8080f14 <setup+0x2b4>)
 8080ece:	f003 fcc2 	bl	8084856 <strncpy>
    current.input2 = 1;                                               // Inidication is that we have a low oil alert
 8080ed2:	2201      	movs	r2, #1
 8080ed4:	4b22      	ldr	r3, [pc, #136]	; (8080f60 <setup+0x300>)
 8080ed6:	705a      	strb	r2, [r3, #1]
    current.interruptDisconnected = true;
 8080ed8:	741a      	strb	r2, [r3, #16]
 8080eda:	e7c9      	b.n	8080e70 <setup+0x210>
 8080edc:	f3af 8000 	nop.w
 8080ee0:	00000000 	.word	0x00000000
 8080ee4:	40ac2000 	.word	0x40ac2000
 8080ee8:	080801e9 	.word	0x080801e9
 8080eec:	20000104 	.word	0x20000104
 8080ef0:	08084bb0 	.word	0x08084bb0
 8080ef4:	200001e4 	.word	0x200001e4
 8080ef8:	08084bb7 	.word	0x08084bb7
 8080efc:	20000170 	.word	0x20000170
 8080f00:	08084bc2 	.word	0x08084bc2
 8080f04:	08084ca8 	.word	0x08084ca8
 8080f08:	08084bce 	.word	0x08084bce
 8080f0c:	20000000 	.word	0x20000000
 8080f10:	08084bd6 	.word	0x08084bd6
 8080f14:	20000010 	.word	0x20000010
 8080f18:	08084bdd 	.word	0x08084bdd
 8080f1c:	08084be4 	.word	0x08084be4
 8080f20:	0808016d 	.word	0x0808016d
 8080f24:	08082355 	.word	0x08082355
 8080f28:	08084bef 	.word	0x08084bef
 8080f2c:	08080101 	.word	0x08080101
 8080f30:	08084bf8 	.word	0x08084bf8
 8080f34:	0808026d 	.word	0x0808026d
 8080f38:	08084c05 	.word	0x08084c05
 8080f3c:	080802d9 	.word	0x080802d9
 8080f40:	08084c12 	.word	0x08084c12
 8080f44:	08080f89 	.word	0x08080f89
 8080f48:	2000018c 	.word	0x2000018c
 8080f4c:	200001e0 	.word	0x200001e0
 8080f50:	08084cac 	.word	0x08084cac
 8080f54:	200001f4 	.word	0x200001f4
 8080f58:	08084a33 	.word	0x08084a33
 8080f5c:	20000180 	.word	0x20000180
 8080f60:	20000168 	.word	0x20000168
 8080f64:	2000017c 	.word	0x2000017c
 8080f68:	080800dd 	.word	0x080800dd
 8080f6c:	08084c20 	.word	0x08084c20
 8080f70:	080800e9 	.word	0x080800e9
 8080f74:	080800f5 	.word	0x080800f5
 8080f78:	200001dc 	.word	0x200001dc
 8080f7c:	08084ad5 	.word	0x08084ad5
 8080f80:	08084ae8 	.word	0x08084ae8
 8080f84:	00000000 	.word	0x00000000

08080f88 <_Z12setDSTOffset6String>:
int setDSTOffset(String command) {                                      // This is the number of hours that will be added for Daylight Savings Time 0 (off) - 2
 8080f88:	b570      	push	{r4, r5, r6, lr}
 8080f8a:	b0c8      	sub	sp, #288	; 0x120
 8080f8c:	4604      	mov	r4, r0
  time_t t = Time.now();
 8080f8e:	f002 f8c4 	bl	808311a <_ZN9TimeClass3nowEv>
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
 8080f92:	220a      	movs	r2, #10
  time_t t = Time.now();
 8080f94:	4605      	mov	r5, r0
  int8_t tempDSTOffset = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
 8080f96:	a903      	add	r1, sp, #12
 8080f98:	6820      	ldr	r0, [r4, #0]
 8080f9a:	f003 fce9 	bl	8084970 <strtol>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
 8080f9e:	b2c3      	uxtb	r3, r0
 8080fa0:	2b02      	cmp	r3, #2
 8080fa2:	d854      	bhi.n	808104e <_Z12setDSTOffset6String+0xc6>
  Time.setDSTOffset((float)tempDSTOffset);                              // Set the DST Offset
 8080fa4:	b240      	sxtb	r0, r0
 8080fa6:	f003 f947 	bl	8084238 <__aeabi_i2f>
 8080faa:	4604      	mov	r4, r0
 8080fac:	f002 f832 	bl	8083014 <_ZN9TimeClass12setDSTOffsetEf>
  systemStatusWriteNeeded = true;
 8080fb0:	2201      	movs	r2, #1
  sysStatus.dstOffset = (float)tempDSTOffset;
 8080fb2:	4b2b      	ldr	r3, [pc, #172]	; (8081060 <_Z12setDSTOffset6String+0xd8>)
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
 8080fb4:	4620      	mov	r0, r4
  sysStatus.dstOffset = (float)tempDSTOffset;
 8080fb6:	60dc      	str	r4, [r3, #12]
  systemStatusWriteNeeded = true;
 8080fb8:	4b2a      	ldr	r3, [pc, #168]	; (8081064 <_Z12setDSTOffset6String+0xdc>)
 8080fba:	701a      	strb	r2, [r3, #0]
  snprintf(data, sizeof(data), "DST offset %2.1f",sysStatus.dstOffset);
 8080fbc:	f002 fd80 	bl	8083ac0 <__aeabi_f2d>
 8080fc0:	4a29      	ldr	r2, [pc, #164]	; (8081068 <_Z12setDSTOffset6String+0xe0>)
 8080fc2:	e9cd 0100 	strd	r0, r1, [sp]
 8080fc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8080fca:	a808      	add	r0, sp, #32
 8080fcc:	f001 f80e 	bl	8081fec <snprintf>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
 8080fd0:	f002 f886 	bl	80830e0 <_ZN9TimeClass7isValidEv>
 8080fd4:	b128      	cbz	r0, 8080fe2 <_Z12setDSTOffset6String+0x5a>
 8080fd6:	f7ff fe21 	bl	8080c1c <_Z8isDSTusav>
 8080fda:	2800      	cmp	r0, #0
 8080fdc:	d034      	beq.n	8081048 <_Z12setDSTOffset6String+0xc0>
 8080fde:	f002 f833 	bl	8083048 <_ZN9TimeClass8beginDSTEv>
  snprintf(currentOffsetStr,sizeof(currentOffsetStr),"%2.1f UTC",(Time.local() - Time.now()) / 3600.0);
 8080fe2:	f002 f8d3 	bl	808318c <_ZN9TimeClass5localEv>
 8080fe6:	4604      	mov	r4, r0
 8080fe8:	f002 f897 	bl	808311a <_ZN9TimeClass3nowEv>
 8080fec:	1a20      	subs	r0, r4, r0
 8080fee:	f002 fd55 	bl	8083a9c <__aeabi_i2d>
 8080ff2:	a319      	add	r3, pc, #100	; (adr r3, 8081058 <_Z12setDSTOffset6String+0xd0>)
 8080ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080ff8:	f002 fee4 	bl	8083dc4 <__aeabi_ddiv>
 8080ffc:	4a1b      	ldr	r2, [pc, #108]	; (808106c <_Z12setDSTOffset6String+0xe4>)
 8080ffe:	e9cd 0100 	strd	r0, r1, [sp]
 8081002:	210a      	movs	r1, #10
 8081004:	481a      	ldr	r0, [pc, #104]	; (8081070 <_Z12setDSTOffset6String+0xe8>)
 8081006:	f000 fff1 	bl	8081fec <snprintf>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 808100a:	f000 ff3f 	bl	8081e8c <spark_cloud_flag_connected>
  if (Particle.connected()) {
 808100e:	b1c8      	cbz	r0, 8081044 <_Z12setDSTOffset6String+0xbc>
 8081010:	2600      	movs	r6, #0
 8081012:	4c18      	ldr	r4, [pc, #96]	; (8081074 <_Z12setDSTOffset6String+0xec>)
    publishQueue.publish("Time",data, PRIVATE);
 8081014:	f88d 6000 	strb.w	r6, [sp]
 8081018:	4917      	ldr	r1, [pc, #92]	; (8081078 <_Z12setDSTOffset6String+0xf0>)
 808101a:	7823      	ldrb	r3, [r4, #0]
 808101c:	aa08      	add	r2, sp, #32
 808101e:	4817      	ldr	r0, [pc, #92]	; (808107c <_Z12setDSTOffset6String+0xf4>)
 8081020:	f7ff f8d4 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    publishQueue.publish("Time",Time.timeStr(t), PRIVATE);
 8081024:	462a      	mov	r2, r5
 8081026:	17eb      	asrs	r3, r5, #31
 8081028:	a804      	add	r0, sp, #16
 808102a:	f002 f821 	bl	8083070 <_ZN9TimeClass7timeStrEx>
 808102e:	f88d 6000 	strb.w	r6, [sp]
 8081032:	7823      	ldrb	r3, [r4, #0]
 8081034:	9a04      	ldr	r2, [sp, #16]
 8081036:	4910      	ldr	r1, [pc, #64]	; (8081078 <_Z12setDSTOffset6String+0xf0>)
 8081038:	4810      	ldr	r0, [pc, #64]	; (808107c <_Z12setDSTOffset6String+0xf4>)
 808103a:	f7ff f8c7 	bl	80801cc <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
 808103e:	a804      	add	r0, sp, #16
 8081040:	f001 fe3b 	bl	8082cba <_ZN6StringD1Ev>
  return 1;
 8081044:	2001      	movs	r0, #1
 8081046:	e003      	b.n	8081050 <_Z12setDSTOffset6String+0xc8>
  if (Time.isValid()) isDSTusa() ? Time.beginDST() : Time.endDST();     // Perform the DST calculation here
 8081048:	f002 f80a 	bl	8083060 <_ZN9TimeClass6endDSTEv>
 808104c:	e7c9      	b.n	8080fe2 <_Z12setDSTOffset6String+0x5a>
  if ((tempDSTOffset < 0) | (tempDSTOffset > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
 808104e:	2000      	movs	r0, #0
}
 8081050:	b048      	add	sp, #288	; 0x120
 8081052:	bd70      	pop	{r4, r5, r6, pc}
 8081054:	f3af 8000 	nop.w
 8081058:	00000000 	.word	0x00000000
 808105c:	40ac2000 	.word	0x40ac2000
 8081060:	200001e0 	.word	0x200001e0
 8081064:	200001f4 	.word	0x200001f4
 8081068:	08084c29 	.word	0x08084c29
 808106c:	08084a33 	.word	0x08084a33
 8081070:	20000180 	.word	0x20000180
 8081074:	20000154 	.word	0x20000154
 8081078:	08084a51 	.word	0x08084a51
 808107c:	200001a0 	.word	0x200001a0

08081080 <_GLOBAL__sub_I___appProductID>:
 8081080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        val_(val) {
 8081082:	2400      	movs	r4, #0
 8081084:	2701      	movs	r7, #1
 8081086:	4b25      	ldr	r3, [pc, #148]	; (808111c <_GLOBAL__sub_I___appProductID+0x9c>)
              error_(SYSTEM_ERROR_NONE) {
 8081088:	4d25      	ldr	r5, [pc, #148]	; (8081120 <_GLOBAL__sub_I___appProductID+0xa0>)
 808108a:	601c      	str	r4, [r3, #0]
 808108c:	4b25      	ldr	r3, [pc, #148]	; (8081124 <_GLOBAL__sub_I___appProductID+0xa4>)
SYSTEM_MODE(SEMI_AUTOMATIC);    // This will enable user code to start executing automatically.
 808108e:	4e26      	ldr	r6, [pc, #152]	; (8081128 <_GLOBAL__sub_I___appProductID+0xa8>)
 8081090:	701f      	strb	r7, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
 8081092:	f002 fa8b 	bl	80835ac <spark_protocol_instance>
 8081096:	4623      	mov	r3, r4
 8081098:	4622      	mov	r2, r4
 808109a:	f642 11fb 	movw	r1, #10747	; 0x29fb
 808109e:	f002 fa8d 	bl	80835bc <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
 80810a2:	f002 fa83 	bl	80835ac <spark_protocol_instance>
 80810a6:	4622      	mov	r2, r4
 80810a8:	4623      	mov	r3, r4
 80810aa:	2104      	movs	r1, #4
 80810ac:	f002 fa8e 	bl	80835cc <spark_protocol_set_product_firmware_version>
    SleepResult() {}
 80810b0:	4b1e      	ldr	r3, [pc, #120]	; (808112c <_GLOBAL__sub_I___appProductID+0xac>)
              error_(SYSTEM_ERROR_NONE) {
 80810b2:	602c      	str	r4, [r5, #0]
    SleepResult() {}
 80810b4:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
 80810b6:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
 80810b8:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
 80810ba:	2002      	movs	r0, #2
 80810bc:	f000 fe70 	bl	8081da0 <set_system_mode>
 80810c0:	4632      	mov	r2, r6
 80810c2:	4628      	mov	r0, r5
 80810c4:	491a      	ldr	r1, [pc, #104]	; (8081130 <_GLOBAL__sub_I___appProductID+0xb0>)
 80810c6:	f002 fb89 	bl	80837dc <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);         // Means my code will not be held up by Particle processes.
 80810ca:	4621      	mov	r1, r4
 80810cc:	4638      	mov	r0, r7
 80810ce:	f000 fe7f 	bl	8081dd0 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
 80810d2:	4639      	mov	r1, r7
 80810d4:	2004      	movs	r0, #4
 80810d6:	f000 fcdb 	bl	8081a90 <HAL_Feature_Set>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
 80810da:	f002 fb3f 	bl	808375c <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
 80810de:	4d15      	ldr	r5, [pc, #84]	; (8081134 <_GLOBAL__sub_I___appProductID+0xb4>)
 80810e0:	4601      	mov	r1, r0
 80810e2:	4623      	mov	r3, r4
 80810e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80810e8:	4628      	mov	r0, r5
 80810ea:	f000 f855 	bl	8081198 <_ZN6MB85RCC1ER7TwoWireji>
 80810ee:	4b12      	ldr	r3, [pc, #72]	; (8081138 <_GLOBAL__sub_I___appProductID+0xb8>)
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
 80810f0:	4c12      	ldr	r4, [pc, #72]	; (808113c <_GLOBAL__sub_I___appProductID+0xbc>)
 80810f2:	602b      	str	r3, [r5, #0]
 80810f4:	4632      	mov	r2, r6
 80810f6:	4628      	mov	r0, r5
 80810f8:	4911      	ldr	r1, [pc, #68]	; (8081140 <_GLOBAL__sub_I___appProductID+0xc0>)
 80810fa:	f002 fb6f 	bl	80837dc <__aeabi_atexit>
 80810fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8081102:	4620      	mov	r0, r4
 8081104:	490f      	ldr	r1, [pc, #60]	; (8081144 <_GLOBAL__sub_I___appProductID+0xc4>)
 8081106:	f000 fb4d 	bl	80817a4 <_ZN25PublishQueueAsyncRetainedC1EPht>
 808110a:	4b0f      	ldr	r3, [pc, #60]	; (8081148 <_GLOBAL__sub_I___appProductID+0xc8>)
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
 808110c:	4632      	mov	r2, r6
 808110e:	6023      	str	r3, [r4, #0]
 8081110:	4620      	mov	r0, r4
 8081112:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
 8081116:	490d      	ldr	r1, [pc, #52]	; (808114c <_GLOBAL__sub_I___appProductID+0xcc>)
 8081118:	f002 bb60 	b.w	80837dc <__aeabi_atexit>
 808111c:	20000150 	.word	0x20000150
 8081120:	20000144 	.word	0x20000144
 8081124:	20000154 	.word	0x20000154
 8081128:	20000100 	.word	0x20000100
 808112c:	ffff0000 	.word	0xffff0000
 8081130:	08080189 	.word	0x08080189
 8081134:	2000018c 	.word	0x2000018c
 8081138:	08084c44 	.word	0x08084c44
 808113c:	200001a0 	.word	0x200001a0
 8081140:	08080145 	.word	0x08080145
 8081144:	40024000 	.word	0x40024000
 8081148:	08084c60 	.word	0x08084c60
 808114c:	0808011d 	.word	0x0808011d

08081150 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
 8081150:	4770      	bx	lr

08081152 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
 8081152:	b510      	push	{r4, lr}
 8081154:	4604      	mov	r4, r0
}
 8081156:	2110      	movs	r1, #16
 8081158:	f002 fb45 	bl	80837e6 <_ZdlPvj>
 808115c:	4620      	mov	r0, r4
 808115e:	bd10      	pop	{r4, pc}

08081160 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
 8081160:	6803      	ldr	r3, [r0, #0]
 8081162:	b2c9      	uxtb	r1, r1
 8081164:	689b      	ldr	r3, [r3, #8]
 8081166:	4718      	bx	r3

08081168 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8081168:	b40e      	push	{r1, r2, r3}
 808116a:	b510      	push	{r4, lr}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 808116c:	2300      	movs	r3, #0
    log(LOG_LEVEL_INFO, fmt, args);
 808116e:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 8081170:	2020      	movs	r0, #32
inline void spark::Logger::info(const char *fmt, ...) const {
 8081172:	b08d      	sub	sp, #52	; 0x34
 8081174:	aa0f      	add	r2, sp, #60	; 0x3c
 8081176:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 808117a:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 808117e:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 8081182:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8081184:	201e      	movs	r0, #30
 8081186:	aa04      	add	r2, sp, #16
 8081188:	f000 fdfa 	bl	8081d80 <log_message_v>
}
 808118c:	b00d      	add	sp, #52	; 0x34
 808118e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8081192:	b003      	add	sp, #12
 8081194:	4770      	bx	lr
	...

08081198 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
 8081198:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
 808119a:	4d03      	ldr	r5, [pc, #12]	; (80811a8 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
 808119c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80811a0:	e9c0 5100 	strd	r5, r1, [r0]
}
 80811a4:	bd30      	pop	{r4, r5, pc}
 80811a6:	bf00      	nop
 80811a8:	08084ce4 	.word	0x08084ce4

080811ac <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
 80811ac:	6840      	ldr	r0, [r0, #4]
 80811ae:	f001 bbcf 	b.w	8082950 <_ZN7TwoWire5beginEv>

080811b2 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 80811b2:	b510      	push	{r4, lr}
 80811b4:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 80811b6:	6800      	ldr	r0, [r0, #0]
 80811b8:	f001 fc0d 	bl	80829d6 <_ZN7TwoWire6unlockEv>
 80811bc:	4620      	mov	r0, r4
 80811be:	bd10      	pop	{r4, pc}

080811c0 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
 80811c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80811c4:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
 80811c6:	6840      	ldr	r0, [r0, #4]
bool MB85RC::erase() {
 80811c8:	b08a      	sub	sp, #40	; 0x28
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80811ca:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80811cc:	f001 fbfa 	bl	80829c4 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
 80811d0:	221e      	movs	r2, #30
 80811d2:	2100      	movs	r1, #0
 80811d4:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
 80811d6:	68a7      	ldr	r7, [r4, #8]
		size_t framAddr = 0;
 80811d8:	2600      	movs	r6, #0
		memset(zero, 0, sizeof(zero));
 80811da:	f003 fadb 	bl	8084794 <memset>

		while(totalLen > 0) {
 80811de:	b1ef      	cbz	r7, 808121c <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
 80811e0:	2f1e      	cmp	r7, #30
 80811e2:	46b8      	mov	r8, r7
 80811e4:	bf28      	it	cs
 80811e6:	f04f 081e 	movcs.w	r8, #30
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
 80811ea:	6823      	ldr	r3, [r4, #0]
 80811ec:	4631      	mov	r1, r6
 80811ee:	68dd      	ldr	r5, [r3, #12]
 80811f0:	4620      	mov	r0, r4
 80811f2:	4643      	mov	r3, r8
 80811f4:	aa02      	add	r2, sp, #8
 80811f6:	47a8      	blx	r5
			if (!result) {
 80811f8:	4605      	mov	r5, r0
 80811fa:	b958      	cbnz	r0, 8081214 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
 80811fc:	480a      	ldr	r0, [pc, #40]	; (8081228 <_ZN6MB85RC5eraseEv+0x68>)
 80811fe:	4632      	mov	r2, r6
 8081200:	490a      	ldr	r1, [pc, #40]	; (808122c <_ZN6MB85RC5eraseEv+0x6c>)
 8081202:	f7ff ffb1 	bl	8081168 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
 8081206:	a801      	add	r0, sp, #4
 8081208:	f7ff ffd3 	bl	80811b2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
 808120c:	4628      	mov	r0, r5
 808120e:	b00a      	add	sp, #40	; 0x28
 8081210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
 8081214:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
 8081218:	4446      	add	r6, r8
		while(totalLen > 0) {
 808121a:	e7e0      	b.n	80811de <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
 808121c:	a801      	add	r0, sp, #4
 808121e:	f7ff ffc8 	bl	80811b2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
 8081222:	2501      	movs	r5, #1
 8081224:	e7f2      	b.n	808120c <_ZN6MB85RC5eraseEv+0x4c>
 8081226:	bf00      	nop
 8081228:	200002ec 	.word	0x200002ec
 808122c:	08084cb0 	.word	0x08084cb0

08081230 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
 8081230:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8081234:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
 8081236:	6840      	ldr	r0, [r0, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
 8081238:	460d      	mov	r5, r1
 808123a:	4616      	mov	r6, r2
 808123c:	461f      	mov	r7, r3
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808123e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8081240:	f001 fbc0 	bl	80829c4 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
 8081244:	b1a7      	cbz	r7, 8081270 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
 8081246:	68e1      	ldr	r1, [r4, #12]
 8081248:	6860      	ldr	r0, [r4, #4]
 808124a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 808124e:	f001 fbb2 	bl	80829b6 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
 8081252:	0a29      	lsrs	r1, r5, #8
 8081254:	6860      	ldr	r0, [r4, #4]
 8081256:	f7ff ff83 	bl	8081160 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
 808125a:	4629      	mov	r1, r5
 808125c:	6860      	ldr	r0, [r4, #4]
 808125e:	f7ff ff7f 	bl	8081160 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
 8081262:	2100      	movs	r1, #0
 8081264:	6860      	ldr	r0, [r4, #4]
 8081266:	f001 fba9 	bl	80829bc <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
 808126a:	b148      	cbz	r0, 8081280 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
 808126c:	2400      	movs	r4, #0
 808126e:	e000      	b.n	8081272 <_ZN6MB85RC8readDataEjPhj+0x42>
 8081270:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
 8081272:	a801      	add	r0, sp, #4
 8081274:	f7ff ff9d 	bl	80811b2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
 8081278:	4620      	mov	r0, r4
 808127a:	b003      	add	sp, #12
 808127c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
 8081280:	2f20      	cmp	r7, #32
 8081282:	46b8      	mov	r8, r7
 8081284:	bf28      	it	cs
 8081286:	f04f 0820 	movcs.w	r8, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
 808128a:	7b21      	ldrb	r1, [r4, #12]
 808128c:	2301      	movs	r3, #1
 808128e:	4642      	mov	r2, r8
 8081290:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8081294:	6860      	ldr	r0, [r4, #4]
 8081296:	f001 fb78 	bl	808298a <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
 808129a:	f002 fa5f 	bl	808375c <_Z19__fetch_global_Wirev>
 808129e:	6803      	ldr	r3, [r0, #0]
 80812a0:	691b      	ldr	r3, [r3, #16]
 80812a2:	4798      	blx	r3
 80812a4:	4540      	cmp	r0, r8
 80812a6:	dbe1      	blt.n	808126c <_ZN6MB85RC8readDataEjPhj+0x3c>
 80812a8:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
 80812ac:	f002 fa56 	bl	808375c <_Z19__fetch_global_Wirev>
 80812b0:	6803      	ldr	r3, [r0, #0]
 80812b2:	695b      	ldr	r3, [r3, #20]
 80812b4:	4798      	blx	r3
 80812b6:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
 80812ba:	454e      	cmp	r6, r9
 80812bc:	d1f6      	bne.n	80812ac <_ZN6MB85RC8readDataEjPhj+0x7c>
 80812be:	4445      	add	r5, r8
 80812c0:	eba7 0708 	sub.w	r7, r7, r8
 80812c4:	e7be      	b.n	8081244 <_ZN6MB85RC8readDataEjPhj+0x14>

080812c6 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
 80812c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80812ca:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
 80812cc:	6840      	ldr	r0, [r0, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
 80812ce:	460e      	mov	r6, r1
 80812d0:	4690      	mov	r8, r2
 80812d2:	461d      	mov	r5, r3
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80812d4:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80812d6:	f04f 0901 	mov.w	r9, #1
 80812da:	f001 fb73 	bl	80829c4 <_ZN7TwoWire4lockEv>
	WITH_LOCK(wire) {
 80812de:	f1b9 0f00 	cmp.w	r9, #0
 80812e2:	d02a      	beq.n	808133a <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
 80812e4:	b34d      	cbz	r5, 808133a <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
 80812e6:	68e1      	ldr	r1, [r4, #12]
 80812e8:	6860      	ldr	r0, [r4, #4]
 80812ea:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 80812ee:	f001 fb62 	bl	80829b6 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
 80812f2:	0a31      	lsrs	r1, r6, #8
 80812f4:	6860      	ldr	r0, [r4, #4]
 80812f6:	f7ff ff33 	bl	8081160 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
 80812fa:	4631      	mov	r1, r6
 80812fc:	6860      	ldr	r0, [r4, #4]
 80812fe:	f7ff ff2f 	bl	8081160 <_ZN7TwoWire5writeEj>
 8081302:	4647      	mov	r7, r8
 8081304:	f1a5 0a1e 	sub.w	sl, r5, #30
 8081308:	eba6 0b08 	sub.w	fp, r6, r8

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
				wire.write(*data);
 808130c:	6860      	ldr	r0, [r4, #4]
 808130e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8081312:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
 8081314:	3d01      	subs	r5, #1
				wire.write(*data);
 8081316:	689b      	ldr	r3, [r3, #8]
 8081318:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
 808131a:	4555      	cmp	r5, sl
				data++;
 808131c:	46b8      	mov	r8, r7
 808131e:	eb0b 0607 	add.w	r6, fp, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
 8081322:	d001      	beq.n	8081328 <_ZN6MB85RC9writeDataEjPKhj+0x62>
 8081324:	2d00      	cmp	r5, #0
 8081326:	d1f1      	bne.n	808130c <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
 8081328:	2101      	movs	r1, #1
 808132a:	6860      	ldr	r0, [r4, #4]
 808132c:	f001 fb46 	bl	80829bc <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
 8081330:	2800      	cmp	r0, #0
 8081332:	d0d7      	beq.n	80812e4 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
 8081334:	f04f 0900 	mov.w	r9, #0
 8081338:	e7d1      	b.n	80812de <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
 808133a:	a801      	add	r0, sp, #4
 808133c:	f7ff ff39 	bl	80811b2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
 8081340:	4648      	mov	r0, r9
 8081342:	b003      	add	sp, #12
 8081344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08081348 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
 8081348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808134c:	460e      	mov	r6, r1
 808134e:	4615      	mov	r5, r2
 8081350:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
 8081352:	6840      	ldr	r0, [r0, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
 8081354:	b08b      	sub	sp, #44	; 0x2c
 8081356:	461c      	mov	r4, r3
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8081358:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808135a:	f001 fb33 	bl	80829c4 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
 808135e:	42ae      	cmp	r6, r5
 8081360:	d229      	bcs.n	80813b6 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
 8081362:	4426      	add	r6, r4
			framAddrTo += numBytes;
 8081364:	4425      	add	r5, r4
			while(numBytes > 0) {
 8081366:	b18c      	cbz	r4, 808138c <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
 8081368:	2c1e      	cmp	r4, #30
 808136a:	4627      	mov	r7, r4
 808136c:	bf28      	it	cs
 808136e:	271e      	movcs	r7, #30
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
 8081370:	f8d8 3000 	ldr.w	r3, [r8]
				framAddrFrom -= count;
 8081374:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
 8081376:	f8d3 9008 	ldr.w	r9, [r3, #8]
 808137a:	4631      	mov	r1, r6
 808137c:	463b      	mov	r3, r7
 808137e:	4640      	mov	r0, r8
 8081380:	aa02      	add	r2, sp, #8
				framAddrTo -= count;
 8081382:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
 8081384:	47c8      	blx	r9
				if (!result) {
 8081386:	b948      	cbnz	r0, 808139c <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
 8081388:	2400      	movs	r4, #0
 808138a:	e000      	b.n	808138e <_ZN6MB85RC8moveDataEjjj+0x46>
 808138c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
 808138e:	a801      	add	r0, sp, #4
 8081390:	f7ff ff0f 	bl	80811b2 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
 8081394:	4620      	mov	r0, r4
 8081396:	b00b      	add	sp, #44	; 0x2c
 8081398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
 808139c:	f8d8 3000 	ldr.w	r3, [r8]
 80813a0:	4629      	mov	r1, r5
 80813a2:	f8d3 900c 	ldr.w	r9, [r3, #12]
 80813a6:	4640      	mov	r0, r8
 80813a8:	463b      	mov	r3, r7
 80813aa:	aa02      	add	r2, sp, #8
 80813ac:	47c8      	blx	r9
				if (!result) {
 80813ae:	2800      	cmp	r0, #0
 80813b0:	d0ea      	beq.n	8081388 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
 80813b2:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
 80813b4:	e7d7      	b.n	8081366 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
 80813b6:	d9e9      	bls.n	808138c <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
 80813b8:	2c00      	cmp	r4, #0
 80813ba:	d0e7      	beq.n	808138c <_ZN6MB85RC8moveDataEjjj+0x44>
				if (count > sizeof(buf)) {
 80813bc:	2c1e      	cmp	r4, #30
 80813be:	4627      	mov	r7, r4
 80813c0:	bf28      	it	cs
 80813c2:	271e      	movcs	r7, #30
				result = readData(framAddrFrom, buf, count);
 80813c4:	f8d8 3000 	ldr.w	r3, [r8]
 80813c8:	4631      	mov	r1, r6
 80813ca:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80813ce:	4640      	mov	r0, r8
 80813d0:	463b      	mov	r3, r7
 80813d2:	aa02      	add	r2, sp, #8
 80813d4:	47c8      	blx	r9
				if (!result) {
 80813d6:	2800      	cmp	r0, #0
 80813d8:	d0d6      	beq.n	8081388 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
 80813da:	f8d8 3000 	ldr.w	r3, [r8]
 80813de:	4629      	mov	r1, r5
 80813e0:	f8d3 900c 	ldr.w	r9, [r3, #12]
 80813e4:	4640      	mov	r0, r8
 80813e6:	463b      	mov	r3, r7
 80813e8:	aa02      	add	r2, sp, #8
 80813ea:	47c8      	blx	r9
				if (!result) {
 80813ec:	2800      	cmp	r0, #0
 80813ee:	d0cb      	beq.n	8081388 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
 80813f0:	443e      	add	r6, r7
				framAddrTo += count;
 80813f2:	443d      	add	r5, r7
				numBytes -= count;
 80813f4:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
 80813f6:	e7df      	b.n	80813b8 <_ZN6MB85RC8moveDataEjjj+0x70>

080813f8 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
 80813f8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80813fa:	4603      	mov	r3, r0
	switch (__op)
 80813fc:	d102      	bne.n	8081404 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() =
 80813fe:	6001      	str	r1, [r0, #0]

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
 8081400:	2000      	movs	r0, #0
 8081402:	4770      	bx	lr
	  switch (__op)
 8081404:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8081406:	bf04      	itt	eq
 8081408:	e9d1 0100 	ldrdeq	r0, r1, [r1]
 808140c:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
 8081410:	e7f6      	b.n	8081400 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

08081412 <_ZN6Thread3runEPv>:

private:

    static os_thread_return_t run(void* param) {
        Data* th = (Data*)param;
        th->started = true;
 8081412:	2301      	movs	r3, #1
    static os_thread_return_t run(void* param) {
 8081414:	b510      	push	{r4, lr}
        th->started = true;
 8081416:	7403      	strb	r3, [r0, #16]
        if (th->func) {
 8081418:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
 808141a:	4604      	mov	r4, r0
        if (th->func) {
 808141c:	b143      	cbz	r3, 8081430 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
 808141e:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081420:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
 8081422:	2301      	movs	r3, #1
        os_thread_exit(nullptr);
 8081424:	2000      	movs	r0, #0
        th->exited = true;
 8081426:	7463      	strb	r3, [r4, #17]
    }
 8081428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
 808142c:	f000 bb28 	b.w	8081a80 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8081430:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
 8081432:	2800      	cmp	r0, #0
 8081434:	d0f5      	beq.n	8081422 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
 8081436:	6883      	ldr	r3, [r0, #8]
 8081438:	b90b      	cbnz	r3, 808143e <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
 808143a:	f002 f9da 	bl	80837f2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808143e:	68c3      	ldr	r3, [r0, #12]
 8081440:	e7ee      	b.n	8081420 <_ZN6Thread3runEPv+0xe>

08081442 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081442:	4603      	mov	r3, r0
 8081444:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
 8081446:	6842      	ldr	r2, [r0, #4]
 8081448:	681b      	ldr	r3, [r3, #0]
 808144a:	1054      	asrs	r4, r2, #1
 808144c:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8081450:	07d2      	lsls	r2, r2, #31
 8081452:	bf48      	it	mi
 8081454:	590a      	ldrmi	r2, [r1, r4]
      }
 8081456:	bc10      	pop	{r4}
 8081458:	bf48      	it	mi
 808145a:	58d3      	ldrmi	r3, [r2, r3]
 808145c:	4718      	bx	r3

0808145e <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 808145e:	b510      	push	{r4, lr}
      if (_M_manager)
 8081460:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8081462:	4604      	mov	r4, r0
      if (_M_manager)
 8081464:	b113      	cbz	r3, 808146c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081466:	2203      	movs	r2, #3
 8081468:	4601      	mov	r1, r0
 808146a:	4798      	blx	r3
    }
 808146c:	4620      	mov	r0, r4
 808146e:	bd10      	pop	{r4, pc}

08081470 <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
 8081470:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
 8081472:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
 8081474:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
 8081478:	4605      	mov	r5, r0

	os_mutex_create(&mutex);
 808147a:	3008      	adds	r0, #8
 808147c:	f000 fad8 	bl	8081a30 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
 8081480:	2004      	movs	r0, #4
 8081482:	f7fe fe12 	bl	80800aa <_Znwj>
 8081486:	4604      	mov	r4, r0
 8081488:	b398      	cbz	r0, 80814f2 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
 808148a:	2014      	movs	r0, #20
 808148c:	491a      	ldr	r1, [pc, #104]	; (80814f8 <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
 808148e:	f002 f9ac 	bl	80837ea <_ZnwjRKSt9nothrow_t>
 8081492:	b130      	cbz	r0, 80814a2 <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 8081494:	2300      	movs	r3, #0
            exited(false) {
 8081496:	e9c0 3300 	strd	r3, r3, [r0]
 808149a:	e9c0 3302 	strd	r3, r3, [r0, #8]
 808149e:	7403      	strb	r3, [r0, #16]
 80814a0:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80814a2:	6020      	str	r0, [r4, #0]
        if (!d_) {
 80814a4:	b1a0      	cbz	r0, 80814d0 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
 80814a6:	4b15      	ldr	r3, [pc, #84]	; (80814fc <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 80814a8:	2202      	movs	r2, #2
        d_->func_param = function_param;
 80814aa:	e9c0 3502 	strd	r3, r5, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 80814ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80814b2:	4913      	ldr	r1, [pc, #76]	; (8081500 <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
 80814b4:	e9cd 0300 	strd	r0, r3, [sp]
 80814b8:	4b12      	ldr	r3, [pc, #72]	; (8081504 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
 80814ba:	3004      	adds	r0, #4
 80814bc:	f000 faa8 	bl	8081a10 <os_thread_create>
 80814c0:	b930      	cbnz	r0, 80814d0 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80814c2:	6823      	ldr	r3, [r4, #0]
        while (!d_->started) {
 80814c4:	7c1b      	ldrb	r3, [r3, #16]
 80814c6:	b9a3      	cbnz	r3, 80814f2 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
 80814c8:	2001      	movs	r0, #1
 80814ca:	f000 faf9 	bl	8081ac0 <HAL_Delay_Milliseconds>
        while (!d_->started) {
 80814ce:	e7f8      	b.n	80814c2 <_ZN21PublishQueueAsyncBase5setupEv+0x52>
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80814d0:	2300      	movs	r3, #0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80814d2:	6826      	ldr	r6, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 80814d4:	6023      	str	r3, [r4, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
 80814d6:	b166      	cbz	r6, 80814f2 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
 80814d8:	6837      	ldr	r7, [r6, #0]
 80814da:	b137      	cbz	r7, 80814ea <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
 80814dc:	4638      	mov	r0, r7
 80814de:	f7ff ffbe 	bl	808145e <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
 80814e2:	2110      	movs	r1, #16
 80814e4:	4638      	mov	r0, r7
 80814e6:	f002 f97e 	bl	80837e6 <_ZdlPvj>
 80814ea:	2114      	movs	r1, #20
 80814ec:	4630      	mov	r0, r6
 80814ee:	f002 f97a 	bl	80837e6 <_ZdlPvj>
 80814f2:	606c      	str	r4, [r5, #4]
}
 80814f4:	b003      	add	sp, #12
 80814f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80814f8:	08084f78 	.word	0x08084f78
 80814fc:	0808170b 	.word	0x0808170b
 8081500:	08084cf8 	.word	0x08084cf8
 8081504:	08081413 	.word	0x08081413

08081508 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
 8081508:	f247 5130 	movw	r1, #30000	; 0x7530
 808150c:	4a08      	ldr	r2, [pc, #32]	; (8081530 <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
 808150e:	60c1      	str	r1, [r0, #12]
 8081510:	6002      	str	r2, [r0, #0]
 8081512:	2200      	movs	r2, #0
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8081514:	4907      	ldr	r1, [pc, #28]	; (8081534 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
 8081516:	e9c0 2208 	strd	r2, r2, [r0, #32]
 808151a:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 808151e:	4906      	ldr	r1, [pc, #24]	; (8081538 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
 8081520:	6042      	str	r2, [r0, #4]
 8081522:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
 8081524:	4905      	ldr	r1, [pc, #20]	; (808153c <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
 8081526:	8502      	strh	r2, [r0, #40]	; 0x28
 8081528:	6181      	str	r1, [r0, #24]
 808152a:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
 808152e:	4770      	bx	lr
 8081530:	08084dbc 	.word	0x08084dbc
 8081534:	08081875 	.word	0x08081875
 8081538:	08081443 	.word	0x08081443
 808153c:	080813f9 	.word	0x080813f9

08081540 <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
 8081540:	b510      	push	{r4, lr}
 8081542:	4604      	mov	r4, r0
 8081544:	4b03      	ldr	r3, [pc, #12]	; (8081554 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
 8081546:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
 808154a:	f7ff ff88 	bl	808145e <_ZNSt14_Function_baseD1Ev>
}
 808154e:	4620      	mov	r0, r4
 8081550:	bd10      	pop	{r4, pc}
 8081552:	bf00      	nop
 8081554:	08084dbc 	.word	0x08084dbc

08081558 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
 8081558:	b510      	push	{r4, lr}
 808155a:	4604      	mov	r4, r0
 808155c:	4b02      	ldr	r3, [pc, #8]	; (8081568 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
 808155e:	6003      	str	r3, [r0, #0]
 8081560:	f7ff ffee 	bl	8081540 <_ZN21PublishQueueAsyncBaseD1Ev>

}
 8081564:	4620      	mov	r0, r4
 8081566:	bd10      	pop	{r4, pc}
 8081568:	08084de4 	.word	0x08084de4

0808156c <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
 808156c:	b510      	push	{r4, lr}
 808156e:	4604      	mov	r4, r0
}
 8081570:	f7ff fff2 	bl	8081558 <_ZN25PublishQueueAsyncRetainedD1Ev>
 8081574:	4620      	mov	r0, r4
 8081576:	2138      	movs	r1, #56	; 0x38
 8081578:	f002 f935 	bl	80837e6 <_ZdlPvj>
 808157c:	4620      	mov	r0, r4
 808157e:	bd10      	pop	{r4, pc}

08081580 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
 8081580:	6880      	ldr	r0, [r0, #8]
 8081582:	f000 ba5d 	b.w	8081a40 <os_mutex_lock>

08081586 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
 8081586:	6880      	ldr	r0, [r0, #8]
 8081588:	f000 ba62 	b.w	8081a50 <os_mutex_unlock>

0808158c <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
 808158c:	b510      	push	{r4, lr}
 808158e:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
 8081590:	6800      	ldr	r0, [r0, #0]
 8081592:	f7ff fff8 	bl	8081586 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
 8081596:	4620      	mov	r0, r4
 8081598:	bd10      	pop	{r4, pc}

0808159a <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
 808159a:	b513      	push	{r0, r1, r4, lr}
 808159c:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
 808159e:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
 80815a0:	f7ff ffee 	bl	8081580 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
 80815a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
 80815a6:	88dc      	ldrh	r4, [r3, #6]
 80815a8:	b2a4      	uxth	r4, r4
 80815aa:	b10c      	cbz	r4, 80815b0 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
 80815ac:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
 80815b0:	a801      	add	r0, sp, #4
 80815b2:	f7ff ffeb 	bl	808158c <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
 80815b6:	4620      	mov	r0, r4
 80815b8:	b002      	add	sp, #8
 80815ba:	bd10      	pop	{r4, pc}

080815bc <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
 80815bc:	b513      	push	{r0, r1, r4, lr}
 80815be:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
 80815c0:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
 80815c2:	f7ff ffdd 	bl	8081580 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
 80815c6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80815ca:	b943      	cbnz	r3, 80815de <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
 80815cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
 80815ce:	2401      	movs	r4, #1
		hdr->numEvents = 0;
 80815d0:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
 80815d2:	a801      	add	r0, sp, #4
 80815d4:	f7ff ffda 	bl	808158c <_ZN11StMutexLockD1Ev>
	}

	return result;
}
 80815d8:	4620      	mov	r0, r4
 80815da:	b002      	add	sp, #8
 80815dc:	bd10      	pop	{r4, pc}
	bool result = false;
 80815de:	2400      	movs	r4, #0
 80815e0:	e7f7      	b.n	80815d2 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

080815e2 <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
 80815e2:	b513      	push	{r0, r1, r4, lr}
 80815e4:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
 80815e6:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
 80815e8:	f7ff ffca 	bl	8081580 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
 80815ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
 80815ee:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
 80815f0:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
 80815f2:	f7ff ffcb 	bl	808158c <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
 80815f6:	4620      	mov	r0, r4
 80815f8:	b002      	add	sp, #8
 80815fa:	bd10      	pop	{r4, pc}

080815fc <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
 80815fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8081600:	4699      	mov	r9, r3
	if (!haveSetup) {
 8081602:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
 8081606:	b086      	sub	sp, #24
 8081608:	4604      	mov	r4, r0
 808160a:	460f      	mov	r7, r1
 808160c:	4616      	mov	r6, r2
 808160e:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
 8081612:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
	if (!haveSetup) {
 8081616:	b913      	cbnz	r3, 808161e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
 8081618:	6803      	ldr	r3, [r0, #0]
 808161a:	689b      	ldr	r3, [r3, #8]
 808161c:	4798      	blx	r3
		data = "";
 808161e:	4b30      	ldr	r3, [pc, #192]	; (80816e0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe4>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
 8081620:	4638      	mov	r0, r7
		data = "";
 8081622:	2e00      	cmp	r6, #0
 8081624:	bf08      	it	eq
 8081626:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
 8081628:	f003 f90d 	bl	8084846 <strlen>
 808162c:	4605      	mov	r5, r0
 808162e:	4630      	mov	r0, r6
 8081630:	f003 f909 	bl	8084846 <strlen>
 8081634:	4405      	add	r5, r0
 8081636:	350a      	adds	r5, #10
	if ((size % 4) != 0) {
 8081638:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
 808163a:	bf1c      	itt	ne
 808163c:	f025 0503 	bicne.w	r5, r5, #3
 8081640:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
 8081642:	4633      	mov	r3, r6
 8081644:	463a      	mov	r2, r7
 8081646:	e9cd 8502 	strd	r8, r5, [sp, #8]
 808164a:	e9cd 9a00 	strd	r9, sl, [sp]
 808164e:	4925      	ldr	r1, [pc, #148]	; (80816e4 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
 8081650:	4825      	ldr	r0, [pc, #148]	; (80816e8 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
 8081652:	f7ff fd89 	bl	8081168 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
 8081656:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8081658:	3b08      	subs	r3, #8
 808165a:	42ab      	cmp	r3, r5
 808165c:	d212      	bcs.n	8081684 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x88>
		return false;
 808165e:	2400      	movs	r4, #0
}
 8081660:	4620      	mov	r0, r4
 8081662:	b006      	add	sp, #24
 8081664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
 8081668:	88cb      	ldrh	r3, [r1, #6]
 808166a:	2b01      	cmp	r3, #1
 808166c:	d036      	beq.n	80816dc <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe0>
			StMutexLock lock(this);
 808166e:	a805      	add	r0, sp, #20
 8081670:	f7ff ff8c 	bl	808158c <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
 8081674:	6823      	ldr	r3, [r4, #0]
 8081676:	4620      	mov	r0, r4
 8081678:	699b      	ldr	r3, [r3, #24]
 808167a:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 808167e:	4798      	blx	r3
 8081680:	2800      	cmp	r0, #0
 8081682:	d0ec      	beq.n	808165e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x62>
 8081684:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
 8081686:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
 8081688:	f7ff ff7a 	bl	8081580 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
 808168c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 808168e:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
 8081690:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
 8081692:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
 8081694:	1ad2      	subs	r2, r2, r3
 8081696:	42aa      	cmp	r2, r5
 8081698:	d3e6      	bcc.n	8081668 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6c>
				eventData->flags = flags1.value() | flags2.value();
 808169a:	ea48 080a 	orr.w	r8, r8, sl
 808169e:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
 80816a2:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
 80816a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
				strcpy(cp, eventName);
 80816a8:	4639      	mov	r1, r7
				cp += sizeof(PublishQueueEventData);
 80816aa:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
 80816ae:	4640      	mov	r0, r8
 80816b0:	f003 f8a6 	bl	8084800 <strcpy>
				cp += strlen(cp) + 1;
 80816b4:	4640      	mov	r0, r8
 80816b6:	f003 f8c6 	bl	8084846 <strlen>
 80816ba:	3001      	adds	r0, #1
				strcpy(cp, data);
 80816bc:	4631      	mov	r1, r6
 80816be:	4440      	add	r0, r8
 80816c0:	f003 f89e 	bl	8084800 <strcpy>
				nextFree += size;
 80816c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
 80816c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
 80816c8:	441d      	add	r5, r3
 80816ca:	6365      	str	r5, [r4, #52]	; 0x34
				return true;
 80816cc:	2401      	movs	r4, #1
				hdr->numEvents++;
 80816ce:	88d3      	ldrh	r3, [r2, #6]
 80816d0:	3301      	adds	r3, #1
 80816d2:	80d3      	strh	r3, [r2, #6]
			StMutexLock lock(this);
 80816d4:	a805      	add	r0, sp, #20
 80816d6:	f7ff ff59 	bl	808158c <_ZN11StMutexLockD1Ev>
 80816da:	e7c1      	b.n	8081660 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
				return false;
 80816dc:	2400      	movs	r4, #0
 80816de:	e7f9      	b.n	80816d4 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xd8>
 80816e0:	08084b49 	.word	0x08084b49
 80816e4:	08084d0a 	.word	0x08084d0a
 80816e8:	200001fc 	.word	0x200001fc

080816ec <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
 80816ec:	4604      	mov	r4, r0
 80816ee:	b508      	push	{r3, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80816f0:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
 80816f4:	69a3      	ldr	r3, [r4, #24]
 80816f6:	b90b      	cbnz	r3, 80816fc <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
 80816f8:	f002 f87b 	bl	80837f2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80816fc:	4621      	mov	r1, r4
 80816fe:	4628      	mov	r0, r5
 8081700:	69e3      	ldr	r3, [r4, #28]
 8081702:	4798      	blx	r3
		os_thread_yield();
 8081704:	f000 f98c 	bl	8081a20 <os_thread_yield>
	while(true) {
 8081708:	e7f4      	b.n	80816f4 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

0808170a <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
 808170a:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
 808170c:	f7ff ffee 	bl	80816ec <_ZN21PublishQueueAsyncBase14threadFunctionEv>

08081710 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
 8081710:	b538      	push	{r3, r4, r5, lr}
	start += sizeof(PublishQueueEventData);
 8081712:	f101 0408 	add.w	r4, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
 8081716:	4605      	mov	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
 8081718:	4620      	mov	r0, r4
 808171a:	f003 f894 	bl	8084846 <strlen>
 808171e:	3001      	adds	r0, #1
 8081720:	4404      	add	r4, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
 8081722:	4620      	mov	r0, r4
 8081724:	f003 f88f 	bl	8084846 <strlen>
	size_t offset = start - retainedBuffer;
 8081728:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
 808172a:	3001      	adds	r0, #1
 808172c:	4420      	add	r0, r4
	size_t offset = start - retainedBuffer;
 808172e:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
 8081730:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
 8081734:	bf1c      	itt	ne
 8081736:	f1c3 0304 	rsbne	r3, r3, #4
 808173a:	18c0      	addne	r0, r0, r3
}
 808173c:	bd38      	pop	{r3, r4, r5, pc}

0808173e <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
 808173e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8081740:	4604      	mov	r4, r0
 8081742:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
 8081744:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
 8081746:	f7ff ff1b 	bl	8081580 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
 808174a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
 808174c:	88fb      	ldrh	r3, [r7, #6]
 808174e:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
 8081752:	b1e6      	cbz	r6, 808178e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
 8081754:	2b01      	cmp	r3, #1
 8081756:	d922      	bls.n	808179e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
 8081758:	4629      	mov	r1, r5
 808175a:	4620      	mov	r0, r4
 808175c:	f7ff ffd8 	bl	8081710 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
 8081760:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
 8081762:	4629      	mov	r1, r5
 8081764:	4620      	mov	r0, r4
 8081766:	f7ff ffd3 	bl	8081710 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
 808176a:	8e22      	ldrh	r2, [r4, #48]	; 0x30
	uint8_t *next = skipEvent(start);
 808176c:	4601      	mov	r1, r0
	uint8_t *end = &retainedBuffer[retainedBufferSize];
 808176e:	443a      	add	r2, r7
	if (after > 0) {
 8081770:	1a12      	subs	r2, r2, r0
	size_t len = next - start;
 8081772:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
 8081776:	d002      	beq.n	808177e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
 8081778:	4628      	mov	r0, r5
 808177a:	f002 fff1 	bl	8084760 <memmove>
	nextFree -= len;
 808177e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8081780:	1b9b      	subs	r3, r3, r6
 8081782:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
 8081784:	88fb      	ldrh	r3, [r7, #6]
	return true;
 8081786:	2601      	movs	r6, #1
	hdr->numEvents--;
 8081788:	3b01      	subs	r3, #1
 808178a:	80fb      	strh	r3, [r7, #6]
	return true;
 808178c:	e001      	b.n	8081792 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
 808178e:	2b00      	cmp	r3, #0
 8081790:	d1e7      	bne.n	8081762 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
 8081792:	a801      	add	r0, sp, #4
 8081794:	f7ff fefa 	bl	808158c <_ZN11StMutexLockD1Ev>
}
 8081798:	4630      	mov	r0, r6
 808179a:	b003      	add	sp, #12
 808179c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
 808179e:	2600      	movs	r6, #0
 80817a0:	e7f7      	b.n	8081792 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

080817a4 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
 80817a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80817a8:	460d      	mov	r5, r1
 80817aa:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
 80817ac:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
 80817ae:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
 80817b0:	f7ff feaa 	bl	8081508 <_ZN21PublishQueueAsyncBaseC1Ev>
 80817b4:	4b15      	ldr	r3, [pc, #84]	; (808180c <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
 80817b6:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
 80817ba:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
 80817bc:	4b14      	ldr	r3, [pc, #80]	; (8081810 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
 80817be:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
 80817c0:	429a      	cmp	r2, r3
 80817c2:	4698      	mov	r8, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
 80817c4:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
 80817c6:	d117      	bne.n	80817f8 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
 80817c8:	88ab      	ldrh	r3, [r5, #4]
 80817ca:	b29b      	uxth	r3, r3
 80817cc:	42b3      	cmp	r3, r6
 80817ce:	d113      	bne.n	80817f8 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
 80817d0:	f04f 0900 	mov.w	r9, #0
		uint8_t *end = &retainedBuffer[retainedBufferSize];
 80817d4:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
 80817d8:	6367      	str	r7, [r4, #52]	; 0x34
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
 80817da:	88eb      	ldrh	r3, [r5, #6]
 80817dc:	fa1f f289 	uxth.w	r2, r9
 80817e0:	b29b      	uxth	r3, r3
 80817e2:	429a      	cmp	r2, r3
 80817e4:	d20e      	bcs.n	8081804 <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
 80817e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80817e8:	4620      	mov	r0, r4
 80817ea:	f7ff ff91 	bl	8081710 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
 80817ee:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
 80817f0:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
 80817f2:	f109 0901 	add.w	r9, r9, #1
 80817f6:	d9f0      	bls.n	80817da <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
 80817f8:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
 80817fa:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
 80817fe:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
 8081800:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
 8081802:	80eb      	strh	r3, [r5, #6]
}
 8081804:	4620      	mov	r0, r4
 8081806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808180a:	bf00      	nop
 808180c:	08084de4 	.word	0x08084de4
 8081810:	d19cab61 	.word	0xd19cab61

08081814 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
 8081814:	b510      	push	{r4, lr}
 8081816:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
 808181a:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
 808181c:	b086      	sub	sp, #24
 808181e:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
 8081820:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
 8081822:	b90a      	cbnz	r2, 8081828 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
 8081824:	07d9      	lsls	r1, r3, #31
 8081826:	d505      	bpl.n	8081834 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8081828:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 808182c:	4b0f      	ldr	r3, [pc, #60]	; (808186c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
 808182e:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8081830:	4b0f      	ldr	r3, [pc, #60]	; (8081870 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
 8081832:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081834:	466a      	mov	r2, sp
 8081836:	ab02      	add	r3, sp, #8
 8081838:	e893 0003 	ldmia.w	r3, {r0, r1}
 808183c:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8081840:	e894 0003 	ldmia.w	r4, {r0, r1}
 8081844:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8081848:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808184c:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 808184e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8081852:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8081854:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081856:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8081858:	9104      	str	r1, [sp, #16]
 808185a:	68e1      	ldr	r1, [r4, #12]
    class function<_Res(_ArgTypes...)>
 808185c:	4618      	mov	r0, r3
      __b = _GLIBCXX_MOVE(__tmp);
 808185e:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 8081860:	9105      	str	r1, [sp, #20]
 8081862:	f7ff fdfc 	bl	808145e <_ZNSt14_Function_baseD1Ev>
	}
 8081866:	4620      	mov	r0, r4
 8081868:	b006      	add	sp, #24
 808186a:	bd10      	pop	{r4, pc}
 808186c:	08081443 	.word	0x08081443
 8081870:	080813f9 	.word	0x080813f9

08081874 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
 8081874:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
 8081876:	4b05      	ldr	r3, [pc, #20]	; (808188c <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
 8081878:	4669      	mov	r1, sp
 808187a:	9300      	str	r3, [sp, #0]
 808187c:	2300      	movs	r3, #0
 808187e:	3010      	adds	r0, #16
 8081880:	9301      	str	r3, [sp, #4]
 8081882:	f7ff ffc7 	bl	8081814 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
 8081886:	b003      	add	sp, #12
 8081888:	f85d fb04 	ldr.w	pc, [sp], #4
 808188c:	080818bd 	.word	0x080818bd

08081890 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
 8081890:	b513      	push	{r0, r1, r4, lr}
 8081892:	4604      	mov	r4, r0
 8081894:	f000 f924 	bl	8081ae0 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
 8081898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808189a:	1ac0      	subs	r0, r0, r3
 808189c:	68e3      	ldr	r3, [r4, #12]
 808189e:	4298      	cmp	r0, r3
 80818a0:	d308      	bcc.n	80818b4 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
 80818a2:	4b05      	ldr	r3, [pc, #20]	; (80818b8 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
 80818a4:	4669      	mov	r1, sp
 80818a6:	9300      	str	r3, [sp, #0]
 80818a8:	2300      	movs	r3, #0
 80818aa:	f104 0010 	add.w	r0, r4, #16
 80818ae:	9301      	str	r3, [sp, #4]
 80818b0:	f7ff ffb0 	bl	8081814 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
 80818b4:	b002      	add	sp, #8
 80818b6:	bd10      	pop	{r4, pc}
 80818b8:	080818bd 	.word	0x080818bd

080818bc <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
 80818bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
 80818c0:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
 80818c4:	4604      	mov	r4, r0
 80818c6:	b086      	sub	sp, #24
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
 80818c8:	2b00      	cmp	r3, #0
 80818ca:	d164      	bne.n	8081996 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
 80818cc:	f000 fade 	bl	8081e8c <spark_cloud_flag_connected>
 80818d0:	2800      	cmp	r0, #0
 80818d2:	d060      	beq.n	8081996 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
 80818d4:	f000 f904 	bl	8081ae0 <HAL_Timer_Get_Milli_Seconds>
 80818d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80818da:	1ac0      	subs	r0, r0, r3
 80818dc:	f240 33f1 	movw	r3, #1009	; 0x3f1
 80818e0:	4298      	cmp	r0, r3
 80818e2:	d958      	bls.n	8081996 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
 80818e4:	6823      	ldr	r3, [r4, #0]
 80818e6:	4620      	mov	r0, r4
 80818e8:	695b      	ldr	r3, [r3, #20]
 80818ea:	4798      	blx	r3
		if (data) {
 80818ec:	4605      	mov	r5, r0
 80818ee:	2800      	cmp	r0, #0
 80818f0:	d051      	beq.n	8081996 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			isSending = true;
 80818f2:	2301      	movs	r3, #1
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
 80818f4:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
 80818f8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
 80818fc:	4638      	mov	r0, r7
 80818fe:	f002 ffa2 	bl	8084846 <strlen>
			PublishFlags flags(PublishFlag(data->flags));
 8081902:	f895 8004 	ldrb.w	r8, [r5, #4]
			eventData += strlen(eventData) + 1;
 8081906:	1c46      	adds	r6, r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
 8081908:	f8cd 8004 	str.w	r8, [sp, #4]
 808190c:	682b      	ldr	r3, [r5, #0]
			eventData += strlen(eventData) + 1;
 808190e:	443e      	add	r6, r7
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
 8081910:	463a      	mov	r2, r7
 8081912:	492a      	ldr	r1, [pc, #168]	; (80819bc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
 8081914:	482a      	ldr	r0, [pc, #168]	; (80819c0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
 8081916:	9300      	str	r3, [sp, #0]
 8081918:	4633      	mov	r3, r6
 808191a:	f7ff fc25 	bl	8081168 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
 808191e:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8081920:	4632      	mov	r2, r6
 8081922:	4639      	mov	r1, r7
 8081924:	f88d 8000 	strb.w	r8, [sp]
 8081928:	a802      	add	r0, sp, #8
 808192a:	f000 fe5d 	bl	80825e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
 808192e:	9d02      	ldr	r5, [sp, #8]
 8081930:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
 8081932:	b91b      	cbnz	r3, 808193c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
 8081934:	2001      	movs	r0, #1
 8081936:	f000 fb79 	bl	808202c <delay>
			while(!request.isDone()) {
 808193a:	e7f8      	b.n	808192e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 808193c:	2000      	movs	r0, #0
 808193e:	f000 fa4f 	bl	8081de0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 8081942:	b120      	cbz	r0, 808194e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
 8081944:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
 8081946:	b913      	cbnz	r3, 808194e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
 8081948:	f000 fa90 	bl	8081e6c <spark_process>
    }
 808194c:	e7fa      	b.n	8081944 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 808194e:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
 8081950:	2b01      	cmp	r3, #1
 8081952:	d123      	bne.n	808199c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
 8081954:	491b      	ldr	r1, [pc, #108]	; (80819c4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
 8081956:	481a      	ldr	r0, [pc, #104]	; (80819c0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
 8081958:	f7ff fc06 	bl	8081168 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
 808195c:	6823      	ldr	r3, [r4, #0]
 808195e:	2100      	movs	r1, #0
 8081960:	4620      	mov	r0, r4
 8081962:	699b      	ldr	r3, [r3, #24]
 8081964:	4798      	blx	r3
			isSending = false;
 8081966:	2300      	movs	r3, #0
 8081968:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 808196c:	f000 f8b8 	bl	8081ae0 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
 8081970:	6260      	str	r0, [r4, #36]	; 0x24
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 8081972:	9c03      	ldr	r4, [sp, #12]
 8081974:	b17c      	cbz	r4, 8081996 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
 8081976:	6863      	ldr	r3, [r4, #4]
 8081978:	3b01      	subs	r3, #1
 808197a:	6063      	str	r3, [r4, #4]
 808197c:	b95b      	cbnz	r3, 8081996 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
 808197e:	6823      	ldr	r3, [r4, #0]
 8081980:	4620      	mov	r0, r4
 8081982:	689b      	ldr	r3, [r3, #8]
 8081984:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8081986:	68a3      	ldr	r3, [r4, #8]
 8081988:	3b01      	subs	r3, #1
 808198a:	60a3      	str	r3, [r4, #8]
 808198c:	b91b      	cbnz	r3, 8081996 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
 808198e:	6823      	ldr	r3, [r4, #0]
 8081990:	4620      	mov	r0, r4
 8081992:	68db      	ldr	r3, [r3, #12]
 8081994:	4798      	blx	r3
}
 8081996:	b006      	add	sp, #24
 8081998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
 808199c:	68e2      	ldr	r2, [r4, #12]
 808199e:	490a      	ldr	r1, [pc, #40]	; (80819c8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
 80819a0:	4807      	ldr	r0, [pc, #28]	; (80819c0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
 80819a2:	f7ff fbe1 	bl	8081168 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
 80819a6:	4b09      	ldr	r3, [pc, #36]	; (80819cc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
 80819a8:	a904      	add	r1, sp, #16
 80819aa:	9304      	str	r3, [sp, #16]
 80819ac:	2300      	movs	r3, #0
 80819ae:	f104 0010 	add.w	r0, r4, #16
 80819b2:	9305      	str	r3, [sp, #20]
 80819b4:	f7ff ff2e 	bl	8081814 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
 80819b8:	e7d5      	b.n	8081966 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
 80819ba:	bf00      	nop
 80819bc:	08084d4b 	.word	0x08084d4b
 80819c0:	200001fc 	.word	0x200001fc
 80819c4:	08084d6c 	.word	0x08084d6c
 80819c8:	08084d83 	.word	0x08084d83
 80819cc:	08081891 	.word	0x08081891

080819d0 <_GLOBAL__sub_I_pubqLogger>:
        name_(name) {
 80819d0:	4b01      	ldr	r3, [pc, #4]	; (80819d8 <_GLOBAL__sub_I_pubqLogger+0x8>)
 80819d2:	4a02      	ldr	r2, [pc, #8]	; (80819dc <_GLOBAL__sub_I_pubqLogger+0xc>)
 80819d4:	601a      	str	r2, [r3, #0]
}
 80819d6:	4770      	bx	lr
 80819d8:	200001fc 	.word	0x200001fc
 80819dc:	08084daa 	.word	0x08084daa

080819e0 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80819e0:	b508      	push	{r3, lr}
 80819e2:	4b02      	ldr	r3, [pc, #8]	; (80819ec <inet_gethostbyname+0xc>)
 80819e4:	681b      	ldr	r3, [r3, #0]
 80819e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80819e8:	9301      	str	r3, [sp, #4]
 80819ea:	bd08      	pop	{r3, pc}
 80819ec:	08060020 	.word	0x08060020

080819f0 <cellular_signal>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
 80819f0:	b508      	push	{r3, lr}
 80819f2:	4b02      	ldr	r3, [pc, #8]	; (80819fc <cellular_signal+0xc>)
 80819f4:	681b      	ldr	r3, [r3, #0]
 80819f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80819f8:	9301      	str	r3, [sp, #4]
 80819fa:	bd08      	pop	{r3, pc}
 80819fc:	08060020 	.word	0x08060020

08081a00 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8081a00:	b508      	push	{r3, lr}
 8081a02:	4b02      	ldr	r3, [pc, #8]	; (8081a0c <cellular_command+0xc>)
 8081a04:	681b      	ldr	r3, [r3, #0]
 8081a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081a08:	9301      	str	r3, [sp, #4]
 8081a0a:	bd08      	pop	{r3, pc}
 8081a0c:	08060020 	.word	0x08060020

08081a10 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 8081a10:	b508      	push	{r3, lr}
 8081a12:	4b02      	ldr	r3, [pc, #8]	; (8081a1c <os_thread_create+0xc>)
 8081a14:	681b      	ldr	r3, [r3, #0]
 8081a16:	685b      	ldr	r3, [r3, #4]
 8081a18:	9301      	str	r3, [sp, #4]
 8081a1a:	bd08      	pop	{r3, pc}
 8081a1c:	080401d0 	.word	0x080401d0

08081a20 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 8081a20:	b508      	push	{r3, lr}
 8081a22:	4b02      	ldr	r3, [pc, #8]	; (8081a2c <os_thread_yield+0xc>)
 8081a24:	681b      	ldr	r3, [r3, #0]
 8081a26:	68db      	ldr	r3, [r3, #12]
 8081a28:	9301      	str	r3, [sp, #4]
 8081a2a:	bd08      	pop	{r3, pc}
 8081a2c:	080401d0 	.word	0x080401d0

08081a30 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8081a30:	b508      	push	{r3, lr}
 8081a32:	4b02      	ldr	r3, [pc, #8]	; (8081a3c <os_mutex_create+0xc>)
 8081a34:	681b      	ldr	r3, [r3, #0]
 8081a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081a38:	9301      	str	r3, [sp, #4]
 8081a3a:	bd08      	pop	{r3, pc}
 8081a3c:	080401d0 	.word	0x080401d0

08081a40 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 8081a40:	b508      	push	{r3, lr}
 8081a42:	4b02      	ldr	r3, [pc, #8]	; (8081a4c <os_mutex_lock+0xc>)
 8081a44:	681b      	ldr	r3, [r3, #0]
 8081a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081a48:	9301      	str	r3, [sp, #4]
 8081a4a:	bd08      	pop	{r3, pc}
 8081a4c:	080401d0 	.word	0x080401d0

08081a50 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 8081a50:	b508      	push	{r3, lr}
 8081a52:	4b02      	ldr	r3, [pc, #8]	; (8081a5c <os_mutex_unlock+0xc>)
 8081a54:	681b      	ldr	r3, [r3, #0]
 8081a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081a58:	9301      	str	r3, [sp, #4]
 8081a5a:	bd08      	pop	{r3, pc}
 8081a5c:	080401d0 	.word	0x080401d0

08081a60 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 8081a60:	b508      	push	{r3, lr}
 8081a62:	4b02      	ldr	r3, [pc, #8]	; (8081a6c <os_mutex_recursive_create+0xc>)
 8081a64:	681b      	ldr	r3, [r3, #0]
 8081a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081a68:	9301      	str	r3, [sp, #4]
 8081a6a:	bd08      	pop	{r3, pc}
 8081a6c:	080401d0 	.word	0x080401d0

08081a70 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 8081a70:	b508      	push	{r3, lr}
 8081a72:	4b02      	ldr	r3, [pc, #8]	; (8081a7c <os_mutex_recursive_destroy+0xc>)
 8081a74:	681b      	ldr	r3, [r3, #0]
 8081a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081a78:	9301      	str	r3, [sp, #4]
 8081a7a:	bd08      	pop	{r3, pc}
 8081a7c:	080401d0 	.word	0x080401d0

08081a80 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 8081a80:	b508      	push	{r3, lr}
 8081a82:	4b02      	ldr	r3, [pc, #8]	; (8081a8c <os_thread_exit+0xc>)
 8081a84:	681b      	ldr	r3, [r3, #0]
 8081a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8081a88:	9301      	str	r3, [sp, #4]
 8081a8a:	bd08      	pop	{r3, pc}
 8081a8c:	080401d0 	.word	0x080401d0

08081a90 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 8081a90:	b508      	push	{r3, lr}
 8081a92:	4b02      	ldr	r3, [pc, #8]	; (8081a9c <HAL_Feature_Set+0xc>)
 8081a94:	681b      	ldr	r3, [r3, #0]
 8081a96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8081a98:	9301      	str	r3, [sp, #4]
 8081a9a:	bd08      	pop	{r3, pc}
 8081a9c:	080401b8 	.word	0x080401b8

08081aa0 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 8081aa0:	b508      	push	{r3, lr}
 8081aa2:	4b02      	ldr	r3, [pc, #8]	; (8081aac <HAL_Core_Get_Last_Reset_Info+0xc>)
 8081aa4:	681b      	ldr	r3, [r3, #0]
 8081aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8081aa8:	9301      	str	r3, [sp, #4]
 8081aaa:	bd08      	pop	{r3, pc}
 8081aac:	080401b8 	.word	0x080401b8

08081ab0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8081ab0:	b508      	push	{r3, lr}
 8081ab2:	4b02      	ldr	r3, [pc, #8]	; (8081abc <HAL_RNG_GetRandomNumber+0xc>)
 8081ab4:	681b      	ldr	r3, [r3, #0]
 8081ab6:	685b      	ldr	r3, [r3, #4]
 8081ab8:	9301      	str	r3, [sp, #4]
 8081aba:	bd08      	pop	{r3, pc}
 8081abc:	0804019c 	.word	0x0804019c

08081ac0 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
 8081ac0:	b508      	push	{r3, lr}
 8081ac2:	4b02      	ldr	r3, [pc, #8]	; (8081acc <HAL_Delay_Milliseconds+0xc>)
 8081ac4:	681b      	ldr	r3, [r3, #0]
 8081ac6:	689b      	ldr	r3, [r3, #8]
 8081ac8:	9301      	str	r3, [sp, #4]
 8081aca:	bd08      	pop	{r3, pc}
 8081acc:	0804019c 	.word	0x0804019c

08081ad0 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8081ad0:	b508      	push	{r3, lr}
 8081ad2:	4b02      	ldr	r3, [pc, #8]	; (8081adc <HAL_Delay_Microseconds+0xc>)
 8081ad4:	681b      	ldr	r3, [r3, #0]
 8081ad6:	68db      	ldr	r3, [r3, #12]
 8081ad8:	9301      	str	r3, [sp, #4]
 8081ada:	bd08      	pop	{r3, pc}
 8081adc:	0804019c 	.word	0x0804019c

08081ae0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8081ae0:	b508      	push	{r3, lr}
 8081ae2:	4b02      	ldr	r3, [pc, #8]	; (8081aec <HAL_Timer_Get_Milli_Seconds+0xc>)
 8081ae4:	681b      	ldr	r3, [r3, #0]
 8081ae6:	695b      	ldr	r3, [r3, #20]
 8081ae8:	9301      	str	r3, [sp, #4]
 8081aea:	bd08      	pop	{r3, pc}
 8081aec:	0804019c 	.word	0x0804019c

08081af0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 8081af0:	b508      	push	{r3, lr}
 8081af2:	4b02      	ldr	r3, [pc, #8]	; (8081afc <hal_rtc_time_is_valid+0xc>)
 8081af4:	681b      	ldr	r3, [r3, #0]
 8081af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081af8:	9301      	str	r3, [sp, #4]
 8081afa:	bd08      	pop	{r3, pc}
 8081afc:	0804019c 	.word	0x0804019c

08081b00 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 8081b00:	b508      	push	{r3, lr}
 8081b02:	4b02      	ldr	r3, [pc, #8]	; (8081b0c <hal_timer_millis+0xc>)
 8081b04:	681b      	ldr	r3, [r3, #0]
 8081b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081b08:	9301      	str	r3, [sp, #4]
 8081b0a:	bd08      	pop	{r3, pc}
 8081b0c:	0804019c 	.word	0x0804019c

08081b10 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 8081b10:	b508      	push	{r3, lr}
 8081b12:	4b02      	ldr	r3, [pc, #8]	; (8081b1c <hal_rtc_get_time+0xc>)
 8081b14:	681b      	ldr	r3, [r3, #0]
 8081b16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8081b18:	9301      	str	r3, [sp, #4]
 8081b1a:	bd08      	pop	{r3, pc}
 8081b1c:	0804019c 	.word	0x0804019c

08081b20 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 8081b20:	b508      	push	{r3, lr}
 8081b22:	4b02      	ldr	r3, [pc, #8]	; (8081b2c <HAL_Validate_Pin_Function+0xc>)
 8081b24:	681b      	ldr	r3, [r3, #0]
 8081b26:	685b      	ldr	r3, [r3, #4]
 8081b28:	9301      	str	r3, [sp, #4]
 8081b2a:	bd08      	pop	{r3, pc}
 8081b2c:	080401b0 	.word	0x080401b0

08081b30 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8081b30:	b508      	push	{r3, lr}
 8081b32:	4b02      	ldr	r3, [pc, #8]	; (8081b3c <HAL_Pin_Mode+0xc>)
 8081b34:	681b      	ldr	r3, [r3, #0]
 8081b36:	689b      	ldr	r3, [r3, #8]
 8081b38:	9301      	str	r3, [sp, #4]
 8081b3a:	bd08      	pop	{r3, pc}
 8081b3c:	080401b0 	.word	0x080401b0

08081b40 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8081b40:	b508      	push	{r3, lr}
 8081b42:	4b02      	ldr	r3, [pc, #8]	; (8081b4c <HAL_Get_Pin_Mode+0xc>)
 8081b44:	681b      	ldr	r3, [r3, #0]
 8081b46:	68db      	ldr	r3, [r3, #12]
 8081b48:	9301      	str	r3, [sp, #4]
 8081b4a:	bd08      	pop	{r3, pc}
 8081b4c:	080401b0 	.word	0x080401b0

08081b50 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8081b50:	b508      	push	{r3, lr}
 8081b52:	4b02      	ldr	r3, [pc, #8]	; (8081b5c <HAL_GPIO_Write+0xc>)
 8081b54:	681b      	ldr	r3, [r3, #0]
 8081b56:	691b      	ldr	r3, [r3, #16]
 8081b58:	9301      	str	r3, [sp, #4]
 8081b5a:	bd08      	pop	{r3, pc}
 8081b5c:	080401b0 	.word	0x080401b0

08081b60 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 8081b60:	b508      	push	{r3, lr}
 8081b62:	4b02      	ldr	r3, [pc, #8]	; (8081b6c <HAL_GPIO_Read+0xc>)
 8081b64:	681b      	ldr	r3, [r3, #0]
 8081b66:	695b      	ldr	r3, [r3, #20]
 8081b68:	9301      	str	r3, [sp, #4]
 8081b6a:	bd08      	pop	{r3, pc}
 8081b6c:	080401b0 	.word	0x080401b0

08081b70 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 8081b70:	b508      	push	{r3, lr}
 8081b72:	4b02      	ldr	r3, [pc, #8]	; (8081b7c <HAL_Interrupts_Attach+0xc>)
 8081b74:	681b      	ldr	r3, [r3, #0]
 8081b76:	699b      	ldr	r3, [r3, #24]
 8081b78:	9301      	str	r3, [sp, #4]
 8081b7a:	bd08      	pop	{r3, pc}
 8081b7c:	080401b0 	.word	0x080401b0

08081b80 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 8081b80:	b508      	push	{r3, lr}
 8081b82:	4b02      	ldr	r3, [pc, #8]	; (8081b8c <HAL_Interrupts_Detach+0xc>)
 8081b84:	681b      	ldr	r3, [r3, #0]
 8081b86:	69db      	ldr	r3, [r3, #28]
 8081b88:	9301      	str	r3, [sp, #4]
 8081b8a:	bd08      	pop	{r3, pc}
 8081b8c:	080401b0 	.word	0x080401b0

08081b90 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 8081b90:	b508      	push	{r3, lr}
 8081b92:	4b02      	ldr	r3, [pc, #8]	; (8081b9c <hal_adc_read+0xc>)
 8081b94:	681b      	ldr	r3, [r3, #0]
 8081b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081b98:	9301      	str	r3, [sp, #4]
 8081b9a:	bd08      	pop	{r3, pc}
 8081b9c:	080401b0 	.word	0x080401b0

08081ba0 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 8081ba0:	b508      	push	{r3, lr}
 8081ba2:	4b02      	ldr	r3, [pc, #8]	; (8081bac <hal_i2c_begin+0xc>)
 8081ba4:	681b      	ldr	r3, [r3, #0]
 8081ba6:	68db      	ldr	r3, [r3, #12]
 8081ba8:	9301      	str	r3, [sp, #4]
 8081baa:	bd08      	pop	{r3, pc}
 8081bac:	080401ac 	.word	0x080401ac

08081bb0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 8081bb0:	b508      	push	{r3, lr}
 8081bb2:	4b02      	ldr	r3, [pc, #8]	; (8081bbc <hal_i2c_begin_transmission+0xc>)
 8081bb4:	681b      	ldr	r3, [r3, #0]
 8081bb6:	699b      	ldr	r3, [r3, #24]
 8081bb8:	9301      	str	r3, [sp, #4]
 8081bba:	bd08      	pop	{r3, pc}
 8081bbc:	080401ac 	.word	0x080401ac

08081bc0 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 8081bc0:	b508      	push	{r3, lr}
 8081bc2:	4b02      	ldr	r3, [pc, #8]	; (8081bcc <hal_i2c_end_transmission+0xc>)
 8081bc4:	681b      	ldr	r3, [r3, #0]
 8081bc6:	69db      	ldr	r3, [r3, #28]
 8081bc8:	9301      	str	r3, [sp, #4]
 8081bca:	bd08      	pop	{r3, pc}
 8081bcc:	080401ac 	.word	0x080401ac

08081bd0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 8081bd0:	b508      	push	{r3, lr}
 8081bd2:	4b02      	ldr	r3, [pc, #8]	; (8081bdc <hal_i2c_write+0xc>)
 8081bd4:	681b      	ldr	r3, [r3, #0]
 8081bd6:	6a1b      	ldr	r3, [r3, #32]
 8081bd8:	9301      	str	r3, [sp, #4]
 8081bda:	bd08      	pop	{r3, pc}
 8081bdc:	080401ac 	.word	0x080401ac

08081be0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 8081be0:	b508      	push	{r3, lr}
 8081be2:	4b02      	ldr	r3, [pc, #8]	; (8081bec <hal_i2c_available+0xc>)
 8081be4:	681b      	ldr	r3, [r3, #0]
 8081be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081be8:	9301      	str	r3, [sp, #4]
 8081bea:	bd08      	pop	{r3, pc}
 8081bec:	080401ac 	.word	0x080401ac

08081bf0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 8081bf0:	b508      	push	{r3, lr}
 8081bf2:	4b02      	ldr	r3, [pc, #8]	; (8081bfc <hal_i2c_read+0xc>)
 8081bf4:	681b      	ldr	r3, [r3, #0]
 8081bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081bf8:	9301      	str	r3, [sp, #4]
 8081bfa:	bd08      	pop	{r3, pc}
 8081bfc:	080401ac 	.word	0x080401ac

08081c00 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 8081c00:	b508      	push	{r3, lr}
 8081c02:	4b02      	ldr	r3, [pc, #8]	; (8081c0c <hal_i2c_peek+0xc>)
 8081c04:	681b      	ldr	r3, [r3, #0]
 8081c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081c08:	9301      	str	r3, [sp, #4]
 8081c0a:	bd08      	pop	{r3, pc}
 8081c0c:	080401ac 	.word	0x080401ac

08081c10 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 8081c10:	b508      	push	{r3, lr}
 8081c12:	4b02      	ldr	r3, [pc, #8]	; (8081c1c <hal_i2c_flush+0xc>)
 8081c14:	681b      	ldr	r3, [r3, #0]
 8081c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081c18:	9301      	str	r3, [sp, #4]
 8081c1a:	bd08      	pop	{r3, pc}
 8081c1c:	080401ac 	.word	0x080401ac

08081c20 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 8081c20:	b508      	push	{r3, lr}
 8081c22:	4b02      	ldr	r3, [pc, #8]	; (8081c2c <hal_i2c_is_enabled+0xc>)
 8081c24:	681b      	ldr	r3, [r3, #0]
 8081c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081c28:	9301      	str	r3, [sp, #4]
 8081c2a:	bd08      	pop	{r3, pc}
 8081c2c:	080401ac 	.word	0x080401ac

08081c30 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 8081c30:	b508      	push	{r3, lr}
 8081c32:	4b02      	ldr	r3, [pc, #8]	; (8081c3c <hal_i2c_init+0xc>)
 8081c34:	681b      	ldr	r3, [r3, #0]
 8081c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081c38:	9301      	str	r3, [sp, #4]
 8081c3a:	bd08      	pop	{r3, pc}
 8081c3c:	080401ac 	.word	0x080401ac

08081c40 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
 8081c40:	b508      	push	{r3, lr}
 8081c42:	4b02      	ldr	r3, [pc, #8]	; (8081c4c <hal_i2c_lock+0xc>)
 8081c44:	681b      	ldr	r3, [r3, #0]
 8081c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081c48:	9301      	str	r3, [sp, #4]
 8081c4a:	bd08      	pop	{r3, pc}
 8081c4c:	080401ac 	.word	0x080401ac

08081c50 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
 8081c50:	b508      	push	{r3, lr}
 8081c52:	4b02      	ldr	r3, [pc, #8]	; (8081c5c <hal_i2c_unlock+0xc>)
 8081c54:	681b      	ldr	r3, [r3, #0]
 8081c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081c58:	9301      	str	r3, [sp, #4]
 8081c5a:	bd08      	pop	{r3, pc}
 8081c5c:	080401ac 	.word	0x080401ac

08081c60 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 8081c60:	b508      	push	{r3, lr}
 8081c62:	4b02      	ldr	r3, [pc, #8]	; (8081c6c <hal_i2c_request_ex+0xc>)
 8081c64:	681b      	ldr	r3, [r3, #0]
 8081c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8081c68:	9301      	str	r3, [sp, #4]
 8081c6a:	bd08      	pop	{r3, pc}
 8081c6c:	080401ac 	.word	0x080401ac

08081c70 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 8081c70:	b508      	push	{r3, lr}
 8081c72:	4b02      	ldr	r3, [pc, #8]	; (8081c7c <hal_spi_init+0xc>)
 8081c74:	681b      	ldr	r3, [r3, #0]
 8081c76:	69db      	ldr	r3, [r3, #28]
 8081c78:	9301      	str	r3, [sp, #4]
 8081c7a:	bd08      	pop	{r3, pc}
 8081c7c:	080401b4 	.word	0x080401b4

08081c80 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 8081c80:	b508      	push	{r3, lr}
 8081c82:	4b02      	ldr	r3, [pc, #8]	; (8081c8c <hal_spi_is_enabled+0xc>)
 8081c84:	681b      	ldr	r3, [r3, #0]
 8081c86:	6a1b      	ldr	r3, [r3, #32]
 8081c88:	9301      	str	r3, [sp, #4]
 8081c8a:	bd08      	pop	{r3, pc}
 8081c8c:	080401b4 	.word	0x080401b4

08081c90 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 8081c90:	b508      	push	{r3, lr}
 8081c92:	4b02      	ldr	r3, [pc, #8]	; (8081c9c <hal_usart_init+0xc>)
 8081c94:	681b      	ldr	r3, [r3, #0]
 8081c96:	699b      	ldr	r3, [r3, #24]
 8081c98:	9301      	str	r3, [sp, #4]
 8081c9a:	bd08      	pop	{r3, pc}
 8081c9c:	080401c4 	.word	0x080401c4

08081ca0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 8081ca0:	b508      	push	{r3, lr}
 8081ca2:	4b02      	ldr	r3, [pc, #8]	; (8081cac <hal_usart_write+0xc>)
 8081ca4:	681b      	ldr	r3, [r3, #0]
 8081ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081ca8:	9301      	str	r3, [sp, #4]
 8081caa:	bd08      	pop	{r3, pc}
 8081cac:	080401c4 	.word	0x080401c4

08081cb0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 8081cb0:	b508      	push	{r3, lr}
 8081cb2:	4b02      	ldr	r3, [pc, #8]	; (8081cbc <hal_usart_available+0xc>)
 8081cb4:	681b      	ldr	r3, [r3, #0]
 8081cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081cb8:	9301      	str	r3, [sp, #4]
 8081cba:	bd08      	pop	{r3, pc}
 8081cbc:	080401c4 	.word	0x080401c4

08081cc0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 8081cc0:	b508      	push	{r3, lr}
 8081cc2:	4b02      	ldr	r3, [pc, #8]	; (8081ccc <hal_usart_read+0xc>)
 8081cc4:	681b      	ldr	r3, [r3, #0]
 8081cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081cc8:	9301      	str	r3, [sp, #4]
 8081cca:	bd08      	pop	{r3, pc}
 8081ccc:	080401c4 	.word	0x080401c4

08081cd0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 8081cd0:	b508      	push	{r3, lr}
 8081cd2:	4b02      	ldr	r3, [pc, #8]	; (8081cdc <hal_usart_peek+0xc>)
 8081cd4:	681b      	ldr	r3, [r3, #0]
 8081cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081cd8:	9301      	str	r3, [sp, #4]
 8081cda:	bd08      	pop	{r3, pc}
 8081cdc:	080401c4 	.word	0x080401c4

08081ce0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 8081ce0:	b508      	push	{r3, lr}
 8081ce2:	4b02      	ldr	r3, [pc, #8]	; (8081cec <hal_usart_flush+0xc>)
 8081ce4:	681b      	ldr	r3, [r3, #0]
 8081ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081ce8:	9301      	str	r3, [sp, #4]
 8081cea:	bd08      	pop	{r3, pc}
 8081cec:	080401c4 	.word	0x080401c4

08081cf0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 8081cf0:	b508      	push	{r3, lr}
 8081cf2:	4b02      	ldr	r3, [pc, #8]	; (8081cfc <hal_usart_is_enabled+0xc>)
 8081cf4:	681b      	ldr	r3, [r3, #0]
 8081cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081cf8:	9301      	str	r3, [sp, #4]
 8081cfa:	bd08      	pop	{r3, pc}
 8081cfc:	080401c4 	.word	0x080401c4

08081d00 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 8081d00:	b508      	push	{r3, lr}
 8081d02:	4b02      	ldr	r3, [pc, #8]	; (8081d0c <hal_usart_available_data_for_write+0xc>)
 8081d04:	681b      	ldr	r3, [r3, #0]
 8081d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081d08:	9301      	str	r3, [sp, #4]
 8081d0a:	bd08      	pop	{r3, pc}
 8081d0c:	080401c4 	.word	0x080401c4

08081d10 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8081d10:	b508      	push	{r3, lr}
 8081d12:	4b02      	ldr	r3, [pc, #8]	; (8081d1c <HAL_USB_USART_Init+0xc>)
 8081d14:	681b      	ldr	r3, [r3, #0]
 8081d16:	681b      	ldr	r3, [r3, #0]
 8081d18:	9301      	str	r3, [sp, #4]
 8081d1a:	bd08      	pop	{r3, pc}
 8081d1c:	0806001c 	.word	0x0806001c

08081d20 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8081d20:	b508      	push	{r3, lr}
 8081d22:	4b02      	ldr	r3, [pc, #8]	; (8081d2c <HAL_USB_USART_Available_Data+0xc>)
 8081d24:	681b      	ldr	r3, [r3, #0]
 8081d26:	691b      	ldr	r3, [r3, #16]
 8081d28:	9301      	str	r3, [sp, #4]
 8081d2a:	bd08      	pop	{r3, pc}
 8081d2c:	0806001c 	.word	0x0806001c

08081d30 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8081d30:	b508      	push	{r3, lr}
 8081d32:	4b02      	ldr	r3, [pc, #8]	; (8081d3c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8081d34:	681b      	ldr	r3, [r3, #0]
 8081d36:	695b      	ldr	r3, [r3, #20]
 8081d38:	9301      	str	r3, [sp, #4]
 8081d3a:	bd08      	pop	{r3, pc}
 8081d3c:	0806001c 	.word	0x0806001c

08081d40 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081d40:	b508      	push	{r3, lr}
 8081d42:	4b02      	ldr	r3, [pc, #8]	; (8081d4c <HAL_USB_USART_Receive_Data+0xc>)
 8081d44:	681b      	ldr	r3, [r3, #0]
 8081d46:	699b      	ldr	r3, [r3, #24]
 8081d48:	9301      	str	r3, [sp, #4]
 8081d4a:	bd08      	pop	{r3, pc}
 8081d4c:	0806001c 	.word	0x0806001c

08081d50 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081d50:	b508      	push	{r3, lr}
 8081d52:	4b02      	ldr	r3, [pc, #8]	; (8081d5c <HAL_USB_USART_Send_Data+0xc>)
 8081d54:	681b      	ldr	r3, [r3, #0]
 8081d56:	69db      	ldr	r3, [r3, #28]
 8081d58:	9301      	str	r3, [sp, #4]
 8081d5a:	bd08      	pop	{r3, pc}
 8081d5c:	0806001c 	.word	0x0806001c

08081d60 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8081d60:	b508      	push	{r3, lr}
 8081d62:	4b02      	ldr	r3, [pc, #8]	; (8081d6c <HAL_USB_USART_Flush_Data+0xc>)
 8081d64:	681b      	ldr	r3, [r3, #0]
 8081d66:	6a1b      	ldr	r3, [r3, #32]
 8081d68:	9301      	str	r3, [sp, #4]
 8081d6a:	bd08      	pop	{r3, pc}
 8081d6c:	0806001c 	.word	0x0806001c

08081d70 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 8081d70:	b508      	push	{r3, lr}
 8081d72:	4b02      	ldr	r3, [pc, #8]	; (8081d7c <panic_+0xc>)
 8081d74:	681b      	ldr	r3, [r3, #0]
 8081d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081d78:	9301      	str	r3, [sp, #4]
 8081d7a:	bd08      	pop	{r3, pc}
 8081d7c:	080201a0 	.word	0x080201a0

08081d80 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 8081d80:	b508      	push	{r3, lr}
 8081d82:	4b02      	ldr	r3, [pc, #8]	; (8081d8c <log_message_v+0xc>)
 8081d84:	681b      	ldr	r3, [r3, #0]
 8081d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081d88:	9301      	str	r3, [sp, #4]
 8081d8a:	bd08      	pop	{r3, pc}
 8081d8c:	080201a0 	.word	0x080201a0

08081d90 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8081d90:	b508      	push	{r3, lr}
 8081d92:	4b02      	ldr	r3, [pc, #8]	; (8081d9c <system_mode+0xc>)
 8081d94:	681b      	ldr	r3, [r3, #0]
 8081d96:	681b      	ldr	r3, [r3, #0]
 8081d98:	9301      	str	r3, [sp, #4]
 8081d9a:	bd08      	pop	{r3, pc}
 8081d9c:	080401a4 	.word	0x080401a4

08081da0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8081da0:	b508      	push	{r3, lr}
 8081da2:	4b02      	ldr	r3, [pc, #8]	; (8081dac <set_system_mode+0xc>)
 8081da4:	681b      	ldr	r3, [r3, #0]
 8081da6:	685b      	ldr	r3, [r3, #4]
 8081da8:	9301      	str	r3, [sp, #4]
 8081daa:	bd08      	pop	{r3, pc}
 8081dac:	080401a4 	.word	0x080401a4

08081db0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8081db0:	b508      	push	{r3, lr}
 8081db2:	4b02      	ldr	r3, [pc, #8]	; (8081dbc <system_delay_ms+0xc>)
 8081db4:	681b      	ldr	r3, [r3, #0]
 8081db6:	695b      	ldr	r3, [r3, #20]
 8081db8:	9301      	str	r3, [sp, #4]
 8081dba:	bd08      	pop	{r3, pc}
 8081dbc:	080401a4 	.word	0x080401a4

08081dc0 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 8081dc0:	b508      	push	{r3, lr}
 8081dc2:	4b02      	ldr	r3, [pc, #8]	; (8081dcc <system_sleep+0xc>)
 8081dc4:	681b      	ldr	r3, [r3, #0]
 8081dc6:	699b      	ldr	r3, [r3, #24]
 8081dc8:	9301      	str	r3, [sp, #4]
 8081dca:	bd08      	pop	{r3, pc}
 8081dcc:	080401a4 	.word	0x080401a4

08081dd0 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8081dd0:	b508      	push	{r3, lr}
 8081dd2:	4b02      	ldr	r3, [pc, #8]	; (8081ddc <system_thread_set_state+0xc>)
 8081dd4:	681b      	ldr	r3, [r3, #0]
 8081dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081dd8:	9301      	str	r3, [sp, #4]
 8081dda:	bd08      	pop	{r3, pc}
 8081ddc:	080401a4 	.word	0x080401a4

08081de0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8081de0:	b508      	push	{r3, lr}
 8081de2:	4b02      	ldr	r3, [pc, #8]	; (8081dec <application_thread_current+0xc>)
 8081de4:	681b      	ldr	r3, [r3, #0]
 8081de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081de8:	9301      	str	r3, [sp, #4]
 8081dea:	bd08      	pop	{r3, pc}
 8081dec:	080401a4 	.word	0x080401a4

08081df0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8081df0:	b508      	push	{r3, lr}
 8081df2:	4b02      	ldr	r3, [pc, #8]	; (8081dfc <application_thread_invoke+0xc>)
 8081df4:	681b      	ldr	r3, [r3, #0]
 8081df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081df8:	9301      	str	r3, [sp, #4]
 8081dfa:	bd08      	pop	{r3, pc}
 8081dfc:	080401a4 	.word	0x080401a4

08081e00 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8081e00:	b508      	push	{r3, lr}
 8081e02:	4b02      	ldr	r3, [pc, #8]	; (8081e0c <system_thread_get_state+0xc>)
 8081e04:	681b      	ldr	r3, [r3, #0]
 8081e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081e08:	9301      	str	r3, [sp, #4]
 8081e0a:	bd08      	pop	{r3, pc}
 8081e0c:	080401a4 	.word	0x080401a4

08081e10 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8081e10:	b508      	push	{r3, lr}
 8081e12:	4b03      	ldr	r3, [pc, #12]	; (8081e20 <system_ctrl_set_app_request_handler+0x10>)
 8081e14:	681b      	ldr	r3, [r3, #0]
 8081e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8081e1a:	9301      	str	r3, [sp, #4]
 8081e1c:	bd08      	pop	{r3, pc}
 8081e1e:	0000      	.short	0x0000
 8081e20:	080401a4 	.word	0x080401a4

08081e24 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8081e24:	b508      	push	{r3, lr}
 8081e26:	4b03      	ldr	r3, [pc, #12]	; (8081e34 <system_ctrl_set_result+0x10>)
 8081e28:	681b      	ldr	r3, [r3, #0]
 8081e2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8081e2e:	9301      	str	r3, [sp, #4]
 8081e30:	bd08      	pop	{r3, pc}
 8081e32:	0000      	.short	0x0000
 8081e34:	080401a4 	.word	0x080401a4

08081e38 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 8081e38:	b508      	push	{r3, lr}
 8081e3a:	4b03      	ldr	r3, [pc, #12]	; (8081e48 <system_reset+0x10>)
 8081e3c:	681b      	ldr	r3, [r3, #0]
 8081e3e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8081e42:	9301      	str	r3, [sp, #4]
 8081e44:	bd08      	pop	{r3, pc}
 8081e46:	0000      	.short	0x0000
 8081e48:	080401a4 	.word	0x080401a4

08081e4c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 8081e4c:	b508      	push	{r3, lr}
 8081e4e:	4b02      	ldr	r3, [pc, #8]	; (8081e58 <spark_variable+0xc>)
 8081e50:	681b      	ldr	r3, [r3, #0]
 8081e52:	681b      	ldr	r3, [r3, #0]
 8081e54:	9301      	str	r3, [sp, #4]
 8081e56:	bd08      	pop	{r3, pc}
 8081e58:	080401cc 	.word	0x080401cc

08081e5c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8081e5c:	b508      	push	{r3, lr}
 8081e5e:	4b02      	ldr	r3, [pc, #8]	; (8081e68 <spark_function+0xc>)
 8081e60:	681b      	ldr	r3, [r3, #0]
 8081e62:	685b      	ldr	r3, [r3, #4]
 8081e64:	9301      	str	r3, [sp, #4]
 8081e66:	bd08      	pop	{r3, pc}
 8081e68:	080401cc 	.word	0x080401cc

08081e6c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8081e6c:	b508      	push	{r3, lr}
 8081e6e:	4b02      	ldr	r3, [pc, #8]	; (8081e78 <spark_process+0xc>)
 8081e70:	681b      	ldr	r3, [r3, #0]
 8081e72:	689b      	ldr	r3, [r3, #8]
 8081e74:	9301      	str	r3, [sp, #4]
 8081e76:	bd08      	pop	{r3, pc}
 8081e78:	080401cc 	.word	0x080401cc

08081e7c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8081e7c:	b508      	push	{r3, lr}
 8081e7e:	4b02      	ldr	r3, [pc, #8]	; (8081e88 <spark_cloud_flag_connect+0xc>)
 8081e80:	681b      	ldr	r3, [r3, #0]
 8081e82:	68db      	ldr	r3, [r3, #12]
 8081e84:	9301      	str	r3, [sp, #4]
 8081e86:	bd08      	pop	{r3, pc}
 8081e88:	080401cc 	.word	0x080401cc

08081e8c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8081e8c:	b508      	push	{r3, lr}
 8081e8e:	4b02      	ldr	r3, [pc, #8]	; (8081e98 <spark_cloud_flag_connected+0xc>)
 8081e90:	681b      	ldr	r3, [r3, #0]
 8081e92:	695b      	ldr	r3, [r3, #20]
 8081e94:	9301      	str	r3, [sp, #4]
 8081e96:	bd08      	pop	{r3, pc}
 8081e98:	080401cc 	.word	0x080401cc

08081e9c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 8081e9c:	b508      	push	{r3, lr}
 8081e9e:	4b02      	ldr	r3, [pc, #8]	; (8081ea8 <spark_deviceID+0xc>)
 8081ea0:	681b      	ldr	r3, [r3, #0]
 8081ea2:	69db      	ldr	r3, [r3, #28]
 8081ea4:	9301      	str	r3, [sp, #4]
 8081ea6:	bd08      	pop	{r3, pc}
 8081ea8:	080401cc 	.word	0x080401cc

08081eac <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8081eac:	b508      	push	{r3, lr}
 8081eae:	4b02      	ldr	r3, [pc, #8]	; (8081eb8 <spark_send_event+0xc>)
 8081eb0:	681b      	ldr	r3, [r3, #0]
 8081eb2:	6a1b      	ldr	r3, [r3, #32]
 8081eb4:	9301      	str	r3, [sp, #4]
 8081eb6:	bd08      	pop	{r3, pc}
 8081eb8:	080401cc 	.word	0x080401cc

08081ebc <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 8081ebc:	b508      	push	{r3, lr}
 8081ebe:	4b02      	ldr	r3, [pc, #8]	; (8081ec8 <spark_subscribe+0xc>)
 8081ec0:	681b      	ldr	r3, [r3, #0]
 8081ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081ec4:	9301      	str	r3, [sp, #4]
 8081ec6:	bd08      	pop	{r3, pc}
 8081ec8:	080401cc 	.word	0x080401cc

08081ecc <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 8081ecc:	b508      	push	{r3, lr}
 8081ece:	4b02      	ldr	r3, [pc, #8]	; (8081ed8 <spark_sync_time+0xc>)
 8081ed0:	681b      	ldr	r3, [r3, #0]
 8081ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081ed4:	9301      	str	r3, [sp, #4]
 8081ed6:	bd08      	pop	{r3, pc}
 8081ed8:	080401cc 	.word	0x080401cc

08081edc <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8081edc:	b508      	push	{r3, lr}
 8081ede:	4b02      	ldr	r3, [pc, #8]	; (8081ee8 <spark_sync_time_pending+0xc>)
 8081ee0:	681b      	ldr	r3, [r3, #0]
 8081ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081ee4:	9301      	str	r3, [sp, #4]
 8081ee6:	bd08      	pop	{r3, pc}
 8081ee8:	080401cc 	.word	0x080401cc

08081eec <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8081eec:	b508      	push	{r3, lr}
 8081eee:	4b02      	ldr	r3, [pc, #8]	; (8081ef8 <spark_set_random_seed_from_cloud_handler+0xc>)
 8081ef0:	681b      	ldr	r3, [r3, #0]
 8081ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081ef4:	9301      	str	r3, [sp, #4]
 8081ef6:	bd08      	pop	{r3, pc}
 8081ef8:	080401cc 	.word	0x080401cc

08081efc <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 8081efc:	b508      	push	{r3, lr}
 8081efe:	4b02      	ldr	r3, [pc, #8]	; (8081f08 <spark_cloud_disconnect+0xc>)
 8081f00:	681b      	ldr	r3, [r3, #0]
 8081f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081f04:	9301      	str	r3, [sp, #4]
 8081f06:	bd08      	pop	{r3, pc}
 8081f08:	080401cc 	.word	0x080401cc

08081f0c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8081f0c:	b508      	push	{r3, lr}
 8081f0e:	4b02      	ldr	r3, [pc, #8]	; (8081f18 <network_connect+0xc>)
 8081f10:	681b      	ldr	r3, [r3, #0]
 8081f12:	685b      	ldr	r3, [r3, #4]
 8081f14:	9301      	str	r3, [sp, #4]
 8081f16:	bd08      	pop	{r3, pc}
 8081f18:	080401c8 	.word	0x080401c8

08081f1c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8081f1c:	b508      	push	{r3, lr}
 8081f1e:	4b02      	ldr	r3, [pc, #8]	; (8081f28 <network_connecting+0xc>)
 8081f20:	681b      	ldr	r3, [r3, #0]
 8081f22:	689b      	ldr	r3, [r3, #8]
 8081f24:	9301      	str	r3, [sp, #4]
 8081f26:	bd08      	pop	{r3, pc}
 8081f28:	080401c8 	.word	0x080401c8

08081f2c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8081f2c:	b508      	push	{r3, lr}
 8081f2e:	4b02      	ldr	r3, [pc, #8]	; (8081f38 <network_disconnect+0xc>)
 8081f30:	681b      	ldr	r3, [r3, #0]
 8081f32:	68db      	ldr	r3, [r3, #12]
 8081f34:	9301      	str	r3, [sp, #4]
 8081f36:	bd08      	pop	{r3, pc}
 8081f38:	080401c8 	.word	0x080401c8

08081f3c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8081f3c:	b508      	push	{r3, lr}
 8081f3e:	4b02      	ldr	r3, [pc, #8]	; (8081f48 <network_ready+0xc>)
 8081f40:	681b      	ldr	r3, [r3, #0]
 8081f42:	691b      	ldr	r3, [r3, #16]
 8081f44:	9301      	str	r3, [sp, #4]
 8081f46:	bd08      	pop	{r3, pc}
 8081f48:	080401c8 	.word	0x080401c8

08081f4c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8081f4c:	b508      	push	{r3, lr}
 8081f4e:	4b02      	ldr	r3, [pc, #8]	; (8081f58 <network_on+0xc>)
 8081f50:	681b      	ldr	r3, [r3, #0]
 8081f52:	695b      	ldr	r3, [r3, #20]
 8081f54:	9301      	str	r3, [sp, #4]
 8081f56:	bd08      	pop	{r3, pc}
 8081f58:	080401c8 	.word	0x080401c8

08081f5c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8081f5c:	b508      	push	{r3, lr}
 8081f5e:	4b02      	ldr	r3, [pc, #8]	; (8081f68 <network_off+0xc>)
 8081f60:	681b      	ldr	r3, [r3, #0]
 8081f62:	699b      	ldr	r3, [r3, #24]
 8081f64:	9301      	str	r3, [sp, #4]
 8081f66:	bd08      	pop	{r3, pc}
 8081f68:	080401c8 	.word	0x080401c8

08081f6c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8081f6c:	b508      	push	{r3, lr}
 8081f6e:	4b02      	ldr	r3, [pc, #8]	; (8081f78 <network_listen+0xc>)
 8081f70:	681b      	ldr	r3, [r3, #0]
 8081f72:	69db      	ldr	r3, [r3, #28]
 8081f74:	9301      	str	r3, [sp, #4]
 8081f76:	bd08      	pop	{r3, pc}
 8081f78:	080401c8 	.word	0x080401c8

08081f7c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8081f7c:	b508      	push	{r3, lr}
 8081f7e:	4b02      	ldr	r3, [pc, #8]	; (8081f88 <network_listening+0xc>)
 8081f80:	681b      	ldr	r3, [r3, #0]
 8081f82:	6a1b      	ldr	r3, [r3, #32]
 8081f84:	9301      	str	r3, [sp, #4]
 8081f86:	bd08      	pop	{r3, pc}
 8081f88:	080401c8 	.word	0x080401c8

08081f8c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8081f8c:	b508      	push	{r3, lr}
 8081f8e:	4b02      	ldr	r3, [pc, #8]	; (8081f98 <network_set_listen_timeout+0xc>)
 8081f90:	681b      	ldr	r3, [r3, #0]
 8081f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081f94:	9301      	str	r3, [sp, #4]
 8081f96:	bd08      	pop	{r3, pc}
 8081f98:	080401c8 	.word	0x080401c8

08081f9c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8081f9c:	b508      	push	{r3, lr}
 8081f9e:	4b02      	ldr	r3, [pc, #8]	; (8081fa8 <network_get_listen_timeout+0xc>)
 8081fa0:	681b      	ldr	r3, [r3, #0]
 8081fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081fa4:	9301      	str	r3, [sp, #4]
 8081fa6:	bd08      	pop	{r3, pc}
 8081fa8:	080401c8 	.word	0x080401c8

08081fac <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8081fac:	b508      	push	{r3, lr}
 8081fae:	4b02      	ldr	r3, [pc, #8]	; (8081fb8 <malloc+0xc>)
 8081fb0:	681b      	ldr	r3, [r3, #0]
 8081fb2:	681b      	ldr	r3, [r3, #0]
 8081fb4:	9301      	str	r3, [sp, #4]
 8081fb6:	bd08      	pop	{r3, pc}
 8081fb8:	080401a0 	.word	0x080401a0

08081fbc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8081fbc:	b508      	push	{r3, lr}
 8081fbe:	4b02      	ldr	r3, [pc, #8]	; (8081fc8 <free+0xc>)
 8081fc0:	681b      	ldr	r3, [r3, #0]
 8081fc2:	685b      	ldr	r3, [r3, #4]
 8081fc4:	9301      	str	r3, [sp, #4]
 8081fc6:	bd08      	pop	{r3, pc}
 8081fc8:	080401a0 	.word	0x080401a0

08081fcc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8081fcc:	b508      	push	{r3, lr}
 8081fce:	4b02      	ldr	r3, [pc, #8]	; (8081fd8 <realloc+0xc>)
 8081fd0:	681b      	ldr	r3, [r3, #0]
 8081fd2:	689b      	ldr	r3, [r3, #8]
 8081fd4:	9301      	str	r3, [sp, #4]
 8081fd6:	bd08      	pop	{r3, pc}
 8081fd8:	080401a0 	.word	0x080401a0

08081fdc <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8081fdc:	b508      	push	{r3, lr}
 8081fde:	4b02      	ldr	r3, [pc, #8]	; (8081fe8 <siprintf+0xc>)
 8081fe0:	681b      	ldr	r3, [r3, #0]
 8081fe2:	691b      	ldr	r3, [r3, #16]
 8081fe4:	9301      	str	r3, [sp, #4]
 8081fe6:	bd08      	pop	{r3, pc}
 8081fe8:	080401a0 	.word	0x080401a0

08081fec <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8081fec:	b508      	push	{r3, lr}
 8081fee:	4b02      	ldr	r3, [pc, #8]	; (8081ff8 <snprintf+0xc>)
 8081ff0:	681b      	ldr	r3, [r3, #0]
 8081ff2:	69db      	ldr	r3, [r3, #28]
 8081ff4:	9301      	str	r3, [sp, #4]
 8081ff6:	bd08      	pop	{r3, pc}
 8081ff8:	080401a0 	.word	0x080401a0

08081ffc <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8081ffc:	b508      	push	{r3, lr}
 8081ffe:	4b02      	ldr	r3, [pc, #8]	; (8082008 <abort+0xc>)
 8082000:	681b      	ldr	r3, [r3, #0]
 8082002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082004:	9301      	str	r3, [sp, #4]
 8082006:	bd08      	pop	{r3, pc}
 8082008:	080401a0 	.word	0x080401a0

0808200c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 808200c:	b508      	push	{r3, lr}
 808200e:	4b02      	ldr	r3, [pc, #8]	; (8082018 <_malloc_r+0xc>)
 8082010:	681b      	ldr	r3, [r3, #0]
 8082012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082014:	9301      	str	r3, [sp, #4]
 8082016:	bd08      	pop	{r3, pc}
 8082018:	080401a0 	.word	0x080401a0

0808201c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 808201c:	b508      	push	{r3, lr}
 808201e:	4b02      	ldr	r3, [pc, #8]	; (8082028 <newlib_impure_ptr_callback+0xc>)
 8082020:	681b      	ldr	r3, [r3, #0]
 8082022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8082024:	9301      	str	r3, [sp, #4]
 8082026:	bd08      	pop	{r3, pc}
 8082028:	080401a0 	.word	0x080401a0

0808202c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 808202c:	2100      	movs	r1, #0
 808202e:	f7ff bebf 	b.w	8081db0 <system_delay_ms>

08082032 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8082032:	b510      	push	{r4, lr}
      if (_M_empty())
 8082034:	6883      	ldr	r3, [r0, #8]
 8082036:	4604      	mov	r4, r0
 8082038:	b90b      	cbnz	r3, 808203e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 808203a:	f001 fbda 	bl	80837f2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808203e:	68c3      	ldr	r3, [r0, #12]
 8082040:	4798      	blx	r3
      if (_M_manager)
 8082042:	68a3      	ldr	r3, [r4, #8]
 8082044:	b11b      	cbz	r3, 808204e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8082046:	2203      	movs	r2, #3
 8082048:	4621      	mov	r1, r4
 808204a:	4620      	mov	r0, r4
 808204c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808204e:	4620      	mov	r0, r4
}
 8082050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 8082054:	2110      	movs	r1, #16
 8082056:	f001 bbc6 	b.w	80837e6 <_ZdlPvj>

0808205a <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808205a:	2200      	movs	r2, #0
 808205c:	6840      	ldr	r0, [r0, #4]
 808205e:	4611      	mov	r1, r2
 8082060:	f7ff bf6c 	b.w	8081f3c <network_ready>

08082064 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8082064:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 8082066:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 8082068:	b085      	sub	sp, #20
 808206a:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808206c:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 808206e:	460f      	mov	r7, r1
 8082070:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8082072:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082074:	f002 fbe7 	bl	8084846 <strlen>
 8082078:	687b      	ldr	r3, [r7, #4]
 808207a:	b281      	uxth	r1, r0
 808207c:	9600      	str	r6, [sp, #0]
 808207e:	4628      	mov	r0, r5
 8082080:	aa03      	add	r2, sp, #12
 8082082:	f7ff fcad 	bl	80819e0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082086:	b130      	cbz	r0, 8082096 <_ZN5spark13CellularClass7resolveEPKc+0x32>
 8082088:	4631      	mov	r1, r6
 808208a:	4620      	mov	r0, r4
 808208c:	f000 fd24 	bl	8082ad8 <_ZN9IPAddressC1Em>
    }
 8082090:	4620      	mov	r0, r4
 8082092:	b005      	add	sp, #20
 8082094:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082096:	4620      	mov	r0, r4
 8082098:	a903      	add	r1, sp, #12
 808209a:	f000 fd15 	bl	8082ac8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 808209e:	e7f7      	b.n	8082090 <_ZN5spark13CellularClass7resolveEPKc+0x2c>

080820a0 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80820a0:	2200      	movs	r2, #0
 80820a2:	6840      	ldr	r0, [r0, #4]
 80820a4:	4611      	mov	r1, r2
 80820a6:	f7ff bf69 	b.w	8081f7c <network_listening>

080820aa <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80820aa:	2200      	movs	r2, #0
 80820ac:	6840      	ldr	r0, [r0, #4]
 80820ae:	4611      	mov	r1, r2
 80820b0:	f7ff bf74 	b.w	8081f9c <network_get_listen_timeout>

080820b4 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80820b4:	2200      	movs	r2, #0
 80820b6:	6840      	ldr	r0, [r0, #4]
 80820b8:	f7ff bf68 	b.w	8081f8c <network_set_listen_timeout>

080820bc <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80820bc:	2200      	movs	r2, #0
 80820be:	6840      	ldr	r0, [r0, #4]
 80820c0:	f081 0101 	eor.w	r1, r1, #1
 80820c4:	f7ff bf52 	b.w	8081f6c <network_listen>

080820c8 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80820c8:	2300      	movs	r3, #0
 80820ca:	6840      	ldr	r0, [r0, #4]
 80820cc:	461a      	mov	r2, r3
 80820ce:	4619      	mov	r1, r3
 80820d0:	f7ff bf44 	b.w	8081f5c <network_off>

080820d4 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80820d4:	2300      	movs	r3, #0
 80820d6:	6840      	ldr	r0, [r0, #4]
 80820d8:	461a      	mov	r2, r3
 80820da:	4619      	mov	r1, r3
 80820dc:	f7ff bf36 	b.w	8081f4c <network_on>

080820e0 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80820e0:	2200      	movs	r2, #0
 80820e2:	6840      	ldr	r0, [r0, #4]
 80820e4:	4611      	mov	r1, r2
 80820e6:	f7ff bf19 	b.w	8081f1c <network_connecting>

080820ea <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80820ea:	2200      	movs	r2, #0
 80820ec:	2102      	movs	r1, #2
 80820ee:	6840      	ldr	r0, [r0, #4]
 80820f0:	f7ff bf1c 	b.w	8081f2c <network_disconnect>

080820f4 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80820f4:	2300      	movs	r3, #0
 80820f6:	6840      	ldr	r0, [r0, #4]
 80820f8:	461a      	mov	r2, r3
 80820fa:	f7ff bf07 	b.w	8081f0c <network_connect>
	...

08082100 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 8082100:	b5f0      	push	{r4, r5, r6, r7, lr}
    int qual __attribute__((deprecated("Use getQualityValue() instead"))) = 0;

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    CellularSignal() {}
 8082102:	2500      	movs	r5, #0
 8082104:	2618      	movs	r6, #24
 8082106:	460f      	mov	r7, r1
 8082108:	4b19      	ldr	r3, [pc, #100]	; (8082170 <_ZN5spark13CellularClass4RSSIEv+0x70>)
 808210a:	4632      	mov	r2, r6
 808210c:	6003      	str	r3, [r0, #0]
 808210e:	3328      	adds	r3, #40	; 0x28
 8082110:	4629      	mov	r1, r5
 8082112:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8082116:	b089      	sub	sp, #36	; 0x24
 8082118:	6043      	str	r3, [r0, #4]
 808211a:	4604      	mov	r4, r0
 808211c:	3010      	adds	r0, #16
 808211e:	f002 fb39 	bl	8084794 <memset>
// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 8082122:	462a      	mov	r2, r5
 8082124:	4629      	mov	r1, r5
 8082126:	6878      	ldr	r0, [r7, #4]
 8082128:	f7ff ff08 	bl	8081f3c <network_ready>
 808212c:	b918      	cbnz	r0, 8082136 <_ZN5spark13CellularClass4RSSIEv+0x36>
            sig.rssi = 0;
 808212e:	60a0      	str	r0, [r4, #8]
            sig.rssi = 2;
        }
        sig.fromHalCellularSignal(sigext);
        return sig;
#pragma GCC diagnostic pop
    }
 8082130:	4620      	mov	r0, r4
 8082132:	b009      	add	sp, #36	; 0x24
 8082134:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cellular_signal_t sigext = {0};
 8082136:	4629      	mov	r1, r5
 8082138:	4632      	mov	r2, r6
 808213a:	a802      	add	r0, sp, #8
        CellularSignalHal sig_hal = {0};
 808213c:	e9cd 5500 	strd	r5, r5, [sp]
        cellular_signal_t sigext = {0};
 8082140:	f002 fb28 	bl	8084794 <memset>
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8082144:	4668      	mov	r0, sp
 8082146:	a902      	add	r1, sp, #8
        sigext.size = sizeof(sigext);
 8082148:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 808214c:	f7ff fc50 	bl	80819f0 <cellular_signal>
 8082150:	b110      	cbz	r0, 8082158 <_ZN5spark13CellularClass4RSSIEv+0x58>
            sig.rssi = 1;
 8082152:	2301      	movs	r3, #1
 8082154:	60a3      	str	r3, [r4, #8]
            return sig;
 8082156:	e7eb      	b.n	8082130 <_ZN5spark13CellularClass4RSSIEv+0x30>
        sig.rssi = sig_hal.rssi;
 8082158:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
 808215a:	9a01      	ldr	r2, [sp, #4]
        sig.rssi = sig_hal.rssi;
 808215c:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
 808215e:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
 8082160:	b90b      	cbnz	r3, 8082166 <_ZN5spark13CellularClass4RSSIEv+0x66>
            sig.rssi = 2;
 8082162:	2302      	movs	r3, #2
 8082164:	60a3      	str	r3, [r4, #8]
        sig.fromHalCellularSignal(sigext);
 8082166:	4620      	mov	r0, r4
 8082168:	a902      	add	r1, sp, #8
 808216a:	f000 f8a2 	bl	80822b2 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
 808216e:	e7df      	b.n	8082130 <_ZN5spark13CellularClass4RSSIEv+0x30>
 8082170:	08084e40 	.word	0x08084e40

08082174 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8082174:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8082176:	2428      	movs	r4, #40	; 0x28
 8082178:	4b07      	ldr	r3, [pc, #28]	; (8082198 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 808217a:	4622      	mov	r2, r4
 808217c:	4618      	mov	r0, r3
 808217e:	2100      	movs	r1, #0
 8082180:	f002 fb08 	bl	8084794 <memset>
        cid = -1;
 8082184:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8082188:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 808218a:	2204      	movs	r2, #4
 808218c:	4b03      	ldr	r3, [pc, #12]	; (808219c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 808218e:	8004      	strh	r4, [r0, #0]
 8082190:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8082192:	4a03      	ldr	r2, [pc, #12]	; (80821a0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 8082194:	601a      	str	r2, [r3, #0]
 8082196:	bd10      	pop	{r4, pc}
 8082198:	20000208 	.word	0x20000208
 808219c:	20000200 	.word	0x20000200
 80821a0:	08084e0c 	.word	0x08084e0c

080821a4 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 80821a4:	4770      	bx	lr

080821a6 <_ZNK14CellularSignal19getAccessTechnologyEv>:
#pragma GCC diagnostic pop

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 80821a6:	7d00      	ldrb	r0, [r0, #20]
 80821a8:	4770      	bx	lr

080821aa <_ZN14CellularSignalD0Ev>:
 80821aa:	b510      	push	{r4, lr}
 80821ac:	4604      	mov	r4, r0
 80821ae:	2128      	movs	r1, #40	; 0x28
 80821b0:	f001 fb19 	bl	80837e6 <_ZdlPvj>
 80821b4:	4620      	mov	r0, r4
 80821b6:	bd10      	pop	{r4, pc}

080821b8 <_ZNK14CellularSignal11getStrengthEv>:

float CellularSignal::getStrength() const
{
 80821b8:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 80821ba:	7d03      	ldrb	r3, [r0, #20]
 80821bc:	b15b      	cbz	r3, 80821d6 <_ZNK14CellularSignal11getStrengthEv+0x1e>
 80821be:	69c0      	ldr	r0, [r0, #28]
 80821c0:	2800      	cmp	r0, #0
 80821c2:	db08      	blt.n	80821d6 <_ZNK14CellularSignal11getStrengthEv+0x1e>
        return (float)sig_.strength / 65535.0f * 100.0f;
 80821c4:	f002 f838 	bl	8084238 <__aeabi_i2f>
 80821c8:	4904      	ldr	r1, [pc, #16]	; (80821dc <_ZNK14CellularSignal11getStrengthEv+0x24>)
 80821ca:	f002 f93d 	bl	8084448 <__aeabi_fdiv>
 80821ce:	4904      	ldr	r1, [pc, #16]	; (80821e0 <_ZNK14CellularSignal11getStrengthEv+0x28>)
 80821d0:	f002 f886 	bl	80842e0 <__aeabi_fmul>
    }

    return -1.0f;
}
 80821d4:	bd08      	pop	{r3, pc}
    return -1.0f;
 80821d6:	4803      	ldr	r0, [pc, #12]	; (80821e4 <_ZNK14CellularSignal11getStrengthEv+0x2c>)
 80821d8:	e7fc      	b.n	80821d4 <_ZNK14CellularSignal11getStrengthEv+0x1c>
 80821da:	bf00      	nop
 80821dc:	477fff00 	.word	0x477fff00
 80821e0:	42c80000 	.word	0x42c80000
 80821e4:	bf800000 	.word	0xbf800000

080821e8 <_ZNK14CellularSignal16getStrengthValueEv>:

float CellularSignal::getStrengthValue() const
{
 80821e8:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 80821ea:	7d03      	ldrb	r3, [r0, #20]
 80821ec:	b14b      	cbz	r3, 8082202 <_ZNK14CellularSignal16getStrengthValueEv+0x1a>
 80821ee:	6980      	ldr	r0, [r0, #24]
 80821f0:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80821f4:	d005      	beq.n	8082202 <_ZNK14CellularSignal16getStrengthValueEv+0x1a>
        return (float)sig_.rssi / 100.0f;
 80821f6:	f002 f81f 	bl	8084238 <__aeabi_i2f>
 80821fa:	4903      	ldr	r1, [pc, #12]	; (8082208 <_ZNK14CellularSignal16getStrengthValueEv+0x20>)
 80821fc:	f002 f924 	bl	8084448 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8082200:	bd08      	pop	{r3, pc}
    return 0.0f;
 8082202:	2000      	movs	r0, #0
 8082204:	e7fc      	b.n	8082200 <_ZNK14CellularSignal16getStrengthValueEv+0x18>
 8082206:	bf00      	nop
 8082208:	42c80000 	.word	0x42c80000

0808220c <_ZNK14CellularSignal10getQualityEv>:

float CellularSignal::getQuality() const
{
 808220c:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 808220e:	7d03      	ldrb	r3, [r0, #20]
 8082210:	b15b      	cbz	r3, 808222a <_ZNK14CellularSignal10getQualityEv+0x1e>
 8082212:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8082214:	2800      	cmp	r0, #0
 8082216:	db08      	blt.n	808222a <_ZNK14CellularSignal10getQualityEv+0x1e>
        return (float)sig_.quality / 65535.0f * 100.0f;
 8082218:	f002 f80e 	bl	8084238 <__aeabi_i2f>
 808221c:	4904      	ldr	r1, [pc, #16]	; (8082230 <_ZNK14CellularSignal10getQualityEv+0x24>)
 808221e:	f002 f913 	bl	8084448 <__aeabi_fdiv>
 8082222:	4904      	ldr	r1, [pc, #16]	; (8082234 <_ZNK14CellularSignal10getQualityEv+0x28>)
 8082224:	f002 f85c 	bl	80842e0 <__aeabi_fmul>
    }

    return -1.0f;
}
 8082228:	bd08      	pop	{r3, pc}
    return -1.0f;
 808222a:	4803      	ldr	r0, [pc, #12]	; (8082238 <_ZNK14CellularSignal10getQualityEv+0x2c>)
 808222c:	e7fc      	b.n	8082228 <_ZNK14CellularSignal10getQualityEv+0x1c>
 808222e:	bf00      	nop
 8082230:	477fff00 	.word	0x477fff00
 8082234:	42c80000 	.word	0x42c80000
 8082238:	bf800000 	.word	0xbf800000

0808223c <_ZNK14CellularSignal15getQualityValueEv>:

float CellularSignal::getQualityValue() const
{
 808223c:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 808223e:	7d03      	ldrb	r3, [r0, #20]
 8082240:	b14b      	cbz	r3, 8082256 <_ZNK14CellularSignal15getQualityValueEv+0x1a>
 8082242:	6a00      	ldr	r0, [r0, #32]
 8082244:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8082248:	d005      	beq.n	8082256 <_ZNK14CellularSignal15getQualityValueEv+0x1a>
        return (float)sig_.qual / 100.0f;
 808224a:	f001 fff5 	bl	8084238 <__aeabi_i2f>
 808224e:	4903      	ldr	r1, [pc, #12]	; (808225c <_ZNK14CellularSignal15getQualityValueEv+0x20>)
 8082250:	f002 f8fa 	bl	8084448 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8082254:	bd08      	pop	{r3, pc}
    return 0.0f;
 8082256:	2000      	movs	r0, #0
 8082258:	e7fc      	b.n	8082254 <_ZNK14CellularSignal15getQualityValueEv+0x18>
 808225a:	bf00      	nop
 808225c:	42c80000 	.word	0x42c80000

08082260 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
 8082260:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
 8082262:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
 8082264:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
 8082266:	da0a      	bge.n	808227e <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
 8082268:	212d      	movs	r1, #45	; 0x2d
 808226a:	f000 fce3 	bl	8082c34 <_ZN5Print5printEc>
 808226e:	4605      	mov	r5, r0
            val = -n;
 8082270:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8082272:	220a      	movs	r2, #10
 8082274:	4630      	mov	r0, r6
 8082276:	f000 fce0 	bl	8082c3a <_ZN5Print11printNumberEmh>
    }
}
 808227a:	4428      	add	r0, r5
 808227c:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
 808227e:	4621      	mov	r1, r4
        size_t t = 0;
 8082280:	2500      	movs	r5, #0
 8082282:	e7f6      	b.n	8082272 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

08082284 <_ZNK14CellularSignal7printToER5Print>:

// TODO: remove once rssi/qual are removed
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
size_t CellularSignal::printTo(Print& p) const
{
 8082284:	b570      	push	{r4, r5, r6, lr}
 8082286:	460c      	mov	r4, r1
 8082288:	4605      	mov	r5, r0
 808228a:	6881      	ldr	r1, [r0, #8]
 808228c:	4620      	mov	r0, r4
 808228e:	f7ff ffe7 	bl	8082260 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
 8082292:	212c      	movs	r1, #44	; 0x2c
 8082294:	4606      	mov	r6, r0
 8082296:	4620      	mov	r0, r4
 8082298:	f000 fccc 	bl	8082c34 <_ZN5Print5printEc>
 808229c:	68e9      	ldr	r1, [r5, #12]
 808229e:	4406      	add	r6, r0
size_t Print::print(T n, int base)
 80822a0:	4620      	mov	r0, r4
 80822a2:	f7ff ffdd 	bl	8082260 <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
    n += p.print((*this).qual, DEC);
    return n;
}
 80822a6:	4430      	add	r0, r6
 80822a8:	bd70      	pop	{r4, r5, r6, pc}

080822aa <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 80822aa:	f1a0 0004 	sub.w	r0, r0, #4
 80822ae:	f7ff bfe9 	b.w	8082284 <_ZNK14CellularSignal7printToER5Print>

080822b2 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
 80822b2:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 80822b4:	460d      	mov	r5, r1
 80822b6:	f100 0410 	add.w	r4, r0, #16
 80822ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80822bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80822be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80822c2:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80822c6:	2001      	movs	r0, #1
 80822c8:	bd30      	pop	{r4, r5, pc}

080822ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80822ca:	4770      	bx	lr

080822cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80822cc:	2000      	movs	r0, #0
 80822ce:	4770      	bx	lr

080822d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80822d0:	b510      	push	{r4, lr}
 80822d2:	4604      	mov	r4, r0
 80822d4:	2110      	movs	r1, #16
 80822d6:	f001 fa86 	bl	80837e6 <_ZdlPvj>
 80822da:	4620      	mov	r0, r4
 80822dc:	bd10      	pop	{r4, pc}

080822de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80822de:	b508      	push	{r3, lr}
      { delete this; }
 80822e0:	f7ff fff6 	bl	80822d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80822e4:	bd08      	pop	{r3, pc}

080822e6 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80822e6:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80822e8:	b530      	push	{r4, r5, lr}
        type_(type) {
 80822ea:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80822ee:	6002      	str	r2, [r0, #0]
 80822f0:	8084      	strh	r4, [r0, #4]
 80822f2:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80822f4:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80822f6:	680c      	ldr	r4, [r1, #0]
 80822f8:	8085      	strh	r5, [r0, #4]
 80822fa:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80822fc:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80822fe:	bd30      	pop	{r4, r5, pc}

08082300 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8082300:	b510      	push	{r4, lr}
 8082302:	4604      	mov	r4, r0
    free((void*)msg_);
 8082304:	6800      	ldr	r0, [r0, #0]
 8082306:	f7ff fe59 	bl	8081fbc <free>
}
 808230a:	4620      	mov	r0, r4
 808230c:	bd10      	pop	{r4, pc}

0808230e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 808230e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8082310:	68c4      	ldr	r4, [r0, #12]
 8082312:	b1f4      	cbz	r4, 8082352 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
 8082314:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8082316:	2b02      	cmp	r3, #2
 8082318:	d103      	bne.n	8082322 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 808231a:	f104 000c 	add.w	r0, r4, #12
 808231e:	f7ff ffef 	bl	8082300 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 8082322:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 8082324:	b135      	cbz	r5, 8082334 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 8082326:	4628      	mov	r0, r5
 8082328:	f7ff f899 	bl	808145e <_ZNSt14_Function_baseD1Ev>
 808232c:	2110      	movs	r1, #16
 808232e:	4628      	mov	r0, r5
 8082330:	f001 fa59 	bl	80837e6 <_ZdlPvj>
 8082334:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8082336:	b135      	cbz	r5, 8082346 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8082338:	4628      	mov	r0, r5
 808233a:	f7ff f890 	bl	808145e <_ZNSt14_Function_baseD1Ev>
 808233e:	2110      	movs	r1, #16
 8082340:	4628      	mov	r0, r5
 8082342:	f001 fa50 	bl	80837e6 <_ZdlPvj>
 8082346:	4620      	mov	r0, r4
 8082348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808234c:	2114      	movs	r1, #20
 808234e:	f001 ba4a 	b.w	80837e6 <_ZdlPvj>
 8082352:	bd38      	pop	{r3, r4, r5, pc}

08082354 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8082354:	b510      	push	{r4, lr}
 8082356:	b088      	sub	sp, #32
 8082358:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 808235a:	4668      	mov	r0, sp
 808235c:	f000 fcf7 	bl	8082d4e <_ZN6StringC1EPKc>
    return (*fn)(p);
 8082360:	4669      	mov	r1, sp
 8082362:	a804      	add	r0, sp, #16
 8082364:	f000 fd15 	bl	8082d92 <_ZN6StringC1ERKS_>
 8082368:	a804      	add	r0, sp, #16
 808236a:	47a0      	blx	r4
 808236c:	4604      	mov	r4, r0
 808236e:	a804      	add	r0, sp, #16
 8082370:	f000 fca3 	bl	8082cba <_ZN6StringD1Ev>
    String p(param);
 8082374:	4668      	mov	r0, sp
 8082376:	f000 fca0 	bl	8082cba <_ZN6StringD1Ev>
}
 808237a:	4620      	mov	r0, r4
 808237c:	b008      	add	sp, #32
 808237e:	bd10      	pop	{r4, pc}

08082380 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8082380:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8082382:	2300      	movs	r3, #0
         size = sizeof(*this);
 8082384:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 8082386:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 808238a:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808238c:	4669      	mov	r1, sp
 808238e:	461a      	mov	r2, r3
 8082390:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 8082392:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 8082396:	f8ad 4000 	strh.w	r4, [sp]
 808239a:	f7ff fd5f 	bl	8081e5c <spark_function>
}
 808239e:	b004      	add	sp, #16
 80823a0:	bd10      	pop	{r4, pc}

080823a2 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:
    opts.size = sizeof(opts);
 80823a2:	2308      	movs	r3, #8

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 80823a4:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
 80823a6:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
 80823aa:	6803      	ldr	r3, [r0, #0]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 80823ac:	2100      	movs	r1, #0
    opts.flags = flags_;
 80823ae:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
 80823b2:	7a03      	ldrb	r3, [r0, #8]
 80823b4:	f88d 3003 	strb.w	r3, [sp, #3]
    opts.timeout = timeout_;
 80823b8:	6843      	ldr	r3, [r0, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 80823ba:	4668      	mov	r0, sp
    opts.timeout = timeout_;
 80823bc:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 80823be:	f7ff fd9d 	bl	8081efc <spark_cloud_disconnect>
}
 80823c2:	b003      	add	sp, #12
 80823c4:	f85d fb04 	ldr.w	pc, [sp], #4

080823c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80823c8:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 80823ca:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80823cc:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80823ce:	b17c      	cbz	r4, 80823f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80823d0:	6863      	ldr	r3, [r4, #4]
 80823d2:	3b01      	subs	r3, #1
 80823d4:	6063      	str	r3, [r4, #4]
 80823d6:	b95b      	cbnz	r3, 80823f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80823d8:	6823      	ldr	r3, [r4, #0]
 80823da:	4620      	mov	r0, r4
 80823dc:	689b      	ldr	r3, [r3, #8]
 80823de:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80823e0:	68a3      	ldr	r3, [r4, #8]
 80823e2:	3b01      	subs	r3, #1
 80823e4:	60a3      	str	r3, [r4, #8]
 80823e6:	b91b      	cbnz	r3, 80823f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80823e8:	6823      	ldr	r3, [r4, #0]
 80823ea:	4620      	mov	r0, r4
 80823ec:	68db      	ldr	r3, [r3, #12]
 80823ee:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80823f0:	4628      	mov	r0, r5
 80823f2:	bd38      	pop	{r3, r4, r5, pc}

080823f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80823f4:	680b      	ldr	r3, [r1, #0]
 80823f6:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80823f8:	b113      	cbz	r3, 8082400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80823fa:	685a      	ldr	r2, [r3, #4]
 80823fc:	3201      	adds	r2, #1
 80823fe:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
 8082400:	4770      	bx	lr

08082402 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8082402:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082404:	460e      	mov	r6, r1
 8082406:	4604      	mov	r4, r0
 8082408:	f856 3b04 	ldr.w	r3, [r6], #4
 808240c:	460d      	mov	r5, r1
 808240e:	a801      	add	r0, sp, #4
 8082410:	4631      	mov	r1, r6
 8082412:	9300      	str	r3, [sp, #0]
 8082414:	f7ff ffee 	bl	80823f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8082418:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 808241a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 808241c:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 808241e:	2300      	movs	r3, #0
	_M_pi = __tmp;
 8082420:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 8082422:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 8082424:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8082426:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 8082428:	f7ff ffce 	bl	80823c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808242c:	4630      	mov	r0, r6
 808242e:	f7ff ffcb 	bl	80823c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 8082432:	4628      	mov	r0, r5
 8082434:	2108      	movs	r1, #8
 8082436:	f001 f9d6 	bl	80837e6 <_ZdlPvj>
        return p;
    }
 808243a:	4620      	mov	r0, r4
 808243c:	b002      	add	sp, #8
 808243e:	bd70      	pop	{r4, r5, r6, pc}

08082440 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 8082440:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082442:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 8082444:	460b      	mov	r3, r1
 8082446:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082448:	c803      	ldmia	r0, {r0, r1}
 808244a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 808244e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8082452:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8082456:	e894 0003 	ldmia.w	r4, {r0, r1}
 808245a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 808245e:	b002      	add	sp, #8
 8082460:	bd10      	pop	{r4, pc}

08082462 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 8082462:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 8082464:	b510      	push	{r4, lr}
      if (_M_empty())
 8082466:	b90a      	cbnz	r2, 808246c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8082468:	f001 f9c3 	bl	80837f2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808246c:	68c3      	ldr	r3, [r0, #12]
    }
 808246e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082472:	4718      	bx	r3

08082474 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082474:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8082476:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8082478:	f100 0110 	add.w	r1, r0, #16
 808247c:	f7ff fff1 	bl	8082462 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 8082480:	bd08      	pop	{r3, pc}

08082482 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 8082482:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 8082484:	b510      	push	{r4, lr}
      if (_M_empty())
 8082486:	b90a      	cbnz	r2, 808248c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8082488:	f001 f9b3 	bl	80837f2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808248c:	68c3      	ldr	r3, [r0, #12]
    }
 808248e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082492:	4718      	bx	r3

08082494 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082494:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8082496:	6800      	ldr	r0, [r0, #0]
 8082498:	f100 0110 	add.w	r1, r0, #16
 808249c:	f7ff fff1 	bl	8082482 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80824a0:	bd08      	pop	{r3, pc}
	...

080824a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80824a4:	b538      	push	{r3, r4, r5, lr}
 80824a6:	2300      	movs	r3, #0
 80824a8:	4604      	mov	r4, r0
 80824aa:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80824ac:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80824ae:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80824b0:	f7fd fdfb 	bl	80800aa <_Znwj>
 80824b4:	b128      	cbz	r0, 80824c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80824b6:	2301      	movs	r3, #1
 80824b8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80824bc:	4b02      	ldr	r3, [pc, #8]	; (80824c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80824be:	60c5      	str	r5, [r0, #12]
 80824c0:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80824c2:	6020      	str	r0, [r4, #0]
	}
 80824c4:	4620      	mov	r0, r4
 80824c6:	bd38      	pop	{r3, r4, r5, pc}
 80824c8:	08084e74 	.word	0x08084e74

080824cc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80824cc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80824ce:	2300      	movs	r3, #0
 80824d0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80824d2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80824d4:	4604      	mov	r4, r0
 80824d6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80824d8:	b12b      	cbz	r3, 80824e6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80824da:	2202      	movs	r2, #2
 80824dc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80824de:	68eb      	ldr	r3, [r5, #12]
 80824e0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80824e2:	68ab      	ldr	r3, [r5, #8]
 80824e4:	60a3      	str	r3, [r4, #8]
    }
 80824e6:	4620      	mov	r0, r4
 80824e8:	bd38      	pop	{r3, r4, r5, pc}
	...

080824ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80824ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80824ee:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80824f0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80824f2:	4668      	mov	r0, sp
 80824f4:	f7ff fef7 	bl	80822e6 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80824f8:	f04f 0302 	mov.w	r3, #2
 80824fc:	e8d4 2f4f 	ldrexb	r2, [r4]
 8082500:	2a00      	cmp	r2, #0
 8082502:	d103      	bne.n	808250c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 8082504:	e8c4 3f41 	strexb	r1, r3, [r4]
 8082508:	2900      	cmp	r1, #0
 808250a:	d1f7      	bne.n	80824fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 808250c:	d125      	bne.n	808255a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 808250e:	f104 050c 	add.w	r5, r4, #12
 8082512:	4669      	mov	r1, sp
 8082514:	4628      	mov	r0, r5
 8082516:	f7ff fee6 	bl	80822e6 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 808251a:	2301      	movs	r3, #1
 808251c:	f3bf 8f5b 	dmb	ish
 8082520:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 8082522:	2000      	movs	r0, #0
 8082524:	f3bf 8f5b 	dmb	ish
 8082528:	f104 0308 	add.w	r3, r4, #8
 808252c:	e853 6f00 	ldrex	r6, [r3]
 8082530:	e843 0200 	strex	r2, r0, [r3]
 8082534:	2a00      	cmp	r2, #0
 8082536:	d1f9      	bne.n	808252c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 8082538:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 808253c:	b16e      	cbz	r6, 808255a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 808253e:	f7ff fc4f 	bl	8081de0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 8082542:	b178      	cbz	r0, 8082564 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8082544:	4629      	mov	r1, r5
 8082546:	4630      	mov	r0, r6
 8082548:	f7ff ff8b 	bl	8082462 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 808254c:	4630      	mov	r0, r6
 808254e:	f7fe ff86 	bl	808145e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 8082552:	2110      	movs	r1, #16
 8082554:	4630      	mov	r0, r6
 8082556:	f001 f946 	bl	80837e6 <_ZdlPvj>
        p_->setError(std::move(error));
 808255a:	4668      	mov	r0, sp
 808255c:	f7ff fed0 	bl	8082300 <_ZN8particle5ErrorD1Ev>
    }
 8082560:	b009      	add	sp, #36	; 0x24
 8082562:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8082564:	4631      	mov	r1, r6
 8082566:	a802      	add	r0, sp, #8
 8082568:	f7ff ffb0 	bl	80824cc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 808256c:	68e0      	ldr	r0, [r4, #12]
 808256e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8082572:	b108      	cbz	r0, 8082578 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 8082574:	f002 f94c 	bl	8084810 <strdup>
        type_(type) {
 8082578:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808257a:	2010      	movs	r0, #16
 808257c:	f8ad 501c 	strh.w	r5, [sp, #28]
 8082580:	f7fd fd93 	bl	80800aa <_Znwj>
 8082584:	4605      	mov	r5, r0
 8082586:	b1e8      	cbz	r0, 80825c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 8082588:	2700      	movs	r7, #0
 808258a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808258c:	2018      	movs	r0, #24
 808258e:	f7fd fd8c 	bl	80800aa <_Znwj>
 8082592:	4604      	mov	r4, r0
 8082594:	b188      	cbz	r0, 80825ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 8082596:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8082598:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 808259a:	a802      	add	r0, sp, #8
 808259c:	f7ff ff50 	bl	8082440 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80825a0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80825a2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80825a4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80825a6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80825a8:	9204      	str	r2, [sp, #16]
 80825aa:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80825ac:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80825ae:	60e3      	str	r3, [r4, #12]
 80825b0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80825b4:	9205      	str	r2, [sp, #20]
 80825b6:	f7ff fe96 	bl	80822e6 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80825ba:	4b08      	ldr	r3, [pc, #32]	; (80825dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80825bc:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80825be:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80825c0:	4b07      	ldr	r3, [pc, #28]	; (80825e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80825c2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80825c4:	a806      	add	r0, sp, #24
 80825c6:	f7ff fe9b 	bl	8082300 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80825ca:	a802      	add	r0, sp, #8
 80825cc:	f7fe ff47 	bl	808145e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80825d0:	2200      	movs	r2, #0
 80825d2:	4629      	mov	r1, r5
 80825d4:	4803      	ldr	r0, [pc, #12]	; (80825e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80825d6:	f7ff fc0b 	bl	8081df0 <application_thread_invoke>
 80825da:	e7b7      	b.n	808254c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80825dc:	08082475 	.word	0x08082475
 80825e0:	0808270d 	.word	0x0808270d
 80825e4:	08082033 	.word	0x08082033

080825e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80825e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80825ec:	b08a      	sub	sp, #40	; 0x28
 80825ee:	4605      	mov	r5, r0
 80825f0:	460c      	mov	r4, r1
 80825f2:	4617      	mov	r7, r2
 80825f4:	4698      	mov	r8, r3
 80825f6:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80825fa:	f7ff fc47 	bl	8081e8c <spark_cloud_flag_connected>
 80825fe:	ae07      	add	r6, sp, #28
    if (!connected()) {
 8082600:	4682      	mov	sl, r0
 8082602:	bb38      	cbnz	r0, 8082654 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 8082604:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8082608:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808260a:	a905      	add	r1, sp, #20
 808260c:	4630      	mov	r0, r6
 808260e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8082612:	f7ff fe68 	bl	80822e6 <_ZN8particle5ErrorC1EOS0_>
 8082616:	2014      	movs	r0, #20
 8082618:	f7fd fd47 	bl	80800aa <_Znwj>
 808261c:	4604      	mov	r4, r0
 808261e:	b148      	cbz	r0, 8082634 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8082620:	2302      	movs	r3, #2
 8082622:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8082624:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8082626:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808262a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 808262c:	4631      	mov	r1, r6
 808262e:	300c      	adds	r0, #12
 8082630:	f7ff fe59 	bl	80822e6 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8082634:	4628      	mov	r0, r5
	: __shared_count(__p)
 8082636:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8082638:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 808263c:	f7ff ff32 	bl	80824a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8082640:	4630      	mov	r0, r6
 8082642:	f7ff fe5d 	bl	8082300 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 8082646:	a805      	add	r0, sp, #20
 8082648:	f7ff fe5a 	bl	8082300 <_ZN8particle5ErrorD1Ev>
}
 808264c:	4628      	mov	r0, r5
 808264e:	b00a      	add	sp, #40	; 0x28
 8082650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8082654:	230c      	movs	r3, #12
 8082656:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 808265a:	2014      	movs	r0, #20
 808265c:	e9cd aa08 	strd	sl, sl, [sp, #32]
 8082660:	9307      	str	r3, [sp, #28]
 8082662:	f7fd fd22 	bl	80800aa <_Znwj>
 8082666:	4601      	mov	r1, r0
 8082668:	b128      	cbz	r0, 8082676 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808266a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 808266e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8082672:	f880 a001 	strb.w	sl, [r0, #1]
 8082676:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8082678:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 808267a:	f7ff ff13 	bl	80824a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 808267e:	4b22      	ldr	r3, [pc, #136]	; (8082708 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8082680:	2008      	movs	r0, #8
 8082682:	9308      	str	r3, [sp, #32]
 8082684:	f7fd fd11 	bl	80800aa <_Znwj>
 8082688:	4682      	mov	sl, r0
 808268a:	b128      	cbz	r0, 8082698 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 808268c:	9b03      	ldr	r3, [sp, #12]
 808268e:	a904      	add	r1, sp, #16
 8082690:	f840 3b04 	str.w	r3, [r0], #4
 8082694:	f7ff feae 	bl	80823f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8082698:	4642      	mov	r2, r8
 808269a:	4639      	mov	r1, r7
 808269c:	4620      	mov	r0, r4
 808269e:	9600      	str	r6, [sp, #0]
 80826a0:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80826a4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80826a8:	f7ff fc00 	bl	8081eac <spark_send_event>
 80826ac:	b9b8      	cbnz	r0, 80826de <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80826ae:	9b03      	ldr	r3, [sp, #12]
 80826b0:	785b      	ldrb	r3, [r3, #1]
 80826b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80826b6:	b993      	cbnz	r3, 80826de <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80826b8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80826bc:	a905      	add	r1, sp, #20
 80826be:	a803      	add	r0, sp, #12
 80826c0:	9205      	str	r2, [sp, #20]
 80826c2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80826c6:	f7ff ff11 	bl	80824ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80826ca:	a805      	add	r0, sp, #20
 80826cc:	f7ff fe18 	bl	8082300 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80826d0:	a805      	add	r0, sp, #20
 80826d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80826d4:	f7ff fe95 	bl	8082402 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80826d8:	a806      	add	r0, sp, #24
 80826da:	f7ff fe75 	bl	80823c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80826de:	9b03      	ldr	r3, [sp, #12]
 80826e0:	a904      	add	r1, sp, #16
 80826e2:	a806      	add	r0, sp, #24
 80826e4:	9305      	str	r3, [sp, #20]
 80826e6:	f7ff fe85 	bl	80823f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80826ea:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80826ec:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80826ee:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80826f0:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80826f2:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80826f4:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80826f6:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80826f8:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80826fa:	f7ff fe65 	bl	80823c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80826fe:	a804      	add	r0, sp, #16
 8082700:	f7ff fe62 	bl	80823c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 8082704:	e7a2      	b.n	808264c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 8082706:	bf00      	nop
 8082708:	080827d1 	.word	0x080827d1

0808270c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 808270c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808270e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082710:	4605      	mov	r5, r0
	  switch (__op)
 8082712:	d007      	beq.n	8082724 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 8082714:	2a03      	cmp	r2, #3
 8082716:	d018      	beq.n	808274a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 8082718:	2a01      	cmp	r2, #1
 808271a:	d101      	bne.n	8082720 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 808271c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808271e:	6003      	str	r3, [r0, #0]
	}
 8082720:	2000      	movs	r0, #0
 8082722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8082724:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 8082726:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 8082728:	f7fd fcbf 	bl	80800aa <_Znwj>
 808272c:	4604      	mov	r4, r0
 808272e:	b150      	cbz	r0, 8082746 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8082730:	4631      	mov	r1, r6
 8082732:	f7ff fecb 	bl	80824cc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 8082736:	6930      	ldr	r0, [r6, #16]
 8082738:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 808273c:	b108      	cbz	r0, 8082742 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 808273e:	f002 f867 	bl	8084810 <strdup>
        type_(type) {
 8082742:	6120      	str	r0, [r4, #16]
 8082744:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 8082746:	602c      	str	r4, [r5, #0]
	}
 8082748:	e7ea      	b.n	8082720 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 808274a:	6804      	ldr	r4, [r0, #0]
 808274c:	2c00      	cmp	r4, #0
 808274e:	d0e7      	beq.n	8082720 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 8082750:	f104 0010 	add.w	r0, r4, #16
 8082754:	f7ff fdd4 	bl	8082300 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8082758:	4620      	mov	r0, r4
 808275a:	f7fe fe80 	bl	808145e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 808275e:	2118      	movs	r1, #24
 8082760:	4620      	mov	r0, r4
 8082762:	f001 f840 	bl	80837e6 <_ZdlPvj>
 8082766:	e7db      	b.n	8082720 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

08082768 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8082768:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 808276a:	2300      	movs	r3, #0
 808276c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 808276e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8082770:	4604      	mov	r4, r0
 8082772:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8082774:	b12b      	cbz	r3, 8082782 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8082776:	2202      	movs	r2, #2
 8082778:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808277a:	68eb      	ldr	r3, [r5, #12]
 808277c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808277e:	68ab      	ldr	r3, [r5, #8]
 8082780:	60a3      	str	r3, [r4, #8]
    }
 8082782:	4620      	mov	r0, r4
 8082784:	bd38      	pop	{r3, r4, r5, pc}

08082786 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 8082786:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8082788:	b570      	push	{r4, r5, r6, lr}
 808278a:	4604      	mov	r4, r0
	  switch (__op)
 808278c:	d007      	beq.n	808279e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 808278e:	2a03      	cmp	r2, #3
 8082790:	d012      	beq.n	80827b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 8082792:	2a01      	cmp	r2, #1
 8082794:	d101      	bne.n	808279a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 8082796:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8082798:	6003      	str	r3, [r0, #0]
	}
 808279a:	2000      	movs	r0, #0
 808279c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 808279e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80827a0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80827a2:	f7fd fc82 	bl	80800aa <_Znwj>
 80827a6:	4605      	mov	r5, r0
 80827a8:	b120      	cbz	r0, 80827b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80827aa:	4631      	mov	r1, r6
 80827ac:	f7ff ffdc 	bl	8082768 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80827b0:	7c33      	ldrb	r3, [r6, #16]
 80827b2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80827b4:	6025      	str	r5, [r4, #0]
	}
 80827b6:	e7f0      	b.n	808279a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80827b8:	6804      	ldr	r4, [r0, #0]
 80827ba:	2c00      	cmp	r4, #0
 80827bc:	d0ed      	beq.n	808279a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80827be:	4620      	mov	r0, r4
 80827c0:	f7fe fe4d 	bl	808145e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80827c4:	2114      	movs	r1, #20
 80827c6:	4620      	mov	r0, r4
 80827c8:	f001 f80d 	bl	80837e6 <_ZdlPvj>
 80827cc:	e7e5      	b.n	808279a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080827d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80827d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80827d2:	4604      	mov	r4, r0
 80827d4:	b089      	sub	sp, #36	; 0x24
 80827d6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80827d8:	a801      	add	r0, sp, #4
 80827da:	4611      	mov	r1, r2
 80827dc:	f7ff fe11 	bl	8082402 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80827e0:	b1a4      	cbz	r4, 808280c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80827e2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80827e4:	b11d      	cbz	r5, 80827ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80827e6:	4628      	mov	r0, r5
 80827e8:	f002 f812 	bl	8084810 <strdup>
 80827ec:	4605      	mov	r5, r0
 80827ee:	a801      	add	r0, sp, #4
 80827f0:	a903      	add	r1, sp, #12
        type_(type) {
 80827f2:	9503      	str	r5, [sp, #12]
 80827f4:	f8ad 4010 	strh.w	r4, [sp, #16]
 80827f8:	f7ff fe78 	bl	80824ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80827fc:	a803      	add	r0, sp, #12
 80827fe:	f7ff fd7f 	bl	8082300 <_ZN8particle5ErrorD1Ev>
 8082802:	a802      	add	r0, sp, #8
 8082804:	f7ff fde0 	bl	80823c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 8082808:	b009      	add	sp, #36	; 0x24
 808280a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 808280c:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 808280e:	9d01      	ldr	r5, [sp, #4]
 8082810:	e8d5 2f4f 	ldrexb	r2, [r5]
 8082814:	2a00      	cmp	r2, #0
 8082816:	d103      	bne.n	8082820 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 8082818:	e8c5 3f41 	strexb	r1, r3, [r5]
 808281c:	2900      	cmp	r1, #0
 808281e:	d1f7      	bne.n	8082810 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 8082820:	d1ef      	bne.n	8082802 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 8082822:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 8082824:	f3bf 8f5b 	dmb	ish
 8082828:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 808282a:	f3bf 8f5b 	dmb	ish
 808282e:	1d2b      	adds	r3, r5, #4
 8082830:	e853 6f00 	ldrex	r6, [r3]
 8082834:	e843 4200 	strex	r2, r4, [r3]
 8082838:	2a00      	cmp	r2, #0
 808283a:	d1f9      	bne.n	8082830 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 808283c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 8082840:	2e00      	cmp	r6, #0
 8082842:	d0de      	beq.n	8082802 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 8082844:	4620      	mov	r0, r4
 8082846:	f7ff facb 	bl	8081de0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 808284a:	4607      	mov	r7, r0
 808284c:	b160      	cbz	r0, 8082868 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808284e:	4630      	mov	r0, r6
 8082850:	f105 010c 	add.w	r1, r5, #12
 8082854:	f7ff fe15 	bl	8082482 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 8082858:	4630      	mov	r0, r6
 808285a:	f7fe fe00 	bl	808145e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 808285e:	2110      	movs	r1, #16
 8082860:	4630      	mov	r0, r6
 8082862:	f000 ffc0 	bl	80837e6 <_ZdlPvj>
 8082866:	e7cc      	b.n	8082802 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8082868:	4631      	mov	r1, r6
 808286a:	a803      	add	r0, sp, #12
 808286c:	f7ff ff7c 	bl	8082768 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8082870:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8082872:	2010      	movs	r0, #16
 8082874:	f88d 301c 	strb.w	r3, [sp, #28]
 8082878:	f7fd fc17 	bl	80800aa <_Znwj>
 808287c:	4605      	mov	r5, r0
 808287e:	b1d0      	cbz	r0, 80828b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 8082880:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082882:	2014      	movs	r0, #20
 8082884:	f7fd fc11 	bl	80800aa <_Znwj>
 8082888:	4604      	mov	r4, r0
 808288a:	b178      	cbz	r0, 80828ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 808288c:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 808288e:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8082890:	a803      	add	r0, sp, #12
 8082892:	f7ff fdd5 	bl	8082440 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082896:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8082898:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808289a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808289c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 808289e:	9205      	str	r2, [sp, #20]
 80828a0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80828a2:	60e3      	str	r3, [r4, #12]
 80828a4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80828a8:	9206      	str	r2, [sp, #24]
 80828aa:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80828ac:	4b06      	ldr	r3, [pc, #24]	; (80828c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80828ae:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80828b0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80828b2:	4b06      	ldr	r3, [pc, #24]	; (80828cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80828b4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80828b6:	a803      	add	r0, sp, #12
 80828b8:	f7fe fdd1 	bl	808145e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80828bc:	2200      	movs	r2, #0
 80828be:	4629      	mov	r1, r5
 80828c0:	4803      	ldr	r0, [pc, #12]	; (80828d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80828c2:	f7ff fa95 	bl	8081df0 <application_thread_invoke>
 80828c6:	e7c7      	b.n	8082858 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80828c8:	08082495 	.word	0x08082495
 80828cc:	08082787 	.word	0x08082787
 80828d0:	08082033 	.word	0x08082033

080828d4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80828d4:	4770      	bx	lr

080828d6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80828d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80828d8:	4606      	mov	r6, r0
 80828da:	4615      	mov	r5, r2
 80828dc:	460c      	mov	r4, r1
 80828de:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80828e0:	42bc      	cmp	r4, r7
 80828e2:	d006      	beq.n	80828f2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80828e4:	6833      	ldr	r3, [r6, #0]
 80828e6:	4630      	mov	r0, r6
 80828e8:	689b      	ldr	r3, [r3, #8]
 80828ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80828ee:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80828f0:	e7f6      	b.n	80828e0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80828f2:	4628      	mov	r0, r5
 80828f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080828f6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80828f6:	2200      	movs	r2, #0
 80828f8:	7c00      	ldrb	r0, [r0, #16]
 80828fa:	f7ff b969 	b.w	8081bd0 <hal_i2c_write>

080828fe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80828fe:	2100      	movs	r1, #0
 8082900:	7c00      	ldrb	r0, [r0, #16]
 8082902:	f7ff b96d 	b.w	8081be0 <hal_i2c_available>

08082906 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 8082906:	2100      	movs	r1, #0
 8082908:	7c00      	ldrb	r0, [r0, #16]
 808290a:	f7ff b971 	b.w	8081bf0 <hal_i2c_read>

0808290e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 808290e:	2100      	movs	r1, #0
 8082910:	7c00      	ldrb	r0, [r0, #16]
 8082912:	f7ff b975 	b.w	8081c00 <hal_i2c_peek>

08082916 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 8082916:	2100      	movs	r1, #0
 8082918:	7c00      	ldrb	r0, [r0, #16]
 808291a:	f7ff b979 	b.w	8081c10 <hal_i2c_flush>

0808291e <_ZN7TwoWireD0Ev>:
 808291e:	b510      	push	{r4, lr}
 8082920:	4604      	mov	r4, r0
 8082922:	2114      	movs	r1, #20
 8082924:	f000 ff5f 	bl	80837e6 <_ZdlPvj>
 8082928:	4620      	mov	r0, r4
 808292a:	bd10      	pop	{r4, pc}

0808292c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 808292c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808292e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8082932:	4604      	mov	r4, r0
 8082934:	4608      	mov	r0, r1
 8082936:	2100      	movs	r1, #0
 8082938:	e9c4 1301 	strd	r1, r3, [r4, #4]
 808293c:	4b03      	ldr	r3, [pc, #12]	; (808294c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 808293e:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 8082940:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 8082942:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 8082944:	f7ff f974 	bl	8081c30 <hal_i2c_init>
}
 8082948:	4620      	mov	r0, r4
 808294a:	bd10      	pop	{r4, pc}
 808294c:	08084e90 	.word	0x08084e90

08082950 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8082950:	2300      	movs	r3, #0
 8082952:	7c00      	ldrb	r0, [r0, #16]
 8082954:	461a      	mov	r2, r3
 8082956:	4619      	mov	r1, r3
 8082958:	f7ff b922 	b.w	8081ba0 <hal_i2c_begin>

0808295c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 808295c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 808295e:	2200      	movs	r2, #0
 8082960:	2314      	movs	r3, #20
 8082962:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8082966:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 808296a:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 808296c:	7c00      	ldrb	r0, [r0, #16]
 808296e:	f88d 3008 	strb.w	r3, [sp, #8]
 8082972:	684b      	ldr	r3, [r1, #4]
 8082974:	9303      	str	r3, [sp, #12]
 8082976:	68cb      	ldr	r3, [r1, #12]
 8082978:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 808297a:	7a0b      	ldrb	r3, [r1, #8]
 808297c:	a901      	add	r1, sp, #4
 808297e:	9305      	str	r3, [sp, #20]
 8082980:	f7ff f96e 	bl	8081c60 <hal_i2c_request_ex>
}
 8082984:	b007      	add	sp, #28
 8082986:	f85d fb04 	ldr.w	pc, [sp], #4

0808298a <_ZN7TwoWire11requestFromEhjh>:
{
 808298a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 808298c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808298e:	f88d 1000 	strb.w	r1, [sp]
 8082992:	f04f 0164 	mov.w	r1, #100	; 0x64
 8082996:	bf18      	it	ne
 8082998:	2301      	movne	r3, #1
 808299a:	9103      	str	r1, [sp, #12]
 808299c:	4669      	mov	r1, sp
    size_ = size;
 808299e:	9201      	str	r2, [sp, #4]
 80829a0:	f88d 3008 	strb.w	r3, [sp, #8]
 80829a4:	f7ff ffda 	bl	808295c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80829a8:	b005      	add	sp, #20
 80829aa:	f85d fb04 	ldr.w	pc, [sp], #4

080829ae <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80829ae:	2200      	movs	r2, #0
 80829b0:	7c00      	ldrb	r0, [r0, #16]
 80829b2:	f7ff b8fd 	b.w	8081bb0 <hal_i2c_begin_transmission>

080829b6 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 80829b6:	b2c9      	uxtb	r1, r1
 80829b8:	f7ff bff9 	b.w	80829ae <_ZN7TwoWire17beginTransmissionEh>

080829bc <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80829bc:	2200      	movs	r2, #0
 80829be:	7c00      	ldrb	r0, [r0, #16]
 80829c0:	f7ff b8fe 	b.w	8081bc0 <hal_i2c_end_transmission>

080829c4 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 80829c4:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
 80829c6:	2100      	movs	r1, #0
 80829c8:	7c00      	ldrb	r0, [r0, #16]
 80829ca:	f7ff f939 	bl	8081c40 <hal_i2c_lock>
}
 80829ce:	fab0 f080 	clz	r0, r0
 80829d2:	0940      	lsrs	r0, r0, #5
 80829d4:	bd08      	pop	{r3, pc}

080829d6 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 80829d6:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
 80829d8:	2100      	movs	r1, #0
 80829da:	7c00      	ldrb	r0, [r0, #16]
 80829dc:	f7ff f938 	bl	8081c50 <hal_i2c_unlock>
}
 80829e0:	fab0 f080 	clz	r0, r0
 80829e4:	0940      	lsrs	r0, r0, #5
 80829e6:	bd08      	pop	{r3, pc}

080829e8 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80829e8:	4700      	bx	r0
	...

080829ec <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80829ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80829f0:	2400      	movs	r4, #0
{
 80829f2:	461d      	mov	r5, r3
 80829f4:	460f      	mov	r7, r1
 80829f6:	4690      	mov	r8, r2
 80829f8:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
 80829fa:	f7ff f8c1 	bl	8081b80 <HAL_Interrupts_Detach>
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80829fe:	2304      	movs	r3, #4
  if (priority >= 0) {
 8082a00:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8082a02:	f88d 300c 	strb.w	r3, [sp, #12]
    extra.IRQChannelSubPriority = subpriority;
 8082a06:	bfa8      	it	ge
 8082a08:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    HAL_InterruptExtraConfiguration extra = {0};
 8082a0c:	f8ad 400d 	strh.w	r4, [sp, #13]
 8082a10:	f88d 400f 	strb.w	r4, [sp, #15]
    return &extra;
 8082a14:	bfa4      	itt	ge
 8082a16:	ac03      	addge	r4, sp, #12
    extra.IRQChannelSubPriority = subpriority;
 8082a18:	f88d 300e 	strbge.w	r3, [sp, #14]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8082a1c:	463a      	mov	r2, r7
 8082a1e:	4643      	mov	r3, r8
 8082a20:	4630      	mov	r0, r6
 8082a22:	4906      	ldr	r1, [pc, #24]	; (8082a3c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
 8082a24:	9400      	str	r4, [sp, #0]
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 8082a26:	bfa8      	it	ge
 8082a28:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8082a2c:	f7ff f8a0 	bl	8081b70 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 8082a30:	fab0 f080 	clz	r0, r0
 8082a34:	0940      	lsrs	r0, r0, #5
 8082a36:	b004      	add	sp, #16
 8082a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082a3c:	080829e9 	.word	0x080829e9

08082a40 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : true or false
 *******************************************************************************/
bool detachInterrupt(uint16_t pin)
{
 8082a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082a42:	4604      	mov	r4, r0
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Detach(pin)) {
 8082a44:	f7ff f89c 	bl	8081b80 <HAL_Interrupts_Detach>
 8082a48:	4605      	mov	r5, r0
 8082a4a:	b970      	cbnz	r0, 8082a6a <_Z15detachInterruptt+0x2a>
        return false;
    }
    if (handlers[pin]) {
 8082a4c:	4f08      	ldr	r7, [pc, #32]	; (8082a70 <_Z15detachInterruptt+0x30>)
 8082a4e:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
 8082a52:	b146      	cbz	r6, 8082a66 <_Z15detachInterruptt+0x26>
 8082a54:	4630      	mov	r0, r6
 8082a56:	f7fe fd02 	bl	808145e <_ZNSt14_Function_baseD1Ev>
        delete handlers[pin];
 8082a5a:	2110      	movs	r1, #16
 8082a5c:	4630      	mov	r0, r6
 8082a5e:	f000 fec2 	bl	80837e6 <_ZdlPvj>
        handlers[pin] = nullptr;
 8082a62:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
    }
    return true;
 8082a66:	2001      	movs	r0, #1
 8082a68:	e000      	b.n	8082a6c <_Z15detachInterruptt+0x2c>
        return false;
 8082a6a:	2000      	movs	r0, #0
}
 8082a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8082a6e:	bf00      	nop
 8082a70:	20000230 	.word	0x20000230

08082a74 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8082a74:	4770      	bx	lr

08082a76 <_ZN9IPAddressD0Ev>:
 8082a76:	b510      	push	{r4, lr}
 8082a78:	4604      	mov	r4, r0
 8082a7a:	2108      	movs	r1, #8
 8082a7c:	f000 feb3 	bl	80837e6 <_ZdlPvj>
 8082a80:	4620      	mov	r0, r4
 8082a82:	bd10      	pop	{r4, pc}

08082a84 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8082a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082a86:	460e      	mov	r6, r1
 8082a88:	2400      	movs	r4, #0
 8082a8a:	f100 0708 	add.w	r7, r0, #8
 8082a8e:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 8082a90:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 8082a94:	220a      	movs	r2, #10
 8082a96:	4630      	mov	r0, r6
 8082a98:	f000 f8cf 	bl	8082c3a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8082a9c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8082a9e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 8082aa0:	d101      	bne.n	8082aa6 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 8082aa2:	4620      	mov	r0, r4
 8082aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 8082aa6:	2c00      	cmp	r4, #0
 8082aa8:	d0f2      	beq.n	8082a90 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8082aaa:	212e      	movs	r1, #46	; 0x2e
 8082aac:	4630      	mov	r0, r6
 8082aae:	f000 f8c1 	bl	8082c34 <_ZN5Print5printEc>
 8082ab2:	4404      	add	r4, r0
 8082ab4:	e7ec      	b.n	8082a90 <_ZNK9IPAddress7printToER5Print+0xc>
	...

08082ab8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 8082ab8:	4a02      	ldr	r2, [pc, #8]	; (8082ac4 <_ZN9IPAddressC1Ev+0xc>)
 8082aba:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8082abc:	2200      	movs	r2, #0
 8082abe:	6042      	str	r2, [r0, #4]
}
 8082ac0:	4770      	bx	lr
 8082ac2:	bf00      	nop
 8082ac4:	08084eb8 	.word	0x08084eb8

08082ac8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 8082ac8:	4a02      	ldr	r2, [pc, #8]	; (8082ad4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8082aca:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 8082acc:	680a      	ldr	r2, [r1, #0]
 8082ace:	6042      	str	r2, [r0, #4]
}
 8082ad0:	4770      	bx	lr
 8082ad2:	bf00      	nop
 8082ad4:	08084eb8 	.word	0x08084eb8

08082ad8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 8082ad8:	4a01      	ldr	r2, [pc, #4]	; (8082ae0 <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 8082ada:	e9c0 2100 	strd	r2, r1, [r0]
}
 8082ade:	4770      	bx	lr
 8082ae0:	08084eb8 	.word	0x08084eb8

08082ae4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 8082ae4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8082ae6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8082aea:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8082aee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8082af2:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8082af6:	6044      	str	r4, [r0, #4]
}
 8082af8:	bd10      	pop	{r4, pc}
	...

08082afc <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8082afc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082afe:	4d04      	ldr	r5, [pc, #16]	; (8082b10 <_ZN9IPAddressC1Ehhhh+0x14>)
 8082b00:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8082b02:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8082b06:	9500      	str	r5, [sp, #0]
 8082b08:	f7ff ffec 	bl	8082ae4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8082b0c:	b003      	add	sp, #12
 8082b0e:	bd30      	pop	{r4, r5, pc}
 8082b10:	08084eb8 	.word	0x08084eb8

08082b14 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8082b14:	4b01      	ldr	r3, [pc, #4]	; (8082b1c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8082b16:	4a02      	ldr	r2, [pc, #8]	; (8082b20 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8082b18:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 8082b1a:	4770      	bx	lr
 8082b1c:	200002ec 	.word	0x200002ec
 8082b20:	08084ec4 	.word	0x08084ec4

08082b24 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8082b24:	2300      	movs	r3, #0
 8082b26:	6840      	ldr	r0, [r0, #4]
 8082b28:	461a      	mov	r2, r3
 8082b2a:	f7ff b9ef 	b.w	8081f0c <network_connect>

08082b2e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8082b2e:	2200      	movs	r2, #0
 8082b30:	2102      	movs	r1, #2
 8082b32:	6840      	ldr	r0, [r0, #4]
 8082b34:	f7ff b9fa 	b.w	8081f2c <network_disconnect>

08082b38 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8082b38:	2200      	movs	r2, #0
 8082b3a:	6840      	ldr	r0, [r0, #4]
 8082b3c:	4611      	mov	r1, r2
 8082b3e:	f7ff b9ed 	b.w	8081f1c <network_connecting>

08082b42 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8082b42:	2200      	movs	r2, #0
 8082b44:	6840      	ldr	r0, [r0, #4]
 8082b46:	4611      	mov	r1, r2
 8082b48:	f7ff b9f8 	b.w	8081f3c <network_ready>

08082b4c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8082b4c:	2300      	movs	r3, #0
 8082b4e:	6840      	ldr	r0, [r0, #4]
 8082b50:	461a      	mov	r2, r3
 8082b52:	4619      	mov	r1, r3
 8082b54:	f7ff b9fa 	b.w	8081f4c <network_on>

08082b58 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8082b58:	2300      	movs	r3, #0
 8082b5a:	6840      	ldr	r0, [r0, #4]
 8082b5c:	461a      	mov	r2, r3
 8082b5e:	4619      	mov	r1, r3
 8082b60:	f7ff b9fc 	b.w	8081f5c <network_off>

08082b64 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8082b64:	2200      	movs	r2, #0
 8082b66:	6840      	ldr	r0, [r0, #4]
 8082b68:	f081 0101 	eor.w	r1, r1, #1
 8082b6c:	f7ff b9fe 	b.w	8081f6c <network_listen>

08082b70 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8082b70:	2200      	movs	r2, #0
 8082b72:	6840      	ldr	r0, [r0, #4]
 8082b74:	f7ff ba0a 	b.w	8081f8c <network_set_listen_timeout>

08082b78 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8082b78:	2200      	movs	r2, #0
 8082b7a:	6840      	ldr	r0, [r0, #4]
 8082b7c:	4611      	mov	r1, r2
 8082b7e:	f7ff ba0d 	b.w	8081f9c <network_get_listen_timeout>

08082b82 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8082b82:	2200      	movs	r2, #0
 8082b84:	6840      	ldr	r0, [r0, #4]
 8082b86:	4611      	mov	r1, r2
 8082b88:	f7ff b9f8 	b.w	8081f7c <network_listening>

08082b8c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8082b8c:	b570      	push	{r4, r5, r6, lr}
 8082b8e:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 8082b90:	2600      	movs	r6, #0
 8082b92:	b086      	sub	sp, #24
 8082b94:	4604      	mov	r4, r0
    IPAddress addr;
 8082b96:	a804      	add	r0, sp, #16
 8082b98:	f7ff ff8e 	bl	8082ab8 <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082b9c:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 8082b9e:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082ba0:	f001 fe51 	bl	8084846 <strlen>
 8082ba4:	4b0a      	ldr	r3, [pc, #40]	; (8082bd0 <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 8082ba6:	9600      	str	r6, [sp, #0]
 8082ba8:	b281      	uxth	r1, r0
 8082baa:	685b      	ldr	r3, [r3, #4]
 8082bac:	4628      	mov	r0, r5
 8082bae:	aa03      	add	r2, sp, #12
 8082bb0:	f7fe ff16 	bl	80819e0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082bb4:	b130      	cbz	r0, 8082bc4 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8082bb6:	4631      	mov	r1, r6
 8082bb8:	4620      	mov	r0, r4
 8082bba:	f7ff ff8d 	bl	8082ad8 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8082bbe:	4620      	mov	r0, r4
 8082bc0:	b006      	add	sp, #24
 8082bc2:	bd70      	pop	{r4, r5, r6, pc}
 8082bc4:	4620      	mov	r0, r4
 8082bc6:	a903      	add	r1, sp, #12
 8082bc8:	f7ff ff7e 	bl	8082ac8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 8082bcc:	e7f7      	b.n	8082bbe <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 8082bce:	bf00      	nop
 8082bd0:	20000200 	.word	0x20000200

08082bd4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8082bd4:	4b02      	ldr	r3, [pc, #8]	; (8082be0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8082bd6:	4a03      	ldr	r2, [pc, #12]	; (8082be4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8082bd8:	601a      	str	r2, [r3, #0]
 8082bda:	2200      	movs	r2, #0
 8082bdc:	605a      	str	r2, [r3, #4]

} // spark
 8082bde:	4770      	bx	lr
 8082be0:	200002f0 	.word	0x200002f0
 8082be4:	08084ed0 	.word	0x08084ed0

08082be8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8082be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082bea:	4606      	mov	r6, r0
 8082bec:	460d      	mov	r5, r1
  size_t n = 0;
 8082bee:	2400      	movs	r4, #0
 8082bf0:	188f      	adds	r7, r1, r2
  while (size--) {
 8082bf2:	42bd      	cmp	r5, r7
 8082bf4:	d00c      	beq.n	8082c10 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8082bf6:	6833      	ldr	r3, [r6, #0]
 8082bf8:	4630      	mov	r0, r6
 8082bfa:	689b      	ldr	r3, [r3, #8]
 8082bfc:	f815 1b01 	ldrb.w	r1, [r5], #1
 8082c00:	4798      	blx	r3
     if (chunk>=0)
 8082c02:	1e03      	subs	r3, r0, #0
 8082c04:	db01      	blt.n	8082c0a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8082c06:	441c      	add	r4, r3
  while (size--) {
 8082c08:	e7f3      	b.n	8082bf2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8082c0a:	2c00      	cmp	r4, #0
 8082c0c:	bf08      	it	eq
 8082c0e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 8082c10:	4620      	mov	r0, r4
 8082c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082c14 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 8082c14:	b570      	push	{r4, r5, r6, lr}
 8082c16:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8082c18:	460c      	mov	r4, r1
    }
 8082c1a:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8082c1c:	b149      	cbz	r1, 8082c32 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8082c1e:	f001 fe12 	bl	8084846 <strlen>
 8082c22:	682b      	ldr	r3, [r5, #0]
 8082c24:	4602      	mov	r2, r0
 8082c26:	4621      	mov	r1, r4
 8082c28:	4628      	mov	r0, r5
    }
 8082c2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 8082c2e:	68db      	ldr	r3, [r3, #12]
 8082c30:	4718      	bx	r3
    }
 8082c32:	bd70      	pop	{r4, r5, r6, pc}

08082c34 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8082c34:	6803      	ldr	r3, [r0, #0]
 8082c36:	689b      	ldr	r3, [r3, #8]
 8082c38:	4718      	bx	r3

08082c3a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8082c3a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8082c3c:	2a01      	cmp	r2, #1
 8082c3e:	bf98      	it	ls
 8082c40:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 8082c42:	b530      	push	{r4, r5, lr}
 8082c44:	b08b      	sub	sp, #44	; 0x2c
 8082c46:	460c      	mov	r4, r1
  *str = '\0';
 8082c48:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 8082c4c:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 8082c4e:	4625      	mov	r5, r4
 8082c50:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 8082c54:	fb04 5312 	mls	r3, r4, r2, r5
 8082c58:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8082c5a:	2b09      	cmp	r3, #9
 8082c5c:	bf94      	ite	ls
 8082c5e:	3330      	addls	r3, #48	; 0x30
 8082c60:	3337      	addhi	r3, #55	; 0x37
 8082c62:	b2db      	uxtb	r3, r3
  } while(n);
 8082c64:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8082c66:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 8082c6a:	d9f0      	bls.n	8082c4e <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 8082c6c:	f7ff ffd2 	bl	8082c14 <_ZN5Print5writeEPKc>
}
 8082c70:	b00b      	add	sp, #44	; 0x2c
 8082c72:	bd30      	pop	{r4, r5, pc}

08082c74 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8082c74:	b510      	push	{r4, lr}
 8082c76:	4604      	mov	r4, r0
 8082c78:	f7fe fbf1 	bl	808145e <_ZNSt14_Function_baseD1Ev>
 8082c7c:	4620      	mov	r0, r4
 8082c7e:	bd10      	pop	{r4, pc}

08082c80 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 8082c80:	2300      	movs	r3, #0
 8082c82:	4803      	ldr	r0, [pc, #12]	; (8082c90 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8082c84:	4a03      	ldr	r2, [pc, #12]	; (8082c94 <_GLOBAL__sub_I_RGB+0x14>)
 8082c86:	4904      	ldr	r1, [pc, #16]	; (8082c98 <_GLOBAL__sub_I_RGB+0x18>)
 8082c88:	6083      	str	r3, [r0, #8]
 8082c8a:	f000 bda7 	b.w	80837dc <__aeabi_atexit>
 8082c8e:	bf00      	nop
 8082c90:	200002f8 	.word	0x200002f8
 8082c94:	20000100 	.word	0x20000100
 8082c98:	08082c75 	.word	0x08082c75

08082c9c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 8082c9c:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 8082c9e:	2600      	movs	r6, #0
 8082ca0:	4604      	mov	r4, r0
 8082ca2:	460d      	mov	r5, r1
 8082ca4:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 8082ca8:	f7fe feda 	bl	8081a60 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 8082cac:	4628      	mov	r0, r5
    _spi = spi;
 8082cae:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 8082cb0:	f7fe ffde 	bl	8081c70 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 8082cb4:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 8082cb6:	6066      	str	r6, [r4, #4]
}
 8082cb8:	bd70      	pop	{r4, r5, r6, pc}

08082cba <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8082cba:	b510      	push	{r4, lr}
 8082cbc:	4604      	mov	r4, r0
{
	free(buffer);
 8082cbe:	6800      	ldr	r0, [r0, #0]
 8082cc0:	f7ff f97c 	bl	8081fbc <free>
}
 8082cc4:	4620      	mov	r0, r4
 8082cc6:	bd10      	pop	{r4, pc}

08082cc8 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8082cc8:	b510      	push	{r4, lr}
 8082cca:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8082ccc:	6800      	ldr	r0, [r0, #0]
 8082cce:	b108      	cbz	r0, 8082cd4 <_ZN6String10invalidateEv+0xc>
 8082cd0:	f7ff f974 	bl	8081fbc <free>
	buffer = NULL;
 8082cd4:	2300      	movs	r3, #0
	capacity = len = 0;
 8082cd6:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 8082cda:	6023      	str	r3, [r4, #0]
}
 8082cdc:	bd10      	pop	{r4, pc}

08082cde <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8082cde:	b538      	push	{r3, r4, r5, lr}
 8082ce0:	4604      	mov	r4, r0
 8082ce2:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8082ce4:	6800      	ldr	r0, [r0, #0]
 8082ce6:	3101      	adds	r1, #1
 8082ce8:	f7ff f970 	bl	8081fcc <realloc>
	if (newbuffer) {
 8082cec:	b110      	cbz	r0, 8082cf4 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8082cee:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 8082cf2:	2001      	movs	r0, #1
	}
	return 0;
}
 8082cf4:	bd38      	pop	{r3, r4, r5, pc}

08082cf6 <_ZN6String7reserveEj>:
{
 8082cf6:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8082cf8:	6803      	ldr	r3, [r0, #0]
{
 8082cfa:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8082cfc:	b123      	cbz	r3, 8082d08 <_ZN6String7reserveEj+0x12>
 8082cfe:	6843      	ldr	r3, [r0, #4]
 8082d00:	428b      	cmp	r3, r1
 8082d02:	d301      	bcc.n	8082d08 <_ZN6String7reserveEj+0x12>
 8082d04:	2001      	movs	r0, #1
}
 8082d06:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 8082d08:	4620      	mov	r0, r4
 8082d0a:	f7ff ffe8 	bl	8082cde <_ZN6String12changeBufferEj>
 8082d0e:	2800      	cmp	r0, #0
 8082d10:	d0f9      	beq.n	8082d06 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 8082d12:	68a3      	ldr	r3, [r4, #8]
 8082d14:	2b00      	cmp	r3, #0
 8082d16:	d1f5      	bne.n	8082d04 <_ZN6String7reserveEj+0xe>
 8082d18:	6822      	ldr	r2, [r4, #0]
 8082d1a:	7013      	strb	r3, [r2, #0]
 8082d1c:	e7f2      	b.n	8082d04 <_ZN6String7reserveEj+0xe>

08082d1e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8082d1e:	b570      	push	{r4, r5, r6, lr}
 8082d20:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8082d22:	4611      	mov	r1, r2
{
 8082d24:	4604      	mov	r4, r0
 8082d26:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8082d28:	f7ff ffe5 	bl	8082cf6 <_ZN6String7reserveEj>
 8082d2c:	b920      	cbnz	r0, 8082d38 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 8082d2e:	4620      	mov	r0, r4
 8082d30:	f7ff ffca 	bl	8082cc8 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 8082d34:	4620      	mov	r0, r4
 8082d36:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 8082d38:	462a      	mov	r2, r5
 8082d3a:	4631      	mov	r1, r6
 8082d3c:	6820      	ldr	r0, [r4, #0]
	len = length;
 8082d3e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8082d40:	f001 fd00 	bl	8084744 <memcpy>
	buffer[len] = 0;
 8082d44:	2100      	movs	r1, #0
 8082d46:	6822      	ldr	r2, [r4, #0]
 8082d48:	68a3      	ldr	r3, [r4, #8]
 8082d4a:	54d1      	strb	r1, [r2, r3]
	return *this;
 8082d4c:	e7f2      	b.n	8082d34 <_ZN6String4copyEPKcj+0x16>

08082d4e <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 8082d4e:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 8082d50:	2300      	movs	r3, #0
String::String(const char *cstr)
 8082d52:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 8082d54:	460d      	mov	r5, r1
	capacity = 0;
 8082d56:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8082d5a:	6083      	str	r3, [r0, #8]
	flags = 0;
 8082d5c:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 8082d5e:	b139      	cbz	r1, 8082d70 <_ZN6StringC1EPKc+0x22>
 8082d60:	4608      	mov	r0, r1
 8082d62:	f001 fd70 	bl	8084846 <strlen>
 8082d66:	4629      	mov	r1, r5
 8082d68:	4602      	mov	r2, r0
 8082d6a:	4620      	mov	r0, r4
 8082d6c:	f7ff ffd7 	bl	8082d1e <_ZN6String4copyEPKcj>
}
 8082d70:	4620      	mov	r0, r4
 8082d72:	bd38      	pop	{r3, r4, r5, pc}

08082d74 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8082d74:	4288      	cmp	r0, r1
{
 8082d76:	b510      	push	{r4, lr}
 8082d78:	460b      	mov	r3, r1
 8082d7a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8082d7c:	d004      	beq.n	8082d88 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8082d7e:	6809      	ldr	r1, [r1, #0]
 8082d80:	b121      	cbz	r1, 8082d8c <_ZN6StringaSERKS_+0x18>
 8082d82:	689a      	ldr	r2, [r3, #8]
 8082d84:	f7ff ffcb 	bl	8082d1e <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 8082d88:	4620      	mov	r0, r4
 8082d8a:	bd10      	pop	{r4, pc}
	else invalidate();
 8082d8c:	f7ff ff9c 	bl	8082cc8 <_ZN6String10invalidateEv>
 8082d90:	e7fa      	b.n	8082d88 <_ZN6StringaSERKS_+0x14>

08082d92 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 8082d92:	2300      	movs	r3, #0
String::String(const String &value)
 8082d94:	b510      	push	{r4, lr}
 8082d96:	4604      	mov	r4, r0
	capacity = 0;
 8082d98:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8082d9c:	6083      	str	r3, [r0, #8]
	flags = 0;
 8082d9e:	7303      	strb	r3, [r0, #12]
	*this = value;
 8082da0:	f7ff ffe8 	bl	8082d74 <_ZN6StringaSERKS_>
}
 8082da4:	4620      	mov	r0, r4
 8082da6:	bd10      	pop	{r4, pc}

08082da8 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8082da8:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8082daa:	6882      	ldr	r2, [r0, #8]
 8082dac:	b93a      	cbnz	r2, 8082dbe <_ZNK6String6equalsEPKc+0x16>
 8082dae:	b121      	cbz	r1, 8082dba <_ZNK6String6equalsEPKc+0x12>
 8082db0:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 8082db2:	fab0 f080 	clz	r0, r0
 8082db6:	0940      	lsrs	r0, r0, #5
 8082db8:	e000      	b.n	8082dbc <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8082dba:	2001      	movs	r0, #1
}
 8082dbc:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8082dbe:	6800      	ldr	r0, [r0, #0]
 8082dc0:	b909      	cbnz	r1, 8082dc6 <_ZNK6String6equalsEPKc+0x1e>
 8082dc2:	7800      	ldrb	r0, [r0, #0]
 8082dc4:	e7f5      	b.n	8082db2 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 8082dc6:	f001 fd11 	bl	80847ec <strcmp>
 8082dca:	e7f2      	b.n	8082db2 <_ZNK6String6equalsEPKc+0xa>

08082dcc <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 8082dcc:	b558      	push	{r3, r4, r6, lr}
 8082dce:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 8082dd0:	b12a      	cbz	r2, 8082dde <_ZNK6String8getBytesEPhjj+0x12>
 8082dd2:	b121      	cbz	r1, 8082dde <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
 8082dd4:	6884      	ldr	r4, [r0, #8]
 8082dd6:	429c      	cmp	r4, r3
 8082dd8:	d802      	bhi.n	8082de0 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 8082dda:	2300      	movs	r3, #0
 8082ddc:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
 8082dde:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
 8082de0:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
 8082de2:	3a01      	subs	r2, #1
	if (n > len - index) n = len - index;
 8082de4:	4294      	cmp	r4, r2
 8082de6:	bf28      	it	cs
 8082de8:	4614      	movcs	r4, r2
	strncpy((char *)buf, buffer + index, n);
 8082dea:	6801      	ldr	r1, [r0, #0]
 8082dec:	4622      	mov	r2, r4
 8082dee:	4419      	add	r1, r3
 8082df0:	4630      	mov	r0, r6
 8082df2:	f001 fd30 	bl	8084856 <strncpy>
	buf[n] = 0;
 8082df6:	2300      	movs	r3, #0
 8082df8:	5533      	strb	r3, [r6, r4]
 8082dfa:	e7f0      	b.n	8082dde <_ZNK6String8getBytesEPhjj+0x12>

08082dfc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 8082dfc:	b510      	push	{r4, lr}
 8082dfe:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8082e00:	6800      	ldr	r0, [r0, #0]
 8082e02:	b118      	cbz	r0, 8082e0c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 8082e04:	f7ff f8da 	bl	8081fbc <free>
            wakeupSource_ = nullptr;
 8082e08:	2300      	movs	r3, #0
 8082e0a:	6023      	str	r3, [r4, #0]
        }
    }
 8082e0c:	bd10      	pop	{r4, pc}

08082e0e <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8082e0e:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 8082e10:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8082e14:	460d      	mov	r5, r1
        error_ = result.error_;
 8082e16:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 8082e18:	460b      	mov	r3, r1
 8082e1a:	f853 2f06 	ldr.w	r2, [r3, #6]!
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 8082e1e:	4604      	mov	r4, r0
        compatResult_ = result.compatResult_;
 8082e20:	f8c0 2006 	str.w	r2, [r0, #6]
 8082e24:	889b      	ldrh	r3, [r3, #4]
 8082e26:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 8082e28:	f7ff ffe8 	bl	8082dfc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
 8082e2c:	682b      	ldr	r3, [r5, #0]
 8082e2e:	b113      	cbz	r3, 8082e36 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 8082e30:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 8082e32:	2300      	movs	r3, #0
 8082e34:	602b      	str	r3, [r5, #0]
    }
 8082e36:	4620      	mov	r0, r4
 8082e38:	bd38      	pop	{r3, r4, r5, pc}

08082e3a <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
 8082e3a:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SleepResult toSleepResult() {
 8082e3e:	b510      	push	{r4, lr}
 8082e40:	680a      	ldr	r2, [r1, #0]
        if (error_ || wakeupSource_) {
 8082e42:	b933      	cbnz	r3, 8082e52 <_ZN17SystemSleepResult13toSleepResultEv+0x18>
 8082e44:	b932      	cbnz	r2, 8082e54 <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
 8082e46:	f851 3f06 	ldr.w	r3, [r1, #6]!
 8082e4a:	6003      	str	r3, [r0, #0]
 8082e4c:	888b      	ldrh	r3, [r1, #4]
 8082e4e:	8083      	strh	r3, [r0, #4]
    }
 8082e50:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
 8082e52:	b122      	cbz	r2, 8082e5e <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
 8082e54:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
 8082e56:	2c01      	cmp	r4, #1
 8082e58:	d003      	beq.n	8082e62 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
 8082e5a:	2c04      	cmp	r4, #4
 8082e5c:	d006      	beq.n	8082e6c <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 8082e5e:	2204      	movs	r2, #4
 8082e60:	e005      	b.n	8082e6e <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 8082e62:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 8082e64:	718c      	strb	r4, [r1, #6]
 8082e66:	810b      	strh	r3, [r1, #8]
 8082e68:	814a      	strh	r2, [r1, #10]
                    break;
 8082e6a:	e7ec      	b.n	8082e46 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 8082e6c:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 8082e6e:	810b      	strh	r3, [r1, #8]
 8082e70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8082e74:	718a      	strb	r2, [r1, #6]
 8082e76:	814b      	strh	r3, [r1, #10]
                    break;
 8082e78:	e7e5      	b.n	8082e46 <_ZN17SystemSleepResult13toSleepResultEv+0xc>

08082e7a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 8082e7a:	b507      	push	{r0, r1, r2, lr}
 8082e7c:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 8082e7e:	2100      	movs	r1, #0
{
 8082e80:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 8082e82:	9100      	str	r1, [sp, #0]
 8082e84:	2001      	movs	r0, #1
 8082e86:	218c      	movs	r1, #140	; 0x8c
 8082e88:	f7fe ffd6 	bl	8081e38 <system_reset>
}
 8082e8c:	b003      	add	sp, #12
 8082e8e:	f85d fb04 	ldr.w	pc, [sp], #4

08082e92 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 8082e92:	4601      	mov	r1, r0
    reset(0, flags);
 8082e94:	2000      	movs	r0, #0
 8082e96:	f7ff bff0 	b.w	8082e7a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

08082e9a <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 8082e9a:	2000      	movs	r0, #0
 8082e9c:	f7ff bff9 	b.w	8082e92 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

08082ea0 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
    }
    return System.systemSleepResult_;
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8082ea0:	b530      	push	{r4, r5, lr}
 8082ea2:	4604      	mov	r4, r0
 8082ea4:	b085      	sub	sp, #20
 8082ea6:	4608      	mov	r0, r1
 8082ea8:	4611      	mov	r1, r2
 8082eaa:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 8082eac:	2300      	movs	r3, #0
 8082eae:	f7fe ff87 	bl	8081dc0 <system_sleep>
              compatResult_(r) {
 8082eb2:	2300      	movs	r3, #0
 8082eb4:	9301      	str	r3, [sp, #4]
 8082eb6:	f8ad 3008 	strh.w	r3, [sp, #8]
 8082eba:	f88d 300a 	strb.w	r3, [sp, #10]
 8082ebe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    System.systemSleepResult_ = SystemSleepResult(SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret)));
 8082ec2:	4d09      	ldr	r5, [pc, #36]	; (8082ee8 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 8082ec4:	a901      	add	r1, sp, #4
 8082ec6:	f8ad 000c 	strh.w	r0, [sp, #12]
 8082eca:	4628      	mov	r0, r5
 8082ecc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8082ed0:	f7ff ff9d 	bl	8082e0e <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
 8082ed4:	a801      	add	r0, sp, #4
 8082ed6:	f7ff ff91 	bl	8082dfc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
 8082eda:	4620      	mov	r0, r4
 8082edc:	4629      	mov	r1, r5
 8082ede:	f7ff ffac 	bl	8082e3a <_ZN17SystemSleepResult13toSleepResultEv>
    return System.systemSleepResult_;
}
 8082ee2:	4620      	mov	r0, r4
 8082ee4:	b005      	add	sp, #20
 8082ee6:	bd30      	pop	{r4, r5, pc}
 8082ee8:	20000308 	.word	0x20000308

08082eec <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8082eec:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 8082eee:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8082ef0:	b510      	push	{r4, lr}
 8082ef2:	4b08      	ldr	r3, [pc, #32]	; (8082f14 <_GLOBAL__sub_I_System+0x28>)
 8082ef4:	4c08      	ldr	r4, [pc, #32]	; (8082f18 <_GLOBAL__sub_I_System+0x2c>)
 8082ef6:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 8082ef8:	4b08      	ldr	r3, [pc, #32]	; (8082f1c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 8082efa:	6020      	str	r0, [r4, #0]
 8082efc:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 8082efe:	71a0      	strb	r0, [r4, #6]
 8082f00:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8082f02:	f7fe ff4d 	bl	8081da0 <set_system_mode>
SystemClass System;
 8082f06:	4620      	mov	r0, r4
 8082f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 8082f0c:	4a04      	ldr	r2, [pc, #16]	; (8082f20 <_GLOBAL__sub_I_System+0x34>)
 8082f0e:	4905      	ldr	r1, [pc, #20]	; (8082f24 <_GLOBAL__sub_I_System+0x38>)
 8082f10:	f000 bc64 	b.w	80837dc <__aeabi_atexit>
 8082f14:	20000314 	.word	0x20000314
 8082f18:	20000308 	.word	0x20000308
 8082f1c:	ffff0000 	.word	0xffff0000
 8082f20:	20000100 	.word	0x20000100
 8082f24:	08080189 	.word	0x08080189

08082f28 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8082f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 8082f2c:	4a15      	ldr	r2, [pc, #84]	; (8082f84 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8082f2e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8082f90 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 8082f32:	e9d2 3200 	ldrd	r3, r2, [r2]
 8082f36:	18c0      	adds	r0, r0, r3
 8082f38:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
 8082f3c:	4a12      	ldr	r2, [pc, #72]	; (8082f88 <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 8082f3e:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 8082f40:	e9d2 3200 	ldrd	r3, r2, [r2]
 8082f44:	18c6      	adds	r6, r0, r3
 8082f46:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
 8082f4a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8082f4e:	42bb      	cmp	r3, r7
 8082f50:	bf08      	it	eq
 8082f52:	42b2      	cmpeq	r2, r6
 8082f54:	d013      	beq.n	8082f7e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 8082f56:	a903      	add	r1, sp, #12
 8082f58:	4668      	mov	r0, sp
 8082f5a:	e9cd 6700 	strd	r6, r7, [sp]
 8082f5e:	f7fd f85f 	bl	8080020 <localtime_r>
	calendar_time.tm_year += 1900;
 8082f62:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082f64:	4d09      	ldr	r5, [pc, #36]	; (8082f8c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 8082f66:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082f6a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 8082f6c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082f6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8082f70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8082f72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8082f74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 8082f76:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082f7a:	6823      	ldr	r3, [r4, #0]
 8082f7c:	602b      	str	r3, [r5, #0]
    }
}
 8082f7e:	b00c      	add	sp, #48	; 0x30
 8082f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082f84:	20000348 	.word	0x20000348
 8082f88:	20000340 	.word	0x20000340
 8082f8c:	2000031c 	.word	0x2000031c
 8082f90:	20000350 	.word	0x20000350

08082f94 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
 8082f94:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
 8082f96:	2000      	movs	r0, #0
 8082f98:	f7fe ffa0 	bl	8081edc <spark_sync_time_pending>
 8082f9c:	b128      	cbz	r0, 8082faa <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082f9e:	f7fe ff75 	bl	8081e8c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 8082fa2:	f080 0001 	eor.w	r0, r0, #1
 8082fa6:	b2c0      	uxtb	r0, r0
    }
 8082fa8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 8082faa:	2001      	movs	r0, #1
 8082fac:	e7fc      	b.n	8082fa8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

08082fb0 <_ZN9TimeClass7weekdayEx>:
	return weekday(now());
}

/* the weekday for the given time */
int TimeClass::weekday(time_t t)
{
 8082fb0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 8082fb2:	f7ff ffb9 	bl	8082f28 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
 8082fb6:	4b02      	ldr	r3, [pc, #8]	; (8082fc0 <_ZN9TimeClass7weekdayEx+0x10>)
 8082fb8:	6998      	ldr	r0, [r3, #24]
}
 8082fba:	3001      	adds	r0, #1
 8082fbc:	bd08      	pop	{r3, pc}
 8082fbe:	bf00      	nop
 8082fc0:	2000031c 	.word	0x2000031c

08082fc4 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 8082fc4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 8082fc6:	f7ff ffaf 	bl	8082f28 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 8082fca:	4b02      	ldr	r3, [pc, #8]	; (8082fd4 <_ZN9TimeClass5monthEx+0x10>)
 8082fcc:	6918      	ldr	r0, [r3, #16]
}
 8082fce:	3001      	adds	r0, #1
 8082fd0:	bd08      	pop	{r3, pc}
 8082fd2:	bf00      	nop
 8082fd4:	2000031c 	.word	0x2000031c

08082fd8 <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8082fd8:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8082fda:	490a      	ldr	r1, [pc, #40]	; (8083004 <_ZN9TimeClass4zoneEf+0x2c>)
{
 8082fdc:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8082fde:	f001 fb1d 	bl	808461c <__aeabi_fcmplt>
 8082fe2:	b968      	cbnz	r0, 8083000 <_ZN9TimeClass4zoneEf+0x28>
 8082fe4:	4620      	mov	r0, r4
 8082fe6:	4908      	ldr	r1, [pc, #32]	; (8083008 <_ZN9TimeClass4zoneEf+0x30>)
 8082fe8:	f001 fb36 	bl	8084658 <__aeabi_fcmpgt>
 8082fec:	b940      	cbnz	r0, 8083000 <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 8082fee:	4907      	ldr	r1, [pc, #28]	; (808300c <_ZN9TimeClass4zoneEf+0x34>)
 8082ff0:	4620      	mov	r0, r4
 8082ff2:	f001 f975 	bl	80842e0 <__aeabi_fmul>
 8082ff6:	f001 fb39 	bl	808466c <__aeabi_f2lz>
 8082ffa:	4b05      	ldr	r3, [pc, #20]	; (8083010 <_ZN9TimeClass4zoneEf+0x38>)
 8082ffc:	e9c3 0100 	strd	r0, r1, [r3]
}
 8083000:	bd10      	pop	{r4, pc}
 8083002:	bf00      	nop
 8083004:	c1400000 	.word	0xc1400000
 8083008:	41600000 	.word	0x41600000
 808300c:	45610000 	.word	0x45610000
 8083010:	20000348 	.word	0x20000348

08083014 <_ZN9TimeClass12setDSTOffsetEf>:
{
    return dst_cache / 3600.0;
}

void TimeClass::setDSTOffset(float offset)
{
 8083014:	b510      	push	{r4, lr}
    if (offset < 0 || offset > 2)
 8083016:	2100      	movs	r1, #0
{
 8083018:	4604      	mov	r4, r0
    if (offset < 0 || offset > 2)
 808301a:	f001 faff 	bl	808461c <__aeabi_fcmplt>
 808301e:	b970      	cbnz	r0, 808303e <_ZN9TimeClass12setDSTOffsetEf+0x2a>
 8083020:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8083024:	4620      	mov	r0, r4
 8083026:	f001 fb17 	bl	8084658 <__aeabi_fcmpgt>
 808302a:	b940      	cbnz	r0, 808303e <_ZN9TimeClass12setDSTOffsetEf+0x2a>
    {
        return;
    }
    dst_cache = offset * 3600;
 808302c:	4904      	ldr	r1, [pc, #16]	; (8083040 <_ZN9TimeClass12setDSTOffsetEf+0x2c>)
 808302e:	4620      	mov	r0, r4
 8083030:	f001 f956 	bl	80842e0 <__aeabi_fmul>
 8083034:	f001 fb1a 	bl	808466c <__aeabi_f2lz>
 8083038:	4b02      	ldr	r3, [pc, #8]	; (8083044 <_ZN9TimeClass12setDSTOffsetEf+0x30>)
 808303a:	e9c3 0100 	strd	r0, r1, [r3]
}
 808303e:	bd10      	pop	{r4, pc}
 8083040:	45610000 	.word	0x45610000
 8083044:	20000090 	.word	0x20000090

08083048 <_ZN9TimeClass8beginDSTEv>:

void TimeClass::beginDST()
{
    dst_current_cache = dst_cache;
 8083048:	4b03      	ldr	r3, [pc, #12]	; (8083058 <_ZN9TimeClass8beginDSTEv+0x10>)
 808304a:	e9d3 0100 	ldrd	r0, r1, [r3]
 808304e:	4b03      	ldr	r3, [pc, #12]	; (808305c <_ZN9TimeClass8beginDSTEv+0x14>)
 8083050:	e9c3 0100 	strd	r0, r1, [r3]
}
 8083054:	4770      	bx	lr
 8083056:	bf00      	nop
 8083058:	20000090 	.word	0x20000090
 808305c:	20000340 	.word	0x20000340

08083060 <_ZN9TimeClass6endDSTEv>:

void TimeClass::endDST()
{
    dst_current_cache = 0;
 8083060:	2000      	movs	r0, #0
 8083062:	2100      	movs	r1, #0
 8083064:	4b01      	ldr	r3, [pc, #4]	; (808306c <_ZN9TimeClass6endDSTEv+0xc>)
 8083066:	e9c3 0100 	strd	r0, r1, [r3]
}
 808306a:	4770      	bx	lr
 808306c:	20000340 	.word	0x20000340

08083070 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8083070:	b530      	push	{r4, r5, lr}
 8083072:	4604      	mov	r4, r0
    t += time_zone_cache;
 8083074:	4818      	ldr	r0, [pc, #96]	; (80830d8 <_ZN9TimeClass7timeStrEx+0x68>)
{
 8083076:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 8083078:	e9d0 1000 	ldrd	r1, r0, [r0]
 808307c:	1852      	adds	r2, r2, r1
 808307e:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 8083082:	4816      	ldr	r0, [pc, #88]	; (80830dc <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 8083084:	2500      	movs	r5, #0
    t += dst_current_cache;
 8083086:	e9d0 1000 	ldrd	r1, r0, [r0]
 808308a:	1852      	adds	r2, r2, r1
 808308c:	eb40 0303 	adc.w	r3, r0, r3
 8083090:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 8083094:	2224      	movs	r2, #36	; 0x24
 8083096:	2100      	movs	r1, #0
 8083098:	eb0d 0002 	add.w	r0, sp, r2
 808309c:	f001 fb7a 	bl	8084794 <memset>
    localtime_r(&t, &calendar_time);
 80830a0:	a909      	add	r1, sp, #36	; 0x24
 80830a2:	4668      	mov	r0, sp
 80830a4:	f7fc ffbc 	bl	8080020 <localtime_r>
    char ascstr[26] = {};
 80830a8:	2216      	movs	r2, #22
 80830aa:	4629      	mov	r1, r5
 80830ac:	a803      	add	r0, sp, #12
 80830ae:	9502      	str	r5, [sp, #8]
 80830b0:	f001 fb70 	bl	8084794 <memset>
    asctime_r(&calendar_time, ascstr);
 80830b4:	a902      	add	r1, sp, #8
 80830b6:	a809      	add	r0, sp, #36	; 0x24
 80830b8:	f001 fb0c 	bl	80846d4 <asctime_r>
    int len = strlen(ascstr);
 80830bc:	a802      	add	r0, sp, #8
 80830be:	f001 fbc2 	bl	8084846 <strlen>
    ascstr[len-1] = 0; // remove final newline
 80830c2:	ab12      	add	r3, sp, #72	; 0x48
 80830c4:	4418      	add	r0, r3
 80830c6:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 80830ca:	a902      	add	r1, sp, #8
 80830cc:	4620      	mov	r0, r4
 80830ce:	f7ff fe3e 	bl	8082d4e <_ZN6StringC1EPKc>
}
 80830d2:	4620      	mov	r0, r4
 80830d4:	b013      	add	sp, #76	; 0x4c
 80830d6:	bd30      	pop	{r4, r5, pc}
 80830d8:	20000348 	.word	0x20000348
 80830dc:	20000340 	.word	0x20000340

080830e0 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80830e0:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80830e2:	2000      	movs	r0, #0
 80830e4:	f7fe fd04 	bl	8081af0 <hal_rtc_time_is_valid>
    if (rtcstate)
 80830e8:	4604      	mov	r4, r0
 80830ea:	b9a0      	cbnz	r0, 8083116 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80830ec:	f7fe fe50 	bl	8081d90 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80830f0:	2801      	cmp	r0, #1
 80830f2:	d110      	bne.n	8083116 <_ZN9TimeClass7isValidEv+0x36>
 80830f4:	4620      	mov	r0, r4
 80830f6:	f7fe fe83 	bl	8081e00 <system_thread_get_state>
 80830fa:	b960      	cbnz	r0, 8083116 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80830fc:	f7ff ff4a 	bl	8082f94 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8083100:	b910      	cbnz	r0, 8083108 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 8083102:	f7fe feb3 	bl	8081e6c <spark_process>
        while (_while() && !_condition()) {
 8083106:	e7f9      	b.n	80830fc <_ZN9TimeClass7isValidEv+0x1c>
 8083108:	f7ff ff44 	bl	8082f94 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 808310c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 8083110:	2000      	movs	r0, #0
 8083112:	f7fe bced 	b.w	8081af0 <hal_rtc_time_is_valid>
}
 8083116:	4620      	mov	r0, r4
 8083118:	bd10      	pop	{r4, pc}

0808311a <_ZN9TimeClass3nowEv>:
{
 808311a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 808311c:	f7ff ffe0 	bl	80830e0 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 8083120:	2210      	movs	r2, #16
 8083122:	2100      	movs	r1, #0
 8083124:	4668      	mov	r0, sp
 8083126:	f001 fb35 	bl	8084794 <memset>
    hal_rtc_get_time(&tv, nullptr);
 808312a:	2100      	movs	r1, #0
 808312c:	4668      	mov	r0, sp
 808312e:	f7fe fcef 	bl	8081b10 <hal_rtc_get_time>
}
 8083132:	9800      	ldr	r0, [sp, #0]
 8083134:	b005      	add	sp, #20
 8083136:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808313c <_ZN9TimeClass4hourEv>:
{
 808313c:	b508      	push	{r3, lr}
	return hour(now());
 808313e:	f7ff ffec 	bl	808311a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 8083142:	17c1      	asrs	r1, r0, #31
 8083144:	f7ff fef0 	bl	8082f28 <_ZL22Refresh_UnixTime_Cachex>
}
 8083148:	4b01      	ldr	r3, [pc, #4]	; (8083150 <_ZN9TimeClass4hourEv+0x14>)
 808314a:	6898      	ldr	r0, [r3, #8]
 808314c:	bd08      	pop	{r3, pc}
 808314e:	bf00      	nop
 8083150:	2000031c 	.word	0x2000031c

08083154 <_ZN9TimeClass3dayEv>:
{
 8083154:	b508      	push	{r3, lr}
	return day(now());
 8083156:	f7ff ffe0 	bl	808311a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 808315a:	17c1      	asrs	r1, r0, #31
 808315c:	f7ff fee4 	bl	8082f28 <_ZL22Refresh_UnixTime_Cachex>
}
 8083160:	4b01      	ldr	r3, [pc, #4]	; (8083168 <_ZN9TimeClass3dayEv+0x14>)
 8083162:	68d8      	ldr	r0, [r3, #12]
 8083164:	bd08      	pop	{r3, pc}
 8083166:	bf00      	nop
 8083168:	2000031c 	.word	0x2000031c

0808316c <_ZN9TimeClass7weekdayEv>:
{
 808316c:	b508      	push	{r3, lr}
	return weekday(now());
 808316e:	f7ff ffd4 	bl	808311a <_ZN9TimeClass3nowEv>
}
 8083172:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return weekday(now());
 8083176:	17c1      	asrs	r1, r0, #31
 8083178:	f7ff bf1a 	b.w	8082fb0 <_ZN9TimeClass7weekdayEx>

0808317c <_ZN9TimeClass5monthEv>:
{
 808317c:	b508      	push	{r3, lr}
	return month(now());
 808317e:	f7ff ffcc 	bl	808311a <_ZN9TimeClass3nowEv>
}
 8083182:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 8083186:	17c1      	asrs	r1, r0, #31
 8083188:	f7ff bf1c 	b.w	8082fc4 <_ZN9TimeClass5monthEx>

0808318c <_ZN9TimeClass5localEv>:
{
 808318c:	b508      	push	{r3, lr}
	return now() + time_zone_cache + dst_current_cache;
 808318e:	f7ff ffc4 	bl	808311a <_ZN9TimeClass3nowEv>
 8083192:	4b03      	ldr	r3, [pc, #12]	; (80831a0 <_ZN9TimeClass5localEv+0x14>)
 8083194:	4a03      	ldr	r2, [pc, #12]	; (80831a4 <_ZN9TimeClass5localEv+0x18>)
 8083196:	681b      	ldr	r3, [r3, #0]
 8083198:	6812      	ldr	r2, [r2, #0]
 808319a:	4413      	add	r3, r2
}
 808319c:	4418      	add	r0, r3
 808319e:	bd08      	pop	{r3, pc}
 80831a0:	20000348 	.word	0x20000348
 80831a4:	20000340 	.word	0x20000340

080831a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80831a8:	4b02      	ldr	r3, [pc, #8]	; (80831b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80831aa:	681a      	ldr	r2, [r3, #0]
 80831ac:	4b02      	ldr	r3, [pc, #8]	; (80831b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80831ae:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80831b0:	4770      	bx	lr
 80831b2:	bf00      	nop
 80831b4:	2000008c 	.word	0x2000008c
 80831b8:	20000318 	.word	0x20000318

080831bc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80831bc:	4770      	bx	lr

080831be <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80831be:	7441      	strb	r1, [r0, #17]
}
 80831c0:	4770      	bx	lr

080831c2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80831c2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80831c4:	7c00      	ldrb	r0, [r0, #16]
 80831c6:	f7fe fd9b 	bl	8081d00 <hal_usart_available_data_for_write>
}
 80831ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80831ce:	bd08      	pop	{r3, pc}

080831d0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80831d0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80831d2:	7c00      	ldrb	r0, [r0, #16]
 80831d4:	f7fe fd6c 	bl	8081cb0 <hal_usart_available>
}
 80831d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80831dc:	bd08      	pop	{r3, pc}

080831de <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80831de:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80831e0:	7c00      	ldrb	r0, [r0, #16]
 80831e2:	f7fe fd75 	bl	8081cd0 <hal_usart_peek>
}
 80831e6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80831ea:	bd08      	pop	{r3, pc}

080831ec <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80831ec:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80831ee:	7c00      	ldrb	r0, [r0, #16]
 80831f0:	f7fe fd66 	bl	8081cc0 <hal_usart_read>
}
 80831f4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80831f8:	bd08      	pop	{r3, pc}

080831fa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80831fa:	7c00      	ldrb	r0, [r0, #16]
 80831fc:	f7fe bd70 	b.w	8081ce0 <hal_usart_flush>

08083200 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8083200:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8083202:	7c46      	ldrb	r6, [r0, #17]
{
 8083204:	4604      	mov	r4, r0
 8083206:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8083208:	b12e      	cbz	r6, 8083216 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 808320a:	4629      	mov	r1, r5
 808320c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 808320e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 8083212:	f7fe bd45 	b.w	8081ca0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 8083216:	7c00      	ldrb	r0, [r0, #16]
 8083218:	f7fe fd72 	bl	8081d00 <hal_usart_available_data_for_write>
 808321c:	2800      	cmp	r0, #0
 808321e:	dcf4      	bgt.n	808320a <_ZN11USARTSerial5writeEh+0xa>
}
 8083220:	4630      	mov	r0, r6
 8083222:	bd70      	pop	{r4, r5, r6, pc}

08083224 <_ZN11USARTSerialD0Ev>:
 8083224:	b510      	push	{r4, lr}
 8083226:	4604      	mov	r4, r0
 8083228:	2114      	movs	r1, #20
 808322a:	f000 fadc 	bl	80837e6 <_ZdlPvj>
 808322e:	4620      	mov	r0, r4
 8083230:	bd10      	pop	{r4, pc}
	...

08083234 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 8083234:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8083238:	b510      	push	{r4, lr}
 808323a:	4604      	mov	r4, r0
 808323c:	4608      	mov	r0, r1
 808323e:	4611      	mov	r1, r2
 8083240:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8083244:	e9c4 c201 	strd	ip, r2, [r4, #4]
 8083248:	4a04      	ldr	r2, [pc, #16]	; (808325c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 808324a:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 808324c:	6022      	str	r2, [r4, #0]
  _blocking = true;
 808324e:	2201      	movs	r2, #1
 8083250:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 8083252:	461a      	mov	r2, r3
 8083254:	f7fe fd1c 	bl	8081c90 <hal_usart_init>
}
 8083258:	4620      	mov	r0, r4
 808325a:	bd10      	pop	{r4, pc}
 808325c:	08084f20 	.word	0x08084f20

08083260 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8083260:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8083262:	4d0d      	ldr	r5, [pc, #52]	; (8083298 <_Z22__fetch_global_Serial1v+0x38>)
 8083264:	7829      	ldrb	r1, [r5, #0]
 8083266:	f3bf 8f5b 	dmb	ish
 808326a:	f011 0401 	ands.w	r4, r1, #1
 808326e:	d111      	bne.n	8083294 <_Z22__fetch_global_Serial1v+0x34>
 8083270:	4628      	mov	r0, r5
 8083272:	f7fc ff2b 	bl	80800cc <__cxa_guard_acquire>
 8083276:	b168      	cbz	r0, 8083294 <_Z22__fetch_global_Serial1v+0x34>
 8083278:	4621      	mov	r1, r4
 808327a:	4a08      	ldr	r2, [pc, #32]	; (808329c <_Z22__fetch_global_Serial1v+0x3c>)
 808327c:	4b08      	ldr	r3, [pc, #32]	; (80832a0 <_Z22__fetch_global_Serial1v+0x40>)
 808327e:	4809      	ldr	r0, [pc, #36]	; (80832a4 <_Z22__fetch_global_Serial1v+0x44>)
 8083280:	f7ff ffd8 	bl	8083234 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8083284:	4628      	mov	r0, r5
 8083286:	f7fc ff26 	bl	80800d6 <__cxa_guard_release>
 808328a:	4a07      	ldr	r2, [pc, #28]	; (80832a8 <_Z22__fetch_global_Serial1v+0x48>)
 808328c:	4907      	ldr	r1, [pc, #28]	; (80832ac <_Z22__fetch_global_Serial1v+0x4c>)
 808328e:	4805      	ldr	r0, [pc, #20]	; (80832a4 <_Z22__fetch_global_Serial1v+0x44>)
 8083290:	f000 faa4 	bl	80837dc <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8083294:	4803      	ldr	r0, [pc, #12]	; (80832a4 <_Z22__fetch_global_Serial1v+0x44>)
 8083296:	bd38      	pop	{r3, r4, r5, pc}
 8083298:	20000358 	.word	0x20000358
 808329c:	2000035c 	.word	0x2000035c
 80832a0:	200003e0 	.word	0x200003e0
 80832a4:	20000464 	.word	0x20000464
 80832a8:	20000100 	.word	0x20000100
 80832ac:	080831bd 	.word	0x080831bd

080832b0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80832b0:	7441      	strb	r1, [r0, #17]
}
 80832b2:	4770      	bx	lr

080832b4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80832b4:	4770      	bx	lr

080832b6 <_ZN9USBSerial4readEv>:
{
 80832b6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80832b8:	2100      	movs	r1, #0
 80832ba:	7c00      	ldrb	r0, [r0, #16]
 80832bc:	f7fe fd40 	bl	8081d40 <HAL_USB_USART_Receive_Data>
}
 80832c0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80832c4:	bd08      	pop	{r3, pc}

080832c6 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80832c6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80832c8:	2101      	movs	r1, #1
 80832ca:	7c00      	ldrb	r0, [r0, #16]
 80832cc:	f7fe fd38 	bl	8081d40 <HAL_USB_USART_Receive_Data>
}
 80832d0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80832d4:	bd08      	pop	{r3, pc}

080832d6 <_ZN9USBSerial17availableForWriteEv>:
{
 80832d6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80832d8:	7c00      	ldrb	r0, [r0, #16]
 80832da:	f7fe fd29 	bl	8081d30 <HAL_USB_USART_Available_Data_For_Write>
}
 80832de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80832e2:	bd08      	pop	{r3, pc}

080832e4 <_ZN9USBSerial9availableEv>:
{
 80832e4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80832e6:	7c00      	ldrb	r0, [r0, #16]
 80832e8:	f7fe fd1a 	bl	8081d20 <HAL_USB_USART_Available_Data>
}
 80832ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80832f0:	bd08      	pop	{r3, pc}

080832f2 <_ZN9USBSerial5writeEh>:
{
 80832f2:	b538      	push	{r3, r4, r5, lr}
 80832f4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80832f6:	7c00      	ldrb	r0, [r0, #16]
{
 80832f8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80832fa:	f7fe fd19 	bl	8081d30 <HAL_USB_USART_Available_Data_For_Write>
 80832fe:	2800      	cmp	r0, #0
 8083300:	dc01      	bgt.n	8083306 <_ZN9USBSerial5writeEh+0x14>
 8083302:	7c60      	ldrb	r0, [r4, #17]
 8083304:	b128      	cbz	r0, 8083312 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8083306:	4629      	mov	r1, r5
 8083308:	7c20      	ldrb	r0, [r4, #16]
 808330a:	f7fe fd21 	bl	8081d50 <HAL_USB_USART_Send_Data>
 808330e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8083312:	bd38      	pop	{r3, r4, r5, pc}

08083314 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 8083314:	7c00      	ldrb	r0, [r0, #16]
 8083316:	f7fe bd23 	b.w	8081d60 <HAL_USB_USART_Flush_Data>

0808331a <_ZN9USBSerialD0Ev>:
 808331a:	b510      	push	{r4, lr}
 808331c:	4604      	mov	r4, r0
 808331e:	2114      	movs	r1, #20
 8083320:	f000 fa61 	bl	80837e6 <_ZdlPvj>
 8083324:	4620      	mov	r0, r4
 8083326:	bd10      	pop	{r4, pc}

08083328 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8083328:	b510      	push	{r4, lr}
 808332a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808332e:	4604      	mov	r4, r0
 8083330:	4608      	mov	r0, r1
 8083332:	2100      	movs	r1, #0
 8083334:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8083338:	4b04      	ldr	r3, [pc, #16]	; (808334c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 808333a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 808333c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 808333e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 8083340:	4611      	mov	r1, r2
  _blocking = true;
 8083342:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 8083344:	f7fe fce4 	bl	8081d10 <HAL_USB_USART_Init>
}
 8083348:	4620      	mov	r0, r4
 808334a:	bd10      	pop	{r4, pc}
 808334c:	08084f50 	.word	0x08084f50

08083350 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8083350:	b510      	push	{r4, lr}
 8083352:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8083354:	2214      	movs	r2, #20
 8083356:	2100      	movs	r1, #0
 8083358:	f001 fa1c 	bl	8084794 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 808335c:	4b05      	ldr	r3, [pc, #20]	; (8083374 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808335e:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 8083360:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8083362:	4b05      	ldr	r3, [pc, #20]	; (8083378 <_Z19acquireSerialBufferv+0x28>)
 8083364:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8083366:	f240 1301 	movw	r3, #257	; 0x101
 808336a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808336c:	2381      	movs	r3, #129	; 0x81
 808336e:	8223      	strh	r3, [r4, #16]
}
 8083370:	bd10      	pop	{r4, pc}
 8083372:	bf00      	nop
 8083374:	200004a8 	.word	0x200004a8
 8083378:	200005a9 	.word	0x200005a9

0808337c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 808337c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808337e:	4d0f      	ldr	r5, [pc, #60]	; (80833bc <_Z16_fetch_usbserialv+0x40>)
{
 8083380:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8083382:	a801      	add	r0, sp, #4
 8083384:	f7ff ffe4 	bl	8083350 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8083388:	7829      	ldrb	r1, [r5, #0]
 808338a:	f3bf 8f5b 	dmb	ish
 808338e:	f011 0401 	ands.w	r4, r1, #1
 8083392:	d110      	bne.n	80833b6 <_Z16_fetch_usbserialv+0x3a>
 8083394:	4628      	mov	r0, r5
 8083396:	f7fc fe99 	bl	80800cc <__cxa_guard_acquire>
 808339a:	b160      	cbz	r0, 80833b6 <_Z16_fetch_usbserialv+0x3a>
 808339c:	4621      	mov	r1, r4
 808339e:	aa01      	add	r2, sp, #4
 80833a0:	4807      	ldr	r0, [pc, #28]	; (80833c0 <_Z16_fetch_usbserialv+0x44>)
 80833a2:	f7ff ffc1 	bl	8083328 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80833a6:	4628      	mov	r0, r5
 80833a8:	f7fc fe95 	bl	80800d6 <__cxa_guard_release>
 80833ac:	4a05      	ldr	r2, [pc, #20]	; (80833c4 <_Z16_fetch_usbserialv+0x48>)
 80833ae:	4906      	ldr	r1, [pc, #24]	; (80833c8 <_Z16_fetch_usbserialv+0x4c>)
 80833b0:	4803      	ldr	r0, [pc, #12]	; (80833c0 <_Z16_fetch_usbserialv+0x44>)
 80833b2:	f000 fa13 	bl	80837dc <__aeabi_atexit>
	return _usbserial;
}
 80833b6:	4802      	ldr	r0, [pc, #8]	; (80833c0 <_Z16_fetch_usbserialv+0x44>)
 80833b8:	b007      	add	sp, #28
 80833ba:	bd30      	pop	{r4, r5, pc}
 80833bc:	20000478 	.word	0x20000478
 80833c0:	20000480 	.word	0x20000480
 80833c4:	20000100 	.word	0x20000100
 80833c8:	080832b5 	.word	0x080832b5

080833cc <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80833cc:	b510      	push	{r4, lr}
 80833ce:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80833d0:	2214      	movs	r2, #20
 80833d2:	2100      	movs	r1, #0
 80833d4:	f001 f9de 	bl	8084794 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80833d8:	4b05      	ldr	r3, [pc, #20]	; (80833f0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80833da:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80833dc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80833de:	4b05      	ldr	r3, [pc, #20]	; (80833f4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80833e0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80833e2:	f240 1301 	movw	r3, #257	; 0x101
 80833e6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80833e8:	2381      	movs	r3, #129	; 0x81
 80833ea:	8223      	strh	r3, [r4, #16]
}
 80833ec:	bd10      	pop	{r4, pc}
 80833ee:	bf00      	nop
 80833f0:	2000062a 	.word	0x2000062a
 80833f4:	2000072b 	.word	0x2000072b

080833f8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80833f8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80833fa:	4c0f      	ldr	r4, [pc, #60]	; (8083438 <_Z17_fetch_usbserial1v+0x40>)
{
 80833fc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80833fe:	a801      	add	r0, sp, #4
 8083400:	f7ff ffe4 	bl	80833cc <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8083404:	7823      	ldrb	r3, [r4, #0]
 8083406:	f3bf 8f5b 	dmb	ish
 808340a:	07db      	lsls	r3, r3, #31
 808340c:	d410      	bmi.n	8083430 <_Z17_fetch_usbserial1v+0x38>
 808340e:	4620      	mov	r0, r4
 8083410:	f7fc fe5c 	bl	80800cc <__cxa_guard_acquire>
 8083414:	b160      	cbz	r0, 8083430 <_Z17_fetch_usbserial1v+0x38>
 8083416:	2101      	movs	r1, #1
 8083418:	aa01      	add	r2, sp, #4
 808341a:	4808      	ldr	r0, [pc, #32]	; (808343c <_Z17_fetch_usbserial1v+0x44>)
 808341c:	f7ff ff84 	bl	8083328 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8083420:	4620      	mov	r0, r4
 8083422:	f7fc fe58 	bl	80800d6 <__cxa_guard_release>
 8083426:	4a06      	ldr	r2, [pc, #24]	; (8083440 <_Z17_fetch_usbserial1v+0x48>)
 8083428:	4906      	ldr	r1, [pc, #24]	; (8083444 <_Z17_fetch_usbserial1v+0x4c>)
 808342a:	4804      	ldr	r0, [pc, #16]	; (808343c <_Z17_fetch_usbserial1v+0x44>)
 808342c:	f000 f9d6 	bl	80837dc <__aeabi_atexit>
  return _usbserial1;
}
 8083430:	4802      	ldr	r0, [pc, #8]	; (808343c <_Z17_fetch_usbserial1v+0x44>)
 8083432:	b006      	add	sp, #24
 8083434:	bd10      	pop	{r4, pc}
 8083436:	bf00      	nop
 8083438:	2000047c 	.word	0x2000047c
 808343c:	20000494 	.word	0x20000494
 8083440:	20000100 	.word	0x20000100
 8083444:	080832b5 	.word	0x080832b5

08083448 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 8083448:	4b01      	ldr	r3, [pc, #4]	; (8083450 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 808344a:	6018      	str	r0, [r3, #0]
    }, nullptr);
 808344c:	4770      	bx	lr
 808344e:	bf00      	nop
 8083450:	20000098 	.word	0x20000098

08083454 <serialEventRun>:
{
 8083454:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8083456:	4b17      	ldr	r3, [pc, #92]	; (80834b4 <serialEventRun+0x60>)
 8083458:	b143      	cbz	r3, 808346c <serialEventRun+0x18>
 808345a:	f7ff ff8f 	bl	808337c <_Z16_fetch_usbserialv>
 808345e:	6803      	ldr	r3, [r0, #0]
 8083460:	691b      	ldr	r3, [r3, #16]
 8083462:	4798      	blx	r3
 8083464:	2800      	cmp	r0, #0
 8083466:	dd01      	ble.n	808346c <serialEventRun+0x18>
        serialEvent();
 8083468:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 808346c:	4b12      	ldr	r3, [pc, #72]	; (80834b8 <serialEventRun+0x64>)
 808346e:	b143      	cbz	r3, 8083482 <serialEventRun+0x2e>
 8083470:	f7ff fef6 	bl	8083260 <_Z22__fetch_global_Serial1v>
 8083474:	6803      	ldr	r3, [r0, #0]
 8083476:	691b      	ldr	r3, [r3, #16]
 8083478:	4798      	blx	r3
 808347a:	2800      	cmp	r0, #0
 808347c:	dd01      	ble.n	8083482 <serialEventRun+0x2e>
        serialEvent1();
 808347e:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 8083482:	4b0e      	ldr	r3, [pc, #56]	; (80834bc <serialEventRun+0x68>)
 8083484:	b10b      	cbz	r3, 808348a <serialEventRun+0x36>
 8083486:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 808348a:	4b0d      	ldr	r3, [pc, #52]	; (80834c0 <serialEventRun+0x6c>)
 808348c:	b10b      	cbz	r3, 8083492 <serialEventRun+0x3e>
 808348e:	f3af 8000 	nop.w
    if (serialEventRun5) serialEventRun5();
 8083492:	4b0c      	ldr	r3, [pc, #48]	; (80834c4 <serialEventRun+0x70>)
 8083494:	b10b      	cbz	r3, 808349a <serialEventRun+0x46>
 8083496:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 808349a:	4b0b      	ldr	r3, [pc, #44]	; (80834c8 <serialEventRun+0x74>)
 808349c:	b143      	cbz	r3, 80834b0 <serialEventRun+0x5c>
 808349e:	f7ff ffab 	bl	80833f8 <_Z17_fetch_usbserial1v>
 80834a2:	6803      	ldr	r3, [r0, #0]
 80834a4:	691b      	ldr	r3, [r3, #16]
 80834a6:	4798      	blx	r3
 80834a8:	2800      	cmp	r0, #0
 80834aa:	dd01      	ble.n	80834b0 <serialEventRun+0x5c>
        usbSerialEvent1();
 80834ac:	f3af 8000 	nop.w
}
 80834b0:	bd08      	pop	{r3, pc}
 80834b2:	bf00      	nop
	...

080834cc <_post_loop>:
{
 80834cc:	b508      	push	{r3, lr}
	serialEventRun();
 80834ce:	f7ff ffc1 	bl	8083454 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80834d2:	f7fe fb05 	bl	8081ae0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80834d6:	4b01      	ldr	r3, [pc, #4]	; (80834dc <_post_loop+0x10>)
 80834d8:	6018      	str	r0, [r3, #0]
}
 80834da:	bd08      	pop	{r3, pc}
 80834dc:	200007c4 	.word	0x200007c4

080834e0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80834e0:	4802      	ldr	r0, [pc, #8]	; (80834ec <_Z33system_initialize_user_backup_ramv+0xc>)
 80834e2:	4a03      	ldr	r2, [pc, #12]	; (80834f0 <_Z33system_initialize_user_backup_ramv+0x10>)
 80834e4:	4903      	ldr	r1, [pc, #12]	; (80834f4 <_Z33system_initialize_user_backup_ramv+0x14>)
 80834e6:	1a12      	subs	r2, r2, r0
 80834e8:	f001 b92c 	b.w	8084744 <memcpy>
 80834ec:	40024000 	.word	0x40024000
 80834f0:	40024804 	.word	0x40024804
 80834f4:	08085100 	.word	0x08085100

080834f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80834f8:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80834fa:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80834fc:	461a      	mov	r2, r3
 80834fe:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8083502:	9300      	str	r3, [sp, #0]
 8083504:	f7fe fc8e 	bl	8081e24 <system_ctrl_set_result>
}
 8083508:	b003      	add	sp, #12
 808350a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08083510 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 8083510:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8083512:	8843      	ldrh	r3, [r0, #2]
 8083514:	2b0a      	cmp	r3, #10
 8083516:	d008      	beq.n	808352a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8083518:	2b50      	cmp	r3, #80	; 0x50
 808351a:	d10b      	bne.n	8083534 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 808351c:	4b09      	ldr	r3, [pc, #36]	; (8083544 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 808351e:	681b      	ldr	r3, [r3, #0]
 8083520:	b14b      	cbz	r3, 8083536 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 8083522:	b003      	add	sp, #12
 8083524:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 8083528:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 808352a:	f7ff ffe5 	bl	80834f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 808352e:	b003      	add	sp, #12
 8083530:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8083534:	2300      	movs	r3, #0
 8083536:	461a      	mov	r2, r3
 8083538:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808353c:	9300      	str	r3, [sp, #0]
 808353e:	f7fe fc71 	bl	8081e24 <system_ctrl_set_result>
}
 8083542:	e7f4      	b.n	808352e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 8083544:	200007b0 	.word	0x200007b0

08083548 <module_user_init_hook>:
{
 8083548:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 808354a:	4c12      	ldr	r4, [pc, #72]	; (8083594 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 808354c:	2100      	movs	r1, #0
 808354e:	4812      	ldr	r0, [pc, #72]	; (8083598 <module_user_init_hook+0x50>)
 8083550:	f7fe fd64 	bl	808201c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8083554:	4d11      	ldr	r5, [pc, #68]	; (808359c <module_user_init_hook+0x54>)
 8083556:	6823      	ldr	r3, [r4, #0]
 8083558:	42ab      	cmp	r3, r5
 808355a:	bf0c      	ite	eq
 808355c:	2201      	moveq	r2, #1
 808355e:	2200      	movne	r2, #0
 8083560:	4b0f      	ldr	r3, [pc, #60]	; (80835a0 <module_user_init_hook+0x58>)
 8083562:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8083564:	d002      	beq.n	808356c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 8083566:	f7ff ffbb 	bl	80834e0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 808356a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 808356c:	f7fe faa0 	bl	8081ab0 <HAL_RNG_GetRandomNumber>
 8083570:	4604      	mov	r4, r0
    srand(seed);
 8083572:	f001 f917 	bl	80847a4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8083576:	4b0b      	ldr	r3, [pc, #44]	; (80835a4 <module_user_init_hook+0x5c>)
 8083578:	b113      	cbz	r3, 8083580 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 808357a:	4620      	mov	r0, r4
 808357c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8083580:	2100      	movs	r1, #0
 8083582:	4808      	ldr	r0, [pc, #32]	; (80835a4 <module_user_init_hook+0x5c>)
 8083584:	f7fe fcb2 	bl	8081eec <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8083588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 808358c:	2100      	movs	r1, #0
 808358e:	4806      	ldr	r0, [pc, #24]	; (80835a8 <module_user_init_hook+0x60>)
 8083590:	f7fe bc3e 	b.w	8081e10 <system_ctrl_set_app_request_handler>
 8083594:	40024800 	.word	0x40024800
 8083598:	08083449 	.word	0x08083449
 808359c:	9a271c1e 	.word	0x9a271c1e
 80835a0:	200007ac 	.word	0x200007ac
 80835a4:	00000000 	.word	0x00000000
 80835a8:	08083511 	.word	0x08083511

080835ac <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
 80835ac:	b508      	push	{r3, lr}
 80835ae:	4b02      	ldr	r3, [pc, #8]	; (80835b8 <spark_protocol_instance+0xc>)
 80835b0:	681b      	ldr	r3, [r3, #0]
 80835b2:	681b      	ldr	r3, [r3, #0]
 80835b4:	9301      	str	r3, [sp, #4]
 80835b6:	bd08      	pop	{r3, pc}
 80835b8:	0802019c 	.word	0x0802019c

080835bc <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
 80835bc:	b508      	push	{r3, lr}
 80835be:	4b02      	ldr	r3, [pc, #8]	; (80835c8 <spark_protocol_set_product_id+0xc>)
 80835c0:	681b      	ldr	r3, [r3, #0]
 80835c2:	685b      	ldr	r3, [r3, #4]
 80835c4:	9301      	str	r3, [sp, #4]
 80835c6:	bd08      	pop	{r3, pc}
 80835c8:	0802019c 	.word	0x0802019c

080835cc <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
 80835cc:	b508      	push	{r3, lr}
 80835ce:	4b02      	ldr	r3, [pc, #8]	; (80835d8 <spark_protocol_set_product_firmware_version+0xc>)
 80835d0:	681b      	ldr	r3, [r3, #0]
 80835d2:	689b      	ldr	r3, [r3, #8]
 80835d4:	9301      	str	r3, [sp, #4]
 80835d6:	bd08      	pop	{r3, pc}
 80835d8:	0802019c 	.word	0x0802019c

080835dc <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80835dc:	b510      	push	{r4, lr}
 80835de:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80835e0:	6880      	ldr	r0, [r0, #8]
 80835e2:	b108      	cbz	r0, 80835e8 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80835e4:	f7fe fa44 	bl	8081a70 <os_mutex_recursive_destroy>
 80835e8:	4620      	mov	r0, r4
 80835ea:	bd10      	pop	{r4, pc}

080835ec <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80835ec:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 80835ee:	b570      	push	{r4, r5, r6, lr}
 80835f0:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80835f2:	d901      	bls.n	80835f8 <pinAvailable+0xc>
    return false;
 80835f4:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80835f6:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80835f8:	f1a0 030d 	sub.w	r3, r0, #13
 80835fc:	2b02      	cmp	r3, #2
 80835fe:	d90b      	bls.n	8083618 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 8083600:	2801      	cmp	r0, #1
 8083602:	d826      	bhi.n	8083652 <pinAvailable+0x66>
 8083604:	f000 f8aa 	bl	808375c <_Z19__fetch_global_Wirev>
 8083608:	2100      	movs	r1, #0
 808360a:	7c00      	ldrb	r0, [r0, #16]
 808360c:	f7fe fb08 	bl	8081c20 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 8083610:	f080 0001 	eor.w	r0, r0, #1
 8083614:	b2c0      	uxtb	r0, r0
 8083616:	e7ee      	b.n	80835f6 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 8083618:	4e13      	ldr	r6, [pc, #76]	; (8083668 <pinAvailable+0x7c>)
 808361a:	7831      	ldrb	r1, [r6, #0]
 808361c:	f3bf 8f5b 	dmb	ish
 8083620:	f011 0501 	ands.w	r5, r1, #1
 8083624:	d10f      	bne.n	8083646 <pinAvailable+0x5a>
 8083626:	4630      	mov	r0, r6
 8083628:	f7fc fd50 	bl	80800cc <__cxa_guard_acquire>
 808362c:	b158      	cbz	r0, 8083646 <pinAvailable+0x5a>
 808362e:	4629      	mov	r1, r5
 8083630:	480e      	ldr	r0, [pc, #56]	; (808366c <pinAvailable+0x80>)
 8083632:	f7ff fb33 	bl	8082c9c <_ZN8SPIClassC1E19hal_spi_interface_t>
 8083636:	4630      	mov	r0, r6
 8083638:	f7fc fd4d 	bl	80800d6 <__cxa_guard_release>
 808363c:	4a0c      	ldr	r2, [pc, #48]	; (8083670 <pinAvailable+0x84>)
 808363e:	490d      	ldr	r1, [pc, #52]	; (8083674 <pinAvailable+0x88>)
 8083640:	480a      	ldr	r0, [pc, #40]	; (808366c <pinAvailable+0x80>)
 8083642:	f000 f8cb 	bl	80837dc <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 8083646:	4b09      	ldr	r3, [pc, #36]	; (808366c <pinAvailable+0x80>)
 8083648:	7818      	ldrb	r0, [r3, #0]
 808364a:	f7fe fb19 	bl	8081c80 <hal_spi_is_enabled>
 808364e:	2800      	cmp	r0, #0
 8083650:	d1d0      	bne.n	80835f4 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 8083652:	3c12      	subs	r4, #18
 8083654:	2c01      	cmp	r4, #1
 8083656:	d805      	bhi.n	8083664 <pinAvailable+0x78>
 8083658:	f7ff fe02 	bl	8083260 <_Z22__fetch_global_Serial1v>
 808365c:	7c00      	ldrb	r0, [r0, #16]
 808365e:	f7fe fb47 	bl	8081cf0 <hal_usart_is_enabled>
 8083662:	e7d5      	b.n	8083610 <pinAvailable+0x24>
  return true; // 'pin' is available
 8083664:	2001      	movs	r0, #1
 8083666:	e7c6      	b.n	80835f6 <pinAvailable+0xa>
 8083668:	200007b4 	.word	0x200007b4
 808366c:	200007b8 	.word	0x200007b8
 8083670:	20000100 	.word	0x20000100
 8083674:	080835dd 	.word	0x080835dd

08083678 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8083678:	282e      	cmp	r0, #46	; 0x2e
{
 808367a:	b538      	push	{r3, r4, r5, lr}
 808367c:	4604      	mov	r4, r0
 808367e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8083680:	d80a      	bhi.n	8083698 <pinMode+0x20>
 8083682:	29ff      	cmp	r1, #255	; 0xff
 8083684:	d008      	beq.n	8083698 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 8083686:	f7ff ffb1 	bl	80835ec <pinAvailable>
 808368a:	b128      	cbz	r0, 8083698 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 808368c:	4629      	mov	r1, r5
 808368e:	4620      	mov	r0, r4
}
 8083690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 8083694:	f7fe ba4c 	b.w	8081b30 <HAL_Pin_Mode>
}
 8083698:	bd38      	pop	{r3, r4, r5, pc}

0808369a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 808369a:	b538      	push	{r3, r4, r5, lr}
 808369c:	4604      	mov	r4, r0
 808369e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80836a0:	f7fe fa4e 	bl	8081b40 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80836a4:	28ff      	cmp	r0, #255	; 0xff
 80836a6:	d010      	beq.n	80836ca <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80836a8:	2806      	cmp	r0, #6
 80836aa:	d804      	bhi.n	80836b6 <digitalWrite+0x1c>
 80836ac:	234d      	movs	r3, #77	; 0x4d
 80836ae:	fa23 f000 	lsr.w	r0, r3, r0
 80836b2:	07c3      	lsls	r3, r0, #31
 80836b4:	d409      	bmi.n	80836ca <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80836b6:	4620      	mov	r0, r4
 80836b8:	f7ff ff98 	bl	80835ec <pinAvailable>
 80836bc:	b128      	cbz	r0, 80836ca <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80836be:	4629      	mov	r1, r5
 80836c0:	4620      	mov	r0, r4
}
 80836c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80836c6:	f7fe ba43 	b.w	8081b50 <HAL_GPIO_Write>
}
 80836ca:	bd38      	pop	{r3, r4, r5, pc}

080836cc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80836cc:	b510      	push	{r4, lr}
 80836ce:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80836d0:	f7fe fa36 	bl	8081b40 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80836d4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80836d6:	b2db      	uxtb	r3, r3
 80836d8:	2b01      	cmp	r3, #1
 80836da:	d908      	bls.n	80836ee <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80836dc:	4620      	mov	r0, r4
 80836de:	f7ff ff85 	bl	80835ec <pinAvailable>
 80836e2:	b120      	cbz	r0, 80836ee <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80836e4:	4620      	mov	r0, r4
}
 80836e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80836ea:	f7fe ba39 	b.w	8081b60 <HAL_GPIO_Read>
}
 80836ee:	2000      	movs	r0, #0
 80836f0:	bd10      	pop	{r4, pc}

080836f2 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80836f2:	b510      	push	{r4, lr}
 80836f4:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80836f6:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80836f8:	bf9c      	itt	ls
 80836fa:	340a      	addls	r4, #10
 80836fc:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80836fe:	4620      	mov	r0, r4
 8083700:	f7ff ff74 	bl	80835ec <pinAvailable>
 8083704:	b150      	cbz	r0, 808371c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8083706:	2103      	movs	r1, #3
 8083708:	4620      	mov	r0, r4
 808370a:	f7fe fa09 	bl	8081b20 <HAL_Validate_Pin_Function>
 808370e:	2803      	cmp	r0, #3
 8083710:	d104      	bne.n	808371c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 8083712:	4620      	mov	r0, r4
}
 8083714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 8083718:	f7fe ba3a 	b.w	8081b90 <hal_adc_read>
}
 808371c:	2000      	movs	r0, #0
 808371e:	bd10      	pop	{r4, pc}

08083720 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 8083720:	2300      	movs	r3, #0
hal_i2c_config_t defaultWireConfig() {
 8083722:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 8083724:	2520      	movs	r5, #32
 8083726:	8043      	strh	r3, [r0, #2]
 8083728:	2314      	movs	r3, #20
		.size = sizeof(hal_i2c_config_t),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808372a:	4e08      	ldr	r6, [pc, #32]	; (808374c <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x2c>)
hal_i2c_config_t defaultWireConfig() {
 808372c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 808372e:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083730:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 8083732:	6085      	str	r5, [r0, #8]
 8083734:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083736:	4628      	mov	r0, r5
 8083738:	f000 f859 	bl	80837ee <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808373c:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 808373e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8083740:	4628      	mov	r0, r5
 8083742:	f000 f854 	bl	80837ee <_ZnajRKSt9nothrow_t>
	};
 8083746:	60e0      	str	r0, [r4, #12]

	return config;
}
 8083748:	4620      	mov	r0, r4
 808374a:	bd70      	pop	{r4, r5, r6, pc}
 808374c:	08084f78 	.word	0x08084f78

08083750 <_Z17acquireWireBufferv>:

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 8083750:	b510      	push	{r4, lr}
 8083752:	4604      	mov	r4, r0
	return defaultWireConfig();
 8083754:	f7ff ffe4 	bl	8083720 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 8083758:	4620      	mov	r0, r4
 808375a:	bd10      	pop	{r4, pc}

0808375c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 808375c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808375e:	4d0f      	ldr	r5, [pc, #60]	; (808379c <_Z19__fetch_global_Wirev+0x40>)
{
 8083760:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8083762:	7829      	ldrb	r1, [r5, #0]
 8083764:	f3bf 8f5b 	dmb	ish
 8083768:	f011 0401 	ands.w	r4, r1, #1
 808376c:	d113      	bne.n	8083796 <_Z19__fetch_global_Wirev+0x3a>
 808376e:	4628      	mov	r0, r5
 8083770:	f7fc fcac 	bl	80800cc <__cxa_guard_acquire>
 8083774:	b178      	cbz	r0, 8083796 <_Z19__fetch_global_Wirev+0x3a>
 8083776:	a801      	add	r0, sp, #4
 8083778:	f7ff ffea 	bl	8083750 <_Z17acquireWireBufferv>
 808377c:	4621      	mov	r1, r4
 808377e:	aa01      	add	r2, sp, #4
 8083780:	4807      	ldr	r0, [pc, #28]	; (80837a0 <_Z19__fetch_global_Wirev+0x44>)
 8083782:	f7ff f8d3 	bl	808292c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 8083786:	4628      	mov	r0, r5
 8083788:	f7fc fca5 	bl	80800d6 <__cxa_guard_release>
 808378c:	4a05      	ldr	r2, [pc, #20]	; (80837a4 <_Z19__fetch_global_Wirev+0x48>)
 808378e:	4906      	ldr	r1, [pc, #24]	; (80837a8 <_Z19__fetch_global_Wirev+0x4c>)
 8083790:	4803      	ldr	r0, [pc, #12]	; (80837a0 <_Z19__fetch_global_Wirev+0x44>)
 8083792:	f000 f823 	bl	80837dc <__aeabi_atexit>
	return wire;
}
 8083796:	4802      	ldr	r0, [pc, #8]	; (80837a0 <_Z19__fetch_global_Wirev+0x44>)
 8083798:	b007      	add	sp, #28
 808379a:	bd30      	pop	{r4, r5, pc}
 808379c:	200007c8 	.word	0x200007c8
 80837a0:	200007cc 	.word	0x200007cc
 80837a4:	20000100 	.word	0x20000100
 80837a8:	080828d5 	.word	0x080828d5

080837ac <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80837ac:	2300      	movs	r3, #0
 80837ae:	b513      	push	{r0, r1, r4, lr}
 80837b0:	4c07      	ldr	r4, [pc, #28]	; (80837d0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80837b2:	461a      	mov	r2, r3
 80837b4:	4619      	mov	r1, r3
 80837b6:	4620      	mov	r0, r4
 80837b8:	9300      	str	r3, [sp, #0]
 80837ba:	f7ff f99f 	bl	8082afc <_ZN9IPAddressC1Ehhhh>
 80837be:	4620      	mov	r0, r4
 80837c0:	4a04      	ldr	r2, [pc, #16]	; (80837d4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80837c2:	4905      	ldr	r1, [pc, #20]	; (80837d8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80837c4:	b002      	add	sp, #8
 80837c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80837ca:	f000 b807 	b.w	80837dc <__aeabi_atexit>
 80837ce:	bf00      	nop
 80837d0:	200007e0 	.word	0x200007e0
 80837d4:	20000100 	.word	0x20000100
 80837d8:	08082a75 	.word	0x08082a75

080837dc <__aeabi_atexit>:
 80837dc:	460b      	mov	r3, r1
 80837de:	4601      	mov	r1, r0
 80837e0:	4618      	mov	r0, r3
 80837e2:	f000 bfa1 	b.w	8084728 <__cxa_atexit>

080837e6 <_ZdlPvj>:
 80837e6:	f7fc bc64 	b.w	80800b2 <_ZdlPv>

080837ea <_ZnwjRKSt9nothrow_t>:
 80837ea:	f7fc bc5e 	b.w	80800aa <_Znwj>

080837ee <_ZnajRKSt9nothrow_t>:
 80837ee:	f7fc bc5e 	b.w	80800ae <_Znaj>

080837f2 <_ZSt25__throw_bad_function_callv>:
 80837f2:	b508      	push	{r3, lr}
 80837f4:	f7fe fc02 	bl	8081ffc <abort>

080837f8 <__aeabi_drsub>:
 80837f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80837fc:	e002      	b.n	8083804 <__adddf3>
 80837fe:	bf00      	nop

08083800 <__aeabi_dsub>:
 8083800:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08083804 <__adddf3>:
 8083804:	b530      	push	{r4, r5, lr}
 8083806:	ea4f 0441 	mov.w	r4, r1, lsl #1
 808380a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 808380e:	ea94 0f05 	teq	r4, r5
 8083812:	bf08      	it	eq
 8083814:	ea90 0f02 	teqeq	r0, r2
 8083818:	bf1f      	itttt	ne
 808381a:	ea54 0c00 	orrsne.w	ip, r4, r0
 808381e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8083822:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8083826:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808382a:	f000 80e2 	beq.w	80839f2 <__adddf3+0x1ee>
 808382e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8083832:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8083836:	bfb8      	it	lt
 8083838:	426d      	neglt	r5, r5
 808383a:	dd0c      	ble.n	8083856 <__adddf3+0x52>
 808383c:	442c      	add	r4, r5
 808383e:	ea80 0202 	eor.w	r2, r0, r2
 8083842:	ea81 0303 	eor.w	r3, r1, r3
 8083846:	ea82 0000 	eor.w	r0, r2, r0
 808384a:	ea83 0101 	eor.w	r1, r3, r1
 808384e:	ea80 0202 	eor.w	r2, r0, r2
 8083852:	ea81 0303 	eor.w	r3, r1, r3
 8083856:	2d36      	cmp	r5, #54	; 0x36
 8083858:	bf88      	it	hi
 808385a:	bd30      	pophi	{r4, r5, pc}
 808385c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8083860:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083864:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8083868:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 808386c:	d002      	beq.n	8083874 <__adddf3+0x70>
 808386e:	4240      	negs	r0, r0
 8083870:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083874:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8083878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808387c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8083880:	d002      	beq.n	8083888 <__adddf3+0x84>
 8083882:	4252      	negs	r2, r2
 8083884:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8083888:	ea94 0f05 	teq	r4, r5
 808388c:	f000 80a7 	beq.w	80839de <__adddf3+0x1da>
 8083890:	f1a4 0401 	sub.w	r4, r4, #1
 8083894:	f1d5 0e20 	rsbs	lr, r5, #32
 8083898:	db0d      	blt.n	80838b6 <__adddf3+0xb2>
 808389a:	fa02 fc0e 	lsl.w	ip, r2, lr
 808389e:	fa22 f205 	lsr.w	r2, r2, r5
 80838a2:	1880      	adds	r0, r0, r2
 80838a4:	f141 0100 	adc.w	r1, r1, #0
 80838a8:	fa03 f20e 	lsl.w	r2, r3, lr
 80838ac:	1880      	adds	r0, r0, r2
 80838ae:	fa43 f305 	asr.w	r3, r3, r5
 80838b2:	4159      	adcs	r1, r3
 80838b4:	e00e      	b.n	80838d4 <__adddf3+0xd0>
 80838b6:	f1a5 0520 	sub.w	r5, r5, #32
 80838ba:	f10e 0e20 	add.w	lr, lr, #32
 80838be:	2a01      	cmp	r2, #1
 80838c0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80838c4:	bf28      	it	cs
 80838c6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80838ca:	fa43 f305 	asr.w	r3, r3, r5
 80838ce:	18c0      	adds	r0, r0, r3
 80838d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80838d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80838d8:	d507      	bpl.n	80838ea <__adddf3+0xe6>
 80838da:	f04f 0e00 	mov.w	lr, #0
 80838de:	f1dc 0c00 	rsbs	ip, ip, #0
 80838e2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80838e6:	eb6e 0101 	sbc.w	r1, lr, r1
 80838ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80838ee:	d31b      	bcc.n	8083928 <__adddf3+0x124>
 80838f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80838f4:	d30c      	bcc.n	8083910 <__adddf3+0x10c>
 80838f6:	0849      	lsrs	r1, r1, #1
 80838f8:	ea5f 0030 	movs.w	r0, r0, rrx
 80838fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8083900:	f104 0401 	add.w	r4, r4, #1
 8083904:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8083908:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 808390c:	f080 809a 	bcs.w	8083a44 <__adddf3+0x240>
 8083910:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8083914:	bf08      	it	eq
 8083916:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808391a:	f150 0000 	adcs.w	r0, r0, #0
 808391e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083922:	ea41 0105 	orr.w	r1, r1, r5
 8083926:	bd30      	pop	{r4, r5, pc}
 8083928:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 808392c:	4140      	adcs	r0, r0
 808392e:	eb41 0101 	adc.w	r1, r1, r1
 8083932:	3c01      	subs	r4, #1
 8083934:	bf28      	it	cs
 8083936:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 808393a:	d2e9      	bcs.n	8083910 <__adddf3+0x10c>
 808393c:	f091 0f00 	teq	r1, #0
 8083940:	bf04      	itt	eq
 8083942:	4601      	moveq	r1, r0
 8083944:	2000      	moveq	r0, #0
 8083946:	fab1 f381 	clz	r3, r1
 808394a:	bf08      	it	eq
 808394c:	3320      	addeq	r3, #32
 808394e:	f1a3 030b 	sub.w	r3, r3, #11
 8083952:	f1b3 0220 	subs.w	r2, r3, #32
 8083956:	da0c      	bge.n	8083972 <__adddf3+0x16e>
 8083958:	320c      	adds	r2, #12
 808395a:	dd08      	ble.n	808396e <__adddf3+0x16a>
 808395c:	f102 0c14 	add.w	ip, r2, #20
 8083960:	f1c2 020c 	rsb	r2, r2, #12
 8083964:	fa01 f00c 	lsl.w	r0, r1, ip
 8083968:	fa21 f102 	lsr.w	r1, r1, r2
 808396c:	e00c      	b.n	8083988 <__adddf3+0x184>
 808396e:	f102 0214 	add.w	r2, r2, #20
 8083972:	bfd8      	it	le
 8083974:	f1c2 0c20 	rsble	ip, r2, #32
 8083978:	fa01 f102 	lsl.w	r1, r1, r2
 808397c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8083980:	bfdc      	itt	le
 8083982:	ea41 010c 	orrle.w	r1, r1, ip
 8083986:	4090      	lslle	r0, r2
 8083988:	1ae4      	subs	r4, r4, r3
 808398a:	bfa2      	ittt	ge
 808398c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8083990:	4329      	orrge	r1, r5
 8083992:	bd30      	popge	{r4, r5, pc}
 8083994:	ea6f 0404 	mvn.w	r4, r4
 8083998:	3c1f      	subs	r4, #31
 808399a:	da1c      	bge.n	80839d6 <__adddf3+0x1d2>
 808399c:	340c      	adds	r4, #12
 808399e:	dc0e      	bgt.n	80839be <__adddf3+0x1ba>
 80839a0:	f104 0414 	add.w	r4, r4, #20
 80839a4:	f1c4 0220 	rsb	r2, r4, #32
 80839a8:	fa20 f004 	lsr.w	r0, r0, r4
 80839ac:	fa01 f302 	lsl.w	r3, r1, r2
 80839b0:	ea40 0003 	orr.w	r0, r0, r3
 80839b4:	fa21 f304 	lsr.w	r3, r1, r4
 80839b8:	ea45 0103 	orr.w	r1, r5, r3
 80839bc:	bd30      	pop	{r4, r5, pc}
 80839be:	f1c4 040c 	rsb	r4, r4, #12
 80839c2:	f1c4 0220 	rsb	r2, r4, #32
 80839c6:	fa20 f002 	lsr.w	r0, r0, r2
 80839ca:	fa01 f304 	lsl.w	r3, r1, r4
 80839ce:	ea40 0003 	orr.w	r0, r0, r3
 80839d2:	4629      	mov	r1, r5
 80839d4:	bd30      	pop	{r4, r5, pc}
 80839d6:	fa21 f004 	lsr.w	r0, r1, r4
 80839da:	4629      	mov	r1, r5
 80839dc:	bd30      	pop	{r4, r5, pc}
 80839de:	f094 0f00 	teq	r4, #0
 80839e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80839e6:	bf06      	itte	eq
 80839e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80839ec:	3401      	addeq	r4, #1
 80839ee:	3d01      	subne	r5, #1
 80839f0:	e74e      	b.n	8083890 <__adddf3+0x8c>
 80839f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80839f6:	bf18      	it	ne
 80839f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80839fc:	d029      	beq.n	8083a52 <__adddf3+0x24e>
 80839fe:	ea94 0f05 	teq	r4, r5
 8083a02:	bf08      	it	eq
 8083a04:	ea90 0f02 	teqeq	r0, r2
 8083a08:	d005      	beq.n	8083a16 <__adddf3+0x212>
 8083a0a:	ea54 0c00 	orrs.w	ip, r4, r0
 8083a0e:	bf04      	itt	eq
 8083a10:	4619      	moveq	r1, r3
 8083a12:	4610      	moveq	r0, r2
 8083a14:	bd30      	pop	{r4, r5, pc}
 8083a16:	ea91 0f03 	teq	r1, r3
 8083a1a:	bf1e      	ittt	ne
 8083a1c:	2100      	movne	r1, #0
 8083a1e:	2000      	movne	r0, #0
 8083a20:	bd30      	popne	{r4, r5, pc}
 8083a22:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8083a26:	d105      	bne.n	8083a34 <__adddf3+0x230>
 8083a28:	0040      	lsls	r0, r0, #1
 8083a2a:	4149      	adcs	r1, r1
 8083a2c:	bf28      	it	cs
 8083a2e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8083a32:	bd30      	pop	{r4, r5, pc}
 8083a34:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8083a38:	bf3c      	itt	cc
 8083a3a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8083a3e:	bd30      	popcc	{r4, r5, pc}
 8083a40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083a44:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8083a48:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083a4c:	f04f 0000 	mov.w	r0, #0
 8083a50:	bd30      	pop	{r4, r5, pc}
 8083a52:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8083a56:	bf1a      	itte	ne
 8083a58:	4619      	movne	r1, r3
 8083a5a:	4610      	movne	r0, r2
 8083a5c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8083a60:	bf1c      	itt	ne
 8083a62:	460b      	movne	r3, r1
 8083a64:	4602      	movne	r2, r0
 8083a66:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083a6a:	bf06      	itte	eq
 8083a6c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8083a70:	ea91 0f03 	teqeq	r1, r3
 8083a74:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8083a78:	bd30      	pop	{r4, r5, pc}
 8083a7a:	bf00      	nop

08083a7c <__aeabi_ui2d>:
 8083a7c:	f090 0f00 	teq	r0, #0
 8083a80:	bf04      	itt	eq
 8083a82:	2100      	moveq	r1, #0
 8083a84:	4770      	bxeq	lr
 8083a86:	b530      	push	{r4, r5, lr}
 8083a88:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083a8c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083a90:	f04f 0500 	mov.w	r5, #0
 8083a94:	f04f 0100 	mov.w	r1, #0
 8083a98:	e750      	b.n	808393c <__adddf3+0x138>
 8083a9a:	bf00      	nop

08083a9c <__aeabi_i2d>:
 8083a9c:	f090 0f00 	teq	r0, #0
 8083aa0:	bf04      	itt	eq
 8083aa2:	2100      	moveq	r1, #0
 8083aa4:	4770      	bxeq	lr
 8083aa6:	b530      	push	{r4, r5, lr}
 8083aa8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083aac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083ab0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8083ab4:	bf48      	it	mi
 8083ab6:	4240      	negmi	r0, r0
 8083ab8:	f04f 0100 	mov.w	r1, #0
 8083abc:	e73e      	b.n	808393c <__adddf3+0x138>
 8083abe:	bf00      	nop

08083ac0 <__aeabi_f2d>:
 8083ac0:	0042      	lsls	r2, r0, #1
 8083ac2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8083ac6:	ea4f 0131 	mov.w	r1, r1, rrx
 8083aca:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8083ace:	bf1f      	itttt	ne
 8083ad0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8083ad4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8083ad8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8083adc:	4770      	bxne	lr
 8083ade:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8083ae2:	bf08      	it	eq
 8083ae4:	4770      	bxeq	lr
 8083ae6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8083aea:	bf04      	itt	eq
 8083aec:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8083af0:	4770      	bxeq	lr
 8083af2:	b530      	push	{r4, r5, lr}
 8083af4:	f44f 7460 	mov.w	r4, #896	; 0x380
 8083af8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083afc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083b00:	e71c      	b.n	808393c <__adddf3+0x138>
 8083b02:	bf00      	nop

08083b04 <__aeabi_ul2d>:
 8083b04:	ea50 0201 	orrs.w	r2, r0, r1
 8083b08:	bf08      	it	eq
 8083b0a:	4770      	bxeq	lr
 8083b0c:	b530      	push	{r4, r5, lr}
 8083b0e:	f04f 0500 	mov.w	r5, #0
 8083b12:	e00a      	b.n	8083b2a <__aeabi_l2d+0x16>

08083b14 <__aeabi_l2d>:
 8083b14:	ea50 0201 	orrs.w	r2, r0, r1
 8083b18:	bf08      	it	eq
 8083b1a:	4770      	bxeq	lr
 8083b1c:	b530      	push	{r4, r5, lr}
 8083b1e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8083b22:	d502      	bpl.n	8083b2a <__aeabi_l2d+0x16>
 8083b24:	4240      	negs	r0, r0
 8083b26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083b2a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083b2e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083b32:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8083b36:	f43f aed8 	beq.w	80838ea <__adddf3+0xe6>
 8083b3a:	f04f 0203 	mov.w	r2, #3
 8083b3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8083b42:	bf18      	it	ne
 8083b44:	3203      	addne	r2, #3
 8083b46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8083b4a:	bf18      	it	ne
 8083b4c:	3203      	addne	r2, #3
 8083b4e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8083b52:	f1c2 0320 	rsb	r3, r2, #32
 8083b56:	fa00 fc03 	lsl.w	ip, r0, r3
 8083b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8083b5e:	fa01 fe03 	lsl.w	lr, r1, r3
 8083b62:	ea40 000e 	orr.w	r0, r0, lr
 8083b66:	fa21 f102 	lsr.w	r1, r1, r2
 8083b6a:	4414      	add	r4, r2
 8083b6c:	e6bd      	b.n	80838ea <__adddf3+0xe6>
 8083b6e:	bf00      	nop

08083b70 <__aeabi_dmul>:
 8083b70:	b570      	push	{r4, r5, r6, lr}
 8083b72:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083b76:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083b7a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8083b7e:	bf1d      	ittte	ne
 8083b80:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083b84:	ea94 0f0c 	teqne	r4, ip
 8083b88:	ea95 0f0c 	teqne	r5, ip
 8083b8c:	f000 f8de 	bleq	8083d4c <__aeabi_dmul+0x1dc>
 8083b90:	442c      	add	r4, r5
 8083b92:	ea81 0603 	eor.w	r6, r1, r3
 8083b96:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8083b9a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8083b9e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8083ba2:	bf18      	it	ne
 8083ba4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8083ba8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083bac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8083bb0:	d038      	beq.n	8083c24 <__aeabi_dmul+0xb4>
 8083bb2:	fba0 ce02 	umull	ip, lr, r0, r2
 8083bb6:	f04f 0500 	mov.w	r5, #0
 8083bba:	fbe1 e502 	umlal	lr, r5, r1, r2
 8083bbe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8083bc2:	fbe0 e503 	umlal	lr, r5, r0, r3
 8083bc6:	f04f 0600 	mov.w	r6, #0
 8083bca:	fbe1 5603 	umlal	r5, r6, r1, r3
 8083bce:	f09c 0f00 	teq	ip, #0
 8083bd2:	bf18      	it	ne
 8083bd4:	f04e 0e01 	orrne.w	lr, lr, #1
 8083bd8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8083bdc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8083be0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8083be4:	d204      	bcs.n	8083bf0 <__aeabi_dmul+0x80>
 8083be6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8083bea:	416d      	adcs	r5, r5
 8083bec:	eb46 0606 	adc.w	r6, r6, r6
 8083bf0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8083bf4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8083bf8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8083bfc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8083c00:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8083c04:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083c08:	bf88      	it	hi
 8083c0a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083c0e:	d81e      	bhi.n	8083c4e <__aeabi_dmul+0xde>
 8083c10:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8083c14:	bf08      	it	eq
 8083c16:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8083c1a:	f150 0000 	adcs.w	r0, r0, #0
 8083c1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083c22:	bd70      	pop	{r4, r5, r6, pc}
 8083c24:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8083c28:	ea46 0101 	orr.w	r1, r6, r1
 8083c2c:	ea40 0002 	orr.w	r0, r0, r2
 8083c30:	ea81 0103 	eor.w	r1, r1, r3
 8083c34:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8083c38:	bfc2      	ittt	gt
 8083c3a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8083c3e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083c42:	bd70      	popgt	{r4, r5, r6, pc}
 8083c44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083c48:	f04f 0e00 	mov.w	lr, #0
 8083c4c:	3c01      	subs	r4, #1
 8083c4e:	f300 80ab 	bgt.w	8083da8 <__aeabi_dmul+0x238>
 8083c52:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8083c56:	bfde      	ittt	le
 8083c58:	2000      	movle	r0, #0
 8083c5a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8083c5e:	bd70      	pople	{r4, r5, r6, pc}
 8083c60:	f1c4 0400 	rsb	r4, r4, #0
 8083c64:	3c20      	subs	r4, #32
 8083c66:	da35      	bge.n	8083cd4 <__aeabi_dmul+0x164>
 8083c68:	340c      	adds	r4, #12
 8083c6a:	dc1b      	bgt.n	8083ca4 <__aeabi_dmul+0x134>
 8083c6c:	f104 0414 	add.w	r4, r4, #20
 8083c70:	f1c4 0520 	rsb	r5, r4, #32
 8083c74:	fa00 f305 	lsl.w	r3, r0, r5
 8083c78:	fa20 f004 	lsr.w	r0, r0, r4
 8083c7c:	fa01 f205 	lsl.w	r2, r1, r5
 8083c80:	ea40 0002 	orr.w	r0, r0, r2
 8083c84:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8083c88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083c8c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083c90:	fa21 f604 	lsr.w	r6, r1, r4
 8083c94:	eb42 0106 	adc.w	r1, r2, r6
 8083c98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083c9c:	bf08      	it	eq
 8083c9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083ca2:	bd70      	pop	{r4, r5, r6, pc}
 8083ca4:	f1c4 040c 	rsb	r4, r4, #12
 8083ca8:	f1c4 0520 	rsb	r5, r4, #32
 8083cac:	fa00 f304 	lsl.w	r3, r0, r4
 8083cb0:	fa20 f005 	lsr.w	r0, r0, r5
 8083cb4:	fa01 f204 	lsl.w	r2, r1, r4
 8083cb8:	ea40 0002 	orr.w	r0, r0, r2
 8083cbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083cc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083cc4:	f141 0100 	adc.w	r1, r1, #0
 8083cc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083ccc:	bf08      	it	eq
 8083cce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083cd2:	bd70      	pop	{r4, r5, r6, pc}
 8083cd4:	f1c4 0520 	rsb	r5, r4, #32
 8083cd8:	fa00 f205 	lsl.w	r2, r0, r5
 8083cdc:	ea4e 0e02 	orr.w	lr, lr, r2
 8083ce0:	fa20 f304 	lsr.w	r3, r0, r4
 8083ce4:	fa01 f205 	lsl.w	r2, r1, r5
 8083ce8:	ea43 0302 	orr.w	r3, r3, r2
 8083cec:	fa21 f004 	lsr.w	r0, r1, r4
 8083cf0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083cf4:	fa21 f204 	lsr.w	r2, r1, r4
 8083cf8:	ea20 0002 	bic.w	r0, r0, r2
 8083cfc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8083d00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083d04:	bf08      	it	eq
 8083d06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083d0a:	bd70      	pop	{r4, r5, r6, pc}
 8083d0c:	f094 0f00 	teq	r4, #0
 8083d10:	d10f      	bne.n	8083d32 <__aeabi_dmul+0x1c2>
 8083d12:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8083d16:	0040      	lsls	r0, r0, #1
 8083d18:	eb41 0101 	adc.w	r1, r1, r1
 8083d1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083d20:	bf08      	it	eq
 8083d22:	3c01      	subeq	r4, #1
 8083d24:	d0f7      	beq.n	8083d16 <__aeabi_dmul+0x1a6>
 8083d26:	ea41 0106 	orr.w	r1, r1, r6
 8083d2a:	f095 0f00 	teq	r5, #0
 8083d2e:	bf18      	it	ne
 8083d30:	4770      	bxne	lr
 8083d32:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8083d36:	0052      	lsls	r2, r2, #1
 8083d38:	eb43 0303 	adc.w	r3, r3, r3
 8083d3c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8083d40:	bf08      	it	eq
 8083d42:	3d01      	subeq	r5, #1
 8083d44:	d0f7      	beq.n	8083d36 <__aeabi_dmul+0x1c6>
 8083d46:	ea43 0306 	orr.w	r3, r3, r6
 8083d4a:	4770      	bx	lr
 8083d4c:	ea94 0f0c 	teq	r4, ip
 8083d50:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083d54:	bf18      	it	ne
 8083d56:	ea95 0f0c 	teqne	r5, ip
 8083d5a:	d00c      	beq.n	8083d76 <__aeabi_dmul+0x206>
 8083d5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083d60:	bf18      	it	ne
 8083d62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083d66:	d1d1      	bne.n	8083d0c <__aeabi_dmul+0x19c>
 8083d68:	ea81 0103 	eor.w	r1, r1, r3
 8083d6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083d70:	f04f 0000 	mov.w	r0, #0
 8083d74:	bd70      	pop	{r4, r5, r6, pc}
 8083d76:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083d7a:	bf06      	itte	eq
 8083d7c:	4610      	moveq	r0, r2
 8083d7e:	4619      	moveq	r1, r3
 8083d80:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083d84:	d019      	beq.n	8083dba <__aeabi_dmul+0x24a>
 8083d86:	ea94 0f0c 	teq	r4, ip
 8083d8a:	d102      	bne.n	8083d92 <__aeabi_dmul+0x222>
 8083d8c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8083d90:	d113      	bne.n	8083dba <__aeabi_dmul+0x24a>
 8083d92:	ea95 0f0c 	teq	r5, ip
 8083d96:	d105      	bne.n	8083da4 <__aeabi_dmul+0x234>
 8083d98:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8083d9c:	bf1c      	itt	ne
 8083d9e:	4610      	movne	r0, r2
 8083da0:	4619      	movne	r1, r3
 8083da2:	d10a      	bne.n	8083dba <__aeabi_dmul+0x24a>
 8083da4:	ea81 0103 	eor.w	r1, r1, r3
 8083da8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083dac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083db0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083db4:	f04f 0000 	mov.w	r0, #0
 8083db8:	bd70      	pop	{r4, r5, r6, pc}
 8083dba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083dbe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8083dc2:	bd70      	pop	{r4, r5, r6, pc}

08083dc4 <__aeabi_ddiv>:
 8083dc4:	b570      	push	{r4, r5, r6, lr}
 8083dc6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083dca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083dce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8083dd2:	bf1d      	ittte	ne
 8083dd4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083dd8:	ea94 0f0c 	teqne	r4, ip
 8083ddc:	ea95 0f0c 	teqne	r5, ip
 8083de0:	f000 f8a7 	bleq	8083f32 <__aeabi_ddiv+0x16e>
 8083de4:	eba4 0405 	sub.w	r4, r4, r5
 8083de8:	ea81 0e03 	eor.w	lr, r1, r3
 8083dec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083df0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083df4:	f000 8088 	beq.w	8083f08 <__aeabi_ddiv+0x144>
 8083df8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083dfc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8083e00:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8083e04:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8083e08:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8083e0c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8083e10:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8083e14:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8083e18:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8083e1c:	429d      	cmp	r5, r3
 8083e1e:	bf08      	it	eq
 8083e20:	4296      	cmpeq	r6, r2
 8083e22:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8083e26:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8083e2a:	d202      	bcs.n	8083e32 <__aeabi_ddiv+0x6e>
 8083e2c:	085b      	lsrs	r3, r3, #1
 8083e2e:	ea4f 0232 	mov.w	r2, r2, rrx
 8083e32:	1ab6      	subs	r6, r6, r2
 8083e34:	eb65 0503 	sbc.w	r5, r5, r3
 8083e38:	085b      	lsrs	r3, r3, #1
 8083e3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8083e3e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8083e42:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8083e46:	ebb6 0e02 	subs.w	lr, r6, r2
 8083e4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083e4e:	bf22      	ittt	cs
 8083e50:	1ab6      	subcs	r6, r6, r2
 8083e52:	4675      	movcs	r5, lr
 8083e54:	ea40 000c 	orrcs.w	r0, r0, ip
 8083e58:	085b      	lsrs	r3, r3, #1
 8083e5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8083e5e:	ebb6 0e02 	subs.w	lr, r6, r2
 8083e62:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083e66:	bf22      	ittt	cs
 8083e68:	1ab6      	subcs	r6, r6, r2
 8083e6a:	4675      	movcs	r5, lr
 8083e6c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8083e70:	085b      	lsrs	r3, r3, #1
 8083e72:	ea4f 0232 	mov.w	r2, r2, rrx
 8083e76:	ebb6 0e02 	subs.w	lr, r6, r2
 8083e7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083e7e:	bf22      	ittt	cs
 8083e80:	1ab6      	subcs	r6, r6, r2
 8083e82:	4675      	movcs	r5, lr
 8083e84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8083e88:	085b      	lsrs	r3, r3, #1
 8083e8a:	ea4f 0232 	mov.w	r2, r2, rrx
 8083e8e:	ebb6 0e02 	subs.w	lr, r6, r2
 8083e92:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083e96:	bf22      	ittt	cs
 8083e98:	1ab6      	subcs	r6, r6, r2
 8083e9a:	4675      	movcs	r5, lr
 8083e9c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8083ea0:	ea55 0e06 	orrs.w	lr, r5, r6
 8083ea4:	d018      	beq.n	8083ed8 <__aeabi_ddiv+0x114>
 8083ea6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8083eaa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8083eae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8083eb2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8083eb6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8083eba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8083ebe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8083ec2:	d1c0      	bne.n	8083e46 <__aeabi_ddiv+0x82>
 8083ec4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083ec8:	d10b      	bne.n	8083ee2 <__aeabi_ddiv+0x11e>
 8083eca:	ea41 0100 	orr.w	r1, r1, r0
 8083ece:	f04f 0000 	mov.w	r0, #0
 8083ed2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8083ed6:	e7b6      	b.n	8083e46 <__aeabi_ddiv+0x82>
 8083ed8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083edc:	bf04      	itt	eq
 8083ede:	4301      	orreq	r1, r0
 8083ee0:	2000      	moveq	r0, #0
 8083ee2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083ee6:	bf88      	it	hi
 8083ee8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083eec:	f63f aeaf 	bhi.w	8083c4e <__aeabi_dmul+0xde>
 8083ef0:	ebb5 0c03 	subs.w	ip, r5, r3
 8083ef4:	bf04      	itt	eq
 8083ef6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8083efa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8083efe:	f150 0000 	adcs.w	r0, r0, #0
 8083f02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083f06:	bd70      	pop	{r4, r5, r6, pc}
 8083f08:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8083f0c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8083f10:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8083f14:	bfc2      	ittt	gt
 8083f16:	ebd4 050c 	rsbsgt	r5, r4, ip
 8083f1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083f1e:	bd70      	popgt	{r4, r5, r6, pc}
 8083f20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083f24:	f04f 0e00 	mov.w	lr, #0
 8083f28:	3c01      	subs	r4, #1
 8083f2a:	e690      	b.n	8083c4e <__aeabi_dmul+0xde>
 8083f2c:	ea45 0e06 	orr.w	lr, r5, r6
 8083f30:	e68d      	b.n	8083c4e <__aeabi_dmul+0xde>
 8083f32:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083f36:	ea94 0f0c 	teq	r4, ip
 8083f3a:	bf08      	it	eq
 8083f3c:	ea95 0f0c 	teqeq	r5, ip
 8083f40:	f43f af3b 	beq.w	8083dba <__aeabi_dmul+0x24a>
 8083f44:	ea94 0f0c 	teq	r4, ip
 8083f48:	d10a      	bne.n	8083f60 <__aeabi_ddiv+0x19c>
 8083f4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083f4e:	f47f af34 	bne.w	8083dba <__aeabi_dmul+0x24a>
 8083f52:	ea95 0f0c 	teq	r5, ip
 8083f56:	f47f af25 	bne.w	8083da4 <__aeabi_dmul+0x234>
 8083f5a:	4610      	mov	r0, r2
 8083f5c:	4619      	mov	r1, r3
 8083f5e:	e72c      	b.n	8083dba <__aeabi_dmul+0x24a>
 8083f60:	ea95 0f0c 	teq	r5, ip
 8083f64:	d106      	bne.n	8083f74 <__aeabi_ddiv+0x1b0>
 8083f66:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083f6a:	f43f aefd 	beq.w	8083d68 <__aeabi_dmul+0x1f8>
 8083f6e:	4610      	mov	r0, r2
 8083f70:	4619      	mov	r1, r3
 8083f72:	e722      	b.n	8083dba <__aeabi_dmul+0x24a>
 8083f74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083f78:	bf18      	it	ne
 8083f7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083f7e:	f47f aec5 	bne.w	8083d0c <__aeabi_dmul+0x19c>
 8083f82:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8083f86:	f47f af0d 	bne.w	8083da4 <__aeabi_dmul+0x234>
 8083f8a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8083f8e:	f47f aeeb 	bne.w	8083d68 <__aeabi_dmul+0x1f8>
 8083f92:	e712      	b.n	8083dba <__aeabi_dmul+0x24a>

08083f94 <__aeabi_d2iz>:
 8083f94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8083f98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8083f9c:	d215      	bcs.n	8083fca <__aeabi_d2iz+0x36>
 8083f9e:	d511      	bpl.n	8083fc4 <__aeabi_d2iz+0x30>
 8083fa0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8083fa4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8083fa8:	d912      	bls.n	8083fd0 <__aeabi_d2iz+0x3c>
 8083faa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8083fae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8083fb2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8083fb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8083fba:	fa23 f002 	lsr.w	r0, r3, r2
 8083fbe:	bf18      	it	ne
 8083fc0:	4240      	negne	r0, r0
 8083fc2:	4770      	bx	lr
 8083fc4:	f04f 0000 	mov.w	r0, #0
 8083fc8:	4770      	bx	lr
 8083fca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8083fce:	d105      	bne.n	8083fdc <__aeabi_d2iz+0x48>
 8083fd0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8083fd4:	bf08      	it	eq
 8083fd6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8083fda:	4770      	bx	lr
 8083fdc:	f04f 0000 	mov.w	r0, #0
 8083fe0:	4770      	bx	lr
 8083fe2:	bf00      	nop

08083fe4 <__aeabi_d2uiz>:
 8083fe4:	004a      	lsls	r2, r1, #1
 8083fe6:	d211      	bcs.n	808400c <__aeabi_d2uiz+0x28>
 8083fe8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8083fec:	d211      	bcs.n	8084012 <__aeabi_d2uiz+0x2e>
 8083fee:	d50d      	bpl.n	808400c <__aeabi_d2uiz+0x28>
 8083ff0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8083ff4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8083ff8:	d40e      	bmi.n	8084018 <__aeabi_d2uiz+0x34>
 8083ffa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8083ffe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8084002:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8084006:	fa23 f002 	lsr.w	r0, r3, r2
 808400a:	4770      	bx	lr
 808400c:	f04f 0000 	mov.w	r0, #0
 8084010:	4770      	bx	lr
 8084012:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8084016:	d102      	bne.n	808401e <__aeabi_d2uiz+0x3a>
 8084018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 808401c:	4770      	bx	lr
 808401e:	f04f 0000 	mov.w	r0, #0
 8084022:	4770      	bx	lr

08084024 <__aeabi_d2f>:
 8084024:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8084028:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 808402c:	bf24      	itt	cs
 808402e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8084032:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8084036:	d90d      	bls.n	8084054 <__aeabi_d2f+0x30>
 8084038:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808403c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8084040:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8084044:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8084048:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 808404c:	bf08      	it	eq
 808404e:	f020 0001 	biceq.w	r0, r0, #1
 8084052:	4770      	bx	lr
 8084054:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8084058:	d121      	bne.n	808409e <__aeabi_d2f+0x7a>
 808405a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 808405e:	bfbc      	itt	lt
 8084060:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8084064:	4770      	bxlt	lr
 8084066:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808406a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 808406e:	f1c2 0218 	rsb	r2, r2, #24
 8084072:	f1c2 0c20 	rsb	ip, r2, #32
 8084076:	fa10 f30c 	lsls.w	r3, r0, ip
 808407a:	fa20 f002 	lsr.w	r0, r0, r2
 808407e:	bf18      	it	ne
 8084080:	f040 0001 	orrne.w	r0, r0, #1
 8084084:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8084088:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 808408c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8084090:	ea40 000c 	orr.w	r0, r0, ip
 8084094:	fa23 f302 	lsr.w	r3, r3, r2
 8084098:	ea4f 0343 	mov.w	r3, r3, lsl #1
 808409c:	e7cc      	b.n	8084038 <__aeabi_d2f+0x14>
 808409e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80840a2:	d107      	bne.n	80840b4 <__aeabi_d2f+0x90>
 80840a4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80840a8:	bf1e      	ittt	ne
 80840aa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80840ae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80840b2:	4770      	bxne	lr
 80840b4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80840b8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80840bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80840c0:	4770      	bx	lr
 80840c2:	bf00      	nop

080840c4 <__aeabi_frsub>:
 80840c4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80840c8:	e002      	b.n	80840d0 <__addsf3>
 80840ca:	bf00      	nop

080840cc <__aeabi_fsub>:
 80840cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080840d0 <__addsf3>:
 80840d0:	0042      	lsls	r2, r0, #1
 80840d2:	bf1f      	itttt	ne
 80840d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80840d8:	ea92 0f03 	teqne	r2, r3
 80840dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80840e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80840e4:	d06a      	beq.n	80841bc <__addsf3+0xec>
 80840e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80840ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80840ee:	bfc1      	itttt	gt
 80840f0:	18d2      	addgt	r2, r2, r3
 80840f2:	4041      	eorgt	r1, r0
 80840f4:	4048      	eorgt	r0, r1
 80840f6:	4041      	eorgt	r1, r0
 80840f8:	bfb8      	it	lt
 80840fa:	425b      	neglt	r3, r3
 80840fc:	2b19      	cmp	r3, #25
 80840fe:	bf88      	it	hi
 8084100:	4770      	bxhi	lr
 8084102:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8084106:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808410a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808410e:	bf18      	it	ne
 8084110:	4240      	negne	r0, r0
 8084112:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8084116:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 808411a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808411e:	bf18      	it	ne
 8084120:	4249      	negne	r1, r1
 8084122:	ea92 0f03 	teq	r2, r3
 8084126:	d03f      	beq.n	80841a8 <__addsf3+0xd8>
 8084128:	f1a2 0201 	sub.w	r2, r2, #1
 808412c:	fa41 fc03 	asr.w	ip, r1, r3
 8084130:	eb10 000c 	adds.w	r0, r0, ip
 8084134:	f1c3 0320 	rsb	r3, r3, #32
 8084138:	fa01 f103 	lsl.w	r1, r1, r3
 808413c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8084140:	d502      	bpl.n	8084148 <__addsf3+0x78>
 8084142:	4249      	negs	r1, r1
 8084144:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8084148:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 808414c:	d313      	bcc.n	8084176 <__addsf3+0xa6>
 808414e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8084152:	d306      	bcc.n	8084162 <__addsf3+0x92>
 8084154:	0840      	lsrs	r0, r0, #1
 8084156:	ea4f 0131 	mov.w	r1, r1, rrx
 808415a:	f102 0201 	add.w	r2, r2, #1
 808415e:	2afe      	cmp	r2, #254	; 0xfe
 8084160:	d251      	bcs.n	8084206 <__addsf3+0x136>
 8084162:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8084166:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808416a:	bf08      	it	eq
 808416c:	f020 0001 	biceq.w	r0, r0, #1
 8084170:	ea40 0003 	orr.w	r0, r0, r3
 8084174:	4770      	bx	lr
 8084176:	0049      	lsls	r1, r1, #1
 8084178:	eb40 0000 	adc.w	r0, r0, r0
 808417c:	3a01      	subs	r2, #1
 808417e:	bf28      	it	cs
 8084180:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8084184:	d2ed      	bcs.n	8084162 <__addsf3+0x92>
 8084186:	fab0 fc80 	clz	ip, r0
 808418a:	f1ac 0c08 	sub.w	ip, ip, #8
 808418e:	ebb2 020c 	subs.w	r2, r2, ip
 8084192:	fa00 f00c 	lsl.w	r0, r0, ip
 8084196:	bfaa      	itet	ge
 8084198:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 808419c:	4252      	neglt	r2, r2
 808419e:	4318      	orrge	r0, r3
 80841a0:	bfbc      	itt	lt
 80841a2:	40d0      	lsrlt	r0, r2
 80841a4:	4318      	orrlt	r0, r3
 80841a6:	4770      	bx	lr
 80841a8:	f092 0f00 	teq	r2, #0
 80841ac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80841b0:	bf06      	itte	eq
 80841b2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80841b6:	3201      	addeq	r2, #1
 80841b8:	3b01      	subne	r3, #1
 80841ba:	e7b5      	b.n	8084128 <__addsf3+0x58>
 80841bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80841c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80841c4:	bf18      	it	ne
 80841c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80841ca:	d021      	beq.n	8084210 <__addsf3+0x140>
 80841cc:	ea92 0f03 	teq	r2, r3
 80841d0:	d004      	beq.n	80841dc <__addsf3+0x10c>
 80841d2:	f092 0f00 	teq	r2, #0
 80841d6:	bf08      	it	eq
 80841d8:	4608      	moveq	r0, r1
 80841da:	4770      	bx	lr
 80841dc:	ea90 0f01 	teq	r0, r1
 80841e0:	bf1c      	itt	ne
 80841e2:	2000      	movne	r0, #0
 80841e4:	4770      	bxne	lr
 80841e6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80841ea:	d104      	bne.n	80841f6 <__addsf3+0x126>
 80841ec:	0040      	lsls	r0, r0, #1
 80841ee:	bf28      	it	cs
 80841f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80841f4:	4770      	bx	lr
 80841f6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80841fa:	bf3c      	itt	cc
 80841fc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8084200:	4770      	bxcc	lr
 8084202:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8084206:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 808420a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808420e:	4770      	bx	lr
 8084210:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8084214:	bf16      	itet	ne
 8084216:	4608      	movne	r0, r1
 8084218:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 808421c:	4601      	movne	r1, r0
 808421e:	0242      	lsls	r2, r0, #9
 8084220:	bf06      	itte	eq
 8084222:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8084226:	ea90 0f01 	teqeq	r0, r1
 808422a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 808422e:	4770      	bx	lr

08084230 <__aeabi_ui2f>:
 8084230:	f04f 0300 	mov.w	r3, #0
 8084234:	e004      	b.n	8084240 <__aeabi_i2f+0x8>
 8084236:	bf00      	nop

08084238 <__aeabi_i2f>:
 8084238:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 808423c:	bf48      	it	mi
 808423e:	4240      	negmi	r0, r0
 8084240:	ea5f 0c00 	movs.w	ip, r0
 8084244:	bf08      	it	eq
 8084246:	4770      	bxeq	lr
 8084248:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 808424c:	4601      	mov	r1, r0
 808424e:	f04f 0000 	mov.w	r0, #0
 8084252:	e01c      	b.n	808428e <__aeabi_l2f+0x2a>

08084254 <__aeabi_ul2f>:
 8084254:	ea50 0201 	orrs.w	r2, r0, r1
 8084258:	bf08      	it	eq
 808425a:	4770      	bxeq	lr
 808425c:	f04f 0300 	mov.w	r3, #0
 8084260:	e00a      	b.n	8084278 <__aeabi_l2f+0x14>
 8084262:	bf00      	nop

08084264 <__aeabi_l2f>:
 8084264:	ea50 0201 	orrs.w	r2, r0, r1
 8084268:	bf08      	it	eq
 808426a:	4770      	bxeq	lr
 808426c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8084270:	d502      	bpl.n	8084278 <__aeabi_l2f+0x14>
 8084272:	4240      	negs	r0, r0
 8084274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8084278:	ea5f 0c01 	movs.w	ip, r1
 808427c:	bf02      	ittt	eq
 808427e:	4684      	moveq	ip, r0
 8084280:	4601      	moveq	r1, r0
 8084282:	2000      	moveq	r0, #0
 8084284:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8084288:	bf08      	it	eq
 808428a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 808428e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8084292:	fabc f28c 	clz	r2, ip
 8084296:	3a08      	subs	r2, #8
 8084298:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 808429c:	db10      	blt.n	80842c0 <__aeabi_l2f+0x5c>
 808429e:	fa01 fc02 	lsl.w	ip, r1, r2
 80842a2:	4463      	add	r3, ip
 80842a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80842a8:	f1c2 0220 	rsb	r2, r2, #32
 80842ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80842b0:	fa20 f202 	lsr.w	r2, r0, r2
 80842b4:	eb43 0002 	adc.w	r0, r3, r2
 80842b8:	bf08      	it	eq
 80842ba:	f020 0001 	biceq.w	r0, r0, #1
 80842be:	4770      	bx	lr
 80842c0:	f102 0220 	add.w	r2, r2, #32
 80842c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80842c8:	f1c2 0220 	rsb	r2, r2, #32
 80842cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80842d0:	fa21 f202 	lsr.w	r2, r1, r2
 80842d4:	eb43 0002 	adc.w	r0, r3, r2
 80842d8:	bf08      	it	eq
 80842da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80842de:	4770      	bx	lr

080842e0 <__aeabi_fmul>:
 80842e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80842e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80842e8:	bf1e      	ittt	ne
 80842ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80842ee:	ea92 0f0c 	teqne	r2, ip
 80842f2:	ea93 0f0c 	teqne	r3, ip
 80842f6:	d06f      	beq.n	80843d8 <__aeabi_fmul+0xf8>
 80842f8:	441a      	add	r2, r3
 80842fa:	ea80 0c01 	eor.w	ip, r0, r1
 80842fe:	0240      	lsls	r0, r0, #9
 8084300:	bf18      	it	ne
 8084302:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8084306:	d01e      	beq.n	8084346 <__aeabi_fmul+0x66>
 8084308:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 808430c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8084310:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8084314:	fba0 3101 	umull	r3, r1, r0, r1
 8084318:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808431c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8084320:	bf3e      	ittt	cc
 8084322:	0049      	lslcc	r1, r1, #1
 8084324:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8084328:	005b      	lslcc	r3, r3, #1
 808432a:	ea40 0001 	orr.w	r0, r0, r1
 808432e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8084332:	2afd      	cmp	r2, #253	; 0xfd
 8084334:	d81d      	bhi.n	8084372 <__aeabi_fmul+0x92>
 8084336:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 808433a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808433e:	bf08      	it	eq
 8084340:	f020 0001 	biceq.w	r0, r0, #1
 8084344:	4770      	bx	lr
 8084346:	f090 0f00 	teq	r0, #0
 808434a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808434e:	bf08      	it	eq
 8084350:	0249      	lsleq	r1, r1, #9
 8084352:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8084356:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 808435a:	3a7f      	subs	r2, #127	; 0x7f
 808435c:	bfc2      	ittt	gt
 808435e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8084362:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8084366:	4770      	bxgt	lr
 8084368:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808436c:	f04f 0300 	mov.w	r3, #0
 8084370:	3a01      	subs	r2, #1
 8084372:	dc5d      	bgt.n	8084430 <__aeabi_fmul+0x150>
 8084374:	f112 0f19 	cmn.w	r2, #25
 8084378:	bfdc      	itt	le
 808437a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808437e:	4770      	bxle	lr
 8084380:	f1c2 0200 	rsb	r2, r2, #0
 8084384:	0041      	lsls	r1, r0, #1
 8084386:	fa21 f102 	lsr.w	r1, r1, r2
 808438a:	f1c2 0220 	rsb	r2, r2, #32
 808438e:	fa00 fc02 	lsl.w	ip, r0, r2
 8084392:	ea5f 0031 	movs.w	r0, r1, rrx
 8084396:	f140 0000 	adc.w	r0, r0, #0
 808439a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808439e:	bf08      	it	eq
 80843a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80843a4:	4770      	bx	lr
 80843a6:	f092 0f00 	teq	r2, #0
 80843aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80843ae:	bf02      	ittt	eq
 80843b0:	0040      	lsleq	r0, r0, #1
 80843b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80843b6:	3a01      	subeq	r2, #1
 80843b8:	d0f9      	beq.n	80843ae <__aeabi_fmul+0xce>
 80843ba:	ea40 000c 	orr.w	r0, r0, ip
 80843be:	f093 0f00 	teq	r3, #0
 80843c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80843c6:	bf02      	ittt	eq
 80843c8:	0049      	lsleq	r1, r1, #1
 80843ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80843ce:	3b01      	subeq	r3, #1
 80843d0:	d0f9      	beq.n	80843c6 <__aeabi_fmul+0xe6>
 80843d2:	ea41 010c 	orr.w	r1, r1, ip
 80843d6:	e78f      	b.n	80842f8 <__aeabi_fmul+0x18>
 80843d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80843dc:	ea92 0f0c 	teq	r2, ip
 80843e0:	bf18      	it	ne
 80843e2:	ea93 0f0c 	teqne	r3, ip
 80843e6:	d00a      	beq.n	80843fe <__aeabi_fmul+0x11e>
 80843e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80843ec:	bf18      	it	ne
 80843ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80843f2:	d1d8      	bne.n	80843a6 <__aeabi_fmul+0xc6>
 80843f4:	ea80 0001 	eor.w	r0, r0, r1
 80843f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80843fc:	4770      	bx	lr
 80843fe:	f090 0f00 	teq	r0, #0
 8084402:	bf17      	itett	ne
 8084404:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8084408:	4608      	moveq	r0, r1
 808440a:	f091 0f00 	teqne	r1, #0
 808440e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8084412:	d014      	beq.n	808443e <__aeabi_fmul+0x15e>
 8084414:	ea92 0f0c 	teq	r2, ip
 8084418:	d101      	bne.n	808441e <__aeabi_fmul+0x13e>
 808441a:	0242      	lsls	r2, r0, #9
 808441c:	d10f      	bne.n	808443e <__aeabi_fmul+0x15e>
 808441e:	ea93 0f0c 	teq	r3, ip
 8084422:	d103      	bne.n	808442c <__aeabi_fmul+0x14c>
 8084424:	024b      	lsls	r3, r1, #9
 8084426:	bf18      	it	ne
 8084428:	4608      	movne	r0, r1
 808442a:	d108      	bne.n	808443e <__aeabi_fmul+0x15e>
 808442c:	ea80 0001 	eor.w	r0, r0, r1
 8084430:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8084434:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8084438:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808443c:	4770      	bx	lr
 808443e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8084442:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8084446:	4770      	bx	lr

08084448 <__aeabi_fdiv>:
 8084448:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808444c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8084450:	bf1e      	ittt	ne
 8084452:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8084456:	ea92 0f0c 	teqne	r2, ip
 808445a:	ea93 0f0c 	teqne	r3, ip
 808445e:	d069      	beq.n	8084534 <__aeabi_fdiv+0xec>
 8084460:	eba2 0203 	sub.w	r2, r2, r3
 8084464:	ea80 0c01 	eor.w	ip, r0, r1
 8084468:	0249      	lsls	r1, r1, #9
 808446a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808446e:	d037      	beq.n	80844e0 <__aeabi_fdiv+0x98>
 8084470:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8084474:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8084478:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 808447c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8084480:	428b      	cmp	r3, r1
 8084482:	bf38      	it	cc
 8084484:	005b      	lslcc	r3, r3, #1
 8084486:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 808448a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808448e:	428b      	cmp	r3, r1
 8084490:	bf24      	itt	cs
 8084492:	1a5b      	subcs	r3, r3, r1
 8084494:	ea40 000c 	orrcs.w	r0, r0, ip
 8084498:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 808449c:	bf24      	itt	cs
 808449e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80844a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80844a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80844aa:	bf24      	itt	cs
 80844ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80844b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80844b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80844b8:	bf24      	itt	cs
 80844ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80844be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80844c2:	011b      	lsls	r3, r3, #4
 80844c4:	bf18      	it	ne
 80844c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80844ca:	d1e0      	bne.n	808448e <__aeabi_fdiv+0x46>
 80844cc:	2afd      	cmp	r2, #253	; 0xfd
 80844ce:	f63f af50 	bhi.w	8084372 <__aeabi_fmul+0x92>
 80844d2:	428b      	cmp	r3, r1
 80844d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80844d8:	bf08      	it	eq
 80844da:	f020 0001 	biceq.w	r0, r0, #1
 80844de:	4770      	bx	lr
 80844e0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80844e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80844e8:	327f      	adds	r2, #127	; 0x7f
 80844ea:	bfc2      	ittt	gt
 80844ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80844f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80844f4:	4770      	bxgt	lr
 80844f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80844fa:	f04f 0300 	mov.w	r3, #0
 80844fe:	3a01      	subs	r2, #1
 8084500:	e737      	b.n	8084372 <__aeabi_fmul+0x92>
 8084502:	f092 0f00 	teq	r2, #0
 8084506:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808450a:	bf02      	ittt	eq
 808450c:	0040      	lsleq	r0, r0, #1
 808450e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8084512:	3a01      	subeq	r2, #1
 8084514:	d0f9      	beq.n	808450a <__aeabi_fdiv+0xc2>
 8084516:	ea40 000c 	orr.w	r0, r0, ip
 808451a:	f093 0f00 	teq	r3, #0
 808451e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8084522:	bf02      	ittt	eq
 8084524:	0049      	lsleq	r1, r1, #1
 8084526:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808452a:	3b01      	subeq	r3, #1
 808452c:	d0f9      	beq.n	8084522 <__aeabi_fdiv+0xda>
 808452e:	ea41 010c 	orr.w	r1, r1, ip
 8084532:	e795      	b.n	8084460 <__aeabi_fdiv+0x18>
 8084534:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8084538:	ea92 0f0c 	teq	r2, ip
 808453c:	d108      	bne.n	8084550 <__aeabi_fdiv+0x108>
 808453e:	0242      	lsls	r2, r0, #9
 8084540:	f47f af7d 	bne.w	808443e <__aeabi_fmul+0x15e>
 8084544:	ea93 0f0c 	teq	r3, ip
 8084548:	f47f af70 	bne.w	808442c <__aeabi_fmul+0x14c>
 808454c:	4608      	mov	r0, r1
 808454e:	e776      	b.n	808443e <__aeabi_fmul+0x15e>
 8084550:	ea93 0f0c 	teq	r3, ip
 8084554:	d104      	bne.n	8084560 <__aeabi_fdiv+0x118>
 8084556:	024b      	lsls	r3, r1, #9
 8084558:	f43f af4c 	beq.w	80843f4 <__aeabi_fmul+0x114>
 808455c:	4608      	mov	r0, r1
 808455e:	e76e      	b.n	808443e <__aeabi_fmul+0x15e>
 8084560:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8084564:	bf18      	it	ne
 8084566:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808456a:	d1ca      	bne.n	8084502 <__aeabi_fdiv+0xba>
 808456c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8084570:	f47f af5c 	bne.w	808442c <__aeabi_fmul+0x14c>
 8084574:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8084578:	f47f af3c 	bne.w	80843f4 <__aeabi_fmul+0x114>
 808457c:	e75f      	b.n	808443e <__aeabi_fmul+0x15e>
 808457e:	bf00      	nop

08084580 <__gesf2>:
 8084580:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8084584:	e006      	b.n	8084594 <__cmpsf2+0x4>
 8084586:	bf00      	nop

08084588 <__lesf2>:
 8084588:	f04f 0c01 	mov.w	ip, #1
 808458c:	e002      	b.n	8084594 <__cmpsf2+0x4>
 808458e:	bf00      	nop

08084590 <__cmpsf2>:
 8084590:	f04f 0c01 	mov.w	ip, #1
 8084594:	f84d cd04 	str.w	ip, [sp, #-4]!
 8084598:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808459c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80845a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80845a4:	bf18      	it	ne
 80845a6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80845aa:	d011      	beq.n	80845d0 <__cmpsf2+0x40>
 80845ac:	b001      	add	sp, #4
 80845ae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80845b2:	bf18      	it	ne
 80845b4:	ea90 0f01 	teqne	r0, r1
 80845b8:	bf58      	it	pl
 80845ba:	ebb2 0003 	subspl.w	r0, r2, r3
 80845be:	bf88      	it	hi
 80845c0:	17c8      	asrhi	r0, r1, #31
 80845c2:	bf38      	it	cc
 80845c4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80845c8:	bf18      	it	ne
 80845ca:	f040 0001 	orrne.w	r0, r0, #1
 80845ce:	4770      	bx	lr
 80845d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80845d4:	d102      	bne.n	80845dc <__cmpsf2+0x4c>
 80845d6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80845da:	d105      	bne.n	80845e8 <__cmpsf2+0x58>
 80845dc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80845e0:	d1e4      	bne.n	80845ac <__cmpsf2+0x1c>
 80845e2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80845e6:	d0e1      	beq.n	80845ac <__cmpsf2+0x1c>
 80845e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80845ec:	4770      	bx	lr
 80845ee:	bf00      	nop

080845f0 <__aeabi_cfrcmple>:
 80845f0:	4684      	mov	ip, r0
 80845f2:	4608      	mov	r0, r1
 80845f4:	4661      	mov	r1, ip
 80845f6:	e7ff      	b.n	80845f8 <__aeabi_cfcmpeq>

080845f8 <__aeabi_cfcmpeq>:
 80845f8:	b50f      	push	{r0, r1, r2, r3, lr}
 80845fa:	f7ff ffc9 	bl	8084590 <__cmpsf2>
 80845fe:	2800      	cmp	r0, #0
 8084600:	bf48      	it	mi
 8084602:	f110 0f00 	cmnmi.w	r0, #0
 8084606:	bd0f      	pop	{r0, r1, r2, r3, pc}

08084608 <__aeabi_fcmpeq>:
 8084608:	f84d ed08 	str.w	lr, [sp, #-8]!
 808460c:	f7ff fff4 	bl	80845f8 <__aeabi_cfcmpeq>
 8084610:	bf0c      	ite	eq
 8084612:	2001      	moveq	r0, #1
 8084614:	2000      	movne	r0, #0
 8084616:	f85d fb08 	ldr.w	pc, [sp], #8
 808461a:	bf00      	nop

0808461c <__aeabi_fcmplt>:
 808461c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084620:	f7ff ffea 	bl	80845f8 <__aeabi_cfcmpeq>
 8084624:	bf34      	ite	cc
 8084626:	2001      	movcc	r0, #1
 8084628:	2000      	movcs	r0, #0
 808462a:	f85d fb08 	ldr.w	pc, [sp], #8
 808462e:	bf00      	nop

08084630 <__aeabi_fcmple>:
 8084630:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084634:	f7ff ffe0 	bl	80845f8 <__aeabi_cfcmpeq>
 8084638:	bf94      	ite	ls
 808463a:	2001      	movls	r0, #1
 808463c:	2000      	movhi	r0, #0
 808463e:	f85d fb08 	ldr.w	pc, [sp], #8
 8084642:	bf00      	nop

08084644 <__aeabi_fcmpge>:
 8084644:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084648:	f7ff ffd2 	bl	80845f0 <__aeabi_cfrcmple>
 808464c:	bf94      	ite	ls
 808464e:	2001      	movls	r0, #1
 8084650:	2000      	movhi	r0, #0
 8084652:	f85d fb08 	ldr.w	pc, [sp], #8
 8084656:	bf00      	nop

08084658 <__aeabi_fcmpgt>:
 8084658:	f84d ed08 	str.w	lr, [sp, #-8]!
 808465c:	f7ff ffc8 	bl	80845f0 <__aeabi_cfrcmple>
 8084660:	bf34      	ite	cc
 8084662:	2001      	movcc	r0, #1
 8084664:	2000      	movcs	r0, #0
 8084666:	f85d fb08 	ldr.w	pc, [sp], #8
 808466a:	bf00      	nop

0808466c <__aeabi_f2lz>:
 808466c:	b510      	push	{r4, lr}
 808466e:	2100      	movs	r1, #0
 8084670:	4604      	mov	r4, r0
 8084672:	f7ff ffd3 	bl	808461c <__aeabi_fcmplt>
 8084676:	b920      	cbnz	r0, 8084682 <__aeabi_f2lz+0x16>
 8084678:	4620      	mov	r0, r4
 808467a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808467e:	f000 b809 	b.w	8084694 <__aeabi_f2ulz>
 8084682:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 8084686:	f000 f805 	bl	8084694 <__aeabi_f2ulz>
 808468a:	4240      	negs	r0, r0
 808468c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8084690:	bd10      	pop	{r4, pc}
 8084692:	bf00      	nop

08084694 <__aeabi_f2ulz>:
 8084694:	b5d0      	push	{r4, r6, r7, lr}
 8084696:	f7ff fa13 	bl	8083ac0 <__aeabi_f2d>
 808469a:	2200      	movs	r2, #0
 808469c:	4b0b      	ldr	r3, [pc, #44]	; (80846cc <__aeabi_f2ulz+0x38>)
 808469e:	4606      	mov	r6, r0
 80846a0:	460f      	mov	r7, r1
 80846a2:	f7ff fa65 	bl	8083b70 <__aeabi_dmul>
 80846a6:	f7ff fc9d 	bl	8083fe4 <__aeabi_d2uiz>
 80846aa:	4604      	mov	r4, r0
 80846ac:	f7ff f9e6 	bl	8083a7c <__aeabi_ui2d>
 80846b0:	2200      	movs	r2, #0
 80846b2:	4b07      	ldr	r3, [pc, #28]	; (80846d0 <__aeabi_f2ulz+0x3c>)
 80846b4:	f7ff fa5c 	bl	8083b70 <__aeabi_dmul>
 80846b8:	4602      	mov	r2, r0
 80846ba:	460b      	mov	r3, r1
 80846bc:	4630      	mov	r0, r6
 80846be:	4639      	mov	r1, r7
 80846c0:	f7ff f89e 	bl	8083800 <__aeabi_dsub>
 80846c4:	f7ff fc8e 	bl	8083fe4 <__aeabi_d2uiz>
 80846c8:	4621      	mov	r1, r4
 80846ca:	bdd0      	pop	{r4, r6, r7, pc}
 80846cc:	3df00000 	.word	0x3df00000
 80846d0:	41f00000 	.word	0x41f00000

080846d4 <asctime_r>:
 80846d4:	b510      	push	{r4, lr}
 80846d6:	460c      	mov	r4, r1
 80846d8:	6941      	ldr	r1, [r0, #20]
 80846da:	b086      	sub	sp, #24
 80846dc:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80846e0:	6903      	ldr	r3, [r0, #16]
 80846e2:	6982      	ldr	r2, [r0, #24]
 80846e4:	9104      	str	r1, [sp, #16]
 80846e6:	6801      	ldr	r1, [r0, #0]
 80846e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80846ec:	9103      	str	r1, [sp, #12]
 80846ee:	6841      	ldr	r1, [r0, #4]
 80846f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80846f4:	9102      	str	r1, [sp, #8]
 80846f6:	6881      	ldr	r1, [r0, #8]
 80846f8:	9101      	str	r1, [sp, #4]
 80846fa:	68c1      	ldr	r1, [r0, #12]
 80846fc:	4620      	mov	r0, r4
 80846fe:	9100      	str	r1, [sp, #0]
 8084700:	4904      	ldr	r1, [pc, #16]	; (8084714 <asctime_r+0x40>)
 8084702:	440b      	add	r3, r1
 8084704:	4904      	ldr	r1, [pc, #16]	; (8084718 <asctime_r+0x44>)
 8084706:	440a      	add	r2, r1
 8084708:	4904      	ldr	r1, [pc, #16]	; (808471c <asctime_r+0x48>)
 808470a:	f7fd fc67 	bl	8081fdc <siprintf>
 808470e:	4620      	mov	r0, r4
 8084710:	b006      	add	sp, #24
 8084712:	bd10      	pop	{r4, pc}
 8084714:	08084fae 	.word	0x08084fae
 8084718:	08084f99 	.word	0x08084f99
 808471c:	08084f79 	.word	0x08084f79

08084720 <atoi>:
 8084720:	220a      	movs	r2, #10
 8084722:	2100      	movs	r1, #0
 8084724:	f000 b924 	b.w	8084970 <strtol>

08084728 <__cxa_atexit>:
 8084728:	b510      	push	{r4, lr}
 808472a:	4604      	mov	r4, r0
 808472c:	4804      	ldr	r0, [pc, #16]	; (8084740 <__cxa_atexit+0x18>)
 808472e:	4613      	mov	r3, r2
 8084730:	b120      	cbz	r0, 808473c <__cxa_atexit+0x14>
 8084732:	460a      	mov	r2, r1
 8084734:	2002      	movs	r0, #2
 8084736:	4621      	mov	r1, r4
 8084738:	f3af 8000 	nop.w
 808473c:	bd10      	pop	{r4, pc}
 808473e:	bf00      	nop
 8084740:	00000000 	.word	0x00000000

08084744 <memcpy>:
 8084744:	440a      	add	r2, r1
 8084746:	4291      	cmp	r1, r2
 8084748:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 808474c:	d100      	bne.n	8084750 <memcpy+0xc>
 808474e:	4770      	bx	lr
 8084750:	b510      	push	{r4, lr}
 8084752:	f811 4b01 	ldrb.w	r4, [r1], #1
 8084756:	4291      	cmp	r1, r2
 8084758:	f803 4f01 	strb.w	r4, [r3, #1]!
 808475c:	d1f9      	bne.n	8084752 <memcpy+0xe>
 808475e:	bd10      	pop	{r4, pc}

08084760 <memmove>:
 8084760:	4288      	cmp	r0, r1
 8084762:	b510      	push	{r4, lr}
 8084764:	eb01 0402 	add.w	r4, r1, r2
 8084768:	d902      	bls.n	8084770 <memmove+0x10>
 808476a:	4284      	cmp	r4, r0
 808476c:	4623      	mov	r3, r4
 808476e:	d807      	bhi.n	8084780 <memmove+0x20>
 8084770:	1e43      	subs	r3, r0, #1
 8084772:	42a1      	cmp	r1, r4
 8084774:	d008      	beq.n	8084788 <memmove+0x28>
 8084776:	f811 2b01 	ldrb.w	r2, [r1], #1
 808477a:	f803 2f01 	strb.w	r2, [r3, #1]!
 808477e:	e7f8      	b.n	8084772 <memmove+0x12>
 8084780:	4601      	mov	r1, r0
 8084782:	4402      	add	r2, r0
 8084784:	428a      	cmp	r2, r1
 8084786:	d100      	bne.n	808478a <memmove+0x2a>
 8084788:	bd10      	pop	{r4, pc}
 808478a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 808478e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8084792:	e7f7      	b.n	8084784 <memmove+0x24>

08084794 <memset>:
 8084794:	4603      	mov	r3, r0
 8084796:	4402      	add	r2, r0
 8084798:	4293      	cmp	r3, r2
 808479a:	d100      	bne.n	808479e <memset+0xa>
 808479c:	4770      	bx	lr
 808479e:	f803 1b01 	strb.w	r1, [r3], #1
 80847a2:	e7f9      	b.n	8084798 <memset+0x4>

080847a4 <srand>:
 80847a4:	b538      	push	{r3, r4, r5, lr}
 80847a6:	4b0d      	ldr	r3, [pc, #52]	; (80847dc <srand+0x38>)
 80847a8:	4604      	mov	r4, r0
 80847aa:	681d      	ldr	r5, [r3, #0]
 80847ac:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80847ae:	b97b      	cbnz	r3, 80847d0 <srand+0x2c>
 80847b0:	2018      	movs	r0, #24
 80847b2:	f7fd fbfb 	bl	8081fac <malloc>
 80847b6:	4a0a      	ldr	r2, [pc, #40]	; (80847e0 <srand+0x3c>)
 80847b8:	4b0a      	ldr	r3, [pc, #40]	; (80847e4 <srand+0x40>)
 80847ba:	63a8      	str	r0, [r5, #56]	; 0x38
 80847bc:	e9c0 2300 	strd	r2, r3, [r0]
 80847c0:	4b09      	ldr	r3, [pc, #36]	; (80847e8 <srand+0x44>)
 80847c2:	2201      	movs	r2, #1
 80847c4:	6083      	str	r3, [r0, #8]
 80847c6:	230b      	movs	r3, #11
 80847c8:	8183      	strh	r3, [r0, #12]
 80847ca:	2300      	movs	r3, #0
 80847cc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80847d0:	2200      	movs	r2, #0
 80847d2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80847d4:	611c      	str	r4, [r3, #16]
 80847d6:	615a      	str	r2, [r3, #20]
 80847d8:	bd38      	pop	{r3, r4, r5, pc}
 80847da:	bf00      	nop
 80847dc:	20000098 	.word	0x20000098
 80847e0:	abcd330e 	.word	0xabcd330e
 80847e4:	e66d1234 	.word	0xe66d1234
 80847e8:	0005deec 	.word	0x0005deec

080847ec <strcmp>:
 80847ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80847f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80847f4:	2a01      	cmp	r2, #1
 80847f6:	bf28      	it	cs
 80847f8:	429a      	cmpcs	r2, r3
 80847fa:	d0f7      	beq.n	80847ec <strcmp>
 80847fc:	1ad0      	subs	r0, r2, r3
 80847fe:	4770      	bx	lr

08084800 <strcpy>:
 8084800:	4603      	mov	r3, r0
 8084802:	f811 2b01 	ldrb.w	r2, [r1], #1
 8084806:	f803 2b01 	strb.w	r2, [r3], #1
 808480a:	2a00      	cmp	r2, #0
 808480c:	d1f9      	bne.n	8084802 <strcpy+0x2>
 808480e:	4770      	bx	lr

08084810 <strdup>:
 8084810:	4b02      	ldr	r3, [pc, #8]	; (808481c <strdup+0xc>)
 8084812:	4601      	mov	r1, r0
 8084814:	6818      	ldr	r0, [r3, #0]
 8084816:	f000 b803 	b.w	8084820 <_strdup_r>
 808481a:	bf00      	nop
 808481c:	20000098 	.word	0x20000098

08084820 <_strdup_r>:
 8084820:	b570      	push	{r4, r5, r6, lr}
 8084822:	4604      	mov	r4, r0
 8084824:	4608      	mov	r0, r1
 8084826:	460d      	mov	r5, r1
 8084828:	f000 f80d 	bl	8084846 <strlen>
 808482c:	1c46      	adds	r6, r0, #1
 808482e:	4631      	mov	r1, r6
 8084830:	4620      	mov	r0, r4
 8084832:	f7fd fbeb 	bl	808200c <_malloc_r>
 8084836:	4604      	mov	r4, r0
 8084838:	b118      	cbz	r0, 8084842 <_strdup_r+0x22>
 808483a:	4632      	mov	r2, r6
 808483c:	4629      	mov	r1, r5
 808483e:	f7ff ff81 	bl	8084744 <memcpy>
 8084842:	4620      	mov	r0, r4
 8084844:	bd70      	pop	{r4, r5, r6, pc}

08084846 <strlen>:
 8084846:	4603      	mov	r3, r0
 8084848:	f813 2b01 	ldrb.w	r2, [r3], #1
 808484c:	2a00      	cmp	r2, #0
 808484e:	d1fb      	bne.n	8084848 <strlen+0x2>
 8084850:	1a18      	subs	r0, r3, r0
 8084852:	3801      	subs	r0, #1
 8084854:	4770      	bx	lr

08084856 <strncpy>:
 8084856:	4603      	mov	r3, r0
 8084858:	b510      	push	{r4, lr}
 808485a:	3901      	subs	r1, #1
 808485c:	b132      	cbz	r2, 808486c <strncpy+0x16>
 808485e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8084862:	3a01      	subs	r2, #1
 8084864:	f803 4b01 	strb.w	r4, [r3], #1
 8084868:	2c00      	cmp	r4, #0
 808486a:	d1f7      	bne.n	808485c <strncpy+0x6>
 808486c:	2100      	movs	r1, #0
 808486e:	441a      	add	r2, r3
 8084870:	4293      	cmp	r3, r2
 8084872:	d100      	bne.n	8084876 <strncpy+0x20>
 8084874:	bd10      	pop	{r4, pc}
 8084876:	f803 1b01 	strb.w	r1, [r3], #1
 808487a:	e7f9      	b.n	8084870 <strncpy+0x1a>

0808487c <_strtol_l.isra.0>:
 808487c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8084880:	468c      	mov	ip, r1
 8084882:	4686      	mov	lr, r0
 8084884:	4e39      	ldr	r6, [pc, #228]	; (808496c <_strtol_l.isra.0+0xf0>)
 8084886:	4660      	mov	r0, ip
 8084888:	f81c 4b01 	ldrb.w	r4, [ip], #1
 808488c:	5da5      	ldrb	r5, [r4, r6]
 808488e:	f015 0508 	ands.w	r5, r5, #8
 8084892:	d1f8      	bne.n	8084886 <_strtol_l.isra.0+0xa>
 8084894:	2c2d      	cmp	r4, #45	; 0x2d
 8084896:	d133      	bne.n	8084900 <_strtol_l.isra.0+0x84>
 8084898:	f04f 0801 	mov.w	r8, #1
 808489c:	f89c 4000 	ldrb.w	r4, [ip]
 80848a0:	f100 0c02 	add.w	ip, r0, #2
 80848a4:	2b00      	cmp	r3, #0
 80848a6:	d05c      	beq.n	8084962 <_strtol_l.isra.0+0xe6>
 80848a8:	2b10      	cmp	r3, #16
 80848aa:	d10c      	bne.n	80848c6 <_strtol_l.isra.0+0x4a>
 80848ac:	2c30      	cmp	r4, #48	; 0x30
 80848ae:	d10a      	bne.n	80848c6 <_strtol_l.isra.0+0x4a>
 80848b0:	f89c 0000 	ldrb.w	r0, [ip]
 80848b4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80848b8:	2858      	cmp	r0, #88	; 0x58
 80848ba:	d14d      	bne.n	8084958 <_strtol_l.isra.0+0xdc>
 80848bc:	2310      	movs	r3, #16
 80848be:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80848c2:	f10c 0c02 	add.w	ip, ip, #2
 80848c6:	2600      	movs	r6, #0
 80848c8:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80848cc:	3f01      	subs	r7, #1
 80848ce:	fbb7 f9f3 	udiv	r9, r7, r3
 80848d2:	4630      	mov	r0, r6
 80848d4:	fb03 7a19 	mls	sl, r3, r9, r7
 80848d8:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80848dc:	2d09      	cmp	r5, #9
 80848de:	d818      	bhi.n	8084912 <_strtol_l.isra.0+0x96>
 80848e0:	462c      	mov	r4, r5
 80848e2:	42a3      	cmp	r3, r4
 80848e4:	dd24      	ble.n	8084930 <_strtol_l.isra.0+0xb4>
 80848e6:	1c75      	adds	r5, r6, #1
 80848e8:	d007      	beq.n	80848fa <_strtol_l.isra.0+0x7e>
 80848ea:	4581      	cmp	r9, r0
 80848ec:	d31d      	bcc.n	808492a <_strtol_l.isra.0+0xae>
 80848ee:	d101      	bne.n	80848f4 <_strtol_l.isra.0+0x78>
 80848f0:	45a2      	cmp	sl, r4
 80848f2:	db1a      	blt.n	808492a <_strtol_l.isra.0+0xae>
 80848f4:	2601      	movs	r6, #1
 80848f6:	fb00 4003 	mla	r0, r0, r3, r4
 80848fa:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80848fe:	e7eb      	b.n	80848d8 <_strtol_l.isra.0+0x5c>
 8084900:	2c2b      	cmp	r4, #43	; 0x2b
 8084902:	bf08      	it	eq
 8084904:	f89c 4000 	ldrbeq.w	r4, [ip]
 8084908:	46a8      	mov	r8, r5
 808490a:	bf08      	it	eq
 808490c:	f100 0c02 	addeq.w	ip, r0, #2
 8084910:	e7c8      	b.n	80848a4 <_strtol_l.isra.0+0x28>
 8084912:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 8084916:	2d19      	cmp	r5, #25
 8084918:	d801      	bhi.n	808491e <_strtol_l.isra.0+0xa2>
 808491a:	3c37      	subs	r4, #55	; 0x37
 808491c:	e7e1      	b.n	80848e2 <_strtol_l.isra.0+0x66>
 808491e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 8084922:	2d19      	cmp	r5, #25
 8084924:	d804      	bhi.n	8084930 <_strtol_l.isra.0+0xb4>
 8084926:	3c57      	subs	r4, #87	; 0x57
 8084928:	e7db      	b.n	80848e2 <_strtol_l.isra.0+0x66>
 808492a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 808492e:	e7e4      	b.n	80848fa <_strtol_l.isra.0+0x7e>
 8084930:	1c73      	adds	r3, r6, #1
 8084932:	d106      	bne.n	8084942 <_strtol_l.isra.0+0xc6>
 8084934:	2322      	movs	r3, #34	; 0x22
 8084936:	4638      	mov	r0, r7
 8084938:	f8ce 3000 	str.w	r3, [lr]
 808493c:	b942      	cbnz	r2, 8084950 <_strtol_l.isra.0+0xd4>
 808493e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084942:	f1b8 0f00 	cmp.w	r8, #0
 8084946:	d000      	beq.n	808494a <_strtol_l.isra.0+0xce>
 8084948:	4240      	negs	r0, r0
 808494a:	2a00      	cmp	r2, #0
 808494c:	d0f7      	beq.n	808493e <_strtol_l.isra.0+0xc2>
 808494e:	b10e      	cbz	r6, 8084954 <_strtol_l.isra.0+0xd8>
 8084950:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8084954:	6011      	str	r1, [r2, #0]
 8084956:	e7f2      	b.n	808493e <_strtol_l.isra.0+0xc2>
 8084958:	2430      	movs	r4, #48	; 0x30
 808495a:	2b00      	cmp	r3, #0
 808495c:	d1b3      	bne.n	80848c6 <_strtol_l.isra.0+0x4a>
 808495e:	2308      	movs	r3, #8
 8084960:	e7b1      	b.n	80848c6 <_strtol_l.isra.0+0x4a>
 8084962:	2c30      	cmp	r4, #48	; 0x30
 8084964:	d0a4      	beq.n	80848b0 <_strtol_l.isra.0+0x34>
 8084966:	230a      	movs	r3, #10
 8084968:	e7ad      	b.n	80848c6 <_strtol_l.isra.0+0x4a>
 808496a:	bf00      	nop
 808496c:	08084fd3 	.word	0x08084fd3

08084970 <strtol>:
 8084970:	4613      	mov	r3, r2
 8084972:	460a      	mov	r2, r1
 8084974:	4601      	mov	r1, r0
 8084976:	4802      	ldr	r0, [pc, #8]	; (8084980 <strtol+0x10>)
 8084978:	6800      	ldr	r0, [r0, #0]
 808497a:	f7ff bf7f 	b.w	808487c <_strtol_l.isra.0>
 808497e:	bf00      	nop
 8084980:	20000098 	.word	0x20000098

08084984 <dynalib_user>:
 8084984:	08080031 08080071 08080099 0808009d     1...q...........
 8084994:	00000000 6e6b6e55 006e776f 656e6f4e     ....Unknown.None
 80849a4:	46695700 53470069 4d55004d 43005354     .WiFi.GSM.UMTS.C
 80849b4:	00414d44 0045544c 45454549 31323038     DMA.LTE.IEEE8021
 80849c4:	4c003435 435f4554 4d5f5441 544c0031     54.LTE_CAT_M1.LT
 80849d4:	41435f45 424e5f54 6f4e0031 74614420     E_CAT_NB1.No Dat
 80849e4:	62550061 746f6469 6f482073 52006b6f     a.Ubidots Hook.R
 80849f4:	6f707365 2065736e 65636552 64657669     esponse Received
 8084a04:	61745300 53006574 56207465 6f627265     .State.Set Verbo
 8084a14:	4d206573 0065646f 6c430030 65726165     se Mode.0.Cleare
 8084a24:	65562064 736f6272 6f4d2065 25006564     d Verbose Mode.%
 8084a34:	66312e32 43545520 6d695400 6f7a2065     2.1f UTC.Time zo
 8084a44:	6f20656e 65736666 69252074 6d695400     ne offset %i.Tim
 8084a54:	227b0065 75706e69 3a223174 202c6925     e.{"input1":%i, 
 8084a64:	706e6922 22327475 2c69253a 65742220     "input2":%i, "te
 8084a74:	3a22706d 202c6925 656c6122 22737472     mp":%i, "alerts"
 8084a84:	2c69253a 65722220 73746573 69253a22     :%i, "resets":%i
 8084a94:	7422202c 73656d69 706d6174 6c253a22     , "timestamp":%l
 8084aa4:	30303075 6148007d 72656c75 6c6c6143     u000}.HaulerCall
 8084ab4:	485f7265 006b6f6f 53207325 2e32253a     er_Hook.%s S:%2.
 8084ac4:	25256630 3a51202c 302e3225 20252566     0f%%, Q:%2.0f%% 
 8084ad4:	25353700 6c754620 3031006c 46202530     .75% Full.100% F
 8084ae4:	006c6c75 20776f4c 006c694f 6e6e7552     ull.Low Oil.Runn
 8084af4:	00676e69 6c696144 6c432079 756e6165     ing.Daily Cleanu
 8084b04:	6f4c0070 6e696461 79532067 6d657473     p.Loading System
 8084b14:	66654420 746c7561 72460073 25206d6f      Defaults.From %
 8084b24:	6f742073 00732520 74617453 72542065     s to %s.State Tr
 8084b34:	69736e61 6e6f6974 2b544100 4e554643     ansition.AT+CFUN
 8084b44:	0d36313d 7073000a 2f6b7261 69766564     =16...spark/devi
 8084b54:	732f6563 69737365 652f6e6f 4500646e     ce/session/end.E
 8084b64:	726f7272 61745320 2d206574 73655220     rror State - Res
 8084b74:	45007465 726f7272 61745320 2d206574     et.Error State -
 8084b84:	776f5020 43207265 656c6379 72724500      Power Cycle.Err
 8084b94:	5320726f 65746174 46202d20 206c6c75     or State - Full 
 8084ba4:	65646f4d 6552206d 00746573 6e676953     Modem Reset.Sign
 8084bb4:	52006c61 74657365 6e756f43 65540074     al.ResetCount.Te
 8084bc4:	7265706d 72757461 65520065 7361656c     mperature.Releas
 8084bd4:	6e490065 31747570 706e4900 00327475     e.Input1.Input2.
 8084be4:	64726148 7365522d 53007465 2d646e65     Hard-Reset.Send-
 8084bf4:	00776f4e 62726556 2d65736f 65646f4d     Now.Verbose-Mode
 8084c04:	74655300 6d69542d 6e6f7a65 65530065     .Set-Timezone.Se
 8084c14:	53442d74 66664f54 00746573 41206f4e     t-DSTOffset.No A
 8084c24:	7472656c 54534400 66666f20 20746573     lert.DST offset 
 8084c34:	312e3225 00000066                       %2.1f...

08084c3c <_ZTV8MB85RC64>:
	...
 8084c44:	08080145 08080159 08081231 080812c7     E...Y...1.......
 8084c54:	08081349                                I...

08084c58 <_ZTV17PublishQueueAsync>:
	...
 8084c60:	0808011d 08080131 08081471 080815fd     ....1...q.......
 8084c70:	080815bd 0808159b 0808173f 080815e3     ........?.......
 8084c80:	08084998 080849a0 080849a5 080849aa     .I...I...I...I..
 8084c90:	080849ae 080849b3 080849b8 080849bc     .I...I...I...I..
 8084ca0:	080849c7 080849d2                       .I...I..

08084ca8 <_ZL13releaseNumber>:
 8084ca8:	00000034                                4...

08084cac <_ZL17FRAMversionNumber>:
 8084cac:	00000001 74697277 74614465 61662061     ....writeData fa
 8084cbc:	64656c69 72756420 20676e69 73617265     iled during eras
 8084ccc:	72662065 64416d61 253d7264 00000075     e framAddr=%u...

08084cdc <_ZTV6MB85RC>:
	...
 8084ce4:	08081151 08081153 08081231 080812c7     Q...S...1.......
 8084cf4:	08081349 6c627550 51687369 65756575     I...PublishQueue
 8084d04:	6e797341 75710063 69657565 6520676e     Async.queueing e
 8084d14:	746e6576 656d614e 2073253d 61746164     ventName=%s data
 8084d24:	2073253d 3d6c7474 66206425 7367616c     =%s ttl=%d flags
 8084d34:	64253d31 616c6620 3d327367 73206425     1=%d flags2=%d s
 8084d44:	3d657a69 70006425 696c6275 6e696873     ize=%d.publishin
 8084d54:	73252067 20732520 3d6c7474 66206425     g %s %s ttl=%d f
 8084d64:	7367616c 0078253d 6c627570 65687369     lags=%x.publishe
 8084d74:	75732064 73656363 6c756673 7000796c     d successfully.p
 8084d84:	696c6275 64656873 69616620 2c64656c     ublished failed,
 8084d94:	6c697720 6572206c 20797274 25206e69      will retry in %
 8084da4:	6d20756c 70610073 75702e70 00007162     lu ms.app.pubq..

08084db4 <_ZTV21PublishQueueAsyncBase>:
	...
 8084dc4:	08081471 080800b9 080800b9 080800b9     q...............
 8084dd4:	080800b9 080800b9                       ........

08084ddc <_ZTV25PublishQueueAsyncRetained>:
	...
 8084de4:	08081559 0808156d 08081471 080815fd     Y...m...q.......
 8084df4:	080815bd 0808159b 0808173f 080815e3     ........?.......

08084e04 <_ZTVN5spark13CellularClassE>:
	...
 8084e0c:	080820f5 080820eb 080820e1 0808205b     . ... ... ..[ ..
 8084e1c:	080820d5 080820c9 080820bd 080820b5     . ... ... ... ..
 8084e2c:	080820ab 080820a1 08082065              . ... ..e ..

08084e38 <_ZTV14CellularSignal>:
	...
 8084e40:	080821a5 080821ab 080821a7 080821b9     .!...!...!...!..
 8084e50:	080821e9 0808220d 0808223d 08082285     .!..."..="..."..
 8084e60:	fffffffc 00000000 080822ab              ........."..

08084e6c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8084e74:	080822cb 080822d1 0808230f 080822df     ."..."...#..."..
 8084e84:	080822cd                                ."..

08084e88 <_ZTV7TwoWire>:
	...
 8084e90:	080828d5 0808291f 080828f7 080828d7     .(...)...(...(..
 8084ea0:	080828ff 08082907 0808290f 08082917     .(...)...)...)..

08084eb0 <_ZTV9IPAddress>:
	...
 8084eb8:	08082a85 08082a75 08082a77 00707061     .*..u*..w*..app.

08084ec8 <_ZTVN5spark12NetworkClassE>:
	...
 8084ed0:	08082b25 08082b2f 08082b39 08082b43     %+../+..9+..C+..
 8084ee0:	08082b4d 08082b59 08082b65 08082b71     M+..Y+..e+..q+..
 8084ef0:	08082b79 08082b83 08082b8d 252d5925     y+...+...+..%Y-%
 8084f00:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
 8084f10:	74637361 00656d69                       asctime.

08084f18 <_ZTV11USARTSerial>:
	...
 8084f20:	080831bd 08083225 08083201 08082be9     .1..%2...2...+..
 8084f30:	080831d1 080831ed 080831df 080831fb     .1...1...1...1..
 8084f40:	080831bf 080831c3                       .1...1..

08084f48 <_ZTV9USBSerial>:
	...
 8084f50:	080832b5 0808331b 080832f3 08082be9     .2...3...2...+..
 8084f60:	080832e5 080832b7 080832c7 08083315     .2...2...2...3..
 8084f70:	080832d7 080832b1                       .2...2..

08084f78 <_ZSt7nothrow>:
 8084f78:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
 8084f88:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

08084f99 <day_name.4782>:
 8084f99:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
 8084fa9:	61536972                                 riSat

08084fae <mon_name.4783>:
 8084fae:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
 8084fbe:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
 8084fce:	63654476                                vDec

08084fd2 <_ctype_>:
 8084fd2:	20202000 20202020 28282020 20282828     .         ((((( 
 8084fe2:	20202020 20202020 20202020 20202020                     
 8084ff2:	10108820 10101010 10101010 10101010      ...............
 8085002:	04040410 04040404 10040404 10101010     ................
 8085012:	41411010 41414141 01010101 01010101     ..AAAAAA........
 8085022:	01010101 01010101 01010101 10101010     ................
 8085032:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8085042:	02020202 02020202 02020202 10101010     ................
 8085052:	00000020 00000000 00000000 00000000      ...............
	...

080850d3 <link_const_variable_data_end>:
	...

080850d4 <link_constructors_location>:
 80850d4:	08081081 	.word	0x08081081
 80850d8:	080819d1 	.word	0x080819d1
 80850dc:	08082175 	.word	0x08082175
 80850e0:	08082b15 	.word	0x08082b15
 80850e4:	08082bd5 	.word	0x08082bd5
 80850e8:	08082c81 	.word	0x08082c81
 80850ec:	08082eed 	.word	0x08082eed
 80850f0:	080831a9 	.word	0x080831a9
 80850f4:	080837ad 	.word	0x080837ad

080850f8 <link_constructors_end>:
	...
