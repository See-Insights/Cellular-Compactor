
/Users/chipmc/Documents/Maker/Particle/Projects/Cellular-Compactor/target/Cellular-Compactor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b78  08080018  08080018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  08084b90  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000144  20000400  08084b94  00030400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000780  20000544  20000544  00040544  2**2
                  ALLOC
  5 .module_info_suffix 00000028  08084cd8  08084cd8  00034cd8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  08084d00  08084d00  00034d00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000a4334  00000000  00000000  00034d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000f843  00000000  00000000  000d9038  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00013ef9  00000000  00000000  000e887b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001fe8  00000000  00000000  000fc774  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000034e0  00000000  00000000  000fe75c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00024a62  00000000  00000000  00101c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002327b  00000000  00000000  0012669e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009889a  00000000  00000000  00149919  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000bed0  00000000  00000000  001e21b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	c0 44 08 08                                         .D..

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f003 fd85 	bl	8083b3c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f003 fd8a 	bl	8083b52 <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	08084b94 	.word	0x08084b94
 808004c:	20000544 	.word	0x20000544
 8080050:	20000544 	.word	0x20000544
 8080054:	20000cc4 	.word	0x20000cc4
 8080058:	20000cc4 	.word	0x20000cc4

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f002 faa3 	bl	80825a8 <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	08084b50 	.word	0x08084b50
 8080084:	08084b84 	.word	0x08084b84

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 bdb2 	b.w	8080bf0 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 fcb5 	bl	80809fc <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f002 ba49 	b.w	808252c <_post_loop>

0808009a <_Znwj>:
 808009a:	f001 b99d 	b.w	80813d8 <malloc>

0808009e <_ZdlPv>:
 808009e:	f001 b9a3 	b.w	80813e8 <free>

080800a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a2:	7800      	ldrb	r0, [r0, #0]
 80800a4:	fab0 f080 	clz	r0, r0
 80800a8:	0940      	lsrs	r0, r0, #5
 80800aa:	4770      	bx	lr

080800ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ac:	2301      	movs	r3, #1
 80800ae:	7003      	strb	r3, [r0, #0]
 80800b0:	4770      	bx	lr

080800b2 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80800b2:	6803      	ldr	r3, [r0, #0]
 80800b4:	b2c9      	uxtb	r1, r1
 80800b6:	689b      	ldr	r3, [r3, #8]
 80800b8:	4718      	bx	r3

080800ba <_ZN17Adafruit_FRAM_I2CC1Ev>:
    Constructor
*/
/**************************************************************************/
Adafruit_FRAM_I2C::Adafruit_FRAM_I2C(void)
{
  _framInitialised = false;
 80800ba:	2200      	movs	r2, #0
 80800bc:	7042      	strb	r2, [r0, #1]
}
 80800be:	4770      	bx	lr

080800c0 <_ZN17Adafruit_FRAM_I2C5beginEh>:
    Initializes I2C and configures the chip (call this function before
    doing anything else)
*/
/**************************************************************************/
boolean Adafruit_FRAM_I2C::begin(uint8_t addr)
{
 80800c0:	b510      	push	{r4, lr}
 80800c2:	4604      	mov	r4, r0
  i2c_addr = addr;
 80800c4:	7001      	strb	r1, [r0, #0]
  Wire.begin();
 80800c6:	f002 fb01 	bl	80826cc <_Z19__fetch_global_Wirev>
 80800ca:	f001 fdc5 	bl	8081c58 <_ZN7TwoWire5beginEv>
    return false;
  }
  */

  /* Everything seems to be properly initialised and connected */
  _framInitialised = true;
 80800ce:	2001      	movs	r0, #1
 80800d0:	7060      	strb	r0, [r4, #1]

  return true;
}
 80800d2:	bd10      	pop	{r4, pc}

080800d4 <_ZN17Adafruit_FRAM_I2C6write8Eth>:
    @params[in] i2cAddr
                The 8-bit value to write at framAddr
*/
/**************************************************************************/
void Adafruit_FRAM_I2C::write8 (uint16_t framAddr, uint8_t value)
{
 80800d4:	b570      	push	{r4, r5, r6, lr}
 80800d6:	4606      	mov	r6, r0
 80800d8:	460c      	mov	r4, r1
 80800da:	4615      	mov	r5, r2
  Wire.beginTransmission(i2c_addr);
 80800dc:	f002 faf6 	bl	80826cc <_Z19__fetch_global_Wirev>
 80800e0:	7831      	ldrb	r1, [r6, #0]
 80800e2:	f001 fdcb 	bl	8081c7c <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(framAddr >> 8);
 80800e6:	f002 faf1 	bl	80826cc <_Z19__fetch_global_Wirev>
 80800ea:	0a21      	lsrs	r1, r4, #8
 80800ec:	f7ff ffe1 	bl	80800b2 <_ZN7TwoWire5writeEi>
  Wire.write(framAddr & 0xFF);
 80800f0:	f002 faec 	bl	80826cc <_Z19__fetch_global_Wirev>
 80800f4:	b2e1      	uxtb	r1, r4
 80800f6:	f7ff ffdc 	bl	80800b2 <_ZN7TwoWire5writeEi>
  Wire.write(value);
 80800fa:	f002 fae7 	bl	80826cc <_Z19__fetch_global_Wirev>
 80800fe:	6803      	ldr	r3, [r0, #0]
 8080100:	4629      	mov	r1, r5
 8080102:	689b      	ldr	r3, [r3, #8]
 8080104:	4798      	blx	r3
  Wire.endTransmission();
 8080106:	f002 fae1 	bl	80826cc <_Z19__fetch_global_Wirev>
}
 808010a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
  Wire.beginTransmission(i2c_addr);
  Wire.write(framAddr >> 8);
  Wire.write(framAddr & 0xFF);
  Wire.write(value);
  Wire.endTransmission();
 808010e:	f001 bdbd 	b.w	8081c8c <_ZN7TwoWire15endTransmissionEv>

08080112 <_ZN17Adafruit_FRAM_I2C5read8Et>:

    @returns    The 8-bit value retrieved at framAddr
*/
/**************************************************************************/
uint8_t Adafruit_FRAM_I2C::read8 (uint16_t framAddr)
{
 8080112:	b538      	push	{r3, r4, r5, lr}
 8080114:	4604      	mov	r4, r0
 8080116:	460d      	mov	r5, r1
  Wire.beginTransmission(i2c_addr);
 8080118:	f002 fad8 	bl	80826cc <_Z19__fetch_global_Wirev>
 808011c:	7821      	ldrb	r1, [r4, #0]
 808011e:	f001 fdad 	bl	8081c7c <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(framAddr >> 8);
 8080122:	f002 fad3 	bl	80826cc <_Z19__fetch_global_Wirev>
 8080126:	0a29      	lsrs	r1, r5, #8
 8080128:	f7ff ffc3 	bl	80800b2 <_ZN7TwoWire5writeEi>
  Wire.write(framAddr & 0xFF);
 808012c:	f002 face 	bl	80826cc <_Z19__fetch_global_Wirev>
 8080130:	b2e9      	uxtb	r1, r5
 8080132:	f7ff ffbe 	bl	80800b2 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
 8080136:	f002 fac9 	bl	80826cc <_Z19__fetch_global_Wirev>
 808013a:	f001 fda7 	bl	8081c8c <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(i2c_addr, (uint8_t)1);
 808013e:	f002 fac5 	bl	80826cc <_Z19__fetch_global_Wirev>
 8080142:	2201      	movs	r2, #1
 8080144:	7821      	ldrb	r1, [r4, #0]
 8080146:	f001 fd96 	bl	8081c76 <_ZN7TwoWire11requestFromEhh>

  return Wire.read();
 808014a:	f002 fabf 	bl	80826cc <_Z19__fetch_global_Wirev>
 808014e:	6803      	ldr	r3, [r0, #0]
 8080150:	695b      	ldr	r3, [r3, #20]
 8080152:	4798      	blx	r3
}
 8080154:	b2c0      	uxtb	r0, r0
 8080156:	bd38      	pop	{r3, r4, r5, pc}

08080158 <_GLOBAL__sub_I__ZN17Adafruit_FRAM_I2CC2Ev>:
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8080158:	f000 bf5a 	b.w	8081010 <HAL_Pin_Map>

0808015c <_Z11watchdogISRv>:
}

// Here is were we will put the timer and other ISRs
void watchdogISR()
{
  watchdogFlag = true;
 808015c:	4b01      	ldr	r3, [pc, #4]	; (8080164 <_Z11watchdogISRv+0x8>)
 808015e:	2201      	movs	r2, #1
 8080160:	701a      	strb	r2, [r3, #0]
 8080162:	4770      	bx	lr
 8080164:	2000057a 	.word	0x2000057a

08080168 <_Z12acDetect1ISRv>:
}

void acDetect1ISR()
{
  acDetect1Flag = true;
 8080168:	4b01      	ldr	r3, [pc, #4]	; (8080170 <_Z12acDetect1ISRv+0x8>)
 808016a:	2201      	movs	r2, #1
 808016c:	701a      	strb	r2, [r3, #0]
 808016e:	4770      	bx	lr
 8080170:	20000579 	.word	0x20000579

08080174 <_Z12acDetect2ISRv>:
}

// Here is were we will put the timer and other ISRs
void acDetect2ISR()
{
  acDetect2Flag = true;
 8080174:	4b01      	ldr	r3, [pc, #4]	; (808017c <_Z12acDetect2ISRv+0x8>)
 8080176:	2201      	movs	r2, #1
 8080178:	701a      	strb	r2, [r3, #0]
 808017a:	4770      	bx	lr
 808017c:	200005d3 	.word	0x200005d3

08080180 <_Z7sendNow6String>:
  }
  else return 0;
}

int sendNow(String command) // Function to force sending data in current hour
{
 8080180:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8080182:	4904      	ldr	r1, [pc, #16]	; (8080194 <_Z7sendNow6String+0x14>)
 8080184:	f001 ff43 	bl	808200e <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080188:	b118      	cbz	r0, 8080192 <_Z7sendNow6String+0x12>
  {
    state = REPORTING_STATE;
 808018a:	4b03      	ldr	r3, [pc, #12]	; (8080198 <_Z7sendNow6String+0x18>)
 808018c:	2203      	movs	r2, #3
 808018e:	701a      	strb	r2, [r3, #0]
    return 1;
 8080190:	2001      	movs	r0, #1
  }
  else return 0;
}
 8080192:	bd08      	pop	{r3, pc}
 8080194:	08084669 	.word	0x08084669
 8080198:	20000560 	.word	0x20000560

0808019c <_Z12hardResetNow6String>:
  }
  else return 0;
}

int hardResetNow(String command)   // Will perform a hard reset on the Electron
{
 808019c:	b508      	push	{r3, lr}
 808019e:	4905      	ldr	r1, [pc, #20]	; (80801b4 <_Z12hardResetNow6String+0x18>)
 80801a0:	f001 ff35 	bl	808200e <_ZNK6String6equalsEPKc>
  if (command == "1")
 80801a4:	b120      	cbz	r0, 80801b0 <_Z12hardResetNow6String+0x14>
  {
    digitalWrite(hardResetPin,HIGH);          // This will cut all power to the Electron AND the carrir board
 80801a6:	2004      	movs	r0, #4
 80801a8:	2101      	movs	r1, #1
 80801aa:	f002 fa5e 	bl	808266a <digitalWrite>
 80801ae:	2001      	movs	r0, #1
    return 1;                                 // Unfortunately, this will never be sent
  }
  else return 0;
}
 80801b0:	bd08      	pop	{r3, pc}
 80801b2:	bf00      	nop
 80801b4:	08084669 	.word	0x08084669

080801b8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.56.constprop.60>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 80801b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80801ba:	4605      	mov	r5, r0
 80801bc:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80801c0:	4323      	orrs	r3, r4
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80801c2:	f88d 3000 	strb.w	r3, [sp]
 80801c6:	233c      	movs	r3, #60	; 0x3c
 80801c8:	f001 fba4 	bl	8081914 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, 60, flags1, flags2);
    }
 80801cc:	4628      	mov	r0, r5
 80801ce:	b003      	add	sp, #12
 80801d0:	bd30      	pop	{r4, r5, pc}

080801d2 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80801d2:	2200      	movs	r2, #0
 80801d4:	4611      	mov	r1, r2
 80801d6:	4610      	mov	r0, r2
 80801d8:	f001 b8ee 	b.w	80813b8 <network_ready>

080801dc <_Z9FRAMread8j>:
// Begin section
uint8_t FRAMread8(unsigned int address)  // Read 8 bits from FRAM
{
    uint8_t result;
    //Serial.println("In FRAMread8");
    result = fram.read8(address);
 80801dc:	b281      	uxth	r1, r0
 80801de:	4801      	ldr	r0, [pc, #4]	; (80801e4 <_Z9FRAMread8j+0x8>)
 80801e0:	f7ff bf97 	b.w	8080112 <_ZN17Adafruit_FRAM_I2C5read8Et>
 80801e4:	200005dc 	.word	0x200005dc

080801e8 <_Z10FRAMwrite8jh>:
    return result;
}

void FRAMwrite8(unsigned int address, uint8_t value)    // Write 8 bits to FRAM
{
    fram.write8(address,value);
 80801e8:	460a      	mov	r2, r1
 80801ea:	b281      	uxth	r1, r0
 80801ec:	4801      	ldr	r0, [pc, #4]	; (80801f4 <_Z10FRAMwrite8jh+0xc>)
 80801ee:	f7ff bf71 	b.w	80800d4 <_ZN17Adafruit_FRAM_I2C6write8Eth>
 80801f2:	bf00      	nop
 80801f4:	200005dc 	.word	0x200005dc

080801f8 <_Z17resolveAfterDwellv>:
  getTemperature();

  return 1;
}

bool resolveAfterDwell() {
 80801f8:	b538      	push	{r3, r4, r5, lr}
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
}

inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
 80801fa:	4b1a      	ldr	r3, [pc, #104]	; (8080264 <_Z17resolveAfterDwellv+0x6c>)
 80801fc:	681c      	ldr	r4, [r3, #0]
 80801fe:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc

  if (!pinReadFast(acDetect1) && acDetect1LastState && acDetect1State != 1) {      // After the dwell time - see if acDetect is still "on" but not if flashing
 8080202:	f8b4 22c0 	ldrh.w	r2, [r4, #704]	; 0x2c0
 8080206:	691b      	ldr	r3, [r3, #16]
 8080208:	421a      	tst	r2, r3
 808020a:	d106      	bne.n	808021a <_Z17resolveAfterDwellv+0x22>
 808020c:	4b16      	ldr	r3, [pc, #88]	; (8080268 <_Z17resolveAfterDwellv+0x70>)
 808020e:	781b      	ldrb	r3, [r3, #0]
 8080210:	b11b      	cbz	r3, 808021a <_Z17resolveAfterDwellv+0x22>
 8080212:	4d16      	ldr	r5, [pc, #88]	; (808026c <_Z17resolveAfterDwellv+0x74>)
 8080214:	682b      	ldr	r3, [r5, #0]
 8080216:	2b01      	cmp	r3, #1
 8080218:	d114      	bne.n	8080244 <_Z17resolveAfterDwellv+0x4c>
 808021a:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
    snprintf(acDetect1Str, sizeof(acDetect1Str), "On");
    acDetect1State = 2;
    state = REPORTING_STATE;
  }

  if (!pinReadFast(acDetect2) && acDetect2LastState) {      // After the dwell time - see if acDetect is still "on"
 808021e:	f8b4 22f8 	ldrh.w	r2, [r4, #760]	; 0x2f8
 8080222:	691b      	ldr	r3, [r3, #16]
 8080224:	421a      	tst	r2, r3
 8080226:	d117      	bne.n	8080258 <_Z17resolveAfterDwellv+0x60>
 8080228:	4b11      	ldr	r3, [pc, #68]	; (8080270 <_Z17resolveAfterDwellv+0x78>)
 808022a:	781b      	ldrb	r3, [r3, #0]
 808022c:	b1a3      	cbz	r3, 8080258 <_Z17resolveAfterDwellv+0x60>
    snprintf(acDetect2Str, sizeof(acDetect2Str), "On");
 808022e:	4911      	ldr	r1, [pc, #68]	; (8080274 <_Z17resolveAfterDwellv+0x7c>)
 8080230:	4811      	ldr	r0, [pc, #68]	; (8080278 <_Z17resolveAfterDwellv+0x80>)
 8080232:	f003 fcc9 	bl	8083bc8 <strcpy>
    acDetect2State = 1;
 8080236:	4b11      	ldr	r3, [pc, #68]	; (808027c <_Z17resolveAfterDwellv+0x84>)
 8080238:	2201      	movs	r2, #1
 808023a:	601a      	str	r2, [r3, #0]
    state = REPORTING_STATE;
 808023c:	4b10      	ldr	r3, [pc, #64]	; (8080280 <_Z17resolveAfterDwellv+0x88>)
 808023e:	2203      	movs	r2, #3
 8080240:	701a      	strb	r2, [r3, #0]
 8080242:	e009      	b.n	8080258 <_Z17resolveAfterDwellv+0x60>
}

bool resolveAfterDwell() {

  if (!pinReadFast(acDetect1) && acDetect1LastState && acDetect1State != 1) {      // After the dwell time - see if acDetect is still "on" but not if flashing
    snprintf(acDetect1Str, sizeof(acDetect1Str), "On");
 8080244:	490b      	ldr	r1, [pc, #44]	; (8080274 <_Z17resolveAfterDwellv+0x7c>)
 8080246:	480f      	ldr	r0, [pc, #60]	; (8080284 <_Z17resolveAfterDwellv+0x8c>)
 8080248:	f003 fcbe 	bl	8083bc8 <strcpy>
    acDetect1State = 2;
 808024c:	2302      	movs	r3, #2
 808024e:	602b      	str	r3, [r5, #0]
    state = REPORTING_STATE;
 8080250:	4b0b      	ldr	r3, [pc, #44]	; (8080280 <_Z17resolveAfterDwellv+0x88>)
 8080252:	2203      	movs	r2, #3
 8080254:	701a      	strb	r2, [r3, #0]
 8080256:	e7e0      	b.n	808021a <_Z17resolveAfterDwellv+0x22>
    snprintf(acDetect2Str, sizeof(acDetect2Str), "On");
    acDetect2State = 1;
    state = REPORTING_STATE;
  }

  acDetectChangeFlag = false;                               // Done until there is another change
 8080258:	4b0b      	ldr	r3, [pc, #44]	; (8080288 <_Z17resolveAfterDwellv+0x90>)
 808025a:	2200      	movs	r2, #0
 808025c:	701a      	strb	r2, [r3, #0]

  return 1;
}
 808025e:	2001      	movs	r0, #1
 8080260:	bd38      	pop	{r3, r4, r5, pc}
 8080262:	bf00      	nop
 8080264:	2000058c 	.word	0x2000058c
 8080268:	200005d5 	.word	0x200005d5
 808026c:	200005d8 	.word	0x200005d8
 8080270:	200005d1 	.word	0x200005d1
 8080274:	080844d4 	.word	0x080844d4
 8080278:	20000460 	.word	0x20000460
 808027c:	20000564 	.word	0x20000564
 8080280:	20000560 	.word	0x20000560
 8080284:	20000458 	.word	0x20000458
 8080288:	2000054c 	.word	0x2000054c

0808028c <_Z17getSignalStrengthv>:
  else Particle.publish("Ubidots Hook", data,PRIVATE);             // Publish the response code
}


void getSignalStrength()
{
 808028c:	b530      	push	{r4, r5, lr}
 808028e:	b08f      	sub	sp, #60	; 0x3c
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
 8080290:	4910      	ldr	r1, [pc, #64]	; (80802d4 <_Z17getSignalStrengthv+0x48>)
 8080292:	a804      	add	r0, sp, #16
 8080294:	f001 f8f6 	bl	8081484 <_ZN5spark13CellularClass4RSSIEv>
  auto rat = sig.getAccessTechnology();
 8080298:	a804      	add	r0, sp, #16
 808029a:	f001 f94c 	bl	8081536 <_ZNK14CellularSignal19getAccessTechnologyEv>
 808029e:	4604      	mov	r4, r0
  float strengthPercentage = sig.getStrength();
 80802a0:	a804      	add	r0, sp, #16
 80802a2:	f001 f9a7 	bl	80815f4 <_ZNK14CellularSignal11getStrengthEv>
 80802a6:	4605      	mov	r5, r0
  float qualityPercentage = sig.getQuality();
 80802a8:	a804      	add	r0, sp, #16
 80802aa:	f001 f98b 	bl	80815c4 <_ZNK14CellularSignal10getQualityEv>
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
 80802ae:	f002 fd27 	bl	8082d00 <__aeabi_f2d>
 80802b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80802b6:	4628      	mov	r0, r5
 80802b8:	f002 fd22 	bl	8082d00 <__aeabi_f2d>
 80802bc:	e9cd 0100 	strd	r0, r1, [sp]
 80802c0:	4b05      	ldr	r3, [pc, #20]	; (80802d8 <_Z17getSignalStrengthv+0x4c>)
 80802c2:	4a06      	ldr	r2, [pc, #24]	; (80802dc <_Z17getSignalStrengthv+0x50>)
 80802c4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80802c8:	2140      	movs	r1, #64	; 0x40
 80802ca:	4805      	ldr	r0, [pc, #20]	; (80802e0 <_Z17getSignalStrengthv+0x54>)
 80802cc:	f001 f8ac 	bl	8081428 <snprintf>
}
 80802d0:	b00f      	add	sp, #60	; 0x3c
 80802d2:	bd30      	pop	{r4, r5, pc}
 80802d4:	200005e0 	.word	0x200005e0
 80802d8:	2000046c 	.word	0x2000046c
 80802dc:	080844d7 	.word	0x080844d7
 80802e0:	20000591 	.word	0x20000591
 80802e4:	00000000 	.word	0x00000000

080802e8 <_Z14getTemperaturev>:

int getTemperature()
{
 80802e8:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
 80802ea:	200a      	movs	r0, #10
 80802ec:	f002 f9d6 	bl	808269c <analogRead>
  float voltage = reading * 3.3;        // converting that reading to voltage, for 3.3v arduino use 3.3
 80802f0:	f002 fcf4 	bl	8082cdc <__aeabi_i2d>
 80802f4:	a314      	add	r3, pc, #80	; (adr r3, 8080348 <_Z14getTemperaturev+0x60>)
 80802f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80802fa:	f002 fd55 	bl	8082da8 <__aeabi_dmul>
 80802fe:	f002 ff8d 	bl	808321c <__aeabi_d2f>
  voltage /= 4096.0;                    // Electron is different than the Arduino where there are only 1024 steps
  int temperatureC = int(((voltage - 0.5) * 100));  //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
  temperatureF = int((temperatureC * 9.0 / 5.0) + 32.0);  // now convert to Fahrenheit
 8080302:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 8080306:	f003 f8e7 	bl	80834d8 <__aeabi_fmul>
 808030a:	f002 fcf9 	bl	8082d00 <__aeabi_f2d>
 808030e:	2200      	movs	r2, #0
 8080310:	4b0f      	ldr	r3, [pc, #60]	; (8080350 <_Z14getTemperaturev+0x68>)
 8080312:	f002 fb95 	bl	8082a40 <__aeabi_dsub>
 8080316:	2200      	movs	r2, #0
 8080318:	4b0e      	ldr	r3, [pc, #56]	; (8080354 <_Z14getTemperaturev+0x6c>)
 808031a:	f002 fd45 	bl	8082da8 <__aeabi_dmul>
 808031e:	f002 ff55 	bl	80831cc <__aeabi_d2iz>
 8080322:	f002 fcdb 	bl	8082cdc <__aeabi_i2d>
 8080326:	2200      	movs	r2, #0
 8080328:	4b0b      	ldr	r3, [pc, #44]	; (8080358 <_Z14getTemperaturev+0x70>)
 808032a:	f002 fd3d 	bl	8082da8 <__aeabi_dmul>
 808032e:	2200      	movs	r2, #0
 8080330:	4b0a      	ldr	r3, [pc, #40]	; (808035c <_Z14getTemperaturev+0x74>)
 8080332:	f002 fe63 	bl	8082ffc <__aeabi_ddiv>
 8080336:	2200      	movs	r2, #0
 8080338:	4b09      	ldr	r3, [pc, #36]	; (8080360 <_Z14getTemperaturev+0x78>)
 808033a:	f002 fb83 	bl	8082a44 <__adddf3>
 808033e:	f002 ff45 	bl	80831cc <__aeabi_d2iz>
 8080342:	4b08      	ldr	r3, [pc, #32]	; (8080364 <_Z14getTemperaturev+0x7c>)
 8080344:	6018      	str	r0, [r3, #0]
  return temperatureF;
}
 8080346:	bd08      	pop	{r3, pc}
 8080348:	66666666 	.word	0x66666666
 808034c:	400a6666 	.word	0x400a6666
 8080350:	3fe00000 	.word	0x3fe00000
 8080354:	40590000 	.word	0x40590000
 8080358:	40220000 	.word	0x40220000
 808035c:	40140000 	.word	0x40140000
 8080360:	40400000 	.word	0x40400000
 8080364:	20000574 	.word	0x20000574

08080368 <_Z16takeMeasurementsv>:
    break;
  }
}

// Take measurements
bool takeMeasurements() {
 8080368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // ACDetect 1 - When voltage is low, pin will go high, acDetectState = 0
  // ACDetect 2 - When voltage is low, pin will go high, acDetect2State = 0

  static int highReadingCount = 0;                           // Count the flashes to discrimiate from solid on

  if (acDetect1State == 1) {                       // If the light is flashing, only a reset will re-enable checking
 808036a:	4b36      	ldr	r3, [pc, #216]	; (8080444 <_Z16takeMeasurementsv+0xdc>)
 808036c:	4e36      	ldr	r6, [pc, #216]	; (8080448 <_Z16takeMeasurementsv+0xe0>)
 808036e:	681a      	ldr	r2, [r3, #0]
 8080370:	461d      	mov	r5, r3
 8080372:	2a01      	cmp	r2, #1
 8080374:	d104      	bne.n	8080380 <_Z16takeMeasurementsv+0x18>
    detachInterrupt(acDetect1);                   // Stop checking until next reset
 8080376:	2019      	movs	r0, #25
 8080378:	f001 fcba 	bl	8081cf0 <_Z15detachInterruptt>
    acDetect1Flag = false;
 808037c:	2300      	movs	r3, #0
 808037e:	7033      	strb	r3, [r6, #0]
  }

  if (acDetect2State > 0) {                       // If the list is deemed to be on, only a reset will re-enable checking
 8080380:	4b32      	ldr	r3, [pc, #200]	; (808044c <_Z16takeMeasurementsv+0xe4>)
 8080382:	4c33      	ldr	r4, [pc, #204]	; (8080450 <_Z16takeMeasurementsv+0xe8>)
 8080384:	681b      	ldr	r3, [r3, #0]
 8080386:	2b00      	cmp	r3, #0
 8080388:	dd04      	ble.n	8080394 <_Z16takeMeasurementsv+0x2c>
    detachInterrupt(acDetect2);                   // Stop checking until next reset
 808038a:	201b      	movs	r0, #27
 808038c:	f001 fcb0 	bl	8081cf0 <_Z15detachInterruptt>
    acDetect2Flag = false;
 8080390:	2300      	movs	r3, #0
 8080392:	7023      	strb	r3, [r4, #0]
  }

  // Resolve acDetect1 flags, interrupts and alerts
  if (acDetect1Flag) {                            // acDetect1 triggered an interrupt
 8080394:	7833      	ldrb	r3, [r6, #0]
 8080396:	2b00      	cmp	r3, #0
 8080398:	d030      	beq.n	80803fc <_Z16takeMeasurementsv+0x94>
 808039a:	4b2e      	ldr	r3, [pc, #184]	; (8080454 <_Z16takeMeasurementsv+0xec>)
 808039c:	4f2e      	ldr	r7, [pc, #184]	; (8080458 <_Z16takeMeasurementsv+0xf0>)
 808039e:	681b      	ldr	r3, [r3, #0]
 80803a0:	f8d3 22bc 	ldr.w	r2, [r3, #700]	; 0x2bc
    if (!pinReadFast(acDetect1)) {                // acDetect1 is HIGH
 80803a4:	f8b3 32c0 	ldrh.w	r3, [r3, #704]	; 0x2c0
 80803a8:	6912      	ldr	r2, [r2, #16]
 80803aa:	4213      	tst	r3, r2
 80803ac:	d11f      	bne.n	80803ee <_Z16takeMeasurementsv+0x86>
      if (acDetect1LastState == false) highReadingCount++;
 80803ae:	783a      	ldrb	r2, [r7, #0]
 80803b0:	4b2a      	ldr	r3, [pc, #168]	; (808045c <_Z16takeMeasurementsv+0xf4>)
 80803b2:	b912      	cbnz	r2, 80803ba <_Z16takeMeasurementsv+0x52>
 80803b4:	681a      	ldr	r2, [r3, #0]
 80803b6:	3201      	adds	r2, #1
 80803b8:	601a      	str	r2, [r3, #0]
      if (highReadingCount >= 10) {               // After the ten flashes - we know it is flashing
 80803ba:	681b      	ldr	r3, [r3, #0]
 80803bc:	2b09      	cmp	r3, #9
 80803be:	dd09      	ble.n	80803d4 <_Z16takeMeasurementsv+0x6c>
        snprintf(acDetect1Str, sizeof(acDetect1Str), "Flashing");
 80803c0:	4a27      	ldr	r2, [pc, #156]	; (8080460 <_Z16takeMeasurementsv+0xf8>)
 80803c2:	2108      	movs	r1, #8
 80803c4:	4827      	ldr	r0, [pc, #156]	; (8080464 <_Z16takeMeasurementsv+0xfc>)
 80803c6:	f001 f82f 	bl	8081428 <snprintf>
        acDetect1State = 1;
 80803ca:	2301      	movs	r3, #1
 80803cc:	602b      	str	r3, [r5, #0]
        state = REPORTING_STATE;
 80803ce:	4b26      	ldr	r3, [pc, #152]	; (8080468 <_Z16takeMeasurementsv+0x100>)
 80803d0:	2203      	movs	r2, #3
 80803d2:	701a      	strb	r2, [r3, #0]
      }
      digitalWrite(blueLED,HIGH);
 80803d4:	2101      	movs	r1, #1
 80803d6:	2007      	movs	r0, #7
 80803d8:	f002 f947 	bl	808266a <digitalWrite>
      acDetectChangeFlag = true;
 80803dc:	4b23      	ldr	r3, [pc, #140]	; (808046c <_Z16takeMeasurementsv+0x104>)
 80803de:	2501      	movs	r5, #1
 80803e0:	701d      	strb	r5, [r3, #0]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80803e2:	f000 fdf5 	bl	8080fd0 <HAL_Timer_Get_Milli_Seconds>
      dwellTimeStamp = millis();
 80803e6:	4b22      	ldr	r3, [pc, #136]	; (8080470 <_Z16takeMeasurementsv+0x108>)
      acDetect1LastState = true;
 80803e8:	703d      	strb	r5, [r7, #0]
        acDetect1State = 1;
        state = REPORTING_STATE;
      }
      digitalWrite(blueLED,HIGH);
      acDetectChangeFlag = true;
      dwellTimeStamp = millis();
 80803ea:	6018      	str	r0, [r3, #0]
 80803ec:	e004      	b.n	80803f8 <_Z16takeMeasurementsv+0x90>
      acDetect1LastState = true;
    }
    else {                                        // acDetect1 is LOW
      acDetect1LastState = false;
 80803ee:	2100      	movs	r1, #0
      digitalWrite(blueLED,LOW);
 80803f0:	2007      	movs	r0, #7
      acDetectChangeFlag = true;
      dwellTimeStamp = millis();
      acDetect1LastState = true;
    }
    else {                                        // acDetect1 is LOW
      acDetect1LastState = false;
 80803f2:	7039      	strb	r1, [r7, #0]
      digitalWrite(blueLED,LOW);
 80803f4:	f002 f939 	bl	808266a <digitalWrite>
    }
    acDetect1Flag = false;
 80803f8:	2300      	movs	r3, #0
 80803fa:	7033      	strb	r3, [r6, #0]
  }

  // Resolve acDetect2 flags, interrupts and alerts
  if (acDetect2Flag) {                            // acDetect1 triggered an interrupt
 80803fc:	7823      	ldrb	r3, [r4, #0]
 80803fe:	b1b3      	cbz	r3, 808042e <_Z16takeMeasurementsv+0xc6>
 8080400:	4b14      	ldr	r3, [pc, #80]	; (8080454 <_Z16takeMeasurementsv+0xec>)
 8080402:	4d1c      	ldr	r5, [pc, #112]	; (8080474 <_Z16takeMeasurementsv+0x10c>)
 8080404:	681b      	ldr	r3, [r3, #0]
 8080406:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
    if (!pinReadFast(acDetect2)) {                // acDetect1 is HIGH
 808040a:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 808040e:	6912      	ldr	r2, [r2, #16]
 8080410:	4213      	tst	r3, r2
 8080412:	d108      	bne.n	8080426 <_Z16takeMeasurementsv+0xbe>
      acDetectChangeFlag = true;
 8080414:	4b15      	ldr	r3, [pc, #84]	; (808046c <_Z16takeMeasurementsv+0x104>)
 8080416:	2601      	movs	r6, #1
 8080418:	701e      	strb	r6, [r3, #0]
 808041a:	f000 fdd9 	bl	8080fd0 <HAL_Timer_Get_Milli_Seconds>
      dwellTimeStamp = millis();
 808041e:	4b14      	ldr	r3, [pc, #80]	; (8080470 <_Z16takeMeasurementsv+0x108>)
      acDetect2LastState = true;
 8080420:	702e      	strb	r6, [r5, #0]

  // Resolve acDetect2 flags, interrupts and alerts
  if (acDetect2Flag) {                            // acDetect1 triggered an interrupt
    if (!pinReadFast(acDetect2)) {                // acDetect1 is HIGH
      acDetectChangeFlag = true;
      dwellTimeStamp = millis();
 8080422:	6018      	str	r0, [r3, #0]
 8080424:	e001      	b.n	808042a <_Z16takeMeasurementsv+0xc2>
      acDetect2LastState = true;
    }
    else {                                        // acDetect1 is LOW
      acDetect2LastState = false;
 8080426:	2300      	movs	r3, #0
 8080428:	702b      	strb	r3, [r5, #0]
    }
    acDetect2Flag = false;
 808042a:	2300      	movs	r3, #0
 808042c:	7023      	strb	r3, [r4, #0]
  }

  if (Cellular.ready()) getSignalStrength();      // Test signal strength if the cellular modem is on and ready
 808042e:	4812      	ldr	r0, [pc, #72]	; (8080478 <_Z16takeMeasurementsv+0x110>)
 8080430:	f7ff fecf 	bl	80801d2 <_ZN5spark13CellularClass5readyEv>
 8080434:	b108      	cbz	r0, 808043a <_Z16takeMeasurementsv+0xd2>
 8080436:	f7ff ff29 	bl	808028c <_Z17getSignalStrengthv>
  getTemperature();
 808043a:	f7ff ff55 	bl	80802e8 <_Z14getTemperaturev>

  return 1;
}
 808043e:	2001      	movs	r0, #1
 8080440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8080442:	bf00      	nop
 8080444:	200005d8 	.word	0x200005d8
 8080448:	20000579 	.word	0x20000579
 808044c:	20000564 	.word	0x20000564
 8080450:	200005d3 	.word	0x200005d3
 8080454:	2000058c 	.word	0x2000058c
 8080458:	200005d5 	.word	0x200005d5
 808045c:	20000588 	.word	0x20000588
 8080460:	080844f0 	.word	0x080844f0
 8080464:	20000458 	.word	0x20000458
 8080468:	20000560 	.word	0x20000560
 808046c:	2000054c 	.word	0x2000054c
 8080470:	2000055c 	.word	0x2000055c
 8080474:	200005d1 	.word	0x200005d1
 8080478:	200005e0 	.word	0x200005e0

0808047c <_Z11petWatchdogv>:
  temperatureF = int((temperatureC * 9.0 / 5.0) + 32.0);  // now convert to Fahrenheit
  return temperatureF;
}

void petWatchdog()
{
 808047c:	b508      	push	{r3, lr}
  digitalWrite(donePin, HIGH);                                        // Pet the watchdog
 808047e:	2101      	movs	r1, #1
 8080480:	2006      	movs	r0, #6
 8080482:	f002 f8f2 	bl	808266a <digitalWrite>
  digitalWrite(donePin, LOW);
 8080486:	2100      	movs	r1, #0
 8080488:	2006      	movs	r0, #6
 808048a:	f002 f8ee 	bl	808266a <digitalWrite>
  watchdogFlag = false;
 808048e:	4b02      	ldr	r3, [pc, #8]	; (8080498 <_Z11petWatchdogv+0x1c>)
 8080490:	2200      	movs	r2, #0
 8080492:	701a      	strb	r2, [r3, #0]
 8080494:	bd08      	pop	{r3, pc}
 8080496:	bf00      	nop
 8080498:	2000057a 	.word	0x2000057a

0808049c <_Z17connectToParticlev>:
}


// These functions manage our connecion to Particle
bool connectToParticle()
{
 808049c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!Cellular.ready())
 80804a0:	482e      	ldr	r0, [pc, #184]	; (808055c <_Z17connectToParticlev+0xc0>)
 80804a2:	f7ff fe96 	bl	80801d2 <_ZN5spark13CellularClass5readyEv>
 80804a6:	4604      	mov	r4, r0
 80804a8:	bb30      	cbnz	r0, 80804f8 <_Z17connectToParticlev+0x5c>

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 80804aa:	4603      	mov	r3, r0
 80804ac:	4602      	mov	r2, r0
 80804ae:	4601      	mov	r1, r0
 80804b0:	f000 ff8a 	bl	80813c8 <network_on>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80804b4:	4623      	mov	r3, r4
 80804b6:	4622      	mov	r2, r4
 80804b8:	4621      	mov	r1, r4
 80804ba:	4620      	mov	r0, r4
 80804bc:	f000 ff74 	bl	80813a8 <network_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80804c0:	4620      	mov	r0, r4
 80804c2:	f000 fd9d 	bl	8081000 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80804c6:	4604      	mov	r4, r0
 80804c8:	4e25      	ldr	r6, [pc, #148]	; (8080560 <_Z17connectToParticlev+0xc4>)
 80804ca:	2500      	movs	r5, #0
 80804cc:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80804ce:	2000      	movs	r0, #0
 80804d0:	f000 fd96 	bl	8081000 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80804d4:	1b00      	subs	r0, r0, r4
 80804d6:	eb61 0105 	sbc.w	r1, r1, r5
 80804da:	428f      	cmp	r7, r1
 80804dc:	bf08      	it	eq
 80804de:	4286      	cmpeq	r6, r0
 80804e0:	d306      	bcc.n	80804f0 <_Z17connectToParticlev+0x54>
  {
    Cellular.on();                                           // turn on the Modem
    Cellular.connect();                                      // Connect to the cellular network
    if(!waitFor(Cellular.ready,90000)) return false;         // Connect to cellular - give it 90 seconds
 80804e2:	481e      	ldr	r0, [pc, #120]	; (808055c <_Z17connectToParticlev+0xc0>)
 80804e4:	f7ff fe75 	bl	80801d2 <_ZN5spark13CellularClass5readyEv>
 80804e8:	b910      	cbnz	r0, 80804f0 <_Z17connectToParticlev+0x54>
            spark_process();
 80804ea:	f000 ff0d 	bl	8081308 <spark_process>
 80804ee:	e7ee      	b.n	80804ce <_Z17connectToParticlev+0x32>
 80804f0:	481a      	ldr	r0, [pc, #104]	; (808055c <_Z17connectToParticlev+0xc0>)
 80804f2:	f7ff fe6e 	bl	80801d2 <_ZN5spark13CellularClass5readyEv>
 80804f6:	b308      	cbz	r0, 808053c <_Z17connectToParticlev+0xa0>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80804f8:	f000 fd6a 	bl	8080fd0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80804fc:	4c19      	ldr	r4, [pc, #100]	; (8080564 <_Z17connectToParticlev+0xc8>)


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80804fe:	f247 582f 	movw	r8, #29999	; 0x752f
 8080502:	6020      	str	r0, [r4, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8080504:	f000 ff00 	bl	8081308 <spark_process>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 8080508:	f000 ff06 	bl	8081318 <spark_cloud_flag_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 808050c:	2000      	movs	r0, #0
 808050e:	f000 fd77 	bl	8081000 <hal_timer_millis>
 8080512:	4625      	mov	r5, r4


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080514:	4606      	mov	r6, r0
 8080516:	2700      	movs	r7, #0
 8080518:	f04f 0900 	mov.w	r9, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 808051c:	2000      	movs	r0, #0
 808051e:	f000 fd6f 	bl	8081000 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080522:	1b80      	subs	r0, r0, r6
 8080524:	eb61 0107 	sbc.w	r1, r1, r7
 8080528:	4589      	cmp	r9, r1
 808052a:	bf08      	it	eq
 808052c:	4580      	cmpeq	r8, r0
 808052e:	d307      	bcc.n	8080540 <_Z17connectToParticlev+0xa4>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080530:	f000 ff02 	bl	8081338 <spark_cloud_flag_connected>
 8080534:	b920      	cbnz	r0, 8080540 <_Z17connectToParticlev+0xa4>
            spark_process();
 8080536:	f000 fee7 	bl	8081308 <spark_process>
 808053a:	e7ef      	b.n	808051c <_Z17connectToParticlev+0x80>
 808053c:	2400      	movs	r4, #0
 808053e:	e009      	b.n	8080554 <_Z17connectToParticlev+0xb8>
 8080540:	f000 fefa 	bl	8081338 <spark_cloud_flag_connected>
  }
  Particle.process();
  Particle.connect();                                      // Connect to Particle
  if(!waitFor(Particle.connected,30000)) return false;     // Connect to Particle - give it 30 seconds
 8080544:	4604      	mov	r4, r0
 8080546:	2800      	cmp	r0, #0
 8080548:	d0f8      	beq.n	808053c <_Z17connectToParticlev+0xa0>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808054a:	f000 fd41 	bl	8080fd0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808054e:	6028      	str	r0, [r5, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8080550:	f000 feda 	bl	8081308 <spark_process>
  Particle.process();
  return true;
}
 8080554:	4620      	mov	r0, r4
 8080556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808055a:	bf00      	nop
 808055c:	200005e0 	.word	0x200005e0
 8080560:	00015f8f 	.word	0x00015f8f
 8080564:	20000ba8 	.word	0x20000ba8

08080568 <_Z20meterParticlePublishv>:
  publishTimeStamp = millis();
  return 1;
}

bool meterParticlePublish(void)
{
 8080568:	b508      	push	{r3, lr}
 808056a:	f000 fd31 	bl	8080fd0 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - publishTimeStamp >= publishFrequency) return 1;
 808056e:	4b05      	ldr	r3, [pc, #20]	; (8080584 <_Z20meterParticlePublishv+0x1c>)
 8080570:	681b      	ldr	r3, [r3, #0]
 8080572:	1ac0      	subs	r0, r0, r3
 8080574:	4b04      	ldr	r3, [pc, #16]	; (8080588 <_Z20meterParticlePublishv+0x20>)
 8080576:	681b      	ldr	r3, [r3, #0]
  else return 0;
}
 8080578:	4298      	cmp	r0, r3
 808057a:	bf34      	ite	cc
 808057c:	2000      	movcc	r0, #0
 808057e:	2001      	movcs	r0, #1
 8080580:	bd08      	pop	{r3, pc}
 8080582:	bf00      	nop
 8080584:	20000550 	.word	0x20000550
 8080588:	20000454 	.word	0x20000454

0808058c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.49>:
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
 808058c:	b508      	push	{r3, lr}
void publishStateTransition(void)
{
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
  oldState = state;
  waitUntil(meterParticlePublish);
 808058e:	f7ff ffeb 	bl	8080568 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080592:	b118      	cbz	r0, 808059c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.49+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
 8080594:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8080598:	f7ff bfe6 	b.w	8080568 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
 808059c:	f000 feb4 	bl	8081308 <spark_process>
 80805a0:	e7f5      	b.n	808058e <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.49+0x2>
	...

080805a4 <_Z14fullModemResetv>:
  if (Particle.connected()) Particle.publish("State Transition",stateTransitionString,PRIVATE);
  publishTimeStamp = millis();
}

void fullModemReset()   // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
{
 80805a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
 80805a6:	f000 febf 	bl	8081328 <spark_cloud_flag_disconnect>
 80805aa:	f000 fd11 	bl	8080fd0 <HAL_Timer_Get_Milli_Seconds>
	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 80805ae:	f643 2597 	movw	r5, #14999	; 0x3a97
 80805b2:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80805b4:	f000 fec0 	bl	8081338 <spark_cloud_flag_connected>
 80805b8:	b140      	cbz	r0, 80805cc <_Z14fullModemResetv+0x28>
 80805ba:	f000 fd09 	bl	8080fd0 <HAL_Timer_Get_Milli_Seconds>
 80805be:	1b00      	subs	r0, r0, r4
 80805c0:	42a8      	cmp	r0, r5
 80805c2:	d803      	bhi.n	80805cc <_Z14fullModemResetv+0x28>
		delay(100);
 80805c4:	2064      	movs	r0, #100	; 0x64
 80805c6:	f000 ff47 	bl	8081458 <delay>

void fullModemReset()   // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
{
	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 80805ca:	e7f3      	b.n	80805b4 <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 80805cc:	2100      	movs	r1, #0
 80805ce:	4b09      	ldr	r3, [pc, #36]	; (80805f4 <_Z14fullModemResetv+0x50>)
 80805d0:	f247 5230 	movw	r2, #30000	; 0x7530
 80805d4:	4608      	mov	r0, r1
 80805d6:	f000 fccb 	bl	8080f70 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
 80805da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80805de:	f000 ff3b 	bl	8081458 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
 80805e2:	4b05      	ldr	r3, [pc, #20]	; (80805f8 <_Z14fullModemResetv+0x54>)
 80805e4:	220a      	movs	r2, #10
 80805e6:	681b      	ldr	r3, [r3, #0]
 80805e8:	2101      	movs	r1, #1
 80805ea:	4668      	mov	r0, sp
 80805ec:	f001 fd42 	bl	8082074 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 80805f0:	b003      	add	sp, #12
 80805f2:	bd30      	pop	{r4, r5, pc}
 80805f4:	080844f9 	.word	0x080844f9
 80805f8:	2000057c 	.word	0x2000057c

080805fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80805fc:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80805fe:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080600:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 8080602:	b17c      	cbz	r4, 8080624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8080604:	6863      	ldr	r3, [r4, #4]
 8080606:	3b01      	subs	r3, #1
 8080608:	6063      	str	r3, [r4, #4]
 808060a:	b95b      	cbnz	r3, 8080624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 808060c:	6823      	ldr	r3, [r4, #0]
 808060e:	4620      	mov	r0, r4
 8080610:	689b      	ldr	r3, [r3, #8]
 8080612:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080614:	68a3      	ldr	r3, [r4, #8]
 8080616:	3b01      	subs	r3, #1
 8080618:	60a3      	str	r3, [r4, #8]
 808061a:	b91b      	cbnz	r3, 8080624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 808061c:	6823      	ldr	r3, [r4, #0]
 808061e:	4620      	mov	r0, r4
 8080620:	68db      	ldr	r3, [r3, #12]
 8080622:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 8080624:	4628      	mov	r0, r5
 8080626:	bd38      	pop	{r3, r4, r5, pc}

08080628 <_Z9ResetFRAMv>:
    fram.write8(address + 3, one);
}


void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
 8080628:	b530      	push	{r4, r5, lr}
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(CONTROLREGISTER);
 808062a:	2007      	movs	r0, #7
    fram.write8(address + 3, one);
}


void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
 808062c:	b085      	sub	sp, #20
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(CONTROLREGISTER);
 808062e:	f7ff fdd5 	bl	80801dc <_Z9FRAMread8j>
 8080632:	4b1f      	ldr	r3, [pc, #124]	; (80806b0 <_Z9ResetFRAMv+0x88>)
    Particle.publish("FRAM","Resetting in progress",PRIVATE);
 8080634:	2200      	movs	r2, #0
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080636:	781b      	ldrb	r3, [r3, #0]
 8080638:	491e      	ldr	r1, [pc, #120]	; (80806b4 <_Z9ResetFRAMv+0x8c>)
 808063a:	f88d 2000 	strb.w	r2, [sp]


void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(CONTROLREGISTER);
 808063e:	4605      	mov	r5, r0
    Particle.publish("FRAM","Resetting in progress",PRIVATE);
 8080640:	4a1d      	ldr	r2, [pc, #116]	; (80806b8 <_Z9ResetFRAMv+0x90>)
 8080642:	a802      	add	r0, sp, #8
 8080644:	f7ff fdb8 	bl	80801b8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.56.constprop.60>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080648:	a803      	add	r0, sp, #12
 808064a:	f7ff ffd7 	bl	80805fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (unsigned long i=8; i < 32768; i++) {  // Start at 8 to not overwrite permanent settings
 808064e:	2408      	movs	r4, #8
        FRAMwrite8(i,0x0);
 8080650:	2100      	movs	r1, #0
 8080652:	4620      	mov	r0, r4
 8080654:	f7ff fdc8 	bl	80801e8 <_Z10FRAMwrite8jh>
        if (i==8192) Serial.println(F("25% done"));
 8080658:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 808065c:	d103      	bne.n	8080666 <_Z9ResetFRAMv+0x3e>
 808065e:	f001 fec5 	bl	80823ec <_Z16_fetch_usbserialv>
 8080662:	4916      	ldr	r1, [pc, #88]	; (80806bc <_Z9ResetFRAMv+0x94>)
 8080664:	e014      	b.n	8080690 <_Z9ResetFRAMv+0x68>
        if (i==16384) Serial.println(F("50% done"));
 8080666:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 808066a:	d103      	bne.n	8080674 <_Z9ResetFRAMv+0x4c>
 808066c:	f001 febe 	bl	80823ec <_Z16_fetch_usbserialv>
 8080670:	4913      	ldr	r1, [pc, #76]	; (80806c0 <_Z9ResetFRAMv+0x98>)
 8080672:	e00d      	b.n	8080690 <_Z9ResetFRAMv+0x68>
        if (i==(24576)) Serial.println(F("75% done"));
 8080674:	f5b4 4fc0 	cmp.w	r4, #24576	; 0x6000
 8080678:	d103      	bne.n	8080682 <_Z9ResetFRAMv+0x5a>
 808067a:	f001 feb7 	bl	80823ec <_Z16_fetch_usbserialv>
 808067e:	4911      	ldr	r1, [pc, #68]	; (80806c4 <_Z9ResetFRAMv+0x9c>)
 8080680:	e006      	b.n	8080690 <_Z9ResetFRAMv+0x68>
        if (i==32767) Serial.println(F("Done"));
 8080682:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8080686:	429c      	cmp	r4, r3
 8080688:	d104      	bne.n	8080694 <_Z9ResetFRAMv+0x6c>
 808068a:	f001 feaf 	bl	80823ec <_Z16_fetch_usbserialv>
 808068e:	490e      	ldr	r1, [pc, #56]	; (80806c8 <_Z9ResetFRAMv+0xa0>)
 8080690:	f001 fbbb 	bl	8081e0a <_ZN5Print7printlnEPKc>
void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(CONTROLREGISTER);
    Particle.publish("FRAM","Resetting in progress",PRIVATE);
    for (unsigned long i=8; i < 32768; i++) {  // Start at 8 to not overwrite permanent settings
 8080694:	3401      	adds	r4, #1
 8080696:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 808069a:	d1d9      	bne.n	8080650 <_Z9ResetFRAMv+0x28>
        if (i==8192) Serial.println(F("25% done"));
        if (i==16384) Serial.println(F("50% done"));
        if (i==(24576)) Serial.println(F("75% done"));
        if (i==32767) Serial.println(F("Done"));
    }
    FRAMwrite8(CONTROLREGISTER,tempControlReg);   // Preserce the control register values
 808069c:	4629      	mov	r1, r5
 808069e:	2007      	movs	r0, #7
 80806a0:	f7ff fda2 	bl	80801e8 <_Z10FRAMwrite8jh>
    FRAMwrite8(VERSIONADDR,VERSIONNUMBER);  // Reset version to match #define value for sketch
 80806a4:	2109      	movs	r1, #9
 80806a6:	2000      	movs	r0, #0
 80806a8:	f7ff fd9e 	bl	80801e8 <_Z10FRAMwrite8jh>
}
 80806ac:	b005      	add	sp, #20
 80806ae:	bd30      	pop	{r4, r5, pc}
 80806b0:	2000054d 	.word	0x2000054d
 80806b4:	0808467b 	.word	0x0808467b
 80806b8:	08084506 	.word	0x08084506
 80806bc:	0808451c 	.word	0x0808451c
 80806c0:	08084525 	.word	0x08084525
 80806c4:	0808452e 	.word	0x0808452e
 80806c8:	08084537 	.word	0x08084537

080806cc <_Z9resetFRAM6String>:
 * They are intended to allow for customization and control during installations
 * and to allow for management.
*/

int resetFRAM(String command)   // Will reset the local counts
{
 80806cc:	b508      	push	{r3, lr}
 80806ce:	4904      	ldr	r1, [pc, #16]	; (80806e0 <_Z9resetFRAM6String+0x14>)
 80806d0:	f001 fc9d 	bl	808200e <_ZNK6String6equalsEPKc>
  if (command == "1")
 80806d4:	b110      	cbz	r0, 80806dc <_Z9resetFRAM6String+0x10>
  {
    ResetFRAM();
 80806d6:	f7ff ffa7 	bl	8080628 <_Z9ResetFRAMv>
    return 1;
 80806da:	2001      	movs	r0, #1
  }
  else return 0;
}
 80806dc:	bd08      	pop	{r3, pc}
 80806de:	bf00      	nop
 80806e0:	08084669 	.word	0x08084669

080806e4 <_Z9sendEventv>:

  return 1;
}

void sendEvent()
{
 80806e4:	b500      	push	{lr}
 80806e6:	b0c7      	sub	sp, #284	; 0x11c
  waitUntil(meterParticlePublish);
 80806e8:	f7ff ff50 	bl	808058c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.49>
  char data[256];                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"acdetect1\":%i, \"acdetect2\":%i, \"temp\":%i, \"resets\":%i}",acDetect1State, acDetect2State, temperatureF, resetCount);
 80806ec:	4915      	ldr	r1, [pc, #84]	; (8080744 <_Z9sendEventv+0x60>)
 80806ee:	4b16      	ldr	r3, [pc, #88]	; (8080748 <_Z9sendEventv+0x64>)
 80806f0:	6809      	ldr	r1, [r1, #0]
 80806f2:	4a16      	ldr	r2, [pc, #88]	; (808074c <_Z9sendEventv+0x68>)
 80806f4:	681b      	ldr	r3, [r3, #0]
 80806f6:	6812      	ldr	r2, [r2, #0]
 80806f8:	9102      	str	r1, [sp, #8]
 80806fa:	4915      	ldr	r1, [pc, #84]	; (8080750 <_Z9sendEventv+0x6c>)
 80806fc:	a806      	add	r0, sp, #24
 80806fe:	6809      	ldr	r1, [r1, #0]
 8080700:	9200      	str	r2, [sp, #0]
 8080702:	9101      	str	r1, [sp, #4]
 8080704:	4a13      	ldr	r2, [pc, #76]	; (8080754 <_Z9sendEventv+0x70>)
 8080706:	f44f 7180 	mov.w	r1, #256	; 0x100
 808070a:	f000 fe8d 	bl	8081428 <snprintf>
 808070e:	4b12      	ldr	r3, [pc, #72]	; (8080758 <_Z9sendEventv+0x74>)
  Particle.publish("Compactor_Hook", data, PRIVATE);
 8080710:	2200      	movs	r2, #0
 8080712:	4912      	ldr	r1, [pc, #72]	; (808075c <_Z9sendEventv+0x78>)
 8080714:	781b      	ldrb	r3, [r3, #0]
 8080716:	a804      	add	r0, sp, #16
 8080718:	f88d 2000 	strb.w	r2, [sp]
 808071c:	aa06      	add	r2, sp, #24
 808071e:	f7ff fd4b 	bl	80801b8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.56.constprop.60>
 8080722:	a805      	add	r0, sp, #20
 8080724:	f7ff ff6a 	bl	80805fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  dataInFlight = true; // set the data inflight flag
 8080728:	4b0d      	ldr	r3, [pc, #52]	; (8080760 <_Z9sendEventv+0x7c>)
 808072a:	2201      	movs	r2, #1
 808072c:	701a      	strb	r2, [r3, #0]
  currentHourlyPeriod = Time.hour();                // Change the time period since we have reported for this one
 808072e:	f001 fd81 	bl	8082234 <_ZN9TimeClass4hourEv>
 8080732:	4b0c      	ldr	r3, [pc, #48]	; (8080764 <_Z9sendEventv+0x80>)
 8080734:	7018      	strb	r0, [r3, #0]
 8080736:	f000 fc4b 	bl	8080fd0 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
 808073a:	4b0b      	ldr	r3, [pc, #44]	; (8080768 <_Z9sendEventv+0x84>)
 808073c:	6018      	str	r0, [r3, #0]
}
 808073e:	b047      	add	sp, #284	; 0x11c
 8080740:	f85d fb04 	ldr.w	pc, [sp], #4
 8080744:	2000056c 	.word	0x2000056c
 8080748:	200005d8 	.word	0x200005d8
 808074c:	20000564 	.word	0x20000564
 8080750:	20000574 	.word	0x20000574
 8080754:	0808453c 	.word	0x0808453c
 8080758:	2000054d 	.word	0x2000054d
 808075c:	08084575 	.word	0x08084575
 8080760:	200005d4 	.word	0x200005d4
 8080764:	20000578 	.word	0x20000578
 8080768:	20000548 	.word	0x20000548

0808076c <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data)  // Looks at the response from Ubidots - Will reset Photon if no successful response
{
 808076c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // Response Template: "{{hourly.0.status_code}}"
  if (!data) {                                            // First check to see if there is any data
 808076e:	460c      	mov	r4, r1
 8080770:	b991      	cbnz	r1, 8080798 <_Z14UbidotsHandlerPKcS0_+0x2c>
    waitUntil(meterParticlePublish);
 8080772:	f7ff ff0b 	bl	808058c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.49>
 8080776:	4b21      	ldr	r3, [pc, #132]	; (80807fc <_Z14UbidotsHandlerPKcS0_+0x90>)
    Particle.publish("Ubidots Hook", "No Data",PRIVATE);
 8080778:	4a21      	ldr	r2, [pc, #132]	; (8080800 <_Z14UbidotsHandlerPKcS0_+0x94>)
 808077a:	781b      	ldrb	r3, [r3, #0]
 808077c:	4921      	ldr	r1, [pc, #132]	; (8080804 <_Z14UbidotsHandlerPKcS0_+0x98>)
 808077e:	a802      	add	r0, sp, #8
 8080780:	f88d 4000 	strb.w	r4, [sp]
 8080784:	f7ff fd18 	bl	80801b8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.56.constprop.60>
 8080788:	a803      	add	r0, sp, #12
 808078a:	f7ff ff37 	bl	80805fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808078e:	f000 fc1f 	bl	8080fd0 <HAL_Timer_Get_Milli_Seconds>
    publishTimeStamp = millis();
 8080792:	4b1d      	ldr	r3, [pc, #116]	; (8080808 <_Z14UbidotsHandlerPKcS0_+0x9c>)
 8080794:	6018      	str	r0, [r3, #0]
    return;
 8080796:	e02f      	b.n	80807f8 <_Z14UbidotsHandlerPKcS0_+0x8c>
  }
  int responseCode = atoi(data);                          // Response is only a single number thanks to Template
 8080798:	4608      	mov	r0, r1
 808079a:	f003 f8c5 	bl	8083928 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
 808079e:	38c8      	subs	r0, #200	; 0xc8
 80807a0:	2801      	cmp	r0, #1
 80807a2:	d81c      	bhi.n	80807de <_Z14UbidotsHandlerPKcS0_+0x72>
  {
    waitUntil(meterParticlePublish);
 80807a4:	f7ff fef2 	bl	808058c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.49>
    if(verboseMode) Particle.publish("State","Response Received",PRIVATE);
 80807a8:	4b18      	ldr	r3, [pc, #96]	; (808080c <_Z14UbidotsHandlerPKcS0_+0xa0>)
 80807aa:	781b      	ldrb	r3, [r3, #0]
 80807ac:	b163      	cbz	r3, 80807c8 <_Z14UbidotsHandlerPKcS0_+0x5c>
 80807ae:	4b13      	ldr	r3, [pc, #76]	; (80807fc <_Z14UbidotsHandlerPKcS0_+0x90>)
 80807b0:	2200      	movs	r2, #0
 80807b2:	781b      	ldrb	r3, [r3, #0]
 80807b4:	a802      	add	r0, sp, #8
 80807b6:	f88d 2000 	strb.w	r2, [sp]
 80807ba:	4915      	ldr	r1, [pc, #84]	; (8080810 <_Z14UbidotsHandlerPKcS0_+0xa4>)
 80807bc:	4a15      	ldr	r2, [pc, #84]	; (8080814 <_Z14UbidotsHandlerPKcS0_+0xa8>)
 80807be:	f7ff fcfb 	bl	80801b8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.56.constprop.60>
 80807c2:	a803      	add	r0, sp, #12
 80807c4:	f7ff ff1a 	bl	80805fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80807c8:	f000 fc02 	bl	8080fd0 <HAL_Timer_Get_Milli_Seconds>
    publishTimeStamp = millis();
 80807cc:	4b0e      	ldr	r3, [pc, #56]	; (8080808 <_Z14UbidotsHandlerPKcS0_+0x9c>)
    dataInFlight = false;                                 // Data has been received
 80807ce:	2100      	movs	r1, #0
  int responseCode = atoi(data);                          // Response is only a single number thanks to Template
  if ((responseCode == 200) || (responseCode == 201))
  {
    waitUntil(meterParticlePublish);
    if(verboseMode) Particle.publish("State","Response Received",PRIVATE);
    publishTimeStamp = millis();
 80807d0:	6018      	str	r0, [r3, #0]
    dataInFlight = false;                                 // Data has been received
 80807d2:	4b11      	ldr	r3, [pc, #68]	; (8080818 <_Z14UbidotsHandlerPKcS0_+0xac>)
    digitalWrite(blueLED, LOW);                           // Reset the LED and flags
 80807d4:	2007      	movs	r0, #7
  if ((responseCode == 200) || (responseCode == 201))
  {
    waitUntil(meterParticlePublish);
    if(verboseMode) Particle.publish("State","Response Received",PRIVATE);
    publishTimeStamp = millis();
    dataInFlight = false;                                 // Data has been received
 80807d6:	7019      	strb	r1, [r3, #0]
    digitalWrite(blueLED, LOW);                           // Reset the LED and flags
 80807d8:	f001 ff47 	bl	808266a <digitalWrite>
 80807dc:	e00c      	b.n	80807f8 <_Z14UbidotsHandlerPKcS0_+0x8c>
 80807de:	4b07      	ldr	r3, [pc, #28]	; (80807fc <_Z14UbidotsHandlerPKcS0_+0x90>)
  }
  else Particle.publish("Ubidots Hook", data,PRIVATE);             // Publish the response code
 80807e0:	2200      	movs	r2, #0
 80807e2:	781b      	ldrb	r3, [r3, #0]
 80807e4:	a802      	add	r0, sp, #8
 80807e6:	f88d 2000 	strb.w	r2, [sp]
 80807ea:	4906      	ldr	r1, [pc, #24]	; (8080804 <_Z14UbidotsHandlerPKcS0_+0x98>)
 80807ec:	4622      	mov	r2, r4
 80807ee:	f7ff fce3 	bl	80801b8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.56.constprop.60>
 80807f2:	a803      	add	r0, sp, #12
 80807f4:	f7ff ff02 	bl	80805fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80807f8:	b004      	add	sp, #16
 80807fa:	bd10      	pop	{r4, pc}
 80807fc:	2000054d 	.word	0x2000054d
 8080800:	08084584 	.word	0x08084584
 8080804:	0808458c 	.word	0x0808458c
 8080808:	20000550 	.word	0x20000550
 808080c:	20000590 	.word	0x20000590
 8080810:	080845ab 	.word	0x080845ab
 8080814:	08084599 	.word	0x08084599
 8080818:	200005d4 	.word	0x200005d4

0808081c <_Z14setVerboseMode6String>:
  }
  else return 0;
}

int setVerboseMode(String command) // Function to force sending data in current hour
{
 808081c:	b530      	push	{r4, r5, lr}
 808081e:	4922      	ldr	r1, [pc, #136]	; (80808a8 <_Z14setVerboseMode6String+0x8c>)
 8080820:	b085      	sub	sp, #20
 8080822:	4605      	mov	r5, r0
 8080824:	f001 fbf3 	bl	808200e <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080828:	4604      	mov	r4, r0
 808082a:	b1b0      	cbz	r0, 808085a <_Z14setVerboseMode6String+0x3e>
  {
    verboseMode = true;
 808082c:	4b1f      	ldr	r3, [pc, #124]	; (80808ac <_Z14setVerboseMode6String+0x90>)
 808082e:	2401      	movs	r4, #1
    FRAMread8(CONTROLREGISTER);
 8080830:	2007      	movs	r0, #7

int setVerboseMode(String command) // Function to force sending data in current hour
{
  if (command == "1")
  {
    verboseMode = true;
 8080832:	701c      	strb	r4, [r3, #0]
    FRAMread8(CONTROLREGISTER);
 8080834:	f7ff fcd2 	bl	80801dc <_Z9FRAMread8j>
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
 8080838:	4b1d      	ldr	r3, [pc, #116]	; (80808b0 <_Z14setVerboseMode6String+0x94>)
    FRAMwrite8(CONTROLREGISTER,controlRegister);                        // Write it to the register
 808083a:	2007      	movs	r0, #7
{
  if (command == "1")
  {
    verboseMode = true;
    FRAMread8(CONTROLREGISTER);
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
 808083c:	7819      	ldrb	r1, [r3, #0]
 808083e:	f041 0108 	orr.w	r1, r1, #8
 8080842:	7019      	strb	r1, [r3, #0]
    FRAMwrite8(CONTROLREGISTER,controlRegister);                        // Write it to the register
 8080844:	f7ff fcd0 	bl	80801e8 <_Z10FRAMwrite8jh>
    waitUntil(meterParticlePublish);
 8080848:	f7ff fea0 	bl	808058c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.49>
 808084c:	4b19      	ldr	r3, [pc, #100]	; (80808b4 <_Z14setVerboseMode6String+0x98>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
 808084e:	2200      	movs	r2, #0
 8080850:	781b      	ldrb	r3, [r3, #0]
 8080852:	f88d 2000 	strb.w	r2, [sp]
 8080856:	4a18      	ldr	r2, [pc, #96]	; (80808b8 <_Z14setVerboseMode6String+0x9c>)
 8080858:	e018      	b.n	808088c <_Z14setVerboseMode6String+0x70>
 808085a:	4918      	ldr	r1, [pc, #96]	; (80808bc <_Z14setVerboseMode6String+0xa0>)
 808085c:	4628      	mov	r0, r5
 808085e:	f001 fbd6 	bl	808200e <_ZNK6String6equalsEPKc>
    publishTimeStamp = millis();
    return 1;
  }
  else if (command == "0")
 8080862:	b1f8      	cbz	r0, 80808a4 <_Z14setVerboseMode6String+0x88>
  {
    verboseMode = false;
 8080864:	4b11      	ldr	r3, [pc, #68]	; (80808ac <_Z14setVerboseMode6String+0x90>)
    FRAMread8(CONTROLREGISTER);
 8080866:	2007      	movs	r0, #7
    publishTimeStamp = millis();
    return 1;
  }
  else if (command == "0")
  {
    verboseMode = false;
 8080868:	701c      	strb	r4, [r3, #0]
    FRAMread8(CONTROLREGISTER);
 808086a:	f7ff fcb7 	bl	80801dc <_Z9FRAMread8j>
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 808086e:	4b10      	ldr	r3, [pc, #64]	; (80808b0 <_Z14setVerboseMode6String+0x94>)
    FRAMwrite8(CONTROLREGISTER,controlRegister);                        // Write it to the register
 8080870:	2007      	movs	r0, #7
  }
  else if (command == "0")
  {
    verboseMode = false;
    FRAMread8(CONTROLREGISTER);
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 8080872:	7819      	ldrb	r1, [r3, #0]
 8080874:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 8080878:	7019      	strb	r1, [r3, #0]
    FRAMwrite8(CONTROLREGISTER,controlRegister);                        // Write it to the register
 808087a:	f7ff fcb5 	bl	80801e8 <_Z10FRAMwrite8jh>
    waitUntil(meterParticlePublish);
 808087e:	f7ff fe85 	bl	808058c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.49>
 8080882:	4b0c      	ldr	r3, [pc, #48]	; (80808b4 <_Z14setVerboseMode6String+0x98>)
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
 8080884:	4a0e      	ldr	r2, [pc, #56]	; (80808c0 <_Z14setVerboseMode6String+0xa4>)
 8080886:	781b      	ldrb	r3, [r3, #0]
 8080888:	f88d 4000 	strb.w	r4, [sp]
 808088c:	490d      	ldr	r1, [pc, #52]	; (80808c4 <_Z14setVerboseMode6String+0xa8>)
 808088e:	a802      	add	r0, sp, #8
 8080890:	f7ff fc92 	bl	80801b8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.56.constprop.60>
 8080894:	a803      	add	r0, sp, #12
 8080896:	f7ff feb1 	bl	80805fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808089a:	f000 fb99 	bl	8080fd0 <HAL_Timer_Get_Milli_Seconds>
    publishTimeStamp = millis();
 808089e:	4b0a      	ldr	r3, [pc, #40]	; (80808c8 <_Z14setVerboseMode6String+0xac>)
 80808a0:	6018      	str	r0, [r3, #0]
    return 1;
 80808a2:	2001      	movs	r0, #1
  }
  else return 0;
}
 80808a4:	b005      	add	sp, #20
 80808a6:	bd30      	pop	{r4, r5, pc}
 80808a8:	08084669 	.word	0x08084669
 80808ac:	20000590 	.word	0x20000590
 80808b0:	200005d2 	.word	0x200005d2
 80808b4:	2000054d 	.word	0x2000054d
 80808b8:	080845b1 	.word	0x080845b1
 80808bc:	080846e4 	.word	0x080846e4
 80808c0:	080845c2 	.word	0x080845c2
 80808c4:	080845d2 	.word	0x080845d2
 80808c8:	20000550 	.word	0x20000550

080808cc <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
 80808cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80808ce:	b0cd      	sub	sp, #308	; 0x134
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 80808d0:	220a      	movs	r2, #10
 80808d2:	a905      	add	r1, sp, #20
 80808d4:	6800      	ldr	r0, [r0, #0]
 80808d6:	f003 fa51 	bl	8083d7c <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 80808da:	b2c5      	uxtb	r5, r0
 80808dc:	f105 030c 	add.w	r3, r5, #12
 80808e0:	b2db      	uxtb	r3, r3
 80808e2:	2b18      	cmp	r3, #24
 80808e4:	d842      	bhi.n	808096c <_Z11setTimeZone6String+0xa0>

int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 80808e6:	b244      	sxtb	r4, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
 80808e8:	4620      	mov	r0, r4
 80808ea:	f002 fda1 	bl	8083430 <__aeabi_i2f>
 80808ee:	f001 fc3b 	bl	8082168 <_ZN9TimeClass4zoneEf>
  FRAMwrite8(TIMEZONE,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
 80808f2:	4629      	mov	r1, r5
 80808f4:	2004      	movs	r0, #4
 80808f6:	f7ff fc77 	bl	80801e8 <_Z10FRAMwrite8jh>
  t = Time.now();
 80808fa:	f001 fc94 	bl	8082226 <_ZN9TimeClass3nowEv>
 80808fe:	4f1d      	ldr	r7, [pc, #116]	; (8080974 <_Z11setTimeZone6String+0xa8>)
 8080900:	4e1d      	ldr	r6, [pc, #116]	; (8080978 <_Z11setTimeZone6String+0xac>)
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 8080902:	4623      	mov	r3, r4
 8080904:	4a1d      	ldr	r2, [pc, #116]	; (808097c <_Z11setTimeZone6String+0xb0>)
 8080906:	f44f 7180 	mov.w	r1, #256	; 0x100
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
  FRAMwrite8(TIMEZONE,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
  t = Time.now();
 808090a:	6038      	str	r0, [r7, #0]
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 808090c:	2500      	movs	r5, #0
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 808090e:	a80c      	add	r0, sp, #48	; 0x30
 8080910:	f000 fd8a 	bl	8081428 <snprintf>
  waitUntil(meterParticlePublish);
 8080914:	f7ff fe3a 	bl	808058c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.49>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080918:	7833      	ldrb	r3, [r6, #0]
  Particle.publish("Time",data,PRIVATE);
 808091a:	aa0c      	add	r2, sp, #48	; 0x30
 808091c:	4918      	ldr	r1, [pc, #96]	; (8080980 <_Z11setTimeZone6String+0xb4>)
 808091e:	a808      	add	r0, sp, #32
 8080920:	f88d 5000 	strb.w	r5, [sp]
 8080924:	f7ff fc48 	bl	80801b8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.56.constprop.60>
 8080928:	a809      	add	r0, sp, #36	; 0x24
 808092a:	f7ff fe67 	bl	80805fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808092e:	f000 fb4f 	bl	8080fd0 <HAL_Timer_Get_Milli_Seconds>
  publishTimeStamp = millis();
 8080932:	4c14      	ldr	r4, [pc, #80]	; (8080984 <_Z11setTimeZone6String+0xb8>)
 8080934:	6020      	str	r0, [r4, #0]
  waitUntil(meterParticlePublish);
 8080936:	f7ff fe29 	bl	808058c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.49>
  Particle.publish("Time",Time.timeStr(t),PRIVATE);
 808093a:	6839      	ldr	r1, [r7, #0]
 808093c:	a808      	add	r0, sp, #32
 808093e:	f001 fc2f 	bl	80821a0 <_ZN9TimeClass7timeStrEl>
 8080942:	9b08      	ldr	r3, [sp, #32]
 8080944:	490e      	ldr	r1, [pc, #56]	; (8080980 <_Z11setTimeZone6String+0xb4>)
 8080946:	9303      	str	r3, [sp, #12]
 8080948:	9a03      	ldr	r2, [sp, #12]
 808094a:	7833      	ldrb	r3, [r6, #0]
 808094c:	a806      	add	r0, sp, #24
 808094e:	f88d 5000 	strb.w	r5, [sp]
 8080952:	f7ff fc31 	bl	80801b8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.56.constprop.60>
 8080956:	a807      	add	r0, sp, #28
 8080958:	f7ff fe50 	bl	80805fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808095c:	a808      	add	r0, sp, #32
 808095e:	f001 fae2 	bl	8081f26 <_ZN6StringD1Ev>
 8080962:	f000 fb35 	bl	8080fd0 <HAL_Timer_Get_Milli_Seconds>
  publishTimeStamp = millis();
 8080966:	6020      	str	r0, [r4, #0]
  return 1;
 8080968:	2001      	movs	r0, #1
 808096a:	e000      	b.n	808096e <_Z11setTimeZone6String+0xa2>
int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 808096c:	2000      	movs	r0, #0
  publishTimeStamp = millis();
  waitUntil(meterParticlePublish);
  Particle.publish("Time",Time.timeStr(t),PRIVATE);
  publishTimeStamp = millis();
  return 1;
}
 808096e:	b04d      	add	sp, #308	; 0x134
 8080970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080972:	bf00      	nop
 8080974:	20000554 	.word	0x20000554
 8080978:	2000054d 	.word	0x2000054d
 808097c:	080845d7 	.word	0x080845d7
 8080980:	080845eb 	.word	0x080845eb
 8080984:	20000550 	.word	0x20000550

08080988 <_Z22publishStateTransitionv>:
  if(millis() - publishTimeStamp >= publishFrequency) return 1;
  else return 0;
}

void publishStateTransition(void)
{
 8080988:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 808098a:	4d15      	ldr	r5, [pc, #84]	; (80809e0 <_Z22publishStateTransitionv+0x58>)
 808098c:	4915      	ldr	r1, [pc, #84]	; (80809e4 <_Z22publishStateTransitionv+0x5c>)
 808098e:	782a      	ldrb	r2, [r5, #0]
 8080990:	230e      	movs	r3, #14
 8080992:	fb03 1202 	mla	r2, r3, r2, r1
 8080996:	4c14      	ldr	r4, [pc, #80]	; (80809e8 <_Z22publishStateTransitionv+0x60>)
  if(millis() - publishTimeStamp >= publishFrequency) return 1;
  else return 0;
}

void publishStateTransition(void)
{
 8080998:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 808099a:	7820      	ldrb	r0, [r4, #0]
 808099c:	9200      	str	r2, [sp, #0]
 808099e:	fb03 1300 	mla	r3, r3, r0, r1
 80809a2:	4a12      	ldr	r2, [pc, #72]	; (80809ec <_Z22publishStateTransitionv+0x64>)
 80809a4:	2128      	movs	r1, #40	; 0x28
 80809a6:	a804      	add	r0, sp, #16
 80809a8:	f000 fd3e 	bl	8081428 <snprintf>
  oldState = state;
 80809ac:	782b      	ldrb	r3, [r5, #0]
 80809ae:	7023      	strb	r3, [r4, #0]
  waitUntil(meterParticlePublish);
 80809b0:	f7ff fdec 	bl	808058c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.49>
 80809b4:	f000 fcc0 	bl	8081338 <spark_cloud_flag_connected>
  if (Particle.connected()) Particle.publish("State Transition",stateTransitionString,PRIVATE);
 80809b8:	b160      	cbz	r0, 80809d4 <_Z22publishStateTransitionv+0x4c>
 80809ba:	4b0d      	ldr	r3, [pc, #52]	; (80809f0 <_Z22publishStateTransitionv+0x68>)
 80809bc:	2200      	movs	r2, #0
 80809be:	781b      	ldrb	r3, [r3, #0]
 80809c0:	a802      	add	r0, sp, #8
 80809c2:	f88d 2000 	strb.w	r2, [sp]
 80809c6:	490b      	ldr	r1, [pc, #44]	; (80809f4 <_Z22publishStateTransitionv+0x6c>)
 80809c8:	aa04      	add	r2, sp, #16
 80809ca:	f7ff fbf5 	bl	80801b8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.56.constprop.60>
 80809ce:	a803      	add	r0, sp, #12
 80809d0:	f7ff fe14 	bl	80805fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80809d4:	f000 fafc 	bl	8080fd0 <HAL_Timer_Get_Milli_Seconds>
  publishTimeStamp = millis();
 80809d8:	4b07      	ldr	r3, [pc, #28]	; (80809f8 <_Z22publishStateTransitionv+0x70>)
 80809da:	6018      	str	r0, [r3, #0]
}
 80809dc:	b00f      	add	sp, #60	; 0x3c
 80809de:	bd30      	pop	{r4, r5, pc}
 80809e0:	20000560 	.word	0x20000560
 80809e4:	20000404 	.word	0x20000404
 80809e8:	20000558 	.word	0x20000558
 80809ec:	080845f0 	.word	0x080845f0
 80809f0:	2000054d 	.word	0x2000054d
 80809f4:	080845fe 	.word	0x080845fe
 80809f8:	20000550 	.word	0x20000550

080809fc <loop>:
  if (!acDetect1State && !acDetect2State) state = REPORTING_STATE;  // If the device was cleared while reset - report so we will get an alert on next change

}

void loop()
{
 80809fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  switch(state) {
 80809fe:	4c62      	ldr	r4, [pc, #392]	; (8080b88 <loop+0x18c>)
 8080a00:	7823      	ldrb	r3, [r4, #0]
 8080a02:	3b01      	subs	r3, #1
 8080a04:	2b03      	cmp	r3, #3
 8080a06:	f200 80bc 	bhi.w	8080b82 <loop+0x186>
 8080a0a:	e8df f003 	tbb	[pc, r3]
 8080a0e:	0283      	.short	0x0283
 8080a10:	6530      	.short	0x6530
  case IDLE_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
 8080a12:	4b5e      	ldr	r3, [pc, #376]	; (8080b8c <loop+0x190>)
 8080a14:	781b      	ldrb	r3, [r3, #0]
 8080a16:	b12b      	cbz	r3, 8080a24 <loop+0x28>
 8080a18:	4b5d      	ldr	r3, [pc, #372]	; (8080b90 <loop+0x194>)
 8080a1a:	781b      	ldrb	r3, [r3, #0]
 8080a1c:	2b02      	cmp	r3, #2
 8080a1e:	d001      	beq.n	8080a24 <loop+0x28>
 8080a20:	f7ff ffb2 	bl	8080988 <_Z22publishStateTransitionv>
    if (watchdogFlag) petWatchdog();
 8080a24:	4b5b      	ldr	r3, [pc, #364]	; (8080b94 <loop+0x198>)
 8080a26:	781b      	ldrb	r3, [r3, #0]
 8080a28:	b10b      	cbz	r3, 8080a2e <loop+0x32>
 8080a2a:	f7ff fd27 	bl	808047c <_Z11petWatchdogv>
    if (acDetect1Flag || acDetect2Flag) takeMeasurements();
 8080a2e:	4b5a      	ldr	r3, [pc, #360]	; (8080b98 <loop+0x19c>)
 8080a30:	781b      	ldrb	r3, [r3, #0]
 8080a32:	2b00      	cmp	r3, #0
 8080a34:	f040 809f 	bne.w	8080b76 <loop+0x17a>
 8080a38:	4b58      	ldr	r3, [pc, #352]	; (8080b9c <loop+0x1a0>)
 8080a3a:	781b      	ldrb	r3, [r3, #0]
 8080a3c:	2b00      	cmp	r3, #0
 8080a3e:	f040 809a 	bne.w	8080b76 <loop+0x17a>
    if (acDetectChangeFlag && millis() - dwellTimeStamp >= dwellTime) resolveAfterDwell();
 8080a42:	4b57      	ldr	r3, [pc, #348]	; (8080ba0 <loop+0x1a4>)
 8080a44:	781b      	ldrb	r3, [r3, #0]
 8080a46:	b14b      	cbz	r3, 8080a5c <loop+0x60>
 8080a48:	f000 fac2 	bl	8080fd0 <HAL_Timer_Get_Milli_Seconds>
 8080a4c:	4b55      	ldr	r3, [pc, #340]	; (8080ba4 <loop+0x1a8>)
 8080a4e:	681b      	ldr	r3, [r3, #0]
 8080a50:	1ac0      	subs	r0, r0, r3
 8080a52:	4b55      	ldr	r3, [pc, #340]	; (8080ba8 <loop+0x1ac>)
 8080a54:	681b      	ldr	r3, [r3, #0]
 8080a56:	4298      	cmp	r0, r3
 8080a58:	f080 8090 	bcs.w	8080b7c <loop+0x180>
    if (Time.hour() != currentHourlyPeriod) state = REPORTING_STATE;                                    // We want to report on the hour
 8080a5c:	f001 fbea 	bl	8082234 <_ZN9TimeClass4hourEv>
 8080a60:	4b52      	ldr	r3, [pc, #328]	; (8080bac <loop+0x1b0>)
 8080a62:	781b      	ldrb	r3, [r3, #0]
 8080a64:	4298      	cmp	r0, r3
 8080a66:	f000 808c 	beq.w	8080b82 <loop+0x186>
 8080a6a:	2303      	movs	r3, #3
 8080a6c:	e050      	b.n	8080b10 <loop+0x114>
    break;

  case REPORTING_STATE: {
    if (verboseMode && state != oldState) publishStateTransition();
 8080a6e:	4b47      	ldr	r3, [pc, #284]	; (8080b8c <loop+0x190>)
 8080a70:	781a      	ldrb	r2, [r3, #0]
 8080a72:	461d      	mov	r5, r3
 8080a74:	b12a      	cbz	r2, 8080a82 <loop+0x86>
 8080a76:	4b46      	ldr	r3, [pc, #280]	; (8080b90 <loop+0x194>)
 8080a78:	781b      	ldrb	r3, [r3, #0]
 8080a7a:	2b03      	cmp	r3, #3
 8080a7c:	d001      	beq.n	8080a82 <loop+0x86>
 8080a7e:	f7ff ff83 	bl	8080988 <_Z22publishStateTransitionv>
}

// Here is were we will put the timer and other ISRs
void watchdogISR()
{
  watchdogFlag = true;
 8080a82:	4b44      	ldr	r3, [pc, #272]	; (8080b94 <loop+0x198>)
 8080a84:	2601      	movs	r6, #1
 8080a86:	701e      	strb	r6, [r3, #0]
 8080a88:	f000 fc56 	bl	8081338 <spark_cloud_flag_connected>
    break;

  case REPORTING_STATE: {
    if (verboseMode && state != oldState) publishStateTransition();
    watchdogISR();                                    // Pet the watchdog once an hour
    if (!Particle.connected()) {
 8080a8c:	b940      	cbnz	r0, 8080aa0 <loop+0xa4>
      if (!connectToParticle()) {
 8080a8e:	f7ff fd05 	bl	808049c <_Z17connectToParticlev>
 8080a92:	b928      	cbnz	r0, 8080aa0 <loop+0xa4>
 8080a94:	f000 fa9c 	bl	8080fd0 <HAL_Timer_Get_Milli_Seconds>
        resetTimeStamp = millis();
 8080a98:	4b45      	ldr	r3, [pc, #276]	; (8080bb0 <loop+0x1b4>)
        state = ERROR_STATE;
 8080a9a:	7026      	strb	r6, [r4, #0]
  case REPORTING_STATE: {
    if (verboseMode && state != oldState) publishStateTransition();
    watchdogISR();                                    // Pet the watchdog once an hour
    if (!Particle.connected()) {
      if (!connectToParticle()) {
        resetTimeStamp = millis();
 8080a9c:	6018      	str	r0, [r3, #0]
        state = ERROR_STATE;
        break;
 8080a9e:	e070      	b.n	8080b82 <loop+0x186>
      }
    }
    if (Time.hour() == 0) Particle.syncTime();                  // Sync Time at Midnight needed since these devic
 8080aa0:	f001 fbc8 	bl	8082234 <_ZN9TimeClass4hourEv>
 8080aa4:	b908      	cbnz	r0, 8080aaa <loop+0xae>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        return CLOUD_FN(spark_sync_time(NULL), false);
 8080aa6:	f000 fc67 	bl	8081378 <spark_sync_time>
    sendEvent();
 8080aaa:	f7ff fe1b 	bl	80806e4 <_Z9sendEventv>
    if (verboseMode) Particle.publish("State","Waiting for Response",PRIVATE);
 8080aae:	782b      	ldrb	r3, [r5, #0]
 8080ab0:	b163      	cbz	r3, 8080acc <loop+0xd0>
 8080ab2:	4b40      	ldr	r3, [pc, #256]	; (8080bb4 <loop+0x1b8>)
 8080ab4:	2200      	movs	r2, #0
 8080ab6:	781b      	ldrb	r3, [r3, #0]
 8080ab8:	a802      	add	r0, sp, #8
 8080aba:	f88d 2000 	strb.w	r2, [sp]
 8080abe:	493e      	ldr	r1, [pc, #248]	; (8080bb8 <loop+0x1bc>)
 8080ac0:	4a3e      	ldr	r2, [pc, #248]	; (8080bbc <loop+0x1c0>)
 8080ac2:	f7ff fb79 	bl	80801b8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.56.constprop.60>
 8080ac6:	a803      	add	r0, sp, #12
 8080ac8:	f7ff fd98 	bl	80805fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080acc:	f000 fa80 	bl	8080fd0 <HAL_Timer_Get_Milli_Seconds>
    publishTimeStamp = millis();
 8080ad0:	4b3b      	ldr	r3, [pc, #236]	; (8080bc0 <loop+0x1c4>)
 8080ad2:	6018      	str	r0, [r3, #0]
    state = RESP_WAIT_STATE;                            // Wait for Response
 8080ad4:	2304      	movs	r3, #4
 8080ad6:	e01b      	b.n	8080b10 <loop+0x114>
    } break;

  case RESP_WAIT_STATE:
  if (verboseMode && state != oldState) publishStateTransition();
 8080ad8:	4b2c      	ldr	r3, [pc, #176]	; (8080b8c <loop+0x190>)
 8080ada:	781b      	ldrb	r3, [r3, #0]
 8080adc:	b12b      	cbz	r3, 8080aea <loop+0xee>
 8080ade:	4b2c      	ldr	r3, [pc, #176]	; (8080b90 <loop+0x194>)
 8080ae0:	781b      	ldrb	r3, [r3, #0]
 8080ae2:	2b04      	cmp	r3, #4
 8080ae4:	d001      	beq.n	8080aea <loop+0xee>
 8080ae6:	f7ff ff4f 	bl	8080988 <_Z22publishStateTransitionv>
    if (!dataInFlight) state = IDLE_STATE;
 8080aea:	4b36      	ldr	r3, [pc, #216]	; (8080bc4 <loop+0x1c8>)
 8080aec:	781b      	ldrb	r3, [r3, #0]
 8080aee:	b90b      	cbnz	r3, 8080af4 <loop+0xf8>
 8080af0:	2302      	movs	r3, #2
 8080af2:	e00d      	b.n	8080b10 <loop+0x114>
 8080af4:	f000 fa6c 	bl	8080fd0 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp >= webhookWait) {                                         // If it takes too long - will need to reset
 8080af8:	4b33      	ldr	r3, [pc, #204]	; (8080bc8 <loop+0x1cc>)
 8080afa:	681b      	ldr	r3, [r3, #0]
 8080afc:	1ac0      	subs	r0, r0, r3
 8080afe:	4b33      	ldr	r3, [pc, #204]	; (8080bcc <loop+0x1d0>)
 8080b00:	681b      	ldr	r3, [r3, #0]
 8080b02:	4298      	cmp	r0, r3
 8080b04:	d33d      	bcc.n	8080b82 <loop+0x186>
 8080b06:	f000 fa63 	bl	8080fd0 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 8080b0a:	4b29      	ldr	r3, [pc, #164]	; (8080bb0 <loop+0x1b4>)
 8080b0c:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;  // Response timed out
 8080b0e:	2301      	movs	r3, #1
 8080b10:	7023      	strb	r3, [r4, #0]
 8080b12:	e036      	b.n	8080b82 <loop+0x186>
    }
    break;

    case ERROR_STATE:     // To be enhanced - where we deal with errors
    if (verboseMode && state != oldState) publishStateTransition();
 8080b14:	4b1d      	ldr	r3, [pc, #116]	; (8080b8c <loop+0x190>)
 8080b16:	781b      	ldrb	r3, [r3, #0]
 8080b18:	b12b      	cbz	r3, 8080b26 <loop+0x12a>
 8080b1a:	4b1d      	ldr	r3, [pc, #116]	; (8080b90 <loop+0x194>)
 8080b1c:	781b      	ldrb	r3, [r3, #0]
 8080b1e:	2b01      	cmp	r3, #1
 8080b20:	d001      	beq.n	8080b26 <loop+0x12a>
 8080b22:	f7ff ff31 	bl	8080988 <_Z22publishStateTransitionv>
 8080b26:	f000 fa53 	bl	8080fd0 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - resetTimeStamp >= resetWait)
 8080b2a:	4b21      	ldr	r3, [pc, #132]	; (8080bb0 <loop+0x1b4>)
 8080b2c:	681b      	ldr	r3, [r3, #0]
 8080b2e:	1ac0      	subs	r0, r0, r3
 8080b30:	4b27      	ldr	r3, [pc, #156]	; (8080bd0 <loop+0x1d4>)
 8080b32:	681b      	ldr	r3, [r3, #0]
 8080b34:	4298      	cmp	r0, r3
 8080b36:	d324      	bcc.n	8080b82 <loop+0x186>
 8080b38:	4b1e      	ldr	r3, [pc, #120]	; (8080bb4 <loop+0x1b8>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080b3a:	2400      	movs	r4, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080b3c:	781b      	ldrb	r3, [r3, #0]
    {
      Particle.publish("State","ERROR_STATE - Resetting", PRIVATE);
 8080b3e:	4a25      	ldr	r2, [pc, #148]	; (8080bd4 <loop+0x1d8>)
 8080b40:	491d      	ldr	r1, [pc, #116]	; (8080bb8 <loop+0x1bc>)
 8080b42:	a802      	add	r0, sp, #8
 8080b44:	f88d 4000 	strb.w	r4, [sp]
 8080b48:	f7ff fb36 	bl	80801b8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.56.constprop.60>
 8080b4c:	a803      	add	r0, sp, #12
 8080b4e:	f7ff fd55 	bl	80805fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      delay(2000);                                          // Delay so publish can finish
 8080b52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080b56:	f000 fc7f 	bl	8081458 <delay>
      if (resetCount <= 3)  System.reset();                 // Today, only way out is reset
 8080b5a:	4b1f      	ldr	r3, [pc, #124]	; (8080bd8 <loop+0x1dc>)
 8080b5c:	681b      	ldr	r3, [r3, #0]
 8080b5e:	2b03      	cmp	r3, #3
 8080b60:	dc02      	bgt.n	8080b68 <loop+0x16c>
 8080b62:	f001 fa83 	bl	808206c <_ZN11SystemClass5resetEv>
 8080b66:	e00c      	b.n	8080b82 <loop+0x186>
      else {
        FRAMwrite8(RESETCOUNT,0);                           // Zero the ResetCount
 8080b68:	4621      	mov	r1, r4
 8080b6a:	2002      	movs	r0, #2
 8080b6c:	f7ff fb3c 	bl	80801e8 <_Z10FRAMwrite8jh>
        fullModemReset();                                   // Full Modem reset and reboot
 8080b70:	f7ff fd18 	bl	80805a4 <_Z14fullModemResetv>
      }
    }
    break;
  }
}
 8080b74:	e005      	b.n	8080b82 <loop+0x186>
{
  switch(state) {
  case IDLE_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
    if (watchdogFlag) petWatchdog();
    if (acDetect1Flag || acDetect2Flag) takeMeasurements();
 8080b76:	f7ff fbf7 	bl	8080368 <_Z16takeMeasurementsv>
 8080b7a:	e762      	b.n	8080a42 <loop+0x46>
    if (acDetectChangeFlag && millis() - dwellTimeStamp >= dwellTime) resolveAfterDwell();
 8080b7c:	f7ff fb3c 	bl	80801f8 <_Z17resolveAfterDwellv>
 8080b80:	e76c      	b.n	8080a5c <loop+0x60>
        fullModemReset();                                   // Full Modem reset and reboot
      }
    }
    break;
  }
}
 8080b82:	b004      	add	sp, #16
 8080b84:	bd70      	pop	{r4, r5, r6, pc}
 8080b86:	bf00      	nop
 8080b88:	20000560 	.word	0x20000560
 8080b8c:	20000590 	.word	0x20000590
 8080b90:	20000558 	.word	0x20000558
 8080b94:	2000057a 	.word	0x2000057a
 8080b98:	20000579 	.word	0x20000579
 8080b9c:	200005d3 	.word	0x200005d3
 8080ba0:	2000054c 	.word	0x2000054c
 8080ba4:	2000055c 	.word	0x2000055c
 8080ba8:	20000450 	.word	0x20000450
 8080bac:	20000578 	.word	0x20000578
 8080bb0:	20000570 	.word	0x20000570
 8080bb4:	2000054d 	.word	0x2000054d
 8080bb8:	080845ab 	.word	0x080845ab
 8080bbc:	0808460f 	.word	0x0808460f
 8080bc0:	20000550 	.word	0x20000550
 8080bc4:	200005d4 	.word	0x200005d4
 8080bc8:	20000548 	.word	0x20000548
 8080bcc:	20000468 	.word	0x20000468
 8080bd0:	20000400 	.word	0x20000400
 8080bd4:	08084624 	.word	0x08084624
 8080bd8:	2000056c 	.word	0x2000056c

08080bdc <_ZN10CloudClass8variableIA10_cIA8_cEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 8080bdc:	2300      	movs	r3, #0
 8080bde:	2204      	movs	r2, #4
 8080be0:	f000 bb82 	b.w	80812e8 <spark_variable>

08080be4 <_ZN10CloudClass8functionIA13_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 8080be4:	4602      	mov	r2, r0
 8080be6:	4801      	ldr	r0, [pc, #4]	; (8080bec <_ZN10CloudClass8functionIA13_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 8080be8:	f000 bd74 	b.w	80816d4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080bec:	080816a9 	.word	0x080816a9

08080bf0 <setup>:
bool acDetect2LastState = 0;
bool acDetectChangeFlag = false;


void setup()                                                      // Note: Disconnected Setup()
{
 8080bf0:	b570      	push	{r4, r5, r6, lr}
  pinMode(acDetect1,INPUT);                                       // Voltage Sensor Interrupt pin
 8080bf2:	2100      	movs	r1, #0
bool acDetect2LastState = 0;
bool acDetectChangeFlag = false;


void setup()                                                      // Note: Disconnected Setup()
{
 8080bf4:	b0a8      	sub	sp, #160	; 0xa0
  pinMode(acDetect1,INPUT);                                       // Voltage Sensor Interrupt pin
 8080bf6:	2019      	movs	r0, #25
 8080bf8:	f001 fd26 	bl	8082648 <pinMode>
  pinMode(acDetect2,INPUT);                                       // Voltage Sensor Interrupt pin
 8080bfc:	2100      	movs	r1, #0
 8080bfe:	201b      	movs	r0, #27
 8080c00:	f001 fd22 	bl	8082648 <pinMode>
  pinMode(wakeUpPin,INPUT);                                       // This pin is active HIGH
 8080c04:	2100      	movs	r1, #0
 8080c06:	2011      	movs	r0, #17
 8080c08:	f001 fd1e 	bl	8082648 <pinMode>
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
 8080c0c:	2100      	movs	r1, #0
 8080c0e:	2005      	movs	r0, #5
 8080c10:	f001 fd1a 	bl	8082648 <pinMode>
  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
 8080c14:	2101      	movs	r1, #1
 8080c16:	2007      	movs	r0, #7
 8080c18:	f001 fd16 	bl	8082648 <pinMode>
  pinMode(tmp36Shutdwn,OUTPUT);                                   // Supports shutting down the TMP-36 to save juice
 8080c1c:	2101      	movs	r1, #1
 8080c1e:	201d      	movs	r0, #29
 8080c20:	f001 fd12 	bl	8082648 <pinMode>
  digitalWrite(tmp36Shutdwn, HIGH);                               // Turns on the temp sensor
 8080c24:	2101      	movs	r1, #1
 8080c26:	201d      	movs	r0, #29
 8080c28:	f001 fd1f 	bl	808266a <digitalWrite>
  pinMode(donePin,OUTPUT);                                        // Allows us to pet the watchdog
 8080c2c:	2101      	movs	r1, #1
 8080c2e:	2006      	movs	r0, #6
 8080c30:	f001 fd0a 	bl	8082648 <pinMode>
}

// Here is were we will put the timer and other ISRs
void watchdogISR()
{
  watchdogFlag = true;
 8080c34:	2601      	movs	r6, #1
 8080c36:	4b82      	ldr	r3, [pc, #520]	; (8080e40 <setup+0x250>)
  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
  pinMode(tmp36Shutdwn,OUTPUT);                                   // Supports shutting down the TMP-36 to save juice
  digitalWrite(tmp36Shutdwn, HIGH);                               // Turns on the temp sensor
  pinMode(donePin,OUTPUT);                                        // Allows us to pet the watchdog
  watchdogISR();                                                  // Pet the watchdog
  pinMode(hardResetPin,OUTPUT);                                   // For a hard reset active HIGH
 8080c38:	4631      	mov	r1, r6
 8080c3a:	2004      	movs	r0, #4
}

// Here is were we will put the timer and other ISRs
void watchdogISR()
{
  watchdogFlag = true;
 8080c3c:	701e      	strb	r6, [r3, #0]
  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
  pinMode(tmp36Shutdwn,OUTPUT);                                   // Supports shutting down the TMP-36 to save juice
  digitalWrite(tmp36Shutdwn, HIGH);                               // Turns on the temp sensor
  pinMode(donePin,OUTPUT);                                        // Allows us to pet the watchdog
  watchdogISR();                                                  // Pet the watchdog
  pinMode(hardResetPin,OUTPUT);                                   // For a hard reset active HIGH
 8080c3e:	f001 fd03 	bl	8082648 <pinMode>

  connectToParticle();                                            // This device is always connected
 8080c42:	f7ff fc2b 	bl	808049c <_Z17connectToParticlev>
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
 8080c46:	a804      	add	r0, sp, #16
    particle::Future<bool> publish(const char* name, const char* data) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;
    particle::Future<bool> publish(const char* name, const char* data, int ttl) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
 8080c48:	2400      	movs	r4, #0
 8080c4a:	f000 fb7d 	bl	8081348 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 8080c4e:	2300      	movs	r3, #0
 8080c50:	227d      	movs	r2, #125	; 0x7d
 8080c52:	a908      	add	r1, sp, #32
 8080c54:	a804      	add	r0, sp, #16
 8080c56:	f001 f9ec 	bl	8082032 <_ZNK6String8getBytesEPhjj>
 8080c5a:	4623      	mov	r3, r4
 8080c5c:	4622      	mov	r2, r4
 8080c5e:	4979      	ldr	r1, [pc, #484]	; (8080e44 <setup+0x254>)
 8080c60:	9401      	str	r4, [sp, #4]
 8080c62:	9400      	str	r4, [sp, #0]
 8080c64:	a808      	add	r0, sp, #32
 8080c66:	f000 fb7f 	bl	8081368 <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);  // Subscribe to the integration response event

  Particle.variable("Signal", SignalString);
 8080c6a:	4977      	ldr	r1, [pc, #476]	; (8080e48 <setup+0x258>)
 8080c6c:	4877      	ldr	r0, [pc, #476]	; (8080e4c <setup+0x25c>)
 8080c6e:	f7ff ffb5 	bl	8080bdc <_ZN10CloudClass8variableIA10_cIA8_cEEEbRKT_DpRKT0_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 8080c72:	4623      	mov	r3, r4
 8080c74:	2202      	movs	r2, #2
 8080c76:	4976      	ldr	r1, [pc, #472]	; (8080e50 <setup+0x260>)
 8080c78:	4876      	ldr	r0, [pc, #472]	; (8080e54 <setup+0x264>)
 8080c7a:	f000 fb35 	bl	80812e8 <spark_variable>
 8080c7e:	4623      	mov	r3, r4
 8080c80:	2202      	movs	r2, #2
 8080c82:	4975      	ldr	r1, [pc, #468]	; (8080e58 <setup+0x268>)
 8080c84:	4875      	ldr	r0, [pc, #468]	; (8080e5c <setup+0x26c>)
 8080c86:	f000 fb2f 	bl	80812e8 <spark_variable>
 8080c8a:	4975      	ldr	r1, [pc, #468]	; (8080e60 <setup+0x270>)
 8080c8c:	4623      	mov	r3, r4
 8080c8e:	2204      	movs	r2, #4
 8080c90:	6809      	ldr	r1, [r1, #0]
 8080c92:	4874      	ldr	r0, [pc, #464]	; (8080e64 <setup+0x274>)
 8080c94:	f000 fb28 	bl	80812e8 <spark_variable>
  Particle.variable("ResetCount", resetCount);
  Particle.variable("Temperature",temperatureF);
  Particle.variable("Release",releaseNumber);
  Particle.variable("ACdetec1", acDetect1Str);                    // "Off", "Flashing", "Solid"
 8080c98:	4973      	ldr	r1, [pc, #460]	; (8080e68 <setup+0x278>)
 8080c9a:	4874      	ldr	r0, [pc, #464]	; (8080e6c <setup+0x27c>)
 8080c9c:	f7ff ff9e 	bl	8080bdc <_ZN10CloudClass8variableIA10_cIA8_cEEEbRKT_DpRKT0_>
  Particle.variable("ACdetect2", acDetect2Str);                   // "Off" or "On"
 8080ca0:	4973      	ldr	r1, [pc, #460]	; (8080e70 <setup+0x280>)
 8080ca2:	4874      	ldr	r0, [pc, #464]	; (8080e74 <setup+0x284>)
 8080ca4:	f7ff ff9a 	bl	8080bdc <_ZN10CloudClass8variableIA10_cIA8_cEEEbRKT_DpRKT0_>

  Particle.function("Reset-FRAM", resetFRAM);
 8080ca8:	4973      	ldr	r1, [pc, #460]	; (8080e78 <setup+0x288>)
 8080caa:	4874      	ldr	r0, [pc, #464]	; (8080e7c <setup+0x28c>)
 8080cac:	f7ff ff9a 	bl	8080be4 <_ZN10CloudClass8functionIA13_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Hard-Reset",hardResetNow);
 8080cb0:	4973      	ldr	r1, [pc, #460]	; (8080e80 <setup+0x290>)
 8080cb2:	4874      	ldr	r0, [pc, #464]	; (8080e84 <setup+0x294>)
 8080cb4:	f7ff ff96 	bl	8080be4 <_ZN10CloudClass8functionIA13_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Send-Now",sendNow);
 8080cb8:	4973      	ldr	r1, [pc, #460]	; (8080e88 <setup+0x298>)
 8080cba:	4874      	ldr	r0, [pc, #464]	; (8080e8c <setup+0x29c>)
 8080cbc:	f7ff ff92 	bl	8080be4 <_ZN10CloudClass8functionIA13_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setVerboseMode);
 8080cc0:	4973      	ldr	r1, [pc, #460]	; (8080e90 <setup+0x2a0>)
 8080cc2:	4874      	ldr	r0, [pc, #464]	; (8080e94 <setup+0x2a4>)
 8080cc4:	f7ff ff8e 	bl	8080be4 <_ZN10CloudClass8functionIA13_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Timezone",setTimeZone);
 8080cc8:	4973      	ldr	r1, [pc, #460]	; (8080e98 <setup+0x2a8>)
 8080cca:	4874      	ldr	r0, [pc, #464]	; (8080e9c <setup+0x2ac>)
 8080ccc:	f7ff ff8a 	bl	8080be4 <_ZN10CloudClass8functionIA13_cIPFi6StringEEEEbRKT_DpT0_>

  if (!fram.begin()) {                                                  // You can stick the new i2c addr in here, e.g. begin(0x51);
 8080cd0:	2150      	movs	r1, #80	; 0x50
 8080cd2:	4873      	ldr	r0, [pc, #460]	; (8080ea0 <setup+0x2b0>)
 8080cd4:	f7ff f9f4 	bl	80800c0 <_ZN17Adafruit_FRAM_I2C5beginEh>
 8080cd8:	4d72      	ldr	r5, [pc, #456]	; (8080ea4 <setup+0x2b4>)
 8080cda:	b158      	cbz	r0, 8080cf4 <setup+0x104>
    resetTimeStamp = millis();
    state = ERROR_STATE;
  }
  else if (FRAMread8(VERSIONADDR) != VERSIONNUMBER) {                   // Check to see if the memory map in the sketch matches the data on the chip
 8080cdc:	4620      	mov	r0, r4
 8080cde:	f7ff fa7d 	bl	80801dc <_Z9FRAMread8j>
 8080ce2:	2809      	cmp	r0, #9
 8080ce4:	d010      	beq.n	8080d08 <setup+0x118>
    ResetFRAM();                                                        // Reset the FRAM to correct the issue
 8080ce6:	f7ff fc9f 	bl	8080628 <_Z9ResetFRAMv>
    if (FRAMread8(VERSIONADDR) != VERSIONNUMBER) {
 8080cea:	4620      	mov	r0, r4
 8080cec:	f7ff fa76 	bl	80801dc <_Z9FRAMread8j>
 8080cf0:	2809      	cmp	r0, #9
 8080cf2:	d005      	beq.n	8080d00 <setup+0x110>
 8080cf4:	f000 f96c 	bl	8080fd0 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 8080cf8:	4b6b      	ldr	r3, [pc, #428]	; (8080ea8 <setup+0x2b8>)
      state = ERROR_STATE;   // Resetting did not fix the issue
 8080cfa:	702e      	strb	r6, [r5, #0]
    state = ERROR_STATE;
  }
  else if (FRAMread8(VERSIONADDR) != VERSIONNUMBER) {                   // Check to see if the memory map in the sketch matches the data on the chip
    ResetFRAM();                                                        // Reset the FRAM to correct the issue
    if (FRAMread8(VERSIONADDR) != VERSIONNUMBER) {
      resetTimeStamp = millis();
 8080cfc:	6018      	str	r0, [r3, #0]
 8080cfe:	e003      	b.n	8080d08 <setup+0x118>
      state = ERROR_STATE;   // Resetting did not fix the issue
    }
    else {
      FRAMwrite8(CONTROLREGISTER,0);                                    // Need to reset so not in low power or low battery mode
 8080d00:	4621      	mov	r1, r4
 8080d02:	2007      	movs	r0, #7
 8080d04:	f7ff fa70 	bl	80801e8 <_Z10FRAMwrite8jh>
    }
  }

  resetCount = FRAMread8(RESETCOUNT);                                   // Retrive system recount data from FRAM
 8080d08:	2002      	movs	r0, #2
 8080d0a:	f7ff fa67 	bl	80801dc <_Z9FRAMread8j>
 8080d0e:	4c50      	ldr	r4, [pc, #320]	; (8080e50 <setup+0x260>)
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8080d10:	2200      	movs	r2, #0
 8080d12:	6020      	str	r0, [r4, #0]
 8080d14:	a828      	add	r0, sp, #160	; 0xa0
 8080d16:	f840 2d94 	str.w	r2, [r0, #-148]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080d1a:	4611      	mov	r1, r2
 8080d1c:	f000 f948 	bl	8080fb0 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8080d20:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
 8080d22:	2b14      	cmp	r3, #20
 8080d24:	d106      	bne.n	8080d34 <setup+0x144>
  {
    resetCount++;
 8080d26:	6821      	ldr	r1, [r4, #0]
    FRAMwrite8(RESETCOUNT,static_cast<uint8_t>(resetCount));            // If so, store incremented number - watchdog must have done This
 8080d28:	2002      	movs	r0, #2
  }

  resetCount = FRAMread8(RESETCOUNT);                                   // Retrive system recount data from FRAM
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
  {
    resetCount++;
 8080d2a:	3101      	adds	r1, #1
 8080d2c:	6021      	str	r1, [r4, #0]
    FRAMwrite8(RESETCOUNT,static_cast<uint8_t>(resetCount));            // If so, store incremented number - watchdog must have done This
 8080d2e:	b2c9      	uxtb	r1, r1
 8080d30:	f7ff fa5a 	bl	80801e8 <_Z10FRAMwrite8jh>
  }
  if (resetCount >=6) {                                                 // If we get to resetCount 4, we are resetting without entering the main loop
 8080d34:	6823      	ldr	r3, [r4, #0]
 8080d36:	2b05      	cmp	r3, #5
 8080d38:	dd05      	ble.n	8080d46 <setup+0x156>
    FRAMwrite8(RESETCOUNT,4);                                            // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
 8080d3a:	2104      	movs	r1, #4
 8080d3c:	2002      	movs	r0, #2
 8080d3e:	f7ff fa53 	bl	80801e8 <_Z10FRAMwrite8jh>
    fullModemReset();                                                   // This will reset the modem and the device will reboot
 8080d42:	f7ff fc2f 	bl	80805a4 <_Z14fullModemResetv>
  }

  getTemperature();                                                    // Get current temp
 8080d46:	f7ff facf 	bl	80802e8 <_Z14getTemperaturev>
  getSignalStrength();                                                 // Get signal strength
 8080d4a:	f7ff fa9f 	bl	808028c <_Z17getSignalStrengthv>

  int8_t tempTimeZoneOffset = FRAMread8(TIMEZONE);                  // Load Time zone data from FRAM
 8080d4e:	2004      	movs	r0, #4
 8080d50:	f7ff fa44 	bl	80801dc <_Z9FRAMread8j>
  if (tempTimeZoneOffset > -12 && tempTimeZoneOffset < 12) Time.zone((float)tempTimeZoneOffset);
 8080d54:	f100 030b 	add.w	r3, r0, #11
 8080d58:	b2db      	uxtb	r3, r3
 8080d5a:	2b16      	cmp	r3, #22
 8080d5c:	d803      	bhi.n	8080d66 <setup+0x176>
 8080d5e:	b240      	sxtb	r0, r0
 8080d60:	f002 fb66 	bl	8083430 <__aeabi_i2f>
 8080d64:	e000      	b.n	8080d68 <setup+0x178>
  else Time.zone(-5);                                               // Defaults to EST if invalid value in FRAM
 8080d66:	4851      	ldr	r0, [pc, #324]	; (8080eac <setup+0x2bc>)
 8080d68:	f001 f9fe 	bl	8082168 <_ZN9TimeClass4zoneEf>

  currentHourlyPeriod = Time.hour();                                  // Sets the hour period for when the count starts (see #defines)
 8080d6c:	f001 fa62 	bl	8082234 <_ZN9TimeClass4hourEv>
 8080d70:	4b4f      	ldr	r3, [pc, #316]	; (8080eb0 <setup+0x2c0>)
  currentDailyPeriod = Time.day();                                    // What day is it?

  controlRegister = FRAMread8(CONTROLREGISTER);                         // Read the Control Register for system modes so they stick even after reset
  verboseMode = (0b00001000 & controlRegister);                         // verboseMode

  attachInterrupt(wakeUpPin, watchdogISR, RISING);                  // The watchdog timer will signal us and we have to respond
 8080d72:	2400      	movs	r4, #0

  int8_t tempTimeZoneOffset = FRAMread8(TIMEZONE);                  // Load Time zone data from FRAM
  if (tempTimeZoneOffset > -12 && tempTimeZoneOffset < 12) Time.zone((float)tempTimeZoneOffset);
  else Time.zone(-5);                                               // Defaults to EST if invalid value in FRAM

  currentHourlyPeriod = Time.hour();                                  // Sets the hour period for when the count starts (see #defines)
 8080d74:	7018      	strb	r0, [r3, #0]
  currentDailyPeriod = Time.day();                                    // What day is it?
 8080d76:	f001 fa67 	bl	8082248 <_ZN9TimeClass3dayEv>
 8080d7a:	4b4e      	ldr	r3, [pc, #312]	; (8080eb4 <setup+0x2c4>)
 8080d7c:	4e4e      	ldr	r6, [pc, #312]	; (8080eb8 <setup+0x2c8>)
 8080d7e:	7018      	strb	r0, [r3, #0]

  controlRegister = FRAMread8(CONTROLREGISTER);                         // Read the Control Register for system modes so they stick even after reset
 8080d80:	2007      	movs	r0, #7
 8080d82:	f7ff fa2b 	bl	80801dc <_Z9FRAMread8j>
 8080d86:	4b4d      	ldr	r3, [pc, #308]	; (8080ebc <setup+0x2cc>)
  verboseMode = (0b00001000 & controlRegister);                         // verboseMode

  attachInterrupt(wakeUpPin, watchdogISR, RISING);                  // The watchdog timer will signal us and we have to respond
 8080d88:	2201      	movs	r2, #1
  else Time.zone(-5);                                               // Defaults to EST if invalid value in FRAM

  currentHourlyPeriod = Time.hour();                                  // Sets the hour period for when the count starts (see #defines)
  currentDailyPeriod = Time.day();                                    // What day is it?

  controlRegister = FRAMread8(CONTROLREGISTER);                         // Read the Control Register for system modes so they stick even after reset
 8080d8a:	7018      	strb	r0, [r3, #0]
  verboseMode = (0b00001000 & controlRegister);                         // verboseMode
 8080d8c:	4b4c      	ldr	r3, [pc, #304]	; (8080ec0 <setup+0x2d0>)
 8080d8e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8080d92:	7018      	strb	r0, [r3, #0]

  attachInterrupt(wakeUpPin, watchdogISR, RISING);                  // The watchdog timer will signal us and we have to respond
 8080d94:	494b      	ldr	r1, [pc, #300]	; (8080ec4 <setup+0x2d4>)
 8080d96:	9400      	str	r4, [sp, #0]
 8080d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8080d9c:	2011      	movs	r0, #17
 8080d9e:	f000 ff7d 	bl	8081c9c <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(acDetect1, acDetect1ISR, CHANGE);                 // We need to watch for the acDetect1 in both rising and falling states
 8080da2:	4622      	mov	r2, r4
 8080da4:	9400      	str	r4, [sp, #0]
 8080da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8080daa:	4947      	ldr	r1, [pc, #284]	; (8080ec8 <setup+0x2d8>)
 8080dac:	2019      	movs	r0, #25
 8080dae:	f000 ff75 	bl	8081c9c <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(acDetect2, acDetect2ISR,  CHANGE);                // On the acDetect2 line, we just need to know when it goes HIGH
 8080db2:	4622      	mov	r2, r4
 8080db4:	9400      	str	r4, [sp, #0]
 8080db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8080dba:	4944      	ldr	r1, [pc, #272]	; (8080ecc <setup+0x2dc>)
 8080dbc:	201b      	movs	r0, #27
 8080dbe:	f000 ff6d 	bl	8081c9c <_Z15attachInterrupttPFvvE13InterruptModeah>
  if (state != ERROR_STATE) state = IDLE_STATE;                     // IDLE unless error from above code
 8080dc2:	782b      	ldrb	r3, [r5, #0]
 8080dc4:	2b01      	cmp	r3, #1
 8080dc6:	bf1e      	ittt	ne
 8080dc8:	4b36      	ldrne	r3, [pc, #216]	; (8080ea4 <setup+0x2b4>)
 8080dca:	2202      	movne	r2, #2
 8080dcc:	701a      	strbne	r2, [r3, #0]
 8080dce:	4b40      	ldr	r3, [pc, #256]	; (8080ed0 <setup+0x2e0>)
 8080dd0:	681c      	ldr	r4, [r3, #0]
 8080dd2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc

  if (!pinReadFast(acDetect1)) {                                    // Check initial status of the acDetect lines
 8080dd6:	f8b4 22c0 	ldrh.w	r2, [r4, #704]	; 0x2c0
 8080dda:	691b      	ldr	r3, [r3, #16]
 8080ddc:	421a      	tst	r2, r3
 8080dde:	d109      	bne.n	8080df4 <setup+0x204>
    snprintf(acDetect1Str, sizeof(acDetect1Str), "On");
 8080de0:	493c      	ldr	r1, [pc, #240]	; (8080ed4 <setup+0x2e4>)
 8080de2:	4821      	ldr	r0, [pc, #132]	; (8080e68 <setup+0x278>)
 8080de4:	f002 fef0 	bl	8083bc8 <strcpy>
    acDetect1State = 2;                                             // Can't tell if it is flashing yet but it is at least on
 8080de8:	2302      	movs	r3, #2
 8080dea:	6033      	str	r3, [r6, #0]
    acDetect1Flag = true;                                           // Will cause us to check status
 8080dec:	4b3a      	ldr	r3, [pc, #232]	; (8080ed8 <setup+0x2e8>)
 8080dee:	2201      	movs	r2, #1
 8080df0:	701a      	strb	r2, [r3, #0]
 8080df2:	e003      	b.n	8080dfc <setup+0x20c>
  }
  else snprintf(acDetect1Str, sizeof(acDetect1Str), "Off");
 8080df4:	4939      	ldr	r1, [pc, #228]	; (8080edc <setup+0x2ec>)
 8080df6:	481c      	ldr	r0, [pc, #112]	; (8080e68 <setup+0x278>)
 8080df8:	f002 fee6 	bl	8083bc8 <strcpy>
 8080dfc:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4

  if (!pinReadFast(acDetect2)) {                                    // Check initial status of the acDetect lines
 8080e00:	f8b4 22f8 	ldrh.w	r2, [r4, #760]	; 0x2f8
 8080e04:	691b      	ldr	r3, [r3, #16]
 8080e06:	421a      	tst	r2, r3
 8080e08:	d109      	bne.n	8080e1e <setup+0x22e>
    snprintf(acDetect2Str, sizeof(acDetect2Str), "On");
 8080e0a:	4932      	ldr	r1, [pc, #200]	; (8080ed4 <setup+0x2e4>)
 8080e0c:	4818      	ldr	r0, [pc, #96]	; (8080e70 <setup+0x280>)
 8080e0e:	f002 fedb 	bl	8083bc8 <strcpy>
    acDetect2State = 1;                                             // acDetect is on
 8080e12:	4a33      	ldr	r2, [pc, #204]	; (8080ee0 <setup+0x2f0>)
 8080e14:	2301      	movs	r3, #1
 8080e16:	6013      	str	r3, [r2, #0]
    acDetect2Flag = true;
 8080e18:	4a32      	ldr	r2, [pc, #200]	; (8080ee4 <setup+0x2f4>)
 8080e1a:	7013      	strb	r3, [r2, #0]
 8080e1c:	e003      	b.n	8080e26 <setup+0x236>
  }
  else snprintf(acDetect2Str, sizeof(acDetect2Str), "Off");
 8080e1e:	492f      	ldr	r1, [pc, #188]	; (8080edc <setup+0x2ec>)
 8080e20:	4813      	ldr	r0, [pc, #76]	; (8080e70 <setup+0x280>)
 8080e22:	f002 fed1 	bl	8083bc8 <strcpy>

  if (!acDetect1State && !acDetect2State) state = REPORTING_STATE;  // If the device was cleared while reset - report so we will get an alert on next change
 8080e26:	6833      	ldr	r3, [r6, #0]
 8080e28:	b913      	cbnz	r3, 8080e30 <setup+0x240>
 8080e2a:	4b2d      	ldr	r3, [pc, #180]	; (8080ee0 <setup+0x2f0>)
 8080e2c:	681b      	ldr	r3, [r3, #0]
 8080e2e:	b123      	cbz	r3, 8080e3a <setup+0x24a>
  pinMode(hardResetPin,OUTPUT);                                   // For a hard reset active HIGH

  connectToParticle();                                            // This device is always connected

  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
 8080e30:	a804      	add	r0, sp, #16
 8080e32:	f001 f878 	bl	8081f26 <_ZN6StringD1Ev>
  }
  else snprintf(acDetect2Str, sizeof(acDetect2Str), "Off");

  if (!acDetect1State && !acDetect2State) state = REPORTING_STATE;  // If the device was cleared while reset - report so we will get an alert on next change

}
 8080e36:	b028      	add	sp, #160	; 0xa0
 8080e38:	bd70      	pop	{r4, r5, r6, pc}
    acDetect2State = 1;                                             // acDetect is on
    acDetect2Flag = true;
  }
  else snprintf(acDetect2Str, sizeof(acDetect2Str), "Off");

  if (!acDetect1State && !acDetect2State) state = REPORTING_STATE;  // If the device was cleared while reset - report so we will get an alert on next change
 8080e3a:	2303      	movs	r3, #3
 8080e3c:	702b      	strb	r3, [r5, #0]
 8080e3e:	e7f7      	b.n	8080e30 <setup+0x240>
 8080e40:	2000057a 	.word	0x2000057a
 8080e44:	0808076d 	.word	0x0808076d
 8080e48:	20000591 	.word	0x20000591
 8080e4c:	0808463c 	.word	0x0808463c
 8080e50:	2000056c 	.word	0x2000056c
 8080e54:	08084643 	.word	0x08084643
 8080e58:	20000574 	.word	0x20000574
 8080e5c:	0808464e 	.word	0x0808464e
 8080e60:	2000044c 	.word	0x2000044c
 8080e64:	0808465a 	.word	0x0808465a
 8080e68:	20000458 	.word	0x20000458
 8080e6c:	08084662 	.word	0x08084662
 8080e70:	20000460 	.word	0x20000460
 8080e74:	0808466b 	.word	0x0808466b
 8080e78:	080806cd 	.word	0x080806cd
 8080e7c:	08084675 	.word	0x08084675
 8080e80:	0808019d 	.word	0x0808019d
 8080e84:	08084680 	.word	0x08084680
 8080e88:	08080181 	.word	0x08080181
 8080e8c:	0808468b 	.word	0x0808468b
 8080e90:	0808081d 	.word	0x0808081d
 8080e94:	08084694 	.word	0x08084694
 8080e98:	080808cd 	.word	0x080808cd
 8080e9c:	080846a1 	.word	0x080846a1
 8080ea0:	200005dc 	.word	0x200005dc
 8080ea4:	20000560 	.word	0x20000560
 8080ea8:	20000570 	.word	0x20000570
 8080eac:	c0a00000 	.word	0xc0a00000
 8080eb0:	20000578 	.word	0x20000578
 8080eb4:	20000568 	.word	0x20000568
 8080eb8:	200005d8 	.word	0x200005d8
 8080ebc:	200005d2 	.word	0x200005d2
 8080ec0:	20000590 	.word	0x20000590
 8080ec4:	0808015d 	.word	0x0808015d
 8080ec8:	08080169 	.word	0x08080169
 8080ecc:	08080175 	.word	0x08080175
 8080ed0:	2000058c 	.word	0x2000058c
 8080ed4:	080844d4 	.word	0x080844d4
 8080ed8:	20000579 	.word	0x20000579
 8080edc:	080846ae 	.word	0x080846ae
 8080ee0:	20000564 	.word	0x20000564
 8080ee4:	200005d3 	.word	0x200005d3

08080ee8 <_GLOBAL__sub_I_fram>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8080ee8:	4b18      	ldr	r3, [pc, #96]	; (8080f4c <_GLOBAL__sub_I_fram+0x64>)
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
 8080eea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080eec:	2500      	movs	r5, #0
 8080eee:	601d      	str	r5, [r3, #0]
 8080ef0:	4b17      	ldr	r3, [pc, #92]	; (8080f50 <_GLOBAL__sub_I_fram+0x68>)
 8080ef2:	2201      	movs	r2, #1
 8080ef4:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8080ef6:	f000 f88b 	bl	8081010 <HAL_Pin_Map>
 8080efa:	4b16      	ldr	r3, [pc, #88]	; (8080f54 <_GLOBAL__sub_I_fram+0x6c>)
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8080efc:	4c16      	ldr	r4, [pc, #88]	; (8080f58 <_GLOBAL__sub_I_fram+0x70>)
 8080efe:	6018      	str	r0, [r3, #0]
// FRAM Library Extensions Header File

Adafruit_FRAM_I2C fram = Adafruit_FRAM_I2C(); // Init the FRAM
 8080f00:	4816      	ldr	r0, [pc, #88]	; (8080f5c <_GLOBAL__sub_I_fram+0x74>)
 8080f02:	f7ff f8da 	bl	80800ba <_ZN17Adafruit_FRAM_I2CC1Ev>
 8080f06:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8080f0a:	8063      	strh	r3, [r4, #2]
 8080f0c:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8080f10:	2002      	movs	r0, #2
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8080f12:	80a3      	strh	r3, [r4, #4]
 8080f14:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8080f16:	f000 f99b 	bl	8081250 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8080f1a:	a802      	add	r0, sp, #8
 8080f1c:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080f20:	462a      	mov	r2, r5
 8080f22:	4629      	mov	r1, r5
 8080f24:	f000 f844 	bl	8080fb0 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8080f28:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 8080f2a:	2b1e      	cmp	r3, #30
 8080f2c:	d104      	bne.n	8080f38 <_GLOBAL__sub_I_fram+0x50>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 8080f2e:	2303      	movs	r3, #3
 8080f30:	7023      	strb	r3, [r4, #0]
 8080f32:	2311      	movs	r3, #17
 8080f34:	8065      	strh	r5, [r4, #2]
 8080f36:	80a3      	strh	r3, [r4, #4]
#include "FRAM-Library-Extensions.h"                     // Extends the FRAM Library
#include "electrondoc.h"                                 // Documents pinout

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);    // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);         // Means my code will not be held up by Particle processes.
 8080f38:	2100      	movs	r1, #0
 8080f3a:	2001      	movs	r0, #1
 8080f3c:	f000 f9a0 	bl	8081280 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 8080f40:	2101      	movs	r1, #1
 8080f42:	2004      	movs	r0, #4
 8080f44:	f000 f824 	bl	8080f90 <HAL_Feature_Set>
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
 8080f48:	b003      	add	sp, #12
 8080f4a:	bd30      	pop	{r4, r5, pc}
 8080f4c:	2000057c 	.word	0x2000057c
 8080f50:	2000054d 	.word	0x2000054d
 8080f54:	2000058c 	.word	0x2000058c
 8080f58:	20000580 	.word	0x20000580
 8080f5c:	200005dc 	.word	0x200005dc

08080f60 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
 8080f60:	b508      	push	{r3, lr}
 8080f62:	4b02      	ldr	r3, [pc, #8]	; (8080f6c <cellular_signal+0xc>)
 8080f64:	681b      	ldr	r3, [r3, #0]
 8080f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080f68:	9301      	str	r3, [sp, #4]
 8080f6a:	bd08      	pop	{r3, pc}
 8080f6c:	08060020 	.word	0x08060020

08080f70 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8080f70:	b508      	push	{r3, lr}
 8080f72:	4b02      	ldr	r3, [pc, #8]	; (8080f7c <cellular_command+0xc>)
 8080f74:	681b      	ldr	r3, [r3, #0]
 8080f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8080f78:	9301      	str	r3, [sp, #4]
 8080f7a:	bd08      	pop	{r3, pc}
 8080f7c:	08060020 	.word	0x08060020

08080f80 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8080f80:	b508      	push	{r3, lr}
 8080f82:	4b02      	ldr	r3, [pc, #8]	; (8080f8c <os_mutex_create+0xc>)
 8080f84:	681b      	ldr	r3, [r3, #0]
 8080f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080f88:	9301      	str	r3, [sp, #4]
 8080f8a:	bd08      	pop	{r3, pc}
 8080f8c:	080401d0 	.word	0x080401d0

08080f90 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 8080f90:	b508      	push	{r3, lr}
 8080f92:	4b02      	ldr	r3, [pc, #8]	; (8080f9c <HAL_Feature_Set+0xc>)
 8080f94:	681b      	ldr	r3, [r3, #0]
 8080f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8080f98:	9301      	str	r3, [sp, #4]
 8080f9a:	bd08      	pop	{r3, pc}
 8080f9c:	080401b8 	.word	0x080401b8

08080fa0 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 8080fa0:	b508      	push	{r3, lr}
 8080fa2:	4b02      	ldr	r3, [pc, #8]	; (8080fac <HAL_Core_System_Reset_Ex+0xc>)
 8080fa4:	681b      	ldr	r3, [r3, #0]
 8080fa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8080fa8:	9301      	str	r3, [sp, #4]
 8080faa:	bd08      	pop	{r3, pc}
 8080fac:	080401b8 	.word	0x080401b8

08080fb0 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 8080fb0:	b508      	push	{r3, lr}
 8080fb2:	4b02      	ldr	r3, [pc, #8]	; (8080fbc <HAL_Core_Get_Last_Reset_Info+0xc>)
 8080fb4:	681b      	ldr	r3, [r3, #0]
 8080fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8080fb8:	9301      	str	r3, [sp, #4]
 8080fba:	bd08      	pop	{r3, pc}
 8080fbc:	080401b8 	.word	0x080401b8

08080fc0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8080fc0:	b508      	push	{r3, lr}
 8080fc2:	4b02      	ldr	r3, [pc, #8]	; (8080fcc <HAL_RNG_GetRandomNumber+0xc>)
 8080fc4:	681b      	ldr	r3, [r3, #0]
 8080fc6:	685b      	ldr	r3, [r3, #4]
 8080fc8:	9301      	str	r3, [sp, #4]
 8080fca:	bd08      	pop	{r3, pc}
 8080fcc:	0804019c 	.word	0x0804019c

08080fd0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8080fd0:	b508      	push	{r3, lr}
 8080fd2:	4b02      	ldr	r3, [pc, #8]	; (8080fdc <HAL_Timer_Get_Milli_Seconds+0xc>)
 8080fd4:	681b      	ldr	r3, [r3, #0]
 8080fd6:	695b      	ldr	r3, [r3, #20]
 8080fd8:	9301      	str	r3, [sp, #4]
 8080fda:	bd08      	pop	{r3, pc}
 8080fdc:	0804019c 	.word	0x0804019c

08080fe0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8080fe0:	b508      	push	{r3, lr}
 8080fe2:	4b02      	ldr	r3, [pc, #8]	; (8080fec <HAL_RTC_Get_UnixTime+0xc>)
 8080fe4:	681b      	ldr	r3, [r3, #0]
 8080fe6:	69db      	ldr	r3, [r3, #28]
 8080fe8:	9301      	str	r3, [sp, #4]
 8080fea:	bd08      	pop	{r3, pc}
 8080fec:	0804019c 	.word	0x0804019c

08080ff0 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 8080ff0:	b508      	push	{r3, lr}
 8080ff2:	4b02      	ldr	r3, [pc, #8]	; (8080ffc <HAL_RTC_Time_Is_Valid+0xc>)
 8080ff4:	681b      	ldr	r3, [r3, #0]
 8080ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080ff8:	9301      	str	r3, [sp, #4]
 8080ffa:	bd08      	pop	{r3, pc}
 8080ffc:	0804019c 	.word	0x0804019c

08081000 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 8081000:	b508      	push	{r3, lr}
 8081002:	4b02      	ldr	r3, [pc, #8]	; (808100c <hal_timer_millis+0xc>)
 8081004:	681b      	ldr	r3, [r3, #0]
 8081006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081008:	9301      	str	r3, [sp, #4]
 808100a:	bd08      	pop	{r3, pc}
 808100c:	0804019c 	.word	0x0804019c

08081010 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 8081010:	b508      	push	{r3, lr}
 8081012:	4b02      	ldr	r3, [pc, #8]	; (808101c <HAL_Pin_Map+0xc>)
 8081014:	681b      	ldr	r3, [r3, #0]
 8081016:	681b      	ldr	r3, [r3, #0]
 8081018:	9301      	str	r3, [sp, #4]
 808101a:	bd08      	pop	{r3, pc}
 808101c:	080401b0 	.word	0x080401b0

08081020 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 8081020:	b508      	push	{r3, lr}
 8081022:	4b02      	ldr	r3, [pc, #8]	; (808102c <HAL_Validate_Pin_Function+0xc>)
 8081024:	681b      	ldr	r3, [r3, #0]
 8081026:	685b      	ldr	r3, [r3, #4]
 8081028:	9301      	str	r3, [sp, #4]
 808102a:	bd08      	pop	{r3, pc}
 808102c:	080401b0 	.word	0x080401b0

08081030 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8081030:	b508      	push	{r3, lr}
 8081032:	4b02      	ldr	r3, [pc, #8]	; (808103c <HAL_Pin_Mode+0xc>)
 8081034:	681b      	ldr	r3, [r3, #0]
 8081036:	689b      	ldr	r3, [r3, #8]
 8081038:	9301      	str	r3, [sp, #4]
 808103a:	bd08      	pop	{r3, pc}
 808103c:	080401b0 	.word	0x080401b0

08081040 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8081040:	b508      	push	{r3, lr}
 8081042:	4b02      	ldr	r3, [pc, #8]	; (808104c <HAL_Get_Pin_Mode+0xc>)
 8081044:	681b      	ldr	r3, [r3, #0]
 8081046:	68db      	ldr	r3, [r3, #12]
 8081048:	9301      	str	r3, [sp, #4]
 808104a:	bd08      	pop	{r3, pc}
 808104c:	080401b0 	.word	0x080401b0

08081050 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8081050:	b508      	push	{r3, lr}
 8081052:	4b02      	ldr	r3, [pc, #8]	; (808105c <HAL_GPIO_Write+0xc>)
 8081054:	681b      	ldr	r3, [r3, #0]
 8081056:	691b      	ldr	r3, [r3, #16]
 8081058:	9301      	str	r3, [sp, #4]
 808105a:	bd08      	pop	{r3, pc}
 808105c:	080401b0 	.word	0x080401b0

08081060 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 8081060:	b508      	push	{r3, lr}
 8081062:	4b02      	ldr	r3, [pc, #8]	; (808106c <HAL_Interrupts_Attach+0xc>)
 8081064:	681b      	ldr	r3, [r3, #0]
 8081066:	699b      	ldr	r3, [r3, #24]
 8081068:	9301      	str	r3, [sp, #4]
 808106a:	bd08      	pop	{r3, pc}
 808106c:	080401b0 	.word	0x080401b0

08081070 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 8081070:	b508      	push	{r3, lr}
 8081072:	4b02      	ldr	r3, [pc, #8]	; (808107c <HAL_Interrupts_Detach+0xc>)
 8081074:	681b      	ldr	r3, [r3, #0]
 8081076:	69db      	ldr	r3, [r3, #28]
 8081078:	9301      	str	r3, [sp, #4]
 808107a:	bd08      	pop	{r3, pc}
 808107c:	080401b0 	.word	0x080401b0

08081080 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 8081080:	b508      	push	{r3, lr}
 8081082:	4b02      	ldr	r3, [pc, #8]	; (808108c <HAL_ADC_Read+0xc>)
 8081084:	681b      	ldr	r3, [r3, #0]
 8081086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081088:	9301      	str	r3, [sp, #4]
 808108a:	bd08      	pop	{r3, pc}
 808108c:	080401b0 	.word	0x080401b0

08081090 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 8081090:	b508      	push	{r3, lr}
 8081092:	4b02      	ldr	r3, [pc, #8]	; (808109c <HAL_I2C_Begin+0xc>)
 8081094:	681b      	ldr	r3, [r3, #0]
 8081096:	68db      	ldr	r3, [r3, #12]
 8081098:	9301      	str	r3, [sp, #4]
 808109a:	bd08      	pop	{r3, pc}
 808109c:	080401ac 	.word	0x080401ac

080810a0 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80810a0:	b508      	push	{r3, lr}
 80810a2:	4b02      	ldr	r3, [pc, #8]	; (80810ac <HAL_I2C_Request_Data+0xc>)
 80810a4:	681b      	ldr	r3, [r3, #0]
 80810a6:	695b      	ldr	r3, [r3, #20]
 80810a8:	9301      	str	r3, [sp, #4]
 80810aa:	bd08      	pop	{r3, pc}
 80810ac:	080401ac 	.word	0x080401ac

080810b0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80810b0:	b508      	push	{r3, lr}
 80810b2:	4b02      	ldr	r3, [pc, #8]	; (80810bc <HAL_I2C_Begin_Transmission+0xc>)
 80810b4:	681b      	ldr	r3, [r3, #0]
 80810b6:	699b      	ldr	r3, [r3, #24]
 80810b8:	9301      	str	r3, [sp, #4]
 80810ba:	bd08      	pop	{r3, pc}
 80810bc:	080401ac 	.word	0x080401ac

080810c0 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80810c0:	b508      	push	{r3, lr}
 80810c2:	4b02      	ldr	r3, [pc, #8]	; (80810cc <HAL_I2C_End_Transmission+0xc>)
 80810c4:	681b      	ldr	r3, [r3, #0]
 80810c6:	69db      	ldr	r3, [r3, #28]
 80810c8:	9301      	str	r3, [sp, #4]
 80810ca:	bd08      	pop	{r3, pc}
 80810cc:	080401ac 	.word	0x080401ac

080810d0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80810d0:	b508      	push	{r3, lr}
 80810d2:	4b02      	ldr	r3, [pc, #8]	; (80810dc <HAL_I2C_Write_Data+0xc>)
 80810d4:	681b      	ldr	r3, [r3, #0]
 80810d6:	6a1b      	ldr	r3, [r3, #32]
 80810d8:	9301      	str	r3, [sp, #4]
 80810da:	bd08      	pop	{r3, pc}
 80810dc:	080401ac 	.word	0x080401ac

080810e0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80810e0:	b508      	push	{r3, lr}
 80810e2:	4b02      	ldr	r3, [pc, #8]	; (80810ec <HAL_I2C_Available_Data+0xc>)
 80810e4:	681b      	ldr	r3, [r3, #0]
 80810e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80810e8:	9301      	str	r3, [sp, #4]
 80810ea:	bd08      	pop	{r3, pc}
 80810ec:	080401ac 	.word	0x080401ac

080810f0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80810f0:	b508      	push	{r3, lr}
 80810f2:	4b02      	ldr	r3, [pc, #8]	; (80810fc <HAL_I2C_Read_Data+0xc>)
 80810f4:	681b      	ldr	r3, [r3, #0]
 80810f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80810f8:	9301      	str	r3, [sp, #4]
 80810fa:	bd08      	pop	{r3, pc}
 80810fc:	080401ac 	.word	0x080401ac

08081100 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8081100:	b508      	push	{r3, lr}
 8081102:	4b02      	ldr	r3, [pc, #8]	; (808110c <HAL_I2C_Peek_Data+0xc>)
 8081104:	681b      	ldr	r3, [r3, #0]
 8081106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081108:	9301      	str	r3, [sp, #4]
 808110a:	bd08      	pop	{r3, pc}
 808110c:	080401ac 	.word	0x080401ac

08081110 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8081110:	b508      	push	{r3, lr}
 8081112:	4b02      	ldr	r3, [pc, #8]	; (808111c <HAL_I2C_Flush_Data+0xc>)
 8081114:	681b      	ldr	r3, [r3, #0]
 8081116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081118:	9301      	str	r3, [sp, #4]
 808111a:	bd08      	pop	{r3, pc}
 808111c:	080401ac 	.word	0x080401ac

08081120 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8081120:	b508      	push	{r3, lr}
 8081122:	4b02      	ldr	r3, [pc, #8]	; (808112c <HAL_I2C_Is_Enabled+0xc>)
 8081124:	681b      	ldr	r3, [r3, #0]
 8081126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081128:	9301      	str	r3, [sp, #4]
 808112a:	bd08      	pop	{r3, pc}
 808112c:	080401ac 	.word	0x080401ac

08081130 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 8081130:	b508      	push	{r3, lr}
 8081132:	4b02      	ldr	r3, [pc, #8]	; (808113c <HAL_I2C_Init+0xc>)
 8081134:	681b      	ldr	r3, [r3, #0]
 8081136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081138:	9301      	str	r3, [sp, #4]
 808113a:	bd08      	pop	{r3, pc}
 808113c:	080401ac 	.word	0x080401ac

08081140 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8081140:	b508      	push	{r3, lr}
 8081142:	4b02      	ldr	r3, [pc, #8]	; (808114c <HAL_SPI_Init+0xc>)
 8081144:	681b      	ldr	r3, [r3, #0]
 8081146:	69db      	ldr	r3, [r3, #28]
 8081148:	9301      	str	r3, [sp, #4]
 808114a:	bd08      	pop	{r3, pc}
 808114c:	080401b4 	.word	0x080401b4

08081150 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8081150:	b508      	push	{r3, lr}
 8081152:	4b02      	ldr	r3, [pc, #8]	; (808115c <HAL_SPI_Is_Enabled+0xc>)
 8081154:	681b      	ldr	r3, [r3, #0]
 8081156:	6a1b      	ldr	r3, [r3, #32]
 8081158:	9301      	str	r3, [sp, #4]
 808115a:	bd08      	pop	{r3, pc}
 808115c:	080401b4 	.word	0x080401b4

08081160 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8081160:	b508      	push	{r3, lr}
 8081162:	4b02      	ldr	r3, [pc, #8]	; (808116c <HAL_USART_Init+0xc>)
 8081164:	681b      	ldr	r3, [r3, #0]
 8081166:	699b      	ldr	r3, [r3, #24]
 8081168:	9301      	str	r3, [sp, #4]
 808116a:	bd08      	pop	{r3, pc}
 808116c:	080401c4 	.word	0x080401c4

08081170 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8081170:	b508      	push	{r3, lr}
 8081172:	4b02      	ldr	r3, [pc, #8]	; (808117c <HAL_USART_Write_Data+0xc>)
 8081174:	681b      	ldr	r3, [r3, #0]
 8081176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081178:	9301      	str	r3, [sp, #4]
 808117a:	bd08      	pop	{r3, pc}
 808117c:	080401c4 	.word	0x080401c4

08081180 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 8081180:	b508      	push	{r3, lr}
 8081182:	4b02      	ldr	r3, [pc, #8]	; (808118c <HAL_USART_Available_Data+0xc>)
 8081184:	681b      	ldr	r3, [r3, #0]
 8081186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081188:	9301      	str	r3, [sp, #4]
 808118a:	bd08      	pop	{r3, pc}
 808118c:	080401c4 	.word	0x080401c4

08081190 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8081190:	b508      	push	{r3, lr}
 8081192:	4b02      	ldr	r3, [pc, #8]	; (808119c <HAL_USART_Read_Data+0xc>)
 8081194:	681b      	ldr	r3, [r3, #0]
 8081196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081198:	9301      	str	r3, [sp, #4]
 808119a:	bd08      	pop	{r3, pc}
 808119c:	080401c4 	.word	0x080401c4

080811a0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80811a0:	b508      	push	{r3, lr}
 80811a2:	4b02      	ldr	r3, [pc, #8]	; (80811ac <HAL_USART_Peek_Data+0xc>)
 80811a4:	681b      	ldr	r3, [r3, #0]
 80811a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80811a8:	9301      	str	r3, [sp, #4]
 80811aa:	bd08      	pop	{r3, pc}
 80811ac:	080401c4 	.word	0x080401c4

080811b0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80811b0:	b508      	push	{r3, lr}
 80811b2:	4b02      	ldr	r3, [pc, #8]	; (80811bc <HAL_USART_Flush_Data+0xc>)
 80811b4:	681b      	ldr	r3, [r3, #0]
 80811b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80811b8:	9301      	str	r3, [sp, #4]
 80811ba:	bd08      	pop	{r3, pc}
 80811bc:	080401c4 	.word	0x080401c4

080811c0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80811c0:	b508      	push	{r3, lr}
 80811c2:	4b02      	ldr	r3, [pc, #8]	; (80811cc <HAL_USART_Is_Enabled+0xc>)
 80811c4:	681b      	ldr	r3, [r3, #0]
 80811c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80811c8:	9301      	str	r3, [sp, #4]
 80811ca:	bd08      	pop	{r3, pc}
 80811cc:	080401c4 	.word	0x080401c4

080811d0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80811d0:	b508      	push	{r3, lr}
 80811d2:	4b02      	ldr	r3, [pc, #8]	; (80811dc <HAL_USART_Available_Data_For_Write+0xc>)
 80811d4:	681b      	ldr	r3, [r3, #0]
 80811d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80811d8:	9301      	str	r3, [sp, #4]
 80811da:	bd08      	pop	{r3, pc}
 80811dc:	080401c4 	.word	0x080401c4

080811e0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80811e0:	b508      	push	{r3, lr}
 80811e2:	4b02      	ldr	r3, [pc, #8]	; (80811ec <HAL_USB_USART_Init+0xc>)
 80811e4:	681b      	ldr	r3, [r3, #0]
 80811e6:	681b      	ldr	r3, [r3, #0]
 80811e8:	9301      	str	r3, [sp, #4]
 80811ea:	bd08      	pop	{r3, pc}
 80811ec:	0806001c 	.word	0x0806001c

080811f0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80811f0:	b508      	push	{r3, lr}
 80811f2:	4b02      	ldr	r3, [pc, #8]	; (80811fc <HAL_USB_USART_Available_Data+0xc>)
 80811f4:	681b      	ldr	r3, [r3, #0]
 80811f6:	691b      	ldr	r3, [r3, #16]
 80811f8:	9301      	str	r3, [sp, #4]
 80811fa:	bd08      	pop	{r3, pc}
 80811fc:	0806001c 	.word	0x0806001c

08081200 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8081200:	b508      	push	{r3, lr}
 8081202:	4b02      	ldr	r3, [pc, #8]	; (808120c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8081204:	681b      	ldr	r3, [r3, #0]
 8081206:	695b      	ldr	r3, [r3, #20]
 8081208:	9301      	str	r3, [sp, #4]
 808120a:	bd08      	pop	{r3, pc}
 808120c:	0806001c 	.word	0x0806001c

08081210 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081210:	b508      	push	{r3, lr}
 8081212:	4b02      	ldr	r3, [pc, #8]	; (808121c <HAL_USB_USART_Receive_Data+0xc>)
 8081214:	681b      	ldr	r3, [r3, #0]
 8081216:	699b      	ldr	r3, [r3, #24]
 8081218:	9301      	str	r3, [sp, #4]
 808121a:	bd08      	pop	{r3, pc}
 808121c:	0806001c 	.word	0x0806001c

08081220 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081220:	b508      	push	{r3, lr}
 8081222:	4b02      	ldr	r3, [pc, #8]	; (808122c <HAL_USB_USART_Send_Data+0xc>)
 8081224:	681b      	ldr	r3, [r3, #0]
 8081226:	69db      	ldr	r3, [r3, #28]
 8081228:	9301      	str	r3, [sp, #4]
 808122a:	bd08      	pop	{r3, pc}
 808122c:	0806001c 	.word	0x0806001c

08081230 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8081230:	b508      	push	{r3, lr}
 8081232:	4b02      	ldr	r3, [pc, #8]	; (808123c <HAL_USB_USART_Flush_Data+0xc>)
 8081234:	681b      	ldr	r3, [r3, #0]
 8081236:	6a1b      	ldr	r3, [r3, #32]
 8081238:	9301      	str	r3, [sp, #4]
 808123a:	bd08      	pop	{r3, pc}
 808123c:	0806001c 	.word	0x0806001c

08081240 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8081240:	b508      	push	{r3, lr}
 8081242:	4b02      	ldr	r3, [pc, #8]	; (808124c <system_mode+0xc>)
 8081244:	681b      	ldr	r3, [r3, #0]
 8081246:	681b      	ldr	r3, [r3, #0]
 8081248:	9301      	str	r3, [sp, #4]
 808124a:	bd08      	pop	{r3, pc}
 808124c:	080401a4 	.word	0x080401a4

08081250 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8081250:	b508      	push	{r3, lr}
 8081252:	4b02      	ldr	r3, [pc, #8]	; (808125c <set_system_mode+0xc>)
 8081254:	681b      	ldr	r3, [r3, #0]
 8081256:	685b      	ldr	r3, [r3, #4]
 8081258:	9301      	str	r3, [sp, #4]
 808125a:	bd08      	pop	{r3, pc}
 808125c:	080401a4 	.word	0x080401a4

08081260 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8081260:	b508      	push	{r3, lr}
 8081262:	4b02      	ldr	r3, [pc, #8]	; (808126c <system_delay_ms+0xc>)
 8081264:	681b      	ldr	r3, [r3, #0]
 8081266:	695b      	ldr	r3, [r3, #20]
 8081268:	9301      	str	r3, [sp, #4]
 808126a:	bd08      	pop	{r3, pc}
 808126c:	080401a4 	.word	0x080401a4

08081270 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
 8081270:	b508      	push	{r3, lr}
 8081272:	4b02      	ldr	r3, [pc, #8]	; (808127c <system_sleep+0xc>)
 8081274:	681b      	ldr	r3, [r3, #0]
 8081276:	699b      	ldr	r3, [r3, #24]
 8081278:	9301      	str	r3, [sp, #4]
 808127a:	bd08      	pop	{r3, pc}
 808127c:	080401a4 	.word	0x080401a4

08081280 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8081280:	b508      	push	{r3, lr}
 8081282:	4b02      	ldr	r3, [pc, #8]	; (808128c <system_thread_set_state+0xc>)
 8081284:	681b      	ldr	r3, [r3, #0]
 8081286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081288:	9301      	str	r3, [sp, #4]
 808128a:	bd08      	pop	{r3, pc}
 808128c:	080401a4 	.word	0x080401a4

08081290 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8081290:	b508      	push	{r3, lr}
 8081292:	4b02      	ldr	r3, [pc, #8]	; (808129c <application_thread_current+0xc>)
 8081294:	681b      	ldr	r3, [r3, #0]
 8081296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081298:	9301      	str	r3, [sp, #4]
 808129a:	bd08      	pop	{r3, pc}
 808129c:	080401a4 	.word	0x080401a4

080812a0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80812a0:	b508      	push	{r3, lr}
 80812a2:	4b02      	ldr	r3, [pc, #8]	; (80812ac <application_thread_invoke+0xc>)
 80812a4:	681b      	ldr	r3, [r3, #0]
 80812a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80812a8:	9301      	str	r3, [sp, #4]
 80812aa:	bd08      	pop	{r3, pc}
 80812ac:	080401a4 	.word	0x080401a4

080812b0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80812b0:	b508      	push	{r3, lr}
 80812b2:	4b02      	ldr	r3, [pc, #8]	; (80812bc <system_thread_get_state+0xc>)
 80812b4:	681b      	ldr	r3, [r3, #0]
 80812b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80812b8:	9301      	str	r3, [sp, #4]
 80812ba:	bd08      	pop	{r3, pc}
 80812bc:	080401a4 	.word	0x080401a4

080812c0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80812c0:	b508      	push	{r3, lr}
 80812c2:	4b03      	ldr	r3, [pc, #12]	; (80812d0 <system_ctrl_set_app_request_handler+0x10>)
 80812c4:	681b      	ldr	r3, [r3, #0]
 80812c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80812ca:	9301      	str	r3, [sp, #4]
 80812cc:	bd08      	pop	{r3, pc}
 80812ce:	0000      	.short	0x0000
 80812d0:	080401a4 	.word	0x080401a4

080812d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80812d4:	b508      	push	{r3, lr}
 80812d6:	4b03      	ldr	r3, [pc, #12]	; (80812e4 <system_ctrl_set_result+0x10>)
 80812d8:	681b      	ldr	r3, [r3, #0]
 80812da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80812de:	9301      	str	r3, [sp, #4]
 80812e0:	bd08      	pop	{r3, pc}
 80812e2:	0000      	.short	0x0000
 80812e4:	080401a4 	.word	0x080401a4

080812e8 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80812e8:	b508      	push	{r3, lr}
 80812ea:	4b02      	ldr	r3, [pc, #8]	; (80812f4 <spark_variable+0xc>)
 80812ec:	681b      	ldr	r3, [r3, #0]
 80812ee:	681b      	ldr	r3, [r3, #0]
 80812f0:	9301      	str	r3, [sp, #4]
 80812f2:	bd08      	pop	{r3, pc}
 80812f4:	080401cc 	.word	0x080401cc

080812f8 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80812f8:	b508      	push	{r3, lr}
 80812fa:	4b02      	ldr	r3, [pc, #8]	; (8081304 <spark_function+0xc>)
 80812fc:	681b      	ldr	r3, [r3, #0]
 80812fe:	685b      	ldr	r3, [r3, #4]
 8081300:	9301      	str	r3, [sp, #4]
 8081302:	bd08      	pop	{r3, pc}
 8081304:	080401cc 	.word	0x080401cc

08081308 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8081308:	b508      	push	{r3, lr}
 808130a:	4b02      	ldr	r3, [pc, #8]	; (8081314 <spark_process+0xc>)
 808130c:	681b      	ldr	r3, [r3, #0]
 808130e:	689b      	ldr	r3, [r3, #8]
 8081310:	9301      	str	r3, [sp, #4]
 8081312:	bd08      	pop	{r3, pc}
 8081314:	080401cc 	.word	0x080401cc

08081318 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8081318:	b508      	push	{r3, lr}
 808131a:	4b02      	ldr	r3, [pc, #8]	; (8081324 <spark_cloud_flag_connect+0xc>)
 808131c:	681b      	ldr	r3, [r3, #0]
 808131e:	68db      	ldr	r3, [r3, #12]
 8081320:	9301      	str	r3, [sp, #4]
 8081322:	bd08      	pop	{r3, pc}
 8081324:	080401cc 	.word	0x080401cc

08081328 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
 8081328:	b508      	push	{r3, lr}
 808132a:	4b02      	ldr	r3, [pc, #8]	; (8081334 <spark_cloud_flag_disconnect+0xc>)
 808132c:	681b      	ldr	r3, [r3, #0]
 808132e:	691b      	ldr	r3, [r3, #16]
 8081330:	9301      	str	r3, [sp, #4]
 8081332:	bd08      	pop	{r3, pc}
 8081334:	080401cc 	.word	0x080401cc

08081338 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8081338:	b508      	push	{r3, lr}
 808133a:	4b02      	ldr	r3, [pc, #8]	; (8081344 <spark_cloud_flag_connected+0xc>)
 808133c:	681b      	ldr	r3, [r3, #0]
 808133e:	695b      	ldr	r3, [r3, #20]
 8081340:	9301      	str	r3, [sp, #4]
 8081342:	bd08      	pop	{r3, pc}
 8081344:	080401cc 	.word	0x080401cc

08081348 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 8081348:	b508      	push	{r3, lr}
 808134a:	4b02      	ldr	r3, [pc, #8]	; (8081354 <spark_deviceID+0xc>)
 808134c:	681b      	ldr	r3, [r3, #0]
 808134e:	69db      	ldr	r3, [r3, #28]
 8081350:	9301      	str	r3, [sp, #4]
 8081352:	bd08      	pop	{r3, pc}
 8081354:	080401cc 	.word	0x080401cc

08081358 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8081358:	b508      	push	{r3, lr}
 808135a:	4b02      	ldr	r3, [pc, #8]	; (8081364 <spark_send_event+0xc>)
 808135c:	681b      	ldr	r3, [r3, #0]
 808135e:	6a1b      	ldr	r3, [r3, #32]
 8081360:	9301      	str	r3, [sp, #4]
 8081362:	bd08      	pop	{r3, pc}
 8081364:	080401cc 	.word	0x080401cc

08081368 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 8081368:	b508      	push	{r3, lr}
 808136a:	4b02      	ldr	r3, [pc, #8]	; (8081374 <spark_subscribe+0xc>)
 808136c:	681b      	ldr	r3, [r3, #0]
 808136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081370:	9301      	str	r3, [sp, #4]
 8081372:	bd08      	pop	{r3, pc}
 8081374:	080401cc 	.word	0x080401cc

08081378 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 8081378:	b508      	push	{r3, lr}
 808137a:	4b02      	ldr	r3, [pc, #8]	; (8081384 <spark_sync_time+0xc>)
 808137c:	681b      	ldr	r3, [r3, #0]
 808137e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081380:	9301      	str	r3, [sp, #4]
 8081382:	bd08      	pop	{r3, pc}
 8081384:	080401cc 	.word	0x080401cc

08081388 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8081388:	b508      	push	{r3, lr}
 808138a:	4b02      	ldr	r3, [pc, #8]	; (8081394 <spark_sync_time_pending+0xc>)
 808138c:	681b      	ldr	r3, [r3, #0]
 808138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081390:	9301      	str	r3, [sp, #4]
 8081392:	bd08      	pop	{r3, pc}
 8081394:	080401cc 	.word	0x080401cc

08081398 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8081398:	b508      	push	{r3, lr}
 808139a:	4b02      	ldr	r3, [pc, #8]	; (80813a4 <spark_set_random_seed_from_cloud_handler+0xc>)
 808139c:	681b      	ldr	r3, [r3, #0]
 808139e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80813a0:	9301      	str	r3, [sp, #4]
 80813a2:	bd08      	pop	{r3, pc}
 80813a4:	080401cc 	.word	0x080401cc

080813a8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80813a8:	b508      	push	{r3, lr}
 80813aa:	4b02      	ldr	r3, [pc, #8]	; (80813b4 <network_connect+0xc>)
 80813ac:	681b      	ldr	r3, [r3, #0]
 80813ae:	685b      	ldr	r3, [r3, #4]
 80813b0:	9301      	str	r3, [sp, #4]
 80813b2:	bd08      	pop	{r3, pc}
 80813b4:	080401c8 	.word	0x080401c8

080813b8 <network_ready>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80813b8:	b508      	push	{r3, lr}
 80813ba:	4b02      	ldr	r3, [pc, #8]	; (80813c4 <network_ready+0xc>)
 80813bc:	681b      	ldr	r3, [r3, #0]
 80813be:	691b      	ldr	r3, [r3, #16]
 80813c0:	9301      	str	r3, [sp, #4]
 80813c2:	bd08      	pop	{r3, pc}
 80813c4:	080401c8 	.word	0x080401c8

080813c8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80813c8:	b508      	push	{r3, lr}
 80813ca:	4b02      	ldr	r3, [pc, #8]	; (80813d4 <network_on+0xc>)
 80813cc:	681b      	ldr	r3, [r3, #0]
 80813ce:	695b      	ldr	r3, [r3, #20]
 80813d0:	9301      	str	r3, [sp, #4]
 80813d2:	bd08      	pop	{r3, pc}
 80813d4:	080401c8 	.word	0x080401c8

080813d8 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80813d8:	b508      	push	{r3, lr}
 80813da:	4b02      	ldr	r3, [pc, #8]	; (80813e4 <malloc+0xc>)
 80813dc:	681b      	ldr	r3, [r3, #0]
 80813de:	681b      	ldr	r3, [r3, #0]
 80813e0:	9301      	str	r3, [sp, #4]
 80813e2:	bd08      	pop	{r3, pc}
 80813e4:	080401a0 	.word	0x080401a0

080813e8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80813e8:	b508      	push	{r3, lr}
 80813ea:	4b02      	ldr	r3, [pc, #8]	; (80813f4 <free+0xc>)
 80813ec:	681b      	ldr	r3, [r3, #0]
 80813ee:	685b      	ldr	r3, [r3, #4]
 80813f0:	9301      	str	r3, [sp, #4]
 80813f2:	bd08      	pop	{r3, pc}
 80813f4:	080401a0 	.word	0x080401a0

080813f8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80813f8:	b508      	push	{r3, lr}
 80813fa:	4b02      	ldr	r3, [pc, #8]	; (8081404 <realloc+0xc>)
 80813fc:	681b      	ldr	r3, [r3, #0]
 80813fe:	689b      	ldr	r3, [r3, #8]
 8081400:	9301      	str	r3, [sp, #4]
 8081402:	bd08      	pop	{r3, pc}
 8081404:	080401a0 	.word	0x080401a0

08081408 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8081408:	b508      	push	{r3, lr}
 808140a:	4b02      	ldr	r3, [pc, #8]	; (8081414 <siprintf+0xc>)
 808140c:	681b      	ldr	r3, [r3, #0]
 808140e:	691b      	ldr	r3, [r3, #16]
 8081410:	9301      	str	r3, [sp, #4]
 8081412:	bd08      	pop	{r3, pc}
 8081414:	080401a0 	.word	0x080401a0

08081418 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 8081418:	b508      	push	{r3, lr}
 808141a:	4b02      	ldr	r3, [pc, #8]	; (8081424 <siscanf+0xc>)
 808141c:	681b      	ldr	r3, [r3, #0]
 808141e:	699b      	ldr	r3, [r3, #24]
 8081420:	9301      	str	r3, [sp, #4]
 8081422:	bd08      	pop	{r3, pc}
 8081424:	080401a0 	.word	0x080401a0

08081428 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8081428:	b508      	push	{r3, lr}
 808142a:	4b02      	ldr	r3, [pc, #8]	; (8081434 <snprintf+0xc>)
 808142c:	681b      	ldr	r3, [r3, #0]
 808142e:	69db      	ldr	r3, [r3, #28]
 8081430:	9301      	str	r3, [sp, #4]
 8081432:	bd08      	pop	{r3, pc}
 8081434:	080401a0 	.word	0x080401a0

08081438 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8081438:	b508      	push	{r3, lr}
 808143a:	4b02      	ldr	r3, [pc, #8]	; (8081444 <abort+0xc>)
 808143c:	681b      	ldr	r3, [r3, #0]
 808143e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081440:	9301      	str	r3, [sp, #4]
 8081442:	bd08      	pop	{r3, pc}
 8081444:	080401a0 	.word	0x080401a0

08081448 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8081448:	b508      	push	{r3, lr}
 808144a:	4b02      	ldr	r3, [pc, #8]	; (8081454 <_malloc_r+0xc>)
 808144c:	681b      	ldr	r3, [r3, #0]
 808144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081450:	9301      	str	r3, [sp, #4]
 8081452:	bd08      	pop	{r3, pc}
 8081454:	080401a0 	.word	0x080401a0

08081458 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8081458:	2100      	movs	r1, #0
 808145a:	f7ff bf01 	b.w	8081260 <system_delay_ms>

0808145e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 808145e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081460:	6883      	ldr	r3, [r0, #8]
 8081462:	4604      	mov	r4, r0
 8081464:	b90b      	cbnz	r3, 808146a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8081466:	f001 f99c 	bl	80827a2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808146a:	68c3      	ldr	r3, [r0, #12]
 808146c:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 808146e:	68a3      	ldr	r3, [r4, #8]
 8081470:	b11b      	cbz	r3, 808147a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081472:	2203      	movs	r2, #3
 8081474:	4621      	mov	r1, r4
 8081476:	4620      	mov	r0, r4
 8081478:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808147a:	4620      	mov	r0, r4
}
 808147c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8081480:	f7fe be0d 	b.w	808009e <_ZdlPv>

08081484 <_ZN5spark13CellularClass4RSSIEv>:

#include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 8081484:	b570      	push	{r4, r5, r6, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
 8081486:	4b1b      	ldr	r3, [pc, #108]	; (80814f4 <_ZN5spark13CellularClass4RSSIEv+0x70>)
 8081488:	2500      	movs	r5, #0
 808148a:	6003      	str	r3, [r0, #0]
 808148c:	2618      	movs	r6, #24
 808148e:	3328      	adds	r3, #40	; 0x28
 8081490:	b088      	sub	sp, #32
 8081492:	6043      	str	r3, [r0, #4]
 8081494:	6085      	str	r5, [r0, #8]
 8081496:	60c5      	str	r5, [r0, #12]
 8081498:	4632      	mov	r2, r6
 808149a:	4629      	mov	r1, r5
 808149c:	4604      	mov	r4, r0
 808149e:	3010      	adds	r0, #16
 80814a0:	f002 fb57 	bl	8083b52 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 80814a4:	462a      	mov	r2, r5
 80814a6:	4629      	mov	r1, r5
 80814a8:	4628      	mov	r0, r5
 80814aa:	f7ff ff85 	bl	80813b8 <network_ready>
 80814ae:	b908      	cbnz	r0, 80814b4 <_ZN5spark13CellularClass4RSSIEv+0x30>
            sig.rssi = 0;
 80814b0:	60a0      	str	r0, [r4, #8]
            return sig;
 80814b2:	e01b      	b.n	80814ec <_ZN5spark13CellularClass4RSSIEv+0x68>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
 80814b4:	4629      	mov	r1, r5
 80814b6:	4632      	mov	r2, r6
 80814b8:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
 80814ba:	9500      	str	r5, [sp, #0]
 80814bc:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
 80814be:	f002 fb48 	bl	8083b52 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 80814c2:	a902      	add	r1, sp, #8
 80814c4:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
 80814c6:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 80814ca:	f7ff fd49 	bl	8080f60 <cellular_signal>
 80814ce:	b110      	cbz	r0, 80814d6 <_ZN5spark13CellularClass4RSSIEv+0x52>
            sig.rssi = 1;
 80814d0:	2301      	movs	r3, #1
 80814d2:	60a3      	str	r3, [r4, #8]
            return sig;
 80814d4:	e00a      	b.n	80814ec <_ZN5spark13CellularClass4RSSIEv+0x68>
        }
        sig.rssi = sig_hal.rssi;
 80814d6:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
 80814d8:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
 80814da:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
 80814dc:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
 80814de:	b90b      	cbnz	r3, 80814e4 <_ZN5spark13CellularClass4RSSIEv+0x60>
            sig.rssi = 2;
 80814e0:	2302      	movs	r3, #2
 80814e2:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
 80814e4:	a902      	add	r1, sp, #8
 80814e6:	4620      	mov	r0, r4
 80814e8:	f000 f89c 	bl	8081624 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
 80814ec:	4620      	mov	r0, r4
 80814ee:	b008      	add	sp, #32
 80814f0:	bd70      	pop	{r4, r5, r6, pc}
 80814f2:	bf00      	nop
 80814f4:	080846fc 	.word	0x080846fc

080814f8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    NetworkClass& Network = Cellular;
}
 80814f8:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 80814fa:	4c0b      	ldr	r4, [pc, #44]	; (8081528 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x30>)
 80814fc:	2528      	movs	r5, #40	; 0x28
 80814fe:	462a      	mov	r2, r5
 8081500:	2100      	movs	r1, #0
 8081502:	4620      	mov	r0, r4
 8081504:	f002 fb25 	bl	8083b52 <memset>
        cid = -1;
 8081508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 808150c:	6063      	str	r3, [r4, #4]
        size = sizeof(*this);
 808150e:	8025      	strh	r5, [r4, #0]
#include "inet_hal.h"
#include "spark_wiring_cellular_printable.h"

namespace spark {

class CellularClass : public NetworkClass
 8081510:	4c06      	ldr	r4, [pc, #24]	; (808152c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 8081512:	4b07      	ldr	r3, [pc, #28]	; (8081530 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 8081514:	4620      	mov	r0, r4
    char imei[16];
    int dev;

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 8081516:	252c      	movs	r5, #44	; 0x2c
 8081518:	f840 3b04 	str.w	r3, [r0], #4
 808151c:	462a      	mov	r2, r5
 808151e:	2100      	movs	r1, #0
 8081520:	f002 fb17 	bl	8083b52 <memset>
        size = sizeof(*this);
 8081524:	80a5      	strh	r5, [r4, #4]
 8081526:	bd38      	pop	{r3, r4, r5, pc}
 8081528:	20000610 	.word	0x20000610
 808152c:	200005e0 	.word	0x200005e0
 8081530:	080846f0 	.word	0x080846f0

08081534 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8081534:	4770      	bx	lr

08081536 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 8081536:	7d00      	ldrb	r0, [r0, #20]
 8081538:	4770      	bx	lr
	...

0808153c <_ZNK14CellularSignal16getStrengthValueEv>:

    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
 808153c:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 808153e:	7d03      	ldrb	r3, [r0, #20]
 8081540:	b11b      	cbz	r3, 808154a <_ZNK14CellularSignal16getStrengthValueEv+0xe>
 8081542:	6980      	ldr	r0, [r0, #24]
 8081544:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8081548:	d101      	bne.n	808154e <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
 808154a:	2000      	movs	r0, #0
 808154c:	bd08      	pop	{r3, pc}
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
 808154e:	f001 ff6f 	bl	8083430 <__aeabi_i2f>
 8081552:	4902      	ldr	r1, [pc, #8]	; (808155c <_ZNK14CellularSignal16getStrengthValueEv+0x20>)
 8081554:	f002 f874 	bl	8083640 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8081558:	bd08      	pop	{r3, pc}
 808155a:	bf00      	nop
 808155c:	42c80000 	.word	0x42c80000

08081560 <_ZNK14CellularSignal15getQualityValueEv>:

    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
 8081560:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 8081562:	7d03      	ldrb	r3, [r0, #20]
 8081564:	b11b      	cbz	r3, 808156e <_ZNK14CellularSignal15getQualityValueEv+0xe>
 8081566:	6a00      	ldr	r0, [r0, #32]
 8081568:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 808156c:	d101      	bne.n	8081572 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
 808156e:	2000      	movs	r0, #0
 8081570:	bd08      	pop	{r3, pc}
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
 8081572:	f001 ff5d 	bl	8083430 <__aeabi_i2f>
 8081576:	4902      	ldr	r1, [pc, #8]	; (8081580 <_ZNK14CellularSignal15getQualityValueEv+0x20>)
 8081578:	f002 f862 	bl	8083640 <__aeabi_fdiv>
    }

    return 0.0f;
}
 808157c:	bd08      	pop	{r3, pc}
 808157e:	bf00      	nop
 8081580:	42c80000 	.word	0x42c80000

08081584 <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
 8081584:	b570      	push	{r4, r5, r6, lr}
 8081586:	460d      	mov	r5, r1
 8081588:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 808158a:	220a      	movs	r2, #10
 808158c:	6881      	ldr	r1, [r0, #8]
 808158e:	4628      	mov	r0, r5
 8081590:	f000 fc93 	bl	8081eba <_ZN5Print5printEii>
    n += p.print(',');
 8081594:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8081596:	4604      	mov	r4, r0
    n += p.print(',');
 8081598:	4628      	mov	r0, r5
 808159a:	f000 fc27 	bl	8081dec <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
 808159e:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
 80815a0:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
 80815a2:	68f1      	ldr	r1, [r6, #12]
 80815a4:	4628      	mov	r0, r5
 80815a6:	f000 fc88 	bl	8081eba <_ZN5Print5printEii>
    return n;
}
 80815aa:	4420      	add	r0, r4
 80815ac:	bd70      	pop	{r4, r5, r6, pc}

080815ae <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 80815ae:	f1a0 0004 	sub.w	r0, r0, #4
 80815b2:	f7ff bfe7 	b.w	8081584 <_ZNK14CellularSignal7printToER5Print>

080815b6 <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 80815b6:	b510      	push	{r4, lr}
 80815b8:	4604      	mov	r4, r0
 80815ba:	f7fe fd70 	bl	808009e <_ZdlPv>
 80815be:	4620      	mov	r0, r4
 80815c0:	bd10      	pop	{r4, pc}
	...

080815c4 <_ZNK14CellularSignal10getQualityEv>:

    return 0.0f;
}

float CellularSignal::getQuality() const
{
 80815c4:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 80815c6:	7d03      	ldrb	r3, [r0, #20]
 80815c8:	b15b      	cbz	r3, 80815e2 <_ZNK14CellularSignal10getQualityEv+0x1e>
 80815ca:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80815cc:	2800      	cmp	r0, #0
 80815ce:	db08      	blt.n	80815e2 <_ZNK14CellularSignal10getQualityEv+0x1e>
        return (float)sig_.quality / 65535.0f * 100.0f;
 80815d0:	f001 ff2e 	bl	8083430 <__aeabi_i2f>
 80815d4:	4904      	ldr	r1, [pc, #16]	; (80815e8 <_ZNK14CellularSignal10getQualityEv+0x24>)
 80815d6:	f002 f833 	bl	8083640 <__aeabi_fdiv>
 80815da:	4904      	ldr	r1, [pc, #16]	; (80815ec <_ZNK14CellularSignal10getQualityEv+0x28>)
 80815dc:	f001 ff7c 	bl	80834d8 <__aeabi_fmul>
 80815e0:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 80815e2:	4803      	ldr	r0, [pc, #12]	; (80815f0 <_ZNK14CellularSignal10getQualityEv+0x2c>)
}
 80815e4:	bd08      	pop	{r3, pc}
 80815e6:	bf00      	nop
 80815e8:	477fff00 	.word	0x477fff00
 80815ec:	42c80000 	.word	0x42c80000
 80815f0:	bf800000 	.word	0xbf800000

080815f4 <_ZNK14CellularSignal11getStrengthEv>:
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
 80815f4:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 80815f6:	7d03      	ldrb	r3, [r0, #20]
 80815f8:	b15b      	cbz	r3, 8081612 <_ZNK14CellularSignal11getStrengthEv+0x1e>
 80815fa:	69c0      	ldr	r0, [r0, #28]
 80815fc:	2800      	cmp	r0, #0
 80815fe:	db08      	blt.n	8081612 <_ZNK14CellularSignal11getStrengthEv+0x1e>
        return (float)sig_.strength / 65535.0f * 100.0f;
 8081600:	f001 ff16 	bl	8083430 <__aeabi_i2f>
 8081604:	4904      	ldr	r1, [pc, #16]	; (8081618 <_ZNK14CellularSignal11getStrengthEv+0x24>)
 8081606:	f002 f81b 	bl	8083640 <__aeabi_fdiv>
 808160a:	4904      	ldr	r1, [pc, #16]	; (808161c <_ZNK14CellularSignal11getStrengthEv+0x28>)
 808160c:	f001 ff64 	bl	80834d8 <__aeabi_fmul>
 8081610:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8081612:	4803      	ldr	r0, [pc, #12]	; (8081620 <_ZNK14CellularSignal11getStrengthEv+0x2c>)
}
 8081614:	bd08      	pop	{r3, pc}
 8081616:	bf00      	nop
 8081618:	477fff00 	.word	0x477fff00
 808161c:	42c80000 	.word	0x42c80000
 8081620:	bf800000 	.word	0xbf800000

08081624 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
 8081624:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 8081626:	460d      	mov	r5, r1
 8081628:	f100 0410 	add.w	r4, r0, #16
 808162c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808162e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8081630:	e895 0003 	ldmia.w	r5, {r0, r1}
 8081634:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
 8081638:	2001      	movs	r0, #1
 808163a:	bd30      	pop	{r4, r5, pc}

0808163c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808163c:	4770      	bx	lr

0808163e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 808163e:	2000      	movs	r0, #0
 8081640:	4770      	bx	lr

08081642 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8081642:	b510      	push	{r4, lr}
 8081644:	4604      	mov	r4, r0
 8081646:	f7fe fd2a 	bl	808009e <_ZdlPv>
 808164a:	4620      	mov	r0, r4
 808164c:	bd10      	pop	{r4, pc}

0808164e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 808164e:	b508      	push	{r3, lr}
      { delete this; }
 8081650:	b108      	cbz	r0, 8081656 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8081652:	f7ff fff6 	bl	8081642 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8081656:	bd08      	pop	{r3, pc}

08081658 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8081658:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 808165a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 808165c:	4604      	mov	r4, r0
    {
      if (_M_manager)
 808165e:	b113      	cbz	r3, 8081666 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081660:	2203      	movs	r2, #3
 8081662:	4601      	mov	r1, r0
 8081664:	4798      	blx	r3
    }
 8081666:	4620      	mov	r0, r4
 8081668:	bd10      	pop	{r4, pc}

0808166a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 808166a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 808166c:	68c4      	ldr	r4, [r0, #12]
 808166e:	b1d4      	cbz	r4, 80816a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8081670:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8081672:	2b02      	cmp	r3, #2
 8081674:	d102      	bne.n	808167c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8081676:	68e0      	ldr	r0, [r4, #12]
 8081678:	f7ff feb6 	bl	80813e8 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 808167c:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 808167e:	b12d      	cbz	r5, 808168c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081680:	4628      	mov	r0, r5
 8081682:	f7ff ffe9 	bl	8081658 <_ZNSt14_Function_baseD1Ev>
 8081686:	4628      	mov	r0, r5
 8081688:	f7fe fd09 	bl	808009e <_ZdlPv>
 808168c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 808168e:	b12d      	cbz	r5, 808169c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
 8081690:	4628      	mov	r0, r5
 8081692:	f7ff ffe1 	bl	8081658 <_ZNSt14_Function_baseD1Ev>
 8081696:	4628      	mov	r0, r5
 8081698:	f7fe fd01 	bl	808009e <_ZdlPv>
 808169c:	4620      	mov	r0, r4
 808169e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80816a2:	f7fe bcfc 	b.w	808009e <_ZdlPv>
 80816a6:	bd38      	pop	{r3, r4, r5, pc}

080816a8 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80816a8:	b510      	push	{r4, lr}
 80816aa:	b088      	sub	sp, #32
 80816ac:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80816ae:	4668      	mov	r0, sp
 80816b0:	f000 fc80 	bl	8081fb4 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80816b4:	4669      	mov	r1, sp
 80816b6:	a804      	add	r0, sp, #16
 80816b8:	f000 fc9e 	bl	8081ff8 <_ZN6StringC1ERKS_>
 80816bc:	a804      	add	r0, sp, #16
 80816be:	47a0      	blx	r4
 80816c0:	4604      	mov	r4, r0
 80816c2:	a804      	add	r0, sp, #16
 80816c4:	f000 fc2f 	bl	8081f26 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80816c8:	4668      	mov	r0, sp
 80816ca:	f000 fc2c 	bl	8081f26 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80816ce:	4620      	mov	r0, r4
 80816d0:	b008      	add	sp, #32
 80816d2:	bd10      	pop	{r4, pc}

080816d4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80816d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80816d6:	4607      	mov	r7, r0
 80816d8:	460e      	mov	r6, r1
 80816da:	4615      	mov	r5, r2
 80816dc:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 80816de:	2410      	movs	r4, #16
 80816e0:	4622      	mov	r2, r4
 80816e2:	2100      	movs	r1, #0
 80816e4:	4668      	mov	r0, sp
 80816e6:	f002 fa34 	bl	8083b52 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80816ea:	2200      	movs	r2, #0
 80816ec:	4669      	mov	r1, sp
 80816ee:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 80816f0:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 80816f4:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80816f6:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80816f8:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80816fa:	f7ff fdfd 	bl	80812f8 <spark_function>
}
 80816fe:	b005      	add	sp, #20
 8081700:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081702 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8081702:	b513      	push	{r0, r1, r4, lr}
 8081704:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8081706:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 808170a:	2300      	movs	r3, #0
 808170c:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 808170e:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8081710:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8081712:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081714:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8081716:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8081718:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808171a:	f7fe ff6f 	bl	80805fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808171e:	4620      	mov	r0, r4
 8081720:	b002      	add	sp, #8
 8081722:	bd10      	pop	{r4, pc}

08081724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8081724:	680b      	ldr	r3, [r1, #0]
 8081726:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8081728:	b113      	cbz	r3, 8081730 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 808172a:	685a      	ldr	r2, [r3, #4]
 808172c:	3201      	adds	r2, #1
 808172e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8081730:	4770      	bx	lr

08081732 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8081732:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081734:	460c      	mov	r4, r1
 8081736:	4606      	mov	r6, r0
 8081738:	460f      	mov	r7, r1
 808173a:	f854 3b04 	ldr.w	r3, [r4], #4
 808173e:	ad02      	add	r5, sp, #8
 8081740:	f845 3d08 	str.w	r3, [r5, #-8]!
 8081744:	4621      	mov	r1, r4
 8081746:	a801      	add	r0, sp, #4
 8081748:	f7ff ffec 	bl	8081724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 808174c:	4629      	mov	r1, r5
 808174e:	4630      	mov	r0, r6
 8081750:	f7ff ffd7 	bl	8081702 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081754:	a801      	add	r0, sp, #4
 8081756:	f7fe ff51 	bl	80805fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808175a:	4620      	mov	r0, r4
 808175c:	f7fe ff4e 	bl	80805fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8081760:	4638      	mov	r0, r7
 8081762:	f7fe fc9c 	bl	808009e <_ZdlPv>
        return p;
    }
 8081766:	4630      	mov	r0, r6
 8081768:	b003      	add	sp, #12
 808176a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808176c <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 808176c:	b513      	push	{r0, r1, r4, lr}
 808176e:	460b      	mov	r3, r1
 8081770:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081772:	c803      	ldmia	r0, {r0, r1}
 8081774:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8081778:	e893 0003 	ldmia.w	r3, {r0, r1}
 808177c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8081780:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8081784:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8081788:	b002      	add	sp, #8
 808178a:	bd10      	pop	{r4, pc}

0808178c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808178c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 808178e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081790:	b90a      	cbnz	r2, 8081796 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8081792:	f001 f806 	bl	80827a2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081796:	68c3      	ldr	r3, [r0, #12]
    }
 8081798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808179c:	4718      	bx	r3

0808179e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808179e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80817a0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80817a2:	f100 0110 	add.w	r1, r0, #16
 80817a6:	f7ff fff1 	bl	808178c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80817aa:	bd08      	pop	{r3, pc}

080817ac <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80817ac:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80817ae:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80817b0:	b90a      	cbnz	r2, 80817b6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80817b2:	f000 fff6 	bl	80827a2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80817b6:	68c3      	ldr	r3, [r0, #12]
    }
 80817b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80817bc:	4718      	bx	r3

080817be <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80817be:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80817c0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80817c2:	f100 0110 	add.w	r1, r0, #16
 80817c6:	f7ff fff1 	bl	80817ac <_ZNKSt8functionIFvRKbEEclES1_>
 80817ca:	bd08      	pop	{r3, pc}

080817cc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80817cc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80817ce:	2300      	movs	r3, #0
 80817d0:	6083      	str	r3, [r0, #8]
 80817d2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80817d4:	4604      	mov	r4, r0
 80817d6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80817d8:	b12b      	cbz	r3, 80817e6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80817da:	2202      	movs	r2, #2
 80817dc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80817de:	68eb      	ldr	r3, [r5, #12]
 80817e0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80817e2:	68ab      	ldr	r3, [r5, #8]
 80817e4:	60a3      	str	r3, [r4, #8]
	}
    }
 80817e6:	4620      	mov	r0, r4
 80817e8:	bd38      	pop	{r3, r4, r5, pc}
	...

080817ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80817ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 80817f0:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80817f4:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80817f6:	f04f 0002 	mov.w	r0, #2
 80817fa:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80817fc:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8081800:	808b      	strh	r3, [r1, #4]
 8081802:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081804:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8081806:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 808180a:	600b      	str	r3, [r1, #0]
 808180c:	e8d4 1f4f 	ldrexb	r1, [r4]
 8081810:	4299      	cmp	r1, r3
 8081812:	d103      	bne.n	808181c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 8081814:	e8c4 0f45 	strexb	r5, r0, [r4]
 8081818:	2d00      	cmp	r5, #0
 808181a:	d1f7      	bne.n	808180c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 808181c:	d002      	beq.n	8081824 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 808181e:	f88d 1000 	strb.w	r1, [sp]
 8081822:	e06b      	b.n	80818fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 8081824:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081828:	bf1c      	itt	ne
 808182a:	60e7      	strne	r7, [r4, #12]
 808182c:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 808182e:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 8081832:	bf18      	it	ne
 8081834:	461f      	movne	r7, r3
 8081836:	2301      	movs	r3, #1
 8081838:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 808183a:	f3bf 8f5f 	dmb	sy
 808183e:	f104 0308 	add.w	r3, r4, #8
 8081842:	2000      	movs	r0, #0
 8081844:	e853 6f00 	ldrex	r6, [r3]
 8081848:	e843 0200 	strex	r2, r0, [r3]
 808184c:	2a00      	cmp	r2, #0
 808184e:	d1f9      	bne.n	8081844 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 8081850:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8081854:	2e00      	cmp	r6, #0
 8081856:	d051      	beq.n	80818fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8081858:	f7ff fd1a 	bl	8081290 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 808185c:	b120      	cbz	r0, 8081868 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808185e:	4629      	mov	r1, r5
 8081860:	4630      	mov	r0, r6
 8081862:	f7ff ff93 	bl	808178c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8081866:	e043      	b.n	80818f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8081868:	4631      	mov	r1, r6
 808186a:	4668      	mov	r0, sp
 808186c:	f7ff ffae 	bl	80817cc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8081870:	68e0      	ldr	r0, [r4, #12]
 8081872:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8081876:	b108      	cbz	r0, 808187c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 8081878:	f002 f9ae 	bl	8083bd8 <strdup>
 808187c:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808187e:	2010      	movs	r0, #16
 8081880:	f8ad 5014 	strh.w	r5, [sp, #20]
 8081884:	f7fe fc09 	bl	808009a <_Znwj>
 8081888:	4605      	mov	r5, r0
 808188a:	b330      	cbz	r0, 80818da <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808188c:	f04f 0800 	mov.w	r8, #0
 8081890:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081894:	2018      	movs	r0, #24
 8081896:	f7fe fc00 	bl	808009a <_Znwj>
 808189a:	4604      	mov	r4, r0
 808189c:	b1c0      	cbz	r0, 80818d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808189e:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80818a2:	4601      	mov	r1, r0
 80818a4:	4668      	mov	r0, sp
 80818a6:	f7ff ff61 	bl	808176c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80818aa:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80818ac:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80818ae:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80818b0:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80818b2:	9202      	str	r2, [sp, #8]
 80818b4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80818b6:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80818b8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80818bc:	9203      	str	r2, [sp, #12]
 80818be:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 80818c0:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80818c4:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80818c8:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80818ca:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80818ce:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80818d0:	4b0d      	ldr	r3, [pc, #52]	; (8081908 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80818d2:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80818d4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80818d6:	4b0d      	ldr	r3, [pc, #52]	; (808190c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
 80818d8:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80818da:	9804      	ldr	r0, [sp, #16]
 80818dc:	f7ff fd84 	bl	80813e8 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80818e0:	4668      	mov	r0, sp
 80818e2:	f7ff feb9 	bl	8081658 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80818e6:	2200      	movs	r2, #0
 80818e8:	4629      	mov	r1, r5
 80818ea:	4809      	ldr	r0, [pc, #36]	; (8081910 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 80818ec:	f7ff fcd8 	bl	80812a0 <application_thread_invoke>
 80818f0:	4630      	mov	r0, r6
 80818f2:	f7ff feb1 	bl	8081658 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80818f6:	4630      	mov	r0, r6
 80818f8:	f7fe fbd1 	bl	808009e <_ZdlPv>
 80818fc:	4638      	mov	r0, r7
 80818fe:	f7ff fd73 	bl	80813e8 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 8081902:	b006      	add	sp, #24
 8081904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081908:	0808179f 	.word	0x0808179f
 808190c:	080819fd 	.word	0x080819fd
 8081910:	0808145f 	.word	0x0808145f

08081914 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081918:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808191a:	ad07      	add	r5, sp, #28
 808191c:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081920:	4606      	mov	r6, r0
 8081922:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8081924:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8081926:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081928:	460f      	mov	r7, r1
 808192a:	4690      	mov	r8, r2
 808192c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8081930:	f8c5 b004 	str.w	fp, [r5, #4]
 8081934:	f8c5 b008 	str.w	fp, [r5, #8]
 8081938:	9307      	str	r3, [sp, #28]
 808193a:	f7fe fbae 	bl	808009a <_Znwj>
 808193e:	4604      	mov	r4, r0
 8081940:	b138      	cbz	r0, 8081952 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8081942:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8081946:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808194a:	f8c0 b004 	str.w	fp, [r0, #4]
 808194e:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8081952:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8081954:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8081956:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8081958:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808195a:	f7fe fb9e 	bl	808009a <_Znwj>
 808195e:	b128      	cbz	r0, 808196c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8081960:	2301      	movs	r3, #1
 8081962:	6043      	str	r3, [r0, #4]
 8081964:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8081966:	4b23      	ldr	r3, [pc, #140]	; (80819f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 8081968:	60c4      	str	r4, [r0, #12]
 808196a:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 808196c:	4b22      	ldr	r3, [pc, #136]	; (80819f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808196e:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8081970:	2008      	movs	r0, #8
 8081972:	9308      	str	r3, [sp, #32]
 8081974:	f7fe fb91 	bl	808009a <_Znwj>
 8081978:	4604      	mov	r4, r0
 808197a:	b128      	cbz	r0, 8081988 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 808197c:	9b03      	ldr	r3, [sp, #12]
 808197e:	a904      	add	r1, sp, #16
 8081980:	f840 3b04 	str.w	r3, [r0], #4
 8081984:	f7ff fece 	bl	8081724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8081988:	9500      	str	r5, [sp, #0]
 808198a:	fa5f f38a 	uxtb.w	r3, sl
 808198e:	464a      	mov	r2, r9
 8081990:	4641      	mov	r1, r8
 8081992:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8081994:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8081996:	f7ff fcdf 	bl	8081358 <spark_send_event>
 808199a:	b9b8      	cbnz	r0, 80819cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 808199c:	9b03      	ldr	r3, [sp, #12]
 808199e:	785b      	ldrb	r3, [r3, #1]
 80819a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80819a4:	b993      	cbnz	r3, 80819cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80819a6:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80819aa:	a905      	add	r1, sp, #20
 80819ac:	a803      	add	r0, sp, #12
 80819ae:	9205      	str	r2, [sp, #20]
 80819b0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80819b4:	f7ff ff1a 	bl	80817ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80819b8:	9805      	ldr	r0, [sp, #20]
 80819ba:	f7ff fd15 	bl	80813e8 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80819be:	a805      	add	r0, sp, #20
 80819c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80819c2:	f7ff feb6 	bl	8081732 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80819c6:	a806      	add	r0, sp, #24
 80819c8:	f7fe fe18 	bl	80805fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80819cc:	9b03      	ldr	r3, [sp, #12]
 80819ce:	a904      	add	r1, sp, #16
 80819d0:	a806      	add	r0, sp, #24
 80819d2:	9305      	str	r3, [sp, #20]
 80819d4:	f7ff fea6 	bl	8081724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80819d8:	a905      	add	r1, sp, #20
 80819da:	4630      	mov	r0, r6
 80819dc:	f7ff fe91 	bl	8081702 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80819e0:	a806      	add	r0, sp, #24
 80819e2:	f7fe fe0b 	bl	80805fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80819e6:	a804      	add	r0, sp, #16
 80819e8:	f7fe fe08 	bl	80805fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80819ec:	4630      	mov	r0, r6
 80819ee:	b00b      	add	sp, #44	; 0x2c
 80819f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80819f4:	08084730 	.word	0x08084730
 80819f8:	08081b65 	.word	0x08081b65

080819fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80819fc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80819fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081a00:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8081a02:	d006      	beq.n	8081a12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8081a04:	2a03      	cmp	r2, #3
 8081a06:	d017      	beq.n	8081a38 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8081a08:	2a01      	cmp	r2, #1
 8081a0a:	d120      	bne.n	8081a4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081a0c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8081a0e:	6003      	str	r3, [r0, #0]
	      break;
 8081a10:	e01d      	b.n	8081a4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081a12:	2018      	movs	r0, #24
 8081a14:	680e      	ldr	r6, [r1, #0]
 8081a16:	f7fe fb40 	bl	808009a <_Znwj>
 8081a1a:	4605      	mov	r5, r0
 8081a1c:	b150      	cbz	r0, 8081a34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8081a1e:	4631      	mov	r1, r6
 8081a20:	f7ff fed4 	bl	80817cc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8081a24:	6930      	ldr	r0, [r6, #16]
 8081a26:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8081a2a:	b108      	cbz	r0, 8081a30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8081a2c:	f002 f8d4 	bl	8083bd8 <strdup>
 8081a30:	6128      	str	r0, [r5, #16]
 8081a32:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081a34:	6025      	str	r5, [r4, #0]
 8081a36:	e00a      	b.n	8081a4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081a38:	6804      	ldr	r4, [r0, #0]
 8081a3a:	b144      	cbz	r4, 8081a4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8081a3c:	6920      	ldr	r0, [r4, #16]
 8081a3e:	f7ff fcd3 	bl	80813e8 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081a42:	4620      	mov	r0, r4
 8081a44:	f7ff fe08 	bl	8081658 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081a48:	4620      	mov	r0, r4
 8081a4a:	f7fe fb28 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8081a4e:	2000      	movs	r0, #0
 8081a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081a52 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081a52:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081a54:	2300      	movs	r3, #0
 8081a56:	6083      	str	r3, [r0, #8]
 8081a58:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081a5a:	4604      	mov	r4, r0
 8081a5c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8081a5e:	b12b      	cbz	r3, 8081a6c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081a60:	2202      	movs	r2, #2
 8081a62:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081a64:	68eb      	ldr	r3, [r5, #12]
 8081a66:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8081a68:	68ab      	ldr	r3, [r5, #8]
 8081a6a:	60a3      	str	r3, [r4, #8]
	}
    }
 8081a6c:	4620      	mov	r0, r4
 8081a6e:	bd38      	pop	{r3, r4, r5, pc}

08081a70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8081a70:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8081a72:	b570      	push	{r4, r5, r6, lr}
 8081a74:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8081a76:	d006      	beq.n	8081a86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8081a78:	2a03      	cmp	r2, #3
 8081a7a:	d011      	beq.n	8081aa0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8081a7c:	2a01      	cmp	r2, #1
 8081a7e:	d117      	bne.n	8081ab0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081a80:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8081a82:	6003      	str	r3, [r0, #0]
	      break;
 8081a84:	e014      	b.n	8081ab0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081a86:	2014      	movs	r0, #20
 8081a88:	680e      	ldr	r6, [r1, #0]
 8081a8a:	f7fe fb06 	bl	808009a <_Znwj>
 8081a8e:	4605      	mov	r5, r0
 8081a90:	b120      	cbz	r0, 8081a9c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8081a92:	4631      	mov	r1, r6
 8081a94:	f7ff ffdd 	bl	8081a52 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8081a98:	7c33      	ldrb	r3, [r6, #16]
 8081a9a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081a9c:	6025      	str	r5, [r4, #0]
 8081a9e:	e007      	b.n	8081ab0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081aa0:	6804      	ldr	r4, [r0, #0]
 8081aa2:	b12c      	cbz	r4, 8081ab0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081aa4:	4620      	mov	r0, r4
 8081aa6:	f7ff fdd7 	bl	8081658 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081aaa:	4620      	mov	r0, r4
 8081aac:	f7fe faf7 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8081ab0:	2000      	movs	r0, #0
 8081ab2:	bd70      	pop	{r4, r5, r6, pc}

08081ab4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8081ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081ab6:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8081ab8:	f3bf 8f5f 	dmb	sy
 8081abc:	b087      	sub	sp, #28
 8081abe:	2300      	movs	r3, #0
 8081ac0:	e850 6f00 	ldrex	r6, [r0]
 8081ac4:	e840 3200 	strex	r2, r3, [r0]
 8081ac8:	2a00      	cmp	r2, #0
 8081aca:	d1f9      	bne.n	8081ac0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8081acc:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8081ad0:	2e00      	cmp	r6, #0
 8081ad2:	d03e      	beq.n	8081b52 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8081ad4:	4618      	mov	r0, r3
 8081ad6:	f7ff fbdb 	bl	8081290 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8081ada:	4607      	mov	r7, r0
 8081adc:	b120      	cbz	r0, 8081ae8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8081ade:	4621      	mov	r1, r4
 8081ae0:	4630      	mov	r0, r6
 8081ae2:	f7ff fe63 	bl	80817ac <_ZNKSt8functionIFvRKbEEclES1_>
 8081ae6:	e02e      	b.n	8081b46 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8081ae8:	4631      	mov	r1, r6
 8081aea:	a801      	add	r0, sp, #4
 8081aec:	f7ff ffb1 	bl	8081a52 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8081af0:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8081af2:	2010      	movs	r0, #16
 8081af4:	f88d 3014 	strb.w	r3, [sp, #20]
 8081af8:	f7fe facf 	bl	808009a <_Znwj>
 8081afc:	4605      	mov	r5, r0
 8081afe:	b1d0      	cbz	r0, 8081b36 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081b00:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081b02:	2014      	movs	r0, #20
 8081b04:	f7fe fac9 	bl	808009a <_Znwj>
 8081b08:	4604      	mov	r4, r0
 8081b0a:	b178      	cbz	r0, 8081b2c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081b0c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8081b0e:	4601      	mov	r1, r0
 8081b10:	a801      	add	r0, sp, #4
 8081b12:	f7ff fe2b 	bl	808176c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081b16:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8081b18:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8081b1a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081b1c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8081b1e:	9203      	str	r2, [sp, #12]
 8081b20:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8081b22:	60e3      	str	r3, [r4, #12]
 8081b24:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081b28:	9204      	str	r2, [sp, #16]
 8081b2a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081b2c:	4b0a      	ldr	r3, [pc, #40]	; (8081b58 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081b2e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081b30:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8081b32:	4b0a      	ldr	r3, [pc, #40]	; (8081b5c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8081b34:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081b36:	a801      	add	r0, sp, #4
 8081b38:	f7ff fd8e 	bl	8081658 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8081b3c:	2200      	movs	r2, #0
 8081b3e:	4629      	mov	r1, r5
 8081b40:	4807      	ldr	r0, [pc, #28]	; (8081b60 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8081b42:	f7ff fbad 	bl	80812a0 <application_thread_invoke>
 8081b46:	4630      	mov	r0, r6
 8081b48:	f7ff fd86 	bl	8081658 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8081b4c:	4630      	mov	r0, r6
 8081b4e:	f7fe faa6 	bl	808009e <_ZdlPv>
        }
    }
 8081b52:	b007      	add	sp, #28
 8081b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081b56:	bf00      	nop
 8081b58:	080817bf 	.word	0x080817bf
 8081b5c:	08081a71 	.word	0x08081a71
 8081b60:	0808145f 	.word	0x0808145f

08081b64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8081b64:	b530      	push	{r4, r5, lr}
 8081b66:	4604      	mov	r4, r0
 8081b68:	b085      	sub	sp, #20
 8081b6a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8081b6c:	4668      	mov	r0, sp
 8081b6e:	4611      	mov	r1, r2
 8081b70:	f7ff fddf 	bl	8081732 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8081b74:	b17c      	cbz	r4, 8081b96 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 8081b76:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8081b78:	4628      	mov	r0, r5
 8081b7a:	b10d      	cbz	r5, 8081b80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8081b7c:	f002 f82c 	bl	8083bd8 <strdup>
 8081b80:	9002      	str	r0, [sp, #8]
 8081b82:	a902      	add	r1, sp, #8
 8081b84:	4668      	mov	r0, sp
 8081b86:	f8ad 400c 	strh.w	r4, [sp, #12]
 8081b8a:	f7ff fe2f 	bl	80817ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8081b8e:	9802      	ldr	r0, [sp, #8]
 8081b90:	f7ff fc2a 	bl	80813e8 <free>
 8081b94:	e01d      	b.n	8081bd2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8081b96:	f04f 0201 	mov.w	r2, #1
 8081b9a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8081b9c:	f88d 4008 	strb.w	r4, [sp, #8]
 8081ba0:	e8d0 3f4f 	ldrexb	r3, [r0]
 8081ba4:	42a3      	cmp	r3, r4
 8081ba6:	d103      	bne.n	8081bb0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 8081ba8:	e8c0 2f41 	strexb	r1, r2, [r0]
 8081bac:	2900      	cmp	r1, #0
 8081bae:	d1f7      	bne.n	8081ba0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8081bb0:	d002      	beq.n	8081bb8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8081bb2:	f88d 3008 	strb.w	r3, [sp, #8]
 8081bb6:	e00c      	b.n	8081bd2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8081bb8:	f110 010c 	adds.w	r1, r0, #12
 8081bbc:	f04f 0301 	mov.w	r3, #1
 8081bc0:	bf18      	it	ne
 8081bc2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8081bc4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8081bc8:	3004      	adds	r0, #4
 8081bca:	f800 3c03 	strb.w	r3, [r0, #-3]
 8081bce:	f7ff ff71 	bl	8081ab4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8081bd2:	a801      	add	r0, sp, #4
 8081bd4:	f7fe fd12 	bl	80805fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8081bd8:	b005      	add	sp, #20
 8081bda:	bd30      	pop	{r4, r5, pc}

08081bdc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 8081bdc:	4770      	bx	lr

08081bde <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8081bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081be0:	4606      	mov	r6, r0
 8081be2:	4615      	mov	r5, r2
 8081be4:	460c      	mov	r4, r1
 8081be6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8081be8:	42bc      	cmp	r4, r7
 8081bea:	d006      	beq.n	8081bfa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8081bec:	6833      	ldr	r3, [r6, #0]
 8081bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8081bf2:	689b      	ldr	r3, [r3, #8]
 8081bf4:	4630      	mov	r0, r6
 8081bf6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8081bf8:	e7f6      	b.n	8081be8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 8081bfa:	4628      	mov	r0, r5
 8081bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081bfe <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 8081bfe:	2200      	movs	r2, #0
 8081c00:	7c00      	ldrb	r0, [r0, #16]
 8081c02:	f7ff ba65 	b.w	80810d0 <HAL_I2C_Write_Data>

08081c06 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8081c06:	2100      	movs	r1, #0
 8081c08:	7c00      	ldrb	r0, [r0, #16]
 8081c0a:	f7ff ba69 	b.w	80810e0 <HAL_I2C_Available_Data>

08081c0e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 8081c0e:	2100      	movs	r1, #0
 8081c10:	7c00      	ldrb	r0, [r0, #16]
 8081c12:	f7ff ba6d 	b.w	80810f0 <HAL_I2C_Read_Data>

08081c16 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8081c16:	2100      	movs	r1, #0
 8081c18:	7c00      	ldrb	r0, [r0, #16]
 8081c1a:	f7ff ba71 	b.w	8081100 <HAL_I2C_Peek_Data>

08081c1e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 8081c1e:	2100      	movs	r1, #0
 8081c20:	7c00      	ldrb	r0, [r0, #16]
 8081c22:	f7ff ba75 	b.w	8081110 <HAL_I2C_Flush_Data>

08081c26 <_ZN7TwoWireD0Ev>:
 8081c26:	b510      	push	{r4, lr}
 8081c28:	4604      	mov	r4, r0
 8081c2a:	f7fe fa38 	bl	808009e <_ZdlPv>
 8081c2e:	4620      	mov	r0, r4
 8081c30:	bd10      	pop	{r4, pc}
	...

08081c34 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8081c34:	b510      	push	{r4, lr}
 8081c36:	4604      	mov	r4, r0
 8081c38:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8081c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081c3e:	60a3      	str	r3, [r4, #8]
 8081c40:	4b04      	ldr	r3, [pc, #16]	; (8081c54 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8081c42:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8081c44:	7420      	strb	r0, [r4, #16]
 8081c46:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8081c48:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 8081c4a:	f7ff fa71 	bl	8081130 <HAL_I2C_Init>

}
 8081c4e:	4620      	mov	r0, r4
 8081c50:	bd10      	pop	{r4, pc}
 8081c52:	bf00      	nop
 8081c54:	0808474c 	.word	0x0808474c

08081c58 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8081c58:	2300      	movs	r3, #0
 8081c5a:	461a      	mov	r2, r3
 8081c5c:	4619      	mov	r1, r3
 8081c5e:	7c00      	ldrb	r0, [r0, #16]
 8081c60:	f7ff ba16 	b.w	8081090 <HAL_I2C_Begin>

08081c64 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8081c64:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 8081c66:	2400      	movs	r4, #0
 8081c68:	7c00      	ldrb	r0, [r0, #16]
 8081c6a:	9400      	str	r4, [sp, #0]
 8081c6c:	f7ff fa18 	bl	80810a0 <HAL_I2C_Request_Data>
  return result;
}
 8081c70:	b2c0      	uxtb	r0, r0
 8081c72:	b002      	add	sp, #8
 8081c74:	bd10      	pop	{r4, pc}

08081c76 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 8081c76:	2301      	movs	r3, #1
 8081c78:	f7ff bff4 	b.w	8081c64 <_ZN7TwoWire11requestFromEhhh>

08081c7c <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 8081c7c:	2200      	movs	r2, #0
 8081c7e:	7c00      	ldrb	r0, [r0, #16]
 8081c80:	f7ff ba16 	b.w	80810b0 <HAL_I2C_Begin_Transmission>

08081c84 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 8081c84:	2200      	movs	r2, #0
 8081c86:	7c00      	ldrb	r0, [r0, #16]
 8081c88:	f7ff ba1a 	b.w	80810c0 <HAL_I2C_End_Transmission>

08081c8c <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 8081c8c:	2101      	movs	r1, #1
 8081c8e:	f7ff bff9 	b.w	8081c84 <_ZN7TwoWire15endTransmissionEh>

08081c92 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8081c92:	2100      	movs	r1, #0
 8081c94:	7c00      	ldrb	r0, [r0, #16]
 8081c96:	f7ff ba43 	b.w	8081120 <HAL_I2C_Is_Enabled>

08081c9a <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 8081c9a:	4700      	bx	r0

08081c9c <_Z15attachInterrupttPFvvE13InterruptModeah>:
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
 8081c9c:	2807      	cmp	r0, #7
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 8081c9e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8081ca2:	4605      	mov	r5, r0
 8081ca4:	460f      	mov	r7, r1
 8081ca6:	4690      	mov	r8, r2
 8081ca8:	461e      	mov	r6, r3
 8081caa:	f04f 0400 	mov.w	r4, #0
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
 8081cae:	d019      	beq.n	8081ce4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>
#endif
    HAL_Interrupts_Detach(pin);
 8081cb0:	f7ff f9de 	bl	8081070 <HAL_Interrupts_Detach>
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 8081cb4:	42a6      	cmp	r6, r4
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8081cb6:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 8081cba:	9403      	str	r4, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8081cbc:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8081cc0:	bfa2      	ittt	ge
 8081cc2:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    return &extra;
 8081cc6:	ac03      	addge	r4, sp, #12
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8081cc8:	f88d 300e 	strbge.w	r3, [sp, #14]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 8081ccc:	4628      	mov	r0, r5
 8081cce:	9400      	str	r4, [sp, #0]
 8081cd0:	4643      	mov	r3, r8
 8081cd2:	463a      	mov	r2, r7
 8081cd4:	4905      	ldr	r1, [pc, #20]	; (8081cec <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 8081cd6:	bfa8      	it	ge
 8081cd8:	f88d 600d 	strbge.w	r6, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 8081cdc:	f7ff f9c0 	bl	8081060 <HAL_Interrupts_Attach>
    return true;
 8081ce0:	2001      	movs	r0, #1
 8081ce2:	e000      	b.n	8081ce6 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4a>
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
 8081ce4:	4620      	mov	r0, r4
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
    return true;
}
 8081ce6:	b004      	add	sp, #16
 8081ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081cec:	08081c9b 	.word	0x08081c9b

08081cf0 <_Z15detachInterruptt>:
void detachInterrupt(uint16_t pin)
{
#if Wiring_Cellular == 1
    /* safety check that prevents users from detaching an interrupt from
     * BATT_INT_PC13 for power management which is shared with D7 */
    if (pin == D7) return;
 8081cf0:	2807      	cmp	r0, #7
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void detachInterrupt(uint16_t pin)
{
 8081cf2:	b570      	push	{r4, r5, r6, lr}
 8081cf4:	4605      	mov	r5, r0
#if Wiring_Cellular == 1
    /* safety check that prevents users from detaching an interrupt from
     * BATT_INT_PC13 for power management which is shared with D7 */
    if (pin == D7) return;
 8081cf6:	d00f      	beq.n	8081d18 <_Z15detachInterruptt+0x28>
#endif
    HAL_Interrupts_Detach(pin);
 8081cf8:	f7ff f9ba 	bl	8081070 <HAL_Interrupts_Detach>
    delete handlers[pin];
 8081cfc:	4b07      	ldr	r3, [pc, #28]	; (8081d1c <_Z15detachInterruptt+0x2c>)
 8081cfe:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8081d02:	461c      	mov	r4, r3
 8081d04:	b12e      	cbz	r6, 8081d12 <_Z15detachInterruptt+0x22>
 8081d06:	4630      	mov	r0, r6
 8081d08:	f7ff fca6 	bl	8081658 <_ZNSt14_Function_baseD1Ev>
 8081d0c:	4630      	mov	r0, r6
 8081d0e:	f7fe f9c6 	bl	808009e <_ZdlPv>
    handlers[pin] = NULL;
 8081d12:	2300      	movs	r3, #0
 8081d14:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
 8081d18:	bd70      	pop	{r4, r5, r6, pc}
 8081d1a:	bf00      	nop
 8081d1c:	20000638 	.word	0x20000638

08081d20 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8081d20:	4770      	bx	lr

08081d22 <_ZN9IPAddressD0Ev>:
 8081d22:	b510      	push	{r4, lr}
 8081d24:	4604      	mov	r4, r0
 8081d26:	f7fe f9ba 	bl	808009e <_ZdlPv>
 8081d2a:	4620      	mov	r0, r4
 8081d2c:	bd10      	pop	{r4, pc}

08081d2e <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8081d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081d30:	460f      	mov	r7, r1
 8081d32:	f100 0608 	add.w	r6, r0, #8
 8081d36:	1d05      	adds	r5, r0, #4
 8081d38:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8081d3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8081d3e:	220a      	movs	r2, #10
 8081d40:	4638      	mov	r0, r7
 8081d42:	f000 f896 	bl	8081e72 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8081d46:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8081d48:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8081d4a:	d007      	beq.n	8081d5c <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8081d4c:	2c00      	cmp	r4, #0
 8081d4e:	d0f4      	beq.n	8081d3a <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8081d50:	212e      	movs	r1, #46	; 0x2e
 8081d52:	4638      	mov	r0, r7
 8081d54:	f000 f84a 	bl	8081dec <_ZN5Print5printEc>
 8081d58:	4404      	add	r4, r0
 8081d5a:	e7ee      	b.n	8081d3a <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8081d5c:	4620      	mov	r0, r4
 8081d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081d60 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8081d60:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8081d62:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8081d66:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8081d6a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8081d6e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8081d72:	6041      	str	r1, [r0, #4]
 8081d74:	bd10      	pop	{r4, pc}
	...

08081d78 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8081d78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8081d7a:	4d04      	ldr	r5, [pc, #16]	; (8081d8c <_ZN9IPAddressC1Ehhhh+0x14>)
 8081d7c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8081d7e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8081d82:	9500      	str	r5, [sp, #0]
 8081d84:	f7ff ffec 	bl	8081d60 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8081d88:	b003      	add	sp, #12
 8081d8a:	bd30      	pop	{r4, r5, pc}
 8081d8c:	08084774 	.word	0x08084774

08081d90 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8081d90:	4a01      	ldr	r2, [pc, #4]	; (8081d98 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8081d92:	4b02      	ldr	r3, [pc, #8]	; (8081d9c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8081d94:	601a      	str	r2, [r3, #0]
 8081d96:	4770      	bx	lr
 8081d98:	08084833 	.word	0x08084833
 8081d9c:	200006f4 	.word	0x200006f4

08081da0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8081da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081da2:	4606      	mov	r6, r0
 8081da4:	460d      	mov	r5, r1
 8081da6:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8081da8:	2400      	movs	r4, #0
  while (size--) {
 8081daa:	42bd      	cmp	r5, r7
 8081dac:	d00c      	beq.n	8081dc8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8081dae:	6833      	ldr	r3, [r6, #0]
 8081db0:	f815 1b01 	ldrb.w	r1, [r5], #1
 8081db4:	689b      	ldr	r3, [r3, #8]
 8081db6:	4630      	mov	r0, r6
 8081db8:	4798      	blx	r3
     if (chunk>=0)
 8081dba:	2800      	cmp	r0, #0
 8081dbc:	db01      	blt.n	8081dc2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8081dbe:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8081dc0:	e7f3      	b.n	8081daa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8081dc2:	2c00      	cmp	r4, #0
 8081dc4:	bf08      	it	eq
 8081dc6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8081dc8:	4620      	mov	r0, r4
 8081dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081dcc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8081dcc:	b570      	push	{r4, r5, r6, lr}
 8081dce:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8081dd0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8081dd2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8081dd4:	b149      	cbz	r1, 8081dea <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8081dd6:	f001 ff1a 	bl	8083c0e <strlen>
 8081dda:	682b      	ldr	r3, [r5, #0]
 8081ddc:	4602      	mov	r2, r0
 8081dde:	4621      	mov	r1, r4
 8081de0:	4628      	mov	r0, r5
    }
 8081de2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8081de6:	68db      	ldr	r3, [r3, #12]
 8081de8:	4718      	bx	r3
    }
 8081dea:	bd70      	pop	{r4, r5, r6, pc}

08081dec <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8081dec:	6803      	ldr	r3, [r0, #0]
 8081dee:	689b      	ldr	r3, [r3, #8]
 8081df0:	4718      	bx	r3

08081df2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8081df2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8081df4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8081df6:	4605      	mov	r5, r0
  size_t n = print('\r');
 8081df8:	f7ff fff8 	bl	8081dec <_ZN5Print5printEc>
  n += print('\n');
 8081dfc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 8081dfe:	4604      	mov	r4, r0
  n += print('\n');
 8081e00:	4628      	mov	r0, r5
 8081e02:	f7ff fff3 	bl	8081dec <_ZN5Print5printEc>
  return n;
}
 8081e06:	4420      	add	r0, r4
 8081e08:	bd38      	pop	{r3, r4, r5, pc}

08081e0a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8081e0a:	b538      	push	{r3, r4, r5, lr}
 8081e0c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8081e0e:	f7ff ffdd 	bl	8081dcc <_ZN5Print5writeEPKc>
 8081e12:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8081e14:	4628      	mov	r0, r5
 8081e16:	f7ff ffec 	bl	8081df2 <_ZN5Print7printlnEv>
  return n;
}
 8081e1a:	4420      	add	r0, r4
 8081e1c:	bd38      	pop	{r3, r4, r5, pc}

08081e1e <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8081e1e:	2a01      	cmp	r2, #1
 8081e20:	bf98      	it	ls
 8081e22:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8081e24:	b530      	push	{r4, r5, lr}
 8081e26:	460b      	mov	r3, r1
 8081e28:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8081e2a:	2100      	movs	r1, #0
 8081e2c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8081e30:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8081e34:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8081e38:	fb05 3312 	mls	r3, r5, r2, r3
 8081e3c:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8081e3e:	2b09      	cmp	r3, #9
 8081e40:	bf94      	ite	ls
 8081e42:	3330      	addls	r3, #48	; 0x30
 8081e44:	3337      	addhi	r3, #55	; 0x37
 8081e46:	b2db      	uxtb	r3, r3
 8081e48:	4621      	mov	r1, r4
 8081e4a:	f804 3901 	strb.w	r3, [r4], #-1
 8081e4e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8081e50:	2d00      	cmp	r5, #0
 8081e52:	d1ef      	bne.n	8081e34 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8081e54:	f7ff ffba 	bl	8081dcc <_ZN5Print5writeEPKc>
}
 8081e58:	b00b      	add	sp, #44	; 0x2c
 8081e5a:	bd30      	pop	{r4, r5, pc}

08081e5c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8081e5c:	b410      	push	{r4}
  if (base == 0) return write(n);
 8081e5e:	b922      	cbnz	r2, 8081e6a <_ZN5Print5printEmi+0xe>
 8081e60:	6803      	ldr	r3, [r0, #0]
 8081e62:	b2c9      	uxtb	r1, r1
 8081e64:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8081e66:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8081e68:	4718      	bx	r3
  else return printNumber(n, base);
 8081e6a:	b2d2      	uxtb	r2, r2
}
 8081e6c:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8081e6e:	f7ff bfd6 	b.w	8081e1e <_ZN5Print11printNumberEmh>

08081e72 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8081e72:	f7ff bff3 	b.w	8081e5c <_ZN5Print5printEmi>

08081e76 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8081e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081e7a:	4607      	mov	r7, r0
 8081e7c:	460e      	mov	r6, r1
  if (base == 0) {
 8081e7e:	4615      	mov	r5, r2
 8081e80:	b92a      	cbnz	r2, 8081e8e <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8081e82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 8081e86:	6803      	ldr	r3, [r0, #0]
 8081e88:	b2c9      	uxtb	r1, r1
 8081e8a:	689b      	ldr	r3, [r3, #8]
 8081e8c:	4718      	bx	r3
  } else if (base == 10) {
 8081e8e:	2a0a      	cmp	r2, #10
 8081e90:	d102      	bne.n	8081e98 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 8081e92:	2900      	cmp	r1, #0
 8081e94:	da01      	bge.n	8081e9a <_ZN5Print5printEli+0x24>
 8081e96:	e004      	b.n	8081ea2 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8081e98:	b2d2      	uxtb	r2, r2
  }
}
 8081e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8081e9e:	f7ff bfbe 	b.w	8081e1e <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8081ea2:	212d      	movs	r1, #45	; 0x2d
 8081ea4:	f7ff ffa2 	bl	8081dec <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 8081ea8:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8081eaa:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 8081eac:	4271      	negs	r1, r6
 8081eae:	4638      	mov	r0, r7
 8081eb0:	f7ff ffb5 	bl	8081e1e <_ZN5Print11printNumberEmh>
 8081eb4:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8081eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081eba <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8081eba:	f7ff bfdc 	b.w	8081e76 <_ZN5Print5printEli>

08081ebe <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8081ebe:	b510      	push	{r4, lr}
 8081ec0:	4604      	mov	r4, r0
 8081ec2:	f7ff fbc9 	bl	8081658 <_ZNSt14_Function_baseD1Ev>
 8081ec6:	4620      	mov	r0, r4
 8081ec8:	bd10      	pop	{r4, pc}
	...

08081ecc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081ecc:	4803      	ldr	r0, [pc, #12]	; (8081edc <_GLOBAL__sub_I_RGB+0x10>)
 8081ece:	2300      	movs	r3, #0
 8081ed0:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8081ed2:	4a03      	ldr	r2, [pc, #12]	; (8081ee0 <_GLOBAL__sub_I_RGB+0x14>)
 8081ed4:	4903      	ldr	r1, [pc, #12]	; (8081ee4 <_GLOBAL__sub_I_RGB+0x18>)
 8081ed6:	f000 bc5f 	b.w	8082798 <__aeabi_atexit>
 8081eda:	bf00      	nop
 8081edc:	200006f8 	.word	0x200006f8
 8081ee0:	20000544 	.word	0x20000544
 8081ee4:	08081ebf 	.word	0x08081ebf

08081ee8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8081ee8:	4770      	bx	lr

08081eea <_ZN8SPIClassD0Ev>:
 8081eea:	b510      	push	{r4, lr}
 8081eec:	4604      	mov	r4, r0
 8081eee:	f7fe f8d6 	bl	808009e <_ZdlPv>
 8081ef2:	4620      	mov	r0, r4
 8081ef4:	bd10      	pop	{r4, pc}
	...

08081ef8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8081ef8:	b570      	push	{r4, r5, r6, lr}
 8081efa:	4604      	mov	r4, r0
 8081efc:	460e      	mov	r6, r1
 8081efe:	4b07      	ldr	r3, [pc, #28]	; (8081f1c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 8081f00:	2500      	movs	r5, #0
 8081f02:	6003      	str	r3, [r0, #0]
 8081f04:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8081f08:	f7ff f83a 	bl	8080f80 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8081f0c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 8081f0e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8081f10:	f7ff f916 	bl	8081140 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8081f14:	60a5      	str	r5, [r4, #8]
}
 8081f16:	4620      	mov	r0, r4
 8081f18:	bd70      	pop	{r4, r5, r6, pc}
 8081f1a:	bf00      	nop
 8081f1c:	08084864 	.word	0x08084864

08081f20 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 8081f20:	7900      	ldrb	r0, [r0, #4]
 8081f22:	f7ff b915 	b.w	8081150 <HAL_SPI_Is_Enabled>

08081f26 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8081f26:	b510      	push	{r4, lr}
 8081f28:	4604      	mov	r4, r0
{
	free(buffer);
 8081f2a:	6800      	ldr	r0, [r0, #0]
 8081f2c:	f7ff fa5c 	bl	80813e8 <free>
}
 8081f30:	4620      	mov	r0, r4
 8081f32:	bd10      	pop	{r4, pc}

08081f34 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8081f34:	b510      	push	{r4, lr}
 8081f36:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8081f38:	6800      	ldr	r0, [r0, #0]
 8081f3a:	b108      	cbz	r0, 8081f40 <_ZN6String10invalidateEv+0xc>
 8081f3c:	f7ff fa54 	bl	80813e8 <free>
	buffer = NULL;
 8081f40:	2300      	movs	r3, #0
 8081f42:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8081f44:	60a3      	str	r3, [r4, #8]
 8081f46:	6063      	str	r3, [r4, #4]
 8081f48:	bd10      	pop	{r4, pc}

08081f4a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8081f4a:	b538      	push	{r3, r4, r5, lr}
 8081f4c:	4604      	mov	r4, r0
 8081f4e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8081f50:	6800      	ldr	r0, [r0, #0]
 8081f52:	3101      	adds	r1, #1
 8081f54:	f7ff fa50 	bl	80813f8 <realloc>
	if (newbuffer) {
 8081f58:	b110      	cbz	r0, 8081f60 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8081f5a:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8081f5e:	2001      	movs	r0, #1
	}
	return 0;
}
 8081f60:	bd38      	pop	{r3, r4, r5, pc}

08081f62 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8081f62:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8081f64:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8081f66:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8081f68:	b113      	cbz	r3, 8081f70 <_ZN6String7reserveEj+0xe>
 8081f6a:	6843      	ldr	r3, [r0, #4]
 8081f6c:	428b      	cmp	r3, r1
 8081f6e:	d207      	bcs.n	8081f80 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8081f70:	4620      	mov	r0, r4
 8081f72:	f7ff ffea 	bl	8081f4a <_ZN6String12changeBufferEj>
 8081f76:	b120      	cbz	r0, 8081f82 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8081f78:	68a3      	ldr	r3, [r4, #8]
 8081f7a:	b90b      	cbnz	r3, 8081f80 <_ZN6String7reserveEj+0x1e>
 8081f7c:	6822      	ldr	r2, [r4, #0]
 8081f7e:	7013      	strb	r3, [r2, #0]
 8081f80:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8081f82:	bd10      	pop	{r4, pc}

08081f84 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8081f84:	b570      	push	{r4, r5, r6, lr}
 8081f86:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8081f88:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8081f8a:	4604      	mov	r4, r0
 8081f8c:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8081f8e:	f7ff ffe8 	bl	8081f62 <_ZN6String7reserveEj>
 8081f92:	b918      	cbnz	r0, 8081f9c <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8081f94:	4620      	mov	r0, r4
 8081f96:	f7ff ffcd 	bl	8081f34 <_ZN6String10invalidateEv>
		return *this;
 8081f9a:	e009      	b.n	8081fb0 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8081f9c:	462a      	mov	r2, r5
 8081f9e:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8081fa0:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8081fa2:	6820      	ldr	r0, [r4, #0]
 8081fa4:	f001 fdca 	bl	8083b3c <memcpy>
	buffer[len] = 0;
 8081fa8:	6822      	ldr	r2, [r4, #0]
 8081faa:	68a3      	ldr	r3, [r4, #8]
 8081fac:	2100      	movs	r1, #0
 8081fae:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8081fb0:	4620      	mov	r0, r4
 8081fb2:	bd70      	pop	{r4, r5, r6, pc}

08081fb4 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8081fb4:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081fb6:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8081fb8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081fba:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8081fbc:	6043      	str	r3, [r0, #4]
	len = 0;
 8081fbe:	6083      	str	r3, [r0, #8]
	flags = 0;
 8081fc0:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8081fc2:	460d      	mov	r5, r1
 8081fc4:	b139      	cbz	r1, 8081fd6 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8081fc6:	4608      	mov	r0, r1
 8081fc8:	f001 fe21 	bl	8083c0e <strlen>
 8081fcc:	4629      	mov	r1, r5
 8081fce:	4602      	mov	r2, r0
 8081fd0:	4620      	mov	r0, r4
 8081fd2:	f7ff ffd7 	bl	8081f84 <_ZN6String4copyEPKcj>
}
 8081fd6:	4620      	mov	r0, r4
 8081fd8:	bd38      	pop	{r3, r4, r5, pc}

08081fda <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8081fda:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8081fdc:	b510      	push	{r4, lr}
 8081fde:	460b      	mov	r3, r1
 8081fe0:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8081fe2:	d007      	beq.n	8081ff4 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8081fe4:	6809      	ldr	r1, [r1, #0]
 8081fe6:	b119      	cbz	r1, 8081ff0 <_ZN6StringaSERKS_+0x16>
 8081fe8:	689a      	ldr	r2, [r3, #8]
 8081fea:	f7ff ffcb 	bl	8081f84 <_ZN6String4copyEPKcj>
 8081fee:	e001      	b.n	8081ff4 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 8081ff0:	f7ff ffa0 	bl	8081f34 <_ZN6String10invalidateEv>

	return *this;
}
 8081ff4:	4620      	mov	r0, r4
 8081ff6:	bd10      	pop	{r4, pc}

08081ff8 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8081ff8:	b510      	push	{r4, lr}
 8081ffa:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081ffc:	2300      	movs	r3, #0
 8081ffe:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8082000:	6043      	str	r3, [r0, #4]
	len = 0;
 8082002:	6083      	str	r3, [r0, #8]
	flags = 0;
 8082004:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8082006:	f7ff ffe8 	bl	8081fda <_ZN6StringaSERKS_>
}
 808200a:	4620      	mov	r0, r4
 808200c:	bd10      	pop	{r4, pc}

0808200e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808200e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8082010:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8082012:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8082014:	b912      	cbnz	r2, 808201c <_ZNK6String6equalsEPKc+0xe>
 8082016:	b919      	cbnz	r1, 8082020 <_ZNK6String6equalsEPKc+0x12>
 8082018:	2001      	movs	r0, #1
 808201a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 808201c:	b911      	cbnz	r1, 8082024 <_ZNK6String6equalsEPKc+0x16>
 808201e:	6803      	ldr	r3, [r0, #0]
 8082020:	7818      	ldrb	r0, [r3, #0]
 8082022:	e002      	b.n	808202a <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 8082024:	6800      	ldr	r0, [r0, #0]
 8082026:	f001 fdc5 	bl	8083bb4 <strcmp>
 808202a:	fab0 f080 	clz	r0, r0
 808202e:	0940      	lsrs	r0, r0, #5
}
 8082030:	bd08      	pop	{r3, pc}

08082032 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 8082032:	b570      	push	{r4, r5, r6, lr}
 8082034:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 8082036:	b19a      	cbz	r2, 8082060 <_ZNK6String8getBytesEPhjj+0x2e>
 8082038:	b191      	cbz	r1, 8082060 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
 808203a:	6885      	ldr	r5, [r0, #8]
 808203c:	429d      	cmp	r5, r3
 808203e:	d802      	bhi.n	8082046 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 8082040:	2300      	movs	r3, #0
 8082042:	700b      	strb	r3, [r1, #0]
		return;
 8082044:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
 8082046:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
 8082048:	1aed      	subs	r5, r5, r3
 808204a:	42ac      	cmp	r4, r5
 808204c:	bf28      	it	cs
 808204e:	462c      	movcs	r4, r5
	strncpy((char *)buf, buffer + index, n);
 8082050:	6801      	ldr	r1, [r0, #0]
 8082052:	4622      	mov	r2, r4
 8082054:	4419      	add	r1, r3
 8082056:	4630      	mov	r0, r6
 8082058:	f001 fdf6 	bl	8083c48 <strncpy>
	buf[n] = 0;
 808205c:	2300      	movs	r3, #0
 808205e:	5533      	strb	r3, [r6, r4]
 8082060:	bd70      	pop	{r4, r5, r6, pc}

08082062 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 8082062:	4601      	mov	r1, r0
 8082064:	2200      	movs	r2, #0
 8082066:	208c      	movs	r0, #140	; 0x8c
 8082068:	f7fe bf9a 	b.w	8080fa0 <HAL_Core_System_Reset_Ex>

0808206c <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 808206c:	2000      	movs	r0, #0
 808206e:	f7ff bff8 	b.w	8082062 <_ZN11SystemClass5resetEm>
	...

08082074 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8082074:	b510      	push	{r4, lr}
 8082076:	4604      	mov	r4, r0
 8082078:	4608      	mov	r0, r1
 808207a:	4611      	mov	r1, r2
 808207c:	461a      	mov	r2, r3
    system_sleep(sleepMode, seconds, flags.value(), NULL);
 808207e:	2300      	movs	r3, #0
 8082080:	f7ff f8f6 	bl	8081270 <system_sleep>
    System.sleepResult_ = SleepResult();
 8082084:	4b07      	ldr	r3, [pc, #28]	; (80820a4 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x30>)
 8082086:	2200      	movs	r2, #0
 8082088:	701a      	strb	r2, [r3, #0]
 808208a:	f64f 729c 	movw	r2, #65436	; 0xff9c
 808208e:	805a      	strh	r2, [r3, #2]
 8082090:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8082094:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 8082096:	681a      	ldr	r2, [r3, #0]
 8082098:	889b      	ldrh	r3, [r3, #4]
 808209a:	6022      	str	r2, [r4, #0]
 808209c:	80a3      	strh	r3, [r4, #4]
}
 808209e:	4620      	mov	r0, r4
 80820a0:	bd10      	pop	{r4, pc}
 80820a2:	bf00      	nop
 80820a4:	20000708 	.word	0x20000708

080820a8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80820a8:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 80820ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80820ae:	4c0d      	ldr	r4, [pc, #52]	; (80820e4 <_GLOBAL__sub_I_System+0x3c>)
 80820b0:	2500      	movs	r5, #0
 80820b2:	8063      	strh	r3, [r4, #2]
 80820b4:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80820b8:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80820ba:	80a3      	strh	r3, [r4, #4]
 80820bc:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80820be:	f7ff f8c7 	bl	8081250 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80820c2:	a802      	add	r0, sp, #8
 80820c4:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80820c8:	462a      	mov	r2, r5
 80820ca:	4629      	mov	r1, r5
 80820cc:	f7fe ff70 	bl	8080fb0 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80820d0:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80820d2:	2b1e      	cmp	r3, #30
 80820d4:	d104      	bne.n	80820e0 <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80820d6:	2303      	movs	r3, #3
 80820d8:	7023      	strb	r3, [r4, #0]
 80820da:	2311      	movs	r3, #17
 80820dc:	8065      	strh	r5, [r4, #2]
 80820de:	80a3      	strh	r3, [r4, #4]
 80820e0:	b003      	add	sp, #12
 80820e2:	bd30      	pop	{r4, r5, pc}
 80820e4:	20000708 	.word	0x20000708

080820e8 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80820e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 80820ea:	4b14      	ldr	r3, [pc, #80]	; (808213c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80820ec:	4f14      	ldr	r7, [pc, #80]	; (8082140 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80820ee:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 80820f0:	4b14      	ldr	r3, [pc, #80]	; (8082144 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80820f2:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 80820f4:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 80820f6:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 80820f8:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 80820fa:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80820fc:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80820fe:	d01b      	beq.n	8082138 <_ZL22Refresh_UnixTime_Cachel+0x50>
 8082100:	a80a      	add	r0, sp, #40	; 0x28
 8082102:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 8082106:	f001 fc21 	bl	808394c <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 808210a:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 808210c:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 808210e:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8082110:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8082114:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 8082116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8082118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808211a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808211c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808211e:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082122:	4c09      	ldr	r4, [pc, #36]	; (8082148 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8082124:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082128:	ad01      	add	r5, sp, #4
 808212a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808212c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 808212e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082130:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 8082132:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082134:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 8082138:	b00b      	add	sp, #44	; 0x2c
 808213a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808213c:	20000740 	.word	0x20000740
 8082140:	2000073c 	.word	0x2000073c
 8082144:	20000738 	.word	0x20000738
 8082148:	20000710 	.word	0x20000710

0808214c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 808214c:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 808214e:	2000      	movs	r0, #0
 8082150:	f7ff f91a 	bl	8081388 <spark_sync_time_pending>
 8082154:	b128      	cbz	r0, 8082162 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082156:	f7ff f8ef 	bl	8081338 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 808215a:	f080 0001 	eor.w	r0, r0, #1
 808215e:	b2c0      	uxtb	r0, r0
 8082160:	bd08      	pop	{r3, pc}
 8082162:	2001      	movs	r0, #1
    }
 8082164:	bd08      	pop	{r3, pc}
	...

08082168 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8082168:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808216a:	4909      	ldr	r1, [pc, #36]	; (8082190 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 808216c:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808216e:	f001 fb51 	bl	8083814 <__aeabi_fcmplt>
 8082172:	b960      	cbnz	r0, 808218e <_ZN9TimeClass4zoneEf+0x26>
 8082174:	4907      	ldr	r1, [pc, #28]	; (8082194 <_ZN9TimeClass4zoneEf+0x2c>)
 8082176:	4620      	mov	r0, r4
 8082178:	f001 fb6a 	bl	8083850 <__aeabi_fcmpgt>
 808217c:	b938      	cbnz	r0, 808218e <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 808217e:	4906      	ldr	r1, [pc, #24]	; (8082198 <_ZN9TimeClass4zoneEf+0x30>)
 8082180:	4620      	mov	r0, r4
 8082182:	f001 f9a9 	bl	80834d8 <__aeabi_fmul>
 8082186:	f001 fb6d 	bl	8083864 <__aeabi_f2iz>
 808218a:	4b04      	ldr	r3, [pc, #16]	; (808219c <_ZN9TimeClass4zoneEf+0x34>)
 808218c:	6018      	str	r0, [r3, #0]
 808218e:	bd10      	pop	{r4, pc}
 8082190:	c1400000 	.word	0xc1400000
 8082194:	41600000 	.word	0x41600000
 8082198:	45610000 	.word	0x45610000
 808219c:	20000740 	.word	0x20000740

080821a0 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80821a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 80821a2:	4b0e      	ldr	r3, [pc, #56]	; (80821dc <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80821a4:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 80821a6:	681b      	ldr	r3, [r3, #0]
 80821a8:	a802      	add	r0, sp, #8
 80821aa:	4419      	add	r1, r3
 80821ac:	4b0c      	ldr	r3, [pc, #48]	; (80821e0 <_ZN9TimeClass7timeStrEl+0x40>)
 80821ae:	681b      	ldr	r3, [r3, #0]
 80821b0:	4419      	add	r1, r3
 80821b2:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 80821b6:	f001 fbc9 	bl	808394c <localtime>
        char* ascstr = asctime(calendar_time);
 80821ba:	f001 fb79 	bl	80838b0 <asctime>
 80821be:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 80821c0:	f001 fd25 	bl	8083c0e <strlen>
        ascstr[len-1] = 0; // remove final newline
 80821c4:	2300      	movs	r3, #0
 80821c6:	4428      	add	r0, r5
 80821c8:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 80821cc:	4629      	mov	r1, r5
 80821ce:	4620      	mov	r0, r4
 80821d0:	f7ff fef0 	bl	8081fb4 <_ZN6StringC1EPK19__FlashStringHelper>
}
 80821d4:	4620      	mov	r0, r4
 80821d6:	b003      	add	sp, #12
 80821d8:	bd30      	pop	{r4, r5, pc}
 80821da:	bf00      	nop
 80821dc:	20000740 	.word	0x20000740
 80821e0:	20000738 	.word	0x20000738

080821e4 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80821e4:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80821e6:	2000      	movs	r0, #0
 80821e8:	f7fe ff02 	bl	8080ff0 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80821ec:	4604      	mov	r4, r0
 80821ee:	b968      	cbnz	r0, 808220c <_ZN9TimeClass7isValidEv+0x28>
        }
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80821f0:	f7ff f826 	bl	8081240 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80821f4:	2801      	cmp	r0, #1
 80821f6:	d10b      	bne.n	8082210 <_ZN9TimeClass7isValidEv+0x2c>
 80821f8:	4620      	mov	r0, r4
 80821fa:	f7ff f859 	bl	80812b0 <system_thread_get_state>
 80821fe:	b938      	cbnz	r0, 8082210 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 8082200:	f7ff ffa4 	bl	808214c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8082204:	b930      	cbnz	r0, 8082214 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 8082206:	f7ff f87f 	bl	8081308 <spark_process>
 808220a:	e7f9      	b.n	8082200 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 808220c:	2001      	movs	r0, #1
 808220e:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8082210:	2000      	movs	r0, #0
 8082212:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 8082214:	f7ff ff9a 	bl	808214c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 8082218:	2000      	movs	r0, #0
 808221a:	f7fe fee9 	bl	8080ff0 <HAL_RTC_Time_Is_Valid>
 808221e:	3000      	adds	r0, #0
 8082220:	bf18      	it	ne
 8082222:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 8082224:	bd10      	pop	{r4, pc}

08082226 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 8082226:	b508      	push	{r3, lr}
    (void)isValid();
 8082228:	f7ff ffdc 	bl	80821e4 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 808222c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8082230:	f7fe bed6 	b.w	8080fe0 <HAL_RTC_Get_UnixTime>

08082234 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 8082234:	b508      	push	{r3, lr}
	return hour(now());
 8082236:	f7ff fff6 	bl	8082226 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808223a:	f7ff ff55 	bl	80820e8 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 808223e:	4b01      	ldr	r3, [pc, #4]	; (8082244 <_ZN9TimeClass4hourEv+0x10>)
 8082240:	6898      	ldr	r0, [r3, #8]
 8082242:	bd08      	pop	{r3, pc}
 8082244:	20000710 	.word	0x20000710

08082248 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 8082248:	b508      	push	{r3, lr}
	return day(now());
 808224a:	f7ff ffec 	bl	8082226 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808224e:	f7ff ff4b 	bl	80820e8 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 8082252:	4b01      	ldr	r3, [pc, #4]	; (8082258 <_ZN9TimeClass3dayEv+0x10>)
 8082254:	68d8      	ldr	r0, [r3, #12]
 8082256:	bd08      	pop	{r3, pc}
 8082258:	20000710 	.word	0x20000710

0808225c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 808225c:	4b02      	ldr	r3, [pc, #8]	; (8082268 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 808225e:	681a      	ldr	r2, [r3, #0]
 8082260:	4b02      	ldr	r3, [pc, #8]	; (808226c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8082262:	601a      	str	r2, [r3, #0]
 8082264:	4770      	bx	lr
 8082266:	bf00      	nop
 8082268:	2000048c 	.word	0x2000048c
 808226c:	20000734 	.word	0x20000734

08082270 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8082270:	4770      	bx	lr

08082272 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082272:	7441      	strb	r1, [r0, #17]
 8082274:	4770      	bx	lr

08082276 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 8082276:	7c00      	ldrb	r0, [r0, #16]
 8082278:	f7fe bfaa 	b.w	80811d0 <HAL_USART_Available_Data_For_Write>

0808227c <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 808227c:	7c00      	ldrb	r0, [r0, #16]
 808227e:	f7fe bf7f 	b.w	8081180 <HAL_USART_Available_Data>

08082282 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 8082282:	7c00      	ldrb	r0, [r0, #16]
 8082284:	f7fe bf8c 	b.w	80811a0 <HAL_USART_Peek_Data>

08082288 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 8082288:	7c00      	ldrb	r0, [r0, #16]
 808228a:	f7fe bf81 	b.w	8081190 <HAL_USART_Read_Data>

0808228e <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 808228e:	7c00      	ldrb	r0, [r0, #16]
 8082290:	f7fe bf8e 	b.w	80811b0 <HAL_USART_Flush_Data>

08082294 <_ZN11USARTSerialD0Ev>:
 8082294:	b510      	push	{r4, lr}
 8082296:	4604      	mov	r4, r0
 8082298:	f7fd ff01 	bl	808009e <_ZdlPv>
 808229c:	4620      	mov	r0, r4
 808229e:	bd10      	pop	{r4, pc}

080822a0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80822a0:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80822a2:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80822a4:	4604      	mov	r4, r0
 80822a6:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80822a8:	b925      	cbnz	r5, 80822b4 <_ZN11USARTSerial5writeEh+0x14>
 80822aa:	7c00      	ldrb	r0, [r0, #16]
 80822ac:	f7fe ff90 	bl	80811d0 <HAL_USART_Available_Data_For_Write>
 80822b0:	2800      	cmp	r0, #0
 80822b2:	dd05      	ble.n	80822c0 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80822b4:	4631      	mov	r1, r6
 80822b6:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80822b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80822bc:	f7fe bf58 	b.w	8081170 <HAL_USART_Write_Data>
  }
  return 0;
}
 80822c0:	4628      	mov	r0, r5
 80822c2:	bd70      	pop	{r4, r5, r6, pc}

080822c4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80822c4:	b510      	push	{r4, lr}
 80822c6:	4604      	mov	r4, r0
 80822c8:	4608      	mov	r0, r1
 80822ca:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80822cc:	2200      	movs	r2, #0
 80822ce:	6062      	str	r2, [r4, #4]
 80822d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80822d4:	60a2      	str	r2, [r4, #8]
 80822d6:	4a05      	ldr	r2, [pc, #20]	; (80822ec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80822d8:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80822da:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80822dc:	2201      	movs	r2, #1
 80822de:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80822e0:	461a      	mov	r2, r3
 80822e2:	f7fe ff3d 	bl	8081160 <HAL_USART_Init>
}
 80822e6:	4620      	mov	r0, r4
 80822e8:	bd10      	pop	{r4, pc}
 80822ea:	bf00      	nop
 80822ec:	0808489c 	.word	0x0808489c

080822f0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80822f0:	7c00      	ldrb	r0, [r0, #16]
 80822f2:	f7fe bf65 	b.w	80811c0 <HAL_USART_Is_Enabled>
	...

080822f8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80822f8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80822fa:	4d0c      	ldr	r5, [pc, #48]	; (808232c <_Z22__fetch_global_Serial1v+0x34>)
 80822fc:	6829      	ldr	r1, [r5, #0]
 80822fe:	f011 0401 	ands.w	r4, r1, #1
 8082302:	d111      	bne.n	8082328 <_Z22__fetch_global_Serial1v+0x30>
 8082304:	4628      	mov	r0, r5
 8082306:	f7fd fecc 	bl	80800a2 <__cxa_guard_acquire>
 808230a:	b168      	cbz	r0, 8082328 <_Z22__fetch_global_Serial1v+0x30>
 808230c:	4a08      	ldr	r2, [pc, #32]	; (8082330 <_Z22__fetch_global_Serial1v+0x38>)
 808230e:	4621      	mov	r1, r4
 8082310:	4b08      	ldr	r3, [pc, #32]	; (8082334 <_Z22__fetch_global_Serial1v+0x3c>)
 8082312:	4809      	ldr	r0, [pc, #36]	; (8082338 <_Z22__fetch_global_Serial1v+0x40>)
 8082314:	f7ff ffd6 	bl	80822c4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8082318:	4628      	mov	r0, r5
 808231a:	f7fd fec7 	bl	80800ac <__cxa_guard_release>
 808231e:	4a07      	ldr	r2, [pc, #28]	; (808233c <_Z22__fetch_global_Serial1v+0x44>)
 8082320:	4907      	ldr	r1, [pc, #28]	; (8082340 <_Z22__fetch_global_Serial1v+0x48>)
 8082322:	4805      	ldr	r0, [pc, #20]	; (8082338 <_Z22__fetch_global_Serial1v+0x40>)
 8082324:	f000 fa38 	bl	8082798 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8082328:	4803      	ldr	r0, [pc, #12]	; (8082338 <_Z22__fetch_global_Serial1v+0x40>)
 808232a:	bd38      	pop	{r3, r4, r5, pc}
 808232c:	200007dc 	.word	0x200007dc
 8082330:	200007e0 	.word	0x200007e0
 8082334:	20000758 	.word	0x20000758
 8082338:	20000744 	.word	0x20000744
 808233c:	20000544 	.word	0x20000544
 8082340:	08082271 	.word	0x08082271

08082344 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8082344:	7441      	strb	r1, [r0, #17]
 8082346:	4770      	bx	lr

08082348 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 8082348:	4770      	bx	lr

0808234a <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 808234a:	2100      	movs	r1, #0
 808234c:	7c00      	ldrb	r0, [r0, #16]
 808234e:	f7fe bf5f 	b.w	8081210 <HAL_USB_USART_Receive_Data>

08082352 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 8082352:	2101      	movs	r1, #1
 8082354:	7c00      	ldrb	r0, [r0, #16]
 8082356:	f7fe bf5b 	b.w	8081210 <HAL_USB_USART_Receive_Data>

0808235a <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 808235a:	7c00      	ldrb	r0, [r0, #16]
 808235c:	f7fe bf50 	b.w	8081200 <HAL_USB_USART_Available_Data_For_Write>

08082360 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 8082360:	7c00      	ldrb	r0, [r0, #16]
 8082362:	f7fe bf45 	b.w	80811f0 <HAL_USB_USART_Available_Data>

08082366 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 8082366:	b538      	push	{r3, r4, r5, lr}
 8082368:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808236a:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 808236c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808236e:	f7fe ff47 	bl	8081200 <HAL_USB_USART_Available_Data_For_Write>
 8082372:	2800      	cmp	r0, #0
 8082374:	dc01      	bgt.n	808237a <_ZN9USBSerial5writeEh+0x14>
 8082376:	7c60      	ldrb	r0, [r4, #17]
 8082378:	b120      	cbz	r0, 8082384 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 808237a:	4629      	mov	r1, r5
 808237c:	7c20      	ldrb	r0, [r4, #16]
 808237e:	f7fe ff4f 	bl	8081220 <HAL_USB_USART_Send_Data>
    return 1;
 8082382:	2001      	movs	r0, #1
  }
  return 0;
}
 8082384:	bd38      	pop	{r3, r4, r5, pc}

08082386 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8082386:	7c00      	ldrb	r0, [r0, #16]
 8082388:	f7fe bf52 	b.w	8081230 <HAL_USB_USART_Flush_Data>

0808238c <_ZN9USBSerialD0Ev>:
 808238c:	b510      	push	{r4, lr}
 808238e:	4604      	mov	r4, r0
 8082390:	f7fd fe85 	bl	808009e <_ZdlPv>
 8082394:	4620      	mov	r0, r4
 8082396:	bd10      	pop	{r4, pc}

08082398 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8082398:	b510      	push	{r4, lr}
 808239a:	4604      	mov	r4, r0
 808239c:	2300      	movs	r3, #0
 808239e:	6063      	str	r3, [r4, #4]
 80823a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80823a4:	60a3      	str	r3, [r4, #8]
 80823a6:	4b05      	ldr	r3, [pc, #20]	; (80823bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80823a8:	4608      	mov	r0, r1
 80823aa:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80823ac:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80823ae:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80823b0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80823b2:	4611      	mov	r1, r2
 80823b4:	f7fe ff14 	bl	80811e0 <HAL_USB_USART_Init>
}
 80823b8:	4620      	mov	r0, r4
 80823ba:	bd10      	pop	{r4, pc}
 80823bc:	080848cc 	.word	0x080848cc

080823c0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80823c0:	b510      	push	{r4, lr}
 80823c2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80823c4:	2214      	movs	r2, #20
 80823c6:	2100      	movs	r1, #0
 80823c8:	f001 fbc3 	bl	8083b52 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80823cc:	4b05      	ldr	r3, [pc, #20]	; (80823e4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80823ce:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80823d0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80823d2:	4b05      	ldr	r3, [pc, #20]	; (80823e8 <_Z19acquireSerialBufferv+0x28>)
 80823d4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80823d6:	f240 1301 	movw	r3, #257	; 0x101
 80823da:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80823dc:	2381      	movs	r3, #129	; 0x81
 80823de:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80823e0:	bd10      	pop	{r4, pc}
 80823e2:	bf00      	nop
 80823e4:	200008e9 	.word	0x200008e9
 80823e8:	20000868 	.word	0x20000868

080823ec <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80823ec:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80823ee:	4d0e      	ldr	r5, [pc, #56]	; (8082428 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80823f0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80823f2:	a801      	add	r0, sp, #4
 80823f4:	f7ff ffe4 	bl	80823c0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80823f8:	6829      	ldr	r1, [r5, #0]
 80823fa:	f011 0401 	ands.w	r4, r1, #1
 80823fe:	d110      	bne.n	8082422 <_Z16_fetch_usbserialv+0x36>
 8082400:	4628      	mov	r0, r5
 8082402:	f7fd fe4e 	bl	80800a2 <__cxa_guard_acquire>
 8082406:	b160      	cbz	r0, 8082422 <_Z16_fetch_usbserialv+0x36>
 8082408:	aa01      	add	r2, sp, #4
 808240a:	4621      	mov	r1, r4
 808240c:	4807      	ldr	r0, [pc, #28]	; (808242c <_Z16_fetch_usbserialv+0x40>)
 808240e:	f7ff ffc3 	bl	8082398 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082412:	4628      	mov	r0, r5
 8082414:	f7fd fe4a 	bl	80800ac <__cxa_guard_release>
 8082418:	4a05      	ldr	r2, [pc, #20]	; (8082430 <_Z16_fetch_usbserialv+0x44>)
 808241a:	4906      	ldr	r1, [pc, #24]	; (8082434 <_Z16_fetch_usbserialv+0x48>)
 808241c:	4803      	ldr	r0, [pc, #12]	; (808242c <_Z16_fetch_usbserialv+0x40>)
 808241e:	f000 f9bb 	bl	8082798 <__aeabi_atexit>
	return _usbserial;
}
 8082422:	4802      	ldr	r0, [pc, #8]	; (808242c <_Z16_fetch_usbserialv+0x40>)
 8082424:	b007      	add	sp, #28
 8082426:	bd30      	pop	{r4, r5, pc}
 8082428:	20000864 	.word	0x20000864
 808242c:	200009ec 	.word	0x200009ec
 8082430:	20000544 	.word	0x20000544
 8082434:	08082349 	.word	0x08082349

08082438 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8082438:	b510      	push	{r4, lr}
 808243a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808243c:	2214      	movs	r2, #20
 808243e:	2100      	movs	r1, #0
 8082440:	f001 fb87 	bl	8083b52 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8082444:	4b05      	ldr	r3, [pc, #20]	; (808245c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8082446:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8082448:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 808244a:	4b05      	ldr	r3, [pc, #20]	; (8082460 <_Z23acquireUSBSerial1Bufferv+0x28>)
 808244c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808244e:	f240 1301 	movw	r3, #257	; 0x101
 8082452:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8082454:	2381      	movs	r3, #129	; 0x81
 8082456:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8082458:	bd10      	pop	{r4, pc}
 808245a:	bf00      	nop
 808245c:	20000a9c 	.word	0x20000a9c
 8082460:	20000a04 	.word	0x20000a04

08082464 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8082464:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8082466:	4c0e      	ldr	r4, [pc, #56]	; (80824a0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8082468:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 808246a:	a801      	add	r0, sp, #4
 808246c:	f7ff ffe4 	bl	8082438 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8082470:	6823      	ldr	r3, [r4, #0]
 8082472:	07db      	lsls	r3, r3, #31
 8082474:	d410      	bmi.n	8082498 <_Z17_fetch_usbserial1v+0x34>
 8082476:	4620      	mov	r0, r4
 8082478:	f7fd fe13 	bl	80800a2 <__cxa_guard_acquire>
 808247c:	b160      	cbz	r0, 8082498 <_Z17_fetch_usbserial1v+0x34>
 808247e:	aa01      	add	r2, sp, #4
 8082480:	2101      	movs	r1, #1
 8082482:	4808      	ldr	r0, [pc, #32]	; (80824a4 <_Z17_fetch_usbserial1v+0x40>)
 8082484:	f7ff ff88 	bl	8082398 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8082488:	4620      	mov	r0, r4
 808248a:	f7fd fe0f 	bl	80800ac <__cxa_guard_release>
 808248e:	4a06      	ldr	r2, [pc, #24]	; (80824a8 <_Z17_fetch_usbserial1v+0x44>)
 8082490:	4906      	ldr	r1, [pc, #24]	; (80824ac <_Z17_fetch_usbserial1v+0x48>)
 8082492:	4804      	ldr	r0, [pc, #16]	; (80824a4 <_Z17_fetch_usbserial1v+0x40>)
 8082494:	f000 f980 	bl	8082798 <__aeabi_atexit>
  return _usbserial1;
}
 8082498:	4802      	ldr	r0, [pc, #8]	; (80824a4 <_Z17_fetch_usbserial1v+0x40>)
 808249a:	b006      	add	sp, #24
 808249c:	bd10      	pop	{r4, pc}
 808249e:	bf00      	nop
 80824a0:	20000a00 	.word	0x20000a00
 80824a4:	20000a88 	.word	0x20000a88
 80824a8:	20000544 	.word	0x20000544
 80824ac:	08082349 	.word	0x08082349

080824b0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80824b0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80824b2:	4b18      	ldr	r3, [pc, #96]	; (8082514 <serialEventRun+0x64>)
 80824b4:	b133      	cbz	r3, 80824c4 <serialEventRun+0x14>
 80824b6:	f7ff ff99 	bl	80823ec <_Z16_fetch_usbserialv>
 80824ba:	6803      	ldr	r3, [r0, #0]
 80824bc:	691b      	ldr	r3, [r3, #16]
 80824be:	4798      	blx	r3
 80824c0:	2800      	cmp	r0, #0
 80824c2:	dc1e      	bgt.n	8082502 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80824c4:	4b14      	ldr	r3, [pc, #80]	; (8082518 <serialEventRun+0x68>)
 80824c6:	b133      	cbz	r3, 80824d6 <serialEventRun+0x26>
 80824c8:	f7ff ff16 	bl	80822f8 <_Z22__fetch_global_Serial1v>
 80824cc:	6803      	ldr	r3, [r0, #0]
 80824ce:	691b      	ldr	r3, [r3, #16]
 80824d0:	4798      	blx	r3
 80824d2:	2800      	cmp	r0, #0
 80824d4:	dc18      	bgt.n	8082508 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80824d6:	4b11      	ldr	r3, [pc, #68]	; (808251c <serialEventRun+0x6c>)
 80824d8:	b10b      	cbz	r3, 80824de <serialEventRun+0x2e>
 80824da:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 80824de:	4b10      	ldr	r3, [pc, #64]	; (8082520 <serialEventRun+0x70>)
 80824e0:	b10b      	cbz	r3, 80824e6 <serialEventRun+0x36>
 80824e2:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 80824e6:	4b0f      	ldr	r3, [pc, #60]	; (8082524 <serialEventRun+0x74>)
 80824e8:	b10b      	cbz	r3, 80824ee <serialEventRun+0x3e>
 80824ea:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80824ee:	4b0e      	ldr	r3, [pc, #56]	; (8082528 <serialEventRun+0x78>)
 80824f0:	b17b      	cbz	r3, 8082512 <serialEventRun+0x62>
 80824f2:	f7ff ffb7 	bl	8082464 <_Z17_fetch_usbserial1v>
 80824f6:	6803      	ldr	r3, [r0, #0]
 80824f8:	691b      	ldr	r3, [r3, #16]
 80824fa:	4798      	blx	r3
 80824fc:	2800      	cmp	r0, #0
 80824fe:	dc06      	bgt.n	808250e <serialEventRun+0x5e>
 8082500:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8082502:	f3af 8000 	nop.w
 8082506:	e7dd      	b.n	80824c4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8082508:	f3af 8000 	nop.w
 808250c:	e7e3      	b.n	80824d6 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 808250e:	f3af 8000 	nop.w
 8082512:	bd08      	pop	{r3, pc}
	...

0808252c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 808252c:	b508      	push	{r3, lr}
	serialEventRun();
 808252e:	f7ff ffbf 	bl	80824b0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8082532:	f7fe fd4d 	bl	8080fd0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8082536:	4b01      	ldr	r3, [pc, #4]	; (808253c <_post_loop+0x10>)
 8082538:	6018      	str	r0, [r3, #0]
 808253a:	bd08      	pop	{r3, pc}
 808253c:	20000ba8 	.word	0x20000ba8

08082540 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8082540:	4802      	ldr	r0, [pc, #8]	; (808254c <_Z33system_initialize_user_backup_ramv+0xc>)
 8082542:	4a03      	ldr	r2, [pc, #12]	; (8082550 <_Z33system_initialize_user_backup_ramv+0x10>)
 8082544:	4903      	ldr	r1, [pc, #12]	; (8082554 <_Z33system_initialize_user_backup_ramv+0x14>)
 8082546:	1a12      	subs	r2, r2, r0
 8082548:	f001 baf8 	b.w	8083b3c <memcpy>
 808254c:	40024000 	.word	0x40024000
 8082550:	40024004 	.word	0x40024004
 8082554:	08084b90 	.word	0x08084b90

08082558 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8082558:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808255a:	2300      	movs	r3, #0
 808255c:	9300      	str	r3, [sp, #0]
 808255e:	461a      	mov	r2, r3
 8082560:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8082564:	f7fe feb6 	bl	80812d4 <system_ctrl_set_result>
}
 8082568:	b003      	add	sp, #12
 808256a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08082570 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8082570:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8082572:	8843      	ldrh	r3, [r0, #2]
 8082574:	2b0a      	cmp	r3, #10
 8082576:	d008      	beq.n	808258a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8082578:	2b50      	cmp	r3, #80	; 0x50
 808257a:	d109      	bne.n	8082590 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 808257c:	4b09      	ldr	r3, [pc, #36]	; (80825a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 808257e:	681b      	ldr	r3, [r3, #0]
 8082580:	b13b      	cbz	r3, 8082592 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8082582:	b003      	add	sp, #12
 8082584:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8082588:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 808258a:	f7ff ffe5 	bl	8082558 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 808258e:	e006      	b.n	808259e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8082590:	2300      	movs	r3, #0
 8082592:	9300      	str	r3, [sp, #0]
 8082594:	461a      	mov	r2, r3
 8082596:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808259a:	f7fe fe9b 	bl	80812d4 <system_ctrl_set_result>
        break;
    }
}
 808259e:	b003      	add	sp, #12
 80825a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80825a4:	20000ba0 	.word	0x20000ba0

080825a8 <module_user_init_hook>:

void module_user_init_hook()
{
 80825a8:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80825aa:	4c10      	ldr	r4, [pc, #64]	; (80825ec <module_user_init_hook+0x44>)
 80825ac:	4d10      	ldr	r5, [pc, #64]	; (80825f0 <module_user_init_hook+0x48>)
 80825ae:	6823      	ldr	r3, [r4, #0]
 80825b0:	42ab      	cmp	r3, r5
 80825b2:	4b10      	ldr	r3, [pc, #64]	; (80825f4 <module_user_init_hook+0x4c>)
 80825b4:	bf0c      	ite	eq
 80825b6:	2201      	moveq	r2, #1
 80825b8:	2200      	movne	r2, #0
 80825ba:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80825bc:	d002      	beq.n	80825c4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80825be:	f7ff ffbf 	bl	8082540 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80825c2:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 80825c4:	f7fe fcfc 	bl	8080fc0 <HAL_RNG_GetRandomNumber>
 80825c8:	f001 facc 	bl	8083b64 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80825cc:	4b0a      	ldr	r3, [pc, #40]	; (80825f8 <module_user_init_hook+0x50>)
 80825ce:	b11b      	cbz	r3, 80825d8 <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 80825d0:	f7fe fcf6 	bl	8080fc0 <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 80825d4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80825d8:	2100      	movs	r1, #0
 80825da:	4807      	ldr	r0, [pc, #28]	; (80825f8 <module_user_init_hook+0x50>)
 80825dc:	f7fe fedc 	bl	8081398 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80825e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80825e4:	2100      	movs	r1, #0
 80825e6:	4805      	ldr	r0, [pc, #20]	; (80825fc <module_user_init_hook+0x54>)
 80825e8:	f7fe be6a 	b.w	80812c0 <system_ctrl_set_app_request_handler>
 80825ec:	40024000 	.word	0x40024000
 80825f0:	9a271c1e 	.word	0x9a271c1e
 80825f4:	20000ba4 	.word	0x20000ba4
 80825f8:	00000000 	.word	0x00000000
 80825fc:	08082571 	.word	0x08082571

08082600 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8082600:	b510      	push	{r4, lr}
 8082602:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8082604:	480f      	ldr	r0, [pc, #60]	; (8082644 <pinAvailable+0x44>)
 8082606:	f7ff fc8b 	bl	8081f20 <_ZN8SPIClass9isEnabledEv>
 808260a:	b128      	cbz	r0, 8082618 <pinAvailable+0x18>
 808260c:	f1a4 030d 	sub.w	r3, r4, #13
 8082610:	2b02      	cmp	r3, #2
 8082612:	d801      	bhi.n	8082618 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 8082614:	2000      	movs	r0, #0
 8082616:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8082618:	f000 f858 	bl	80826cc <_Z19__fetch_global_Wirev>
 808261c:	f7ff fb39 	bl	8081c92 <_ZN7TwoWire9isEnabledEv>
 8082620:	b108      	cbz	r0, 8082626 <pinAvailable+0x26>
 8082622:	2c01      	cmp	r4, #1
 8082624:	d9f6      	bls.n	8082614 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8082626:	f7ff fe67 	bl	80822f8 <_Z22__fetch_global_Serial1v>
 808262a:	f7ff fe61 	bl	80822f0 <_ZN11USARTSerial9isEnabledEv>
 808262e:	b118      	cbz	r0, 8082638 <pinAvailable+0x38>
 8082630:	f1a4 0312 	sub.w	r3, r4, #18
 8082634:	2b01      	cmp	r3, #1
 8082636:	d9ed      	bls.n	8082614 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8082638:	2c2e      	cmp	r4, #46	; 0x2e
 808263a:	bf8c      	ite	hi
 808263c:	2000      	movhi	r0, #0
 808263e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8082640:	bd10      	pop	{r4, pc}
 8082642:	bf00      	nop
 8082644:	20000bcc 	.word	0x20000bcc

08082648 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8082648:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 808264a:	b538      	push	{r3, r4, r5, lr}
 808264c:	4604      	mov	r4, r0
 808264e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8082650:	d80a      	bhi.n	8082668 <pinMode+0x20>
 8082652:	29ff      	cmp	r1, #255	; 0xff
 8082654:	d008      	beq.n	8082668 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8082656:	f7ff ffd3 	bl	8082600 <pinAvailable>
 808265a:	b128      	cbz	r0, 8082668 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 808265c:	4629      	mov	r1, r5
 808265e:	4620      	mov	r0, r4
}
 8082660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8082664:	f7fe bce4 	b.w	8081030 <HAL_Pin_Mode>
 8082668:	bd38      	pop	{r3, r4, r5, pc}

0808266a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 808266a:	b538      	push	{r3, r4, r5, lr}
 808266c:	4604      	mov	r4, r0
 808266e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8082670:	f7fe fce6 	bl	8081040 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8082674:	28ff      	cmp	r0, #255	; 0xff
 8082676:	d010      	beq.n	808269a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8082678:	2806      	cmp	r0, #6
 808267a:	d804      	bhi.n	8082686 <digitalWrite+0x1c>
 808267c:	234d      	movs	r3, #77	; 0x4d
 808267e:	fa23 f000 	lsr.w	r0, r3, r0
 8082682:	07c3      	lsls	r3, r0, #31
 8082684:	d409      	bmi.n	808269a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8082686:	4620      	mov	r0, r4
 8082688:	f7ff ffba 	bl	8082600 <pinAvailable>
 808268c:	b128      	cbz	r0, 808269a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 808268e:	4629      	mov	r1, r5
 8082690:	4620      	mov	r0, r4
}
 8082692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 8082696:	f7fe bcdb 	b.w	8081050 <HAL_GPIO_Write>
 808269a:	bd38      	pop	{r3, r4, r5, pc}

0808269c <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 808269c:	b510      	push	{r4, lr}
 808269e:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80826a0:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80826a2:	bf9c      	itt	ls
 80826a4:	340a      	addls	r4, #10
 80826a6:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80826a8:	4620      	mov	r0, r4
 80826aa:	f7ff ffa9 	bl	8082600 <pinAvailable>
 80826ae:	b150      	cbz	r0, 80826c6 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80826b0:	2103      	movs	r1, #3
 80826b2:	4620      	mov	r0, r4
 80826b4:	f7fe fcb4 	bl	8081020 <HAL_Validate_Pin_Function>
 80826b8:	2803      	cmp	r0, #3
 80826ba:	d104      	bne.n	80826c6 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80826bc:	4620      	mov	r0, r4
}
 80826be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80826c2:	f7fe bcdd 	b.w	8081080 <HAL_ADC_Read>
}
 80826c6:	2000      	movs	r0, #0
 80826c8:	bd10      	pop	{r4, pc}
	...

080826cc <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80826cc:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80826ce:	4d0b      	ldr	r5, [pc, #44]	; (80826fc <_Z19__fetch_global_Wirev+0x30>)
 80826d0:	6829      	ldr	r1, [r5, #0]
 80826d2:	f011 0401 	ands.w	r4, r1, #1
 80826d6:	d10f      	bne.n	80826f8 <_Z19__fetch_global_Wirev+0x2c>
 80826d8:	4628      	mov	r0, r5
 80826da:	f7fd fce2 	bl	80800a2 <__cxa_guard_acquire>
 80826de:	b158      	cbz	r0, 80826f8 <_Z19__fetch_global_Wirev+0x2c>
 80826e0:	4621      	mov	r1, r4
 80826e2:	4807      	ldr	r0, [pc, #28]	; (8082700 <_Z19__fetch_global_Wirev+0x34>)
 80826e4:	f7ff faa6 	bl	8081c34 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80826e8:	4628      	mov	r0, r5
 80826ea:	f7fd fcdf 	bl	80800ac <__cxa_guard_release>
 80826ee:	4a05      	ldr	r2, [pc, #20]	; (8082704 <_Z19__fetch_global_Wirev+0x38>)
 80826f0:	4905      	ldr	r1, [pc, #20]	; (8082708 <_Z19__fetch_global_Wirev+0x3c>)
 80826f2:	4803      	ldr	r0, [pc, #12]	; (8082700 <_Z19__fetch_global_Wirev+0x34>)
 80826f4:	f000 f850 	bl	8082798 <__aeabi_atexit>
	return wire;
}
 80826f8:	4801      	ldr	r0, [pc, #4]	; (8082700 <_Z19__fetch_global_Wirev+0x34>)
 80826fa:	bd38      	pop	{r3, r4, r5, pc}
 80826fc:	20000bac 	.word	0x20000bac
 8082700:	20000bb0 	.word	0x20000bb0
 8082704:	20000544 	.word	0x20000544
 8082708:	08081bdd 	.word	0x08081bdd

0808270c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 808270c:	b513      	push	{r0, r1, r4, lr}
 808270e:	4c08      	ldr	r4, [pc, #32]	; (8082730 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8082710:	2300      	movs	r3, #0
 8082712:	461a      	mov	r2, r3
 8082714:	4619      	mov	r1, r3
 8082716:	9300      	str	r3, [sp, #0]
 8082718:	4620      	mov	r0, r4
 808271a:	f7ff fb2d 	bl	8081d78 <_ZN9IPAddressC1Ehhhh>
 808271e:	4620      	mov	r0, r4
 8082720:	4a04      	ldr	r2, [pc, #16]	; (8082734 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8082722:	4905      	ldr	r1, [pc, #20]	; (8082738 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8082724:	b002      	add	sp, #8
 8082726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808272a:	f000 b835 	b.w	8082798 <__aeabi_atexit>
 808272e:	bf00      	nop
 8082730:	20000bc4 	.word	0x20000bc4
 8082734:	20000544 	.word	0x20000544
 8082738:	08081d21 	.word	0x08081d21

0808273c <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808273c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 808273e:	4e11      	ldr	r6, [pc, #68]	; (8082784 <_GLOBAL__sub_I_SPI+0x48>)
 8082740:	4d11      	ldr	r5, [pc, #68]	; (8082788 <_GLOBAL__sub_I_SPI+0x4c>)
 8082742:	4c12      	ldr	r4, [pc, #72]	; (808278c <_GLOBAL__sub_I_SPI+0x50>)
 8082744:	2100      	movs	r1, #0
 8082746:	4630      	mov	r0, r6
 8082748:	f7ff fbd6 	bl	8081ef8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808274c:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808274e:	4e10      	ldr	r6, [pc, #64]	; (8082790 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8082750:	462a      	mov	r2, r5
 8082752:	4621      	mov	r1, r4
 8082754:	f000 f820 	bl	8082798 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8082758:	2101      	movs	r1, #1
 808275a:	4630      	mov	r0, r6
 808275c:	f7ff fbcc 	bl	8081ef8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8082760:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8082762:	4e0c      	ldr	r6, [pc, #48]	; (8082794 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8082764:	462a      	mov	r2, r5
 8082766:	4621      	mov	r1, r4
 8082768:	f000 f816 	bl	8082798 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808276c:	2102      	movs	r1, #2
 808276e:	4630      	mov	r0, r6
 8082770:	f7ff fbc2 	bl	8081ef8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8082774:	462a      	mov	r2, r5
 8082776:	4621      	mov	r1, r4
 8082778:	4630      	mov	r0, r6
 808277a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808277e:	f000 b80b 	b.w	8082798 <__aeabi_atexit>
 8082782:	bf00      	nop
 8082784:	20000bcc 	.word	0x20000bcc
 8082788:	20000544 	.word	0x20000544
 808278c:	08081ee9 	.word	0x08081ee9
 8082790:	20000bdc 	.word	0x20000bdc
 8082794:	20000bec 	.word	0x20000bec

08082798 <__aeabi_atexit>:
 8082798:	460b      	mov	r3, r1
 808279a:	4601      	mov	r1, r0
 808279c:	4618      	mov	r0, r3
 808279e:	f001 b8c7 	b.w	8083930 <__cxa_atexit>

080827a2 <_ZSt25__throw_bad_function_callv>:
 80827a2:	b508      	push	{r3, lr}
 80827a4:	f7fe fe48 	bl	8081438 <abort>

080827a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80827a8:	4b24      	ldr	r3, [pc, #144]	; (808283c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80827aa:	681a      	ldr	r2, [r3, #0]
 80827ac:	07d0      	lsls	r0, r2, #31
 80827ae:	bf5c      	itt	pl
 80827b0:	2201      	movpl	r2, #1
 80827b2:	601a      	strpl	r2, [r3, #0]
 80827b4:	4b22      	ldr	r3, [pc, #136]	; (8082840 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80827b6:	681a      	ldr	r2, [r3, #0]
 80827b8:	07d1      	lsls	r1, r2, #31
 80827ba:	bf5c      	itt	pl
 80827bc:	2201      	movpl	r2, #1
 80827be:	601a      	strpl	r2, [r3, #0]
 80827c0:	4b20      	ldr	r3, [pc, #128]	; (8082844 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80827c2:	681a      	ldr	r2, [r3, #0]
 80827c4:	07d2      	lsls	r2, r2, #31
 80827c6:	bf5c      	itt	pl
 80827c8:	2201      	movpl	r2, #1
 80827ca:	601a      	strpl	r2, [r3, #0]
 80827cc:	4b1e      	ldr	r3, [pc, #120]	; (8082848 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80827ce:	681a      	ldr	r2, [r3, #0]
 80827d0:	07d0      	lsls	r0, r2, #31
 80827d2:	bf5c      	itt	pl
 80827d4:	2201      	movpl	r2, #1
 80827d6:	601a      	strpl	r2, [r3, #0]
 80827d8:	4b1c      	ldr	r3, [pc, #112]	; (808284c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80827da:	681a      	ldr	r2, [r3, #0]
 80827dc:	07d1      	lsls	r1, r2, #31
 80827de:	bf5c      	itt	pl
 80827e0:	2201      	movpl	r2, #1
 80827e2:	601a      	strpl	r2, [r3, #0]
 80827e4:	4b1a      	ldr	r3, [pc, #104]	; (8082850 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80827e6:	681a      	ldr	r2, [r3, #0]
 80827e8:	07d2      	lsls	r2, r2, #31
 80827ea:	bf5c      	itt	pl
 80827ec:	2201      	movpl	r2, #1
 80827ee:	601a      	strpl	r2, [r3, #0]
 80827f0:	4b18      	ldr	r3, [pc, #96]	; (8082854 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80827f2:	681a      	ldr	r2, [r3, #0]
 80827f4:	07d0      	lsls	r0, r2, #31
 80827f6:	bf5c      	itt	pl
 80827f8:	2201      	movpl	r2, #1
 80827fa:	601a      	strpl	r2, [r3, #0]
 80827fc:	4b16      	ldr	r3, [pc, #88]	; (8082858 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80827fe:	681a      	ldr	r2, [r3, #0]
 8082800:	07d1      	lsls	r1, r2, #31
 8082802:	bf5c      	itt	pl
 8082804:	2201      	movpl	r2, #1
 8082806:	601a      	strpl	r2, [r3, #0]
 8082808:	4b14      	ldr	r3, [pc, #80]	; (808285c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 808280a:	681a      	ldr	r2, [r3, #0]
 808280c:	07d2      	lsls	r2, r2, #31
 808280e:	bf5c      	itt	pl
 8082810:	2201      	movpl	r2, #1
 8082812:	601a      	strpl	r2, [r3, #0]
 8082814:	4b12      	ldr	r3, [pc, #72]	; (8082860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8082816:	681a      	ldr	r2, [r3, #0]
 8082818:	07d0      	lsls	r0, r2, #31
 808281a:	bf5c      	itt	pl
 808281c:	2201      	movpl	r2, #1
 808281e:	601a      	strpl	r2, [r3, #0]
 8082820:	4b10      	ldr	r3, [pc, #64]	; (8082864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8082822:	681a      	ldr	r2, [r3, #0]
 8082824:	07d1      	lsls	r1, r2, #31
 8082826:	bf5c      	itt	pl
 8082828:	2201      	movpl	r2, #1
 808282a:	601a      	strpl	r2, [r3, #0]
 808282c:	4b0e      	ldr	r3, [pc, #56]	; (8082868 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 808282e:	681a      	ldr	r2, [r3, #0]
 8082830:	07d2      	lsls	r2, r2, #31
 8082832:	bf5c      	itt	pl
 8082834:	2201      	movpl	r2, #1
 8082836:	601a      	strpl	r2, [r3, #0]
 8082838:	4770      	bx	lr
 808283a:	bf00      	nop
 808283c:	20000c28 	.word	0x20000c28
 8082840:	20000c24 	.word	0x20000c24
 8082844:	20000c20 	.word	0x20000c20
 8082848:	20000c1c 	.word	0x20000c1c
 808284c:	20000c18 	.word	0x20000c18
 8082850:	20000c14 	.word	0x20000c14
 8082854:	20000c10 	.word	0x20000c10
 8082858:	20000c0c 	.word	0x20000c0c
 808285c:	20000c08 	.word	0x20000c08
 8082860:	20000c04 	.word	0x20000c04
 8082864:	20000c00 	.word	0x20000c00
 8082868:	20000bfc 	.word	0x20000bfc

0808286c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 808286c:	4b18      	ldr	r3, [pc, #96]	; (80828d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808286e:	681a      	ldr	r2, [r3, #0]
 8082870:	07d1      	lsls	r1, r2, #31
 8082872:	bf5c      	itt	pl
 8082874:	2201      	movpl	r2, #1
 8082876:	601a      	strpl	r2, [r3, #0]
 8082878:	4b16      	ldr	r3, [pc, #88]	; (80828d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808287a:	681a      	ldr	r2, [r3, #0]
 808287c:	07d2      	lsls	r2, r2, #31
 808287e:	bf5c      	itt	pl
 8082880:	2201      	movpl	r2, #1
 8082882:	601a      	strpl	r2, [r3, #0]
 8082884:	4b14      	ldr	r3, [pc, #80]	; (80828d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8082886:	681a      	ldr	r2, [r3, #0]
 8082888:	07d0      	lsls	r0, r2, #31
 808288a:	bf5c      	itt	pl
 808288c:	2201      	movpl	r2, #1
 808288e:	601a      	strpl	r2, [r3, #0]
 8082890:	4b12      	ldr	r3, [pc, #72]	; (80828dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8082892:	681a      	ldr	r2, [r3, #0]
 8082894:	07d1      	lsls	r1, r2, #31
 8082896:	bf5c      	itt	pl
 8082898:	2201      	movpl	r2, #1
 808289a:	601a      	strpl	r2, [r3, #0]
 808289c:	4b10      	ldr	r3, [pc, #64]	; (80828e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808289e:	681a      	ldr	r2, [r3, #0]
 80828a0:	07d2      	lsls	r2, r2, #31
 80828a2:	bf5c      	itt	pl
 80828a4:	2201      	movpl	r2, #1
 80828a6:	601a      	strpl	r2, [r3, #0]
 80828a8:	4b0e      	ldr	r3, [pc, #56]	; (80828e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80828aa:	681a      	ldr	r2, [r3, #0]
 80828ac:	07d0      	lsls	r0, r2, #31
 80828ae:	bf5c      	itt	pl
 80828b0:	2201      	movpl	r2, #1
 80828b2:	601a      	strpl	r2, [r3, #0]
 80828b4:	4b0c      	ldr	r3, [pc, #48]	; (80828e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80828b6:	681a      	ldr	r2, [r3, #0]
 80828b8:	07d1      	lsls	r1, r2, #31
 80828ba:	bf5c      	itt	pl
 80828bc:	2201      	movpl	r2, #1
 80828be:	601a      	strpl	r2, [r3, #0]
 80828c0:	4b0a      	ldr	r3, [pc, #40]	; (80828ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80828c2:	681a      	ldr	r2, [r3, #0]
 80828c4:	07d2      	lsls	r2, r2, #31
 80828c6:	bf5c      	itt	pl
 80828c8:	2201      	movpl	r2, #1
 80828ca:	601a      	strpl	r2, [r3, #0]
 80828cc:	4770      	bx	lr
 80828ce:	bf00      	nop
 80828d0:	20000c48 	.word	0x20000c48
 80828d4:	20000c44 	.word	0x20000c44
 80828d8:	20000c40 	.word	0x20000c40
 80828dc:	20000c3c 	.word	0x20000c3c
 80828e0:	20000c38 	.word	0x20000c38
 80828e4:	20000c34 	.word	0x20000c34
 80828e8:	20000c30 	.word	0x20000c30
 80828ec:	20000c2c 	.word	0x20000c2c

080828f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80828f0:	4b18      	ldr	r3, [pc, #96]	; (8082954 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80828f2:	681a      	ldr	r2, [r3, #0]
 80828f4:	07d1      	lsls	r1, r2, #31
 80828f6:	bf5c      	itt	pl
 80828f8:	2201      	movpl	r2, #1
 80828fa:	601a      	strpl	r2, [r3, #0]
 80828fc:	4b16      	ldr	r3, [pc, #88]	; (8082958 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80828fe:	681a      	ldr	r2, [r3, #0]
 8082900:	07d2      	lsls	r2, r2, #31
 8082902:	bf5c      	itt	pl
 8082904:	2201      	movpl	r2, #1
 8082906:	601a      	strpl	r2, [r3, #0]
 8082908:	4b14      	ldr	r3, [pc, #80]	; (808295c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808290a:	681a      	ldr	r2, [r3, #0]
 808290c:	07d0      	lsls	r0, r2, #31
 808290e:	bf5c      	itt	pl
 8082910:	2201      	movpl	r2, #1
 8082912:	601a      	strpl	r2, [r3, #0]
 8082914:	4b12      	ldr	r3, [pc, #72]	; (8082960 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8082916:	681a      	ldr	r2, [r3, #0]
 8082918:	07d1      	lsls	r1, r2, #31
 808291a:	bf5c      	itt	pl
 808291c:	2201      	movpl	r2, #1
 808291e:	601a      	strpl	r2, [r3, #0]
 8082920:	4b10      	ldr	r3, [pc, #64]	; (8082964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8082922:	681a      	ldr	r2, [r3, #0]
 8082924:	07d2      	lsls	r2, r2, #31
 8082926:	bf5c      	itt	pl
 8082928:	2201      	movpl	r2, #1
 808292a:	601a      	strpl	r2, [r3, #0]
 808292c:	4b0e      	ldr	r3, [pc, #56]	; (8082968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808292e:	681a      	ldr	r2, [r3, #0]
 8082930:	07d0      	lsls	r0, r2, #31
 8082932:	bf5c      	itt	pl
 8082934:	2201      	movpl	r2, #1
 8082936:	601a      	strpl	r2, [r3, #0]
 8082938:	4b0c      	ldr	r3, [pc, #48]	; (808296c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808293a:	681a      	ldr	r2, [r3, #0]
 808293c:	07d1      	lsls	r1, r2, #31
 808293e:	bf5c      	itt	pl
 8082940:	2201      	movpl	r2, #1
 8082942:	601a      	strpl	r2, [r3, #0]
 8082944:	4b0a      	ldr	r3, [pc, #40]	; (8082970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8082946:	681a      	ldr	r2, [r3, #0]
 8082948:	07d2      	lsls	r2, r2, #31
 808294a:	bf5c      	itt	pl
 808294c:	2201      	movpl	r2, #1
 808294e:	601a      	strpl	r2, [r3, #0]
 8082950:	4770      	bx	lr
 8082952:	bf00      	nop
 8082954:	20000c68 	.word	0x20000c68
 8082958:	20000c64 	.word	0x20000c64
 808295c:	20000c60 	.word	0x20000c60
 8082960:	20000c5c 	.word	0x20000c5c
 8082964:	20000c58 	.word	0x20000c58
 8082968:	20000c54 	.word	0x20000c54
 808296c:	20000c50 	.word	0x20000c50
 8082970:	20000c4c 	.word	0x20000c4c

08082974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8082974:	4b24      	ldr	r3, [pc, #144]	; (8082a08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8082976:	681a      	ldr	r2, [r3, #0]
 8082978:	07d0      	lsls	r0, r2, #31
 808297a:	bf5c      	itt	pl
 808297c:	2201      	movpl	r2, #1
 808297e:	601a      	strpl	r2, [r3, #0]
 8082980:	4b22      	ldr	r3, [pc, #136]	; (8082a0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8082982:	681a      	ldr	r2, [r3, #0]
 8082984:	07d1      	lsls	r1, r2, #31
 8082986:	bf5c      	itt	pl
 8082988:	2201      	movpl	r2, #1
 808298a:	601a      	strpl	r2, [r3, #0]
 808298c:	4b20      	ldr	r3, [pc, #128]	; (8082a10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 808298e:	681a      	ldr	r2, [r3, #0]
 8082990:	07d2      	lsls	r2, r2, #31
 8082992:	bf5c      	itt	pl
 8082994:	2201      	movpl	r2, #1
 8082996:	601a      	strpl	r2, [r3, #0]
 8082998:	4b1e      	ldr	r3, [pc, #120]	; (8082a14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 808299a:	681a      	ldr	r2, [r3, #0]
 808299c:	07d0      	lsls	r0, r2, #31
 808299e:	bf5c      	itt	pl
 80829a0:	2201      	movpl	r2, #1
 80829a2:	601a      	strpl	r2, [r3, #0]
 80829a4:	4b1c      	ldr	r3, [pc, #112]	; (8082a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80829a6:	681a      	ldr	r2, [r3, #0]
 80829a8:	07d1      	lsls	r1, r2, #31
 80829aa:	bf5c      	itt	pl
 80829ac:	2201      	movpl	r2, #1
 80829ae:	601a      	strpl	r2, [r3, #0]
 80829b0:	4b1a      	ldr	r3, [pc, #104]	; (8082a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80829b2:	681a      	ldr	r2, [r3, #0]
 80829b4:	07d2      	lsls	r2, r2, #31
 80829b6:	bf5c      	itt	pl
 80829b8:	2201      	movpl	r2, #1
 80829ba:	601a      	strpl	r2, [r3, #0]
 80829bc:	4b18      	ldr	r3, [pc, #96]	; (8082a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80829be:	681a      	ldr	r2, [r3, #0]
 80829c0:	07d0      	lsls	r0, r2, #31
 80829c2:	bf5c      	itt	pl
 80829c4:	2201      	movpl	r2, #1
 80829c6:	601a      	strpl	r2, [r3, #0]
 80829c8:	4b16      	ldr	r3, [pc, #88]	; (8082a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80829ca:	681a      	ldr	r2, [r3, #0]
 80829cc:	07d1      	lsls	r1, r2, #31
 80829ce:	bf5c      	itt	pl
 80829d0:	2201      	movpl	r2, #1
 80829d2:	601a      	strpl	r2, [r3, #0]
 80829d4:	4b14      	ldr	r3, [pc, #80]	; (8082a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80829d6:	681a      	ldr	r2, [r3, #0]
 80829d8:	07d2      	lsls	r2, r2, #31
 80829da:	bf5c      	itt	pl
 80829dc:	2201      	movpl	r2, #1
 80829de:	601a      	strpl	r2, [r3, #0]
 80829e0:	4b12      	ldr	r3, [pc, #72]	; (8082a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80829e2:	681a      	ldr	r2, [r3, #0]
 80829e4:	07d0      	lsls	r0, r2, #31
 80829e6:	bf5c      	itt	pl
 80829e8:	2201      	movpl	r2, #1
 80829ea:	601a      	strpl	r2, [r3, #0]
 80829ec:	4b10      	ldr	r3, [pc, #64]	; (8082a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80829ee:	681a      	ldr	r2, [r3, #0]
 80829f0:	07d1      	lsls	r1, r2, #31
 80829f2:	bf5c      	itt	pl
 80829f4:	2201      	movpl	r2, #1
 80829f6:	601a      	strpl	r2, [r3, #0]
 80829f8:	4b0e      	ldr	r3, [pc, #56]	; (8082a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80829fa:	681a      	ldr	r2, [r3, #0]
 80829fc:	07d2      	lsls	r2, r2, #31
 80829fe:	bf5c      	itt	pl
 8082a00:	2201      	movpl	r2, #1
 8082a02:	601a      	strpl	r2, [r3, #0]
 8082a04:	4770      	bx	lr
 8082a06:	bf00      	nop
 8082a08:	20000c98 	.word	0x20000c98
 8082a0c:	20000c94 	.word	0x20000c94
 8082a10:	20000c90 	.word	0x20000c90
 8082a14:	20000c8c 	.word	0x20000c8c
 8082a18:	20000c88 	.word	0x20000c88
 8082a1c:	20000c84 	.word	0x20000c84
 8082a20:	20000c80 	.word	0x20000c80
 8082a24:	20000c7c 	.word	0x20000c7c
 8082a28:	20000c78 	.word	0x20000c78
 8082a2c:	20000c74 	.word	0x20000c74
 8082a30:	20000c70 	.word	0x20000c70
 8082a34:	20000c6c 	.word	0x20000c6c

08082a38 <__aeabi_drsub>:
 8082a38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8082a3c:	e002      	b.n	8082a44 <__adddf3>
 8082a3e:	bf00      	nop

08082a40 <__aeabi_dsub>:
 8082a40:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08082a44 <__adddf3>:
 8082a44:	b530      	push	{r4, r5, lr}
 8082a46:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8082a4a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8082a4e:	ea94 0f05 	teq	r4, r5
 8082a52:	bf08      	it	eq
 8082a54:	ea90 0f02 	teqeq	r0, r2
 8082a58:	bf1f      	itttt	ne
 8082a5a:	ea54 0c00 	orrsne.w	ip, r4, r0
 8082a5e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8082a62:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8082a66:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8082a6a:	f000 80e2 	beq.w	8082c32 <__adddf3+0x1ee>
 8082a6e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8082a72:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8082a76:	bfb8      	it	lt
 8082a78:	426d      	neglt	r5, r5
 8082a7a:	dd0c      	ble.n	8082a96 <__adddf3+0x52>
 8082a7c:	442c      	add	r4, r5
 8082a7e:	ea80 0202 	eor.w	r2, r0, r2
 8082a82:	ea81 0303 	eor.w	r3, r1, r3
 8082a86:	ea82 0000 	eor.w	r0, r2, r0
 8082a8a:	ea83 0101 	eor.w	r1, r3, r1
 8082a8e:	ea80 0202 	eor.w	r2, r0, r2
 8082a92:	ea81 0303 	eor.w	r3, r1, r3
 8082a96:	2d36      	cmp	r5, #54	; 0x36
 8082a98:	bf88      	it	hi
 8082a9a:	bd30      	pophi	{r4, r5, pc}
 8082a9c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8082aa0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8082aa4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8082aa8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8082aac:	d002      	beq.n	8082ab4 <__adddf3+0x70>
 8082aae:	4240      	negs	r0, r0
 8082ab0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8082ab4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8082ab8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8082abc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8082ac0:	d002      	beq.n	8082ac8 <__adddf3+0x84>
 8082ac2:	4252      	negs	r2, r2
 8082ac4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8082ac8:	ea94 0f05 	teq	r4, r5
 8082acc:	f000 80a7 	beq.w	8082c1e <__adddf3+0x1da>
 8082ad0:	f1a4 0401 	sub.w	r4, r4, #1
 8082ad4:	f1d5 0e20 	rsbs	lr, r5, #32
 8082ad8:	db0d      	blt.n	8082af6 <__adddf3+0xb2>
 8082ada:	fa02 fc0e 	lsl.w	ip, r2, lr
 8082ade:	fa22 f205 	lsr.w	r2, r2, r5
 8082ae2:	1880      	adds	r0, r0, r2
 8082ae4:	f141 0100 	adc.w	r1, r1, #0
 8082ae8:	fa03 f20e 	lsl.w	r2, r3, lr
 8082aec:	1880      	adds	r0, r0, r2
 8082aee:	fa43 f305 	asr.w	r3, r3, r5
 8082af2:	4159      	adcs	r1, r3
 8082af4:	e00e      	b.n	8082b14 <__adddf3+0xd0>
 8082af6:	f1a5 0520 	sub.w	r5, r5, #32
 8082afa:	f10e 0e20 	add.w	lr, lr, #32
 8082afe:	2a01      	cmp	r2, #1
 8082b00:	fa03 fc0e 	lsl.w	ip, r3, lr
 8082b04:	bf28      	it	cs
 8082b06:	f04c 0c02 	orrcs.w	ip, ip, #2
 8082b0a:	fa43 f305 	asr.w	r3, r3, r5
 8082b0e:	18c0      	adds	r0, r0, r3
 8082b10:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8082b14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8082b18:	d507      	bpl.n	8082b2a <__adddf3+0xe6>
 8082b1a:	f04f 0e00 	mov.w	lr, #0
 8082b1e:	f1dc 0c00 	rsbs	ip, ip, #0
 8082b22:	eb7e 0000 	sbcs.w	r0, lr, r0
 8082b26:	eb6e 0101 	sbc.w	r1, lr, r1
 8082b2a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8082b2e:	d31b      	bcc.n	8082b68 <__adddf3+0x124>
 8082b30:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8082b34:	d30c      	bcc.n	8082b50 <__adddf3+0x10c>
 8082b36:	0849      	lsrs	r1, r1, #1
 8082b38:	ea5f 0030 	movs.w	r0, r0, rrx
 8082b3c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8082b40:	f104 0401 	add.w	r4, r4, #1
 8082b44:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8082b48:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8082b4c:	f080 809a 	bcs.w	8082c84 <__adddf3+0x240>
 8082b50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8082b54:	bf08      	it	eq
 8082b56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8082b5a:	f150 0000 	adcs.w	r0, r0, #0
 8082b5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8082b62:	ea41 0105 	orr.w	r1, r1, r5
 8082b66:	bd30      	pop	{r4, r5, pc}
 8082b68:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8082b6c:	4140      	adcs	r0, r0
 8082b6e:	eb41 0101 	adc.w	r1, r1, r1
 8082b72:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8082b76:	f1a4 0401 	sub.w	r4, r4, #1
 8082b7a:	d1e9      	bne.n	8082b50 <__adddf3+0x10c>
 8082b7c:	f091 0f00 	teq	r1, #0
 8082b80:	bf04      	itt	eq
 8082b82:	4601      	moveq	r1, r0
 8082b84:	2000      	moveq	r0, #0
 8082b86:	fab1 f381 	clz	r3, r1
 8082b8a:	bf08      	it	eq
 8082b8c:	3320      	addeq	r3, #32
 8082b8e:	f1a3 030b 	sub.w	r3, r3, #11
 8082b92:	f1b3 0220 	subs.w	r2, r3, #32
 8082b96:	da0c      	bge.n	8082bb2 <__adddf3+0x16e>
 8082b98:	320c      	adds	r2, #12
 8082b9a:	dd08      	ble.n	8082bae <__adddf3+0x16a>
 8082b9c:	f102 0c14 	add.w	ip, r2, #20
 8082ba0:	f1c2 020c 	rsb	r2, r2, #12
 8082ba4:	fa01 f00c 	lsl.w	r0, r1, ip
 8082ba8:	fa21 f102 	lsr.w	r1, r1, r2
 8082bac:	e00c      	b.n	8082bc8 <__adddf3+0x184>
 8082bae:	f102 0214 	add.w	r2, r2, #20
 8082bb2:	bfd8      	it	le
 8082bb4:	f1c2 0c20 	rsble	ip, r2, #32
 8082bb8:	fa01 f102 	lsl.w	r1, r1, r2
 8082bbc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8082bc0:	bfdc      	itt	le
 8082bc2:	ea41 010c 	orrle.w	r1, r1, ip
 8082bc6:	4090      	lslle	r0, r2
 8082bc8:	1ae4      	subs	r4, r4, r3
 8082bca:	bfa2      	ittt	ge
 8082bcc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8082bd0:	4329      	orrge	r1, r5
 8082bd2:	bd30      	popge	{r4, r5, pc}
 8082bd4:	ea6f 0404 	mvn.w	r4, r4
 8082bd8:	3c1f      	subs	r4, #31
 8082bda:	da1c      	bge.n	8082c16 <__adddf3+0x1d2>
 8082bdc:	340c      	adds	r4, #12
 8082bde:	dc0e      	bgt.n	8082bfe <__adddf3+0x1ba>
 8082be0:	f104 0414 	add.w	r4, r4, #20
 8082be4:	f1c4 0220 	rsb	r2, r4, #32
 8082be8:	fa20 f004 	lsr.w	r0, r0, r4
 8082bec:	fa01 f302 	lsl.w	r3, r1, r2
 8082bf0:	ea40 0003 	orr.w	r0, r0, r3
 8082bf4:	fa21 f304 	lsr.w	r3, r1, r4
 8082bf8:	ea45 0103 	orr.w	r1, r5, r3
 8082bfc:	bd30      	pop	{r4, r5, pc}
 8082bfe:	f1c4 040c 	rsb	r4, r4, #12
 8082c02:	f1c4 0220 	rsb	r2, r4, #32
 8082c06:	fa20 f002 	lsr.w	r0, r0, r2
 8082c0a:	fa01 f304 	lsl.w	r3, r1, r4
 8082c0e:	ea40 0003 	orr.w	r0, r0, r3
 8082c12:	4629      	mov	r1, r5
 8082c14:	bd30      	pop	{r4, r5, pc}
 8082c16:	fa21 f004 	lsr.w	r0, r1, r4
 8082c1a:	4629      	mov	r1, r5
 8082c1c:	bd30      	pop	{r4, r5, pc}
 8082c1e:	f094 0f00 	teq	r4, #0
 8082c22:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8082c26:	bf06      	itte	eq
 8082c28:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8082c2c:	3401      	addeq	r4, #1
 8082c2e:	3d01      	subne	r5, #1
 8082c30:	e74e      	b.n	8082ad0 <__adddf3+0x8c>
 8082c32:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8082c36:	bf18      	it	ne
 8082c38:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8082c3c:	d029      	beq.n	8082c92 <__adddf3+0x24e>
 8082c3e:	ea94 0f05 	teq	r4, r5
 8082c42:	bf08      	it	eq
 8082c44:	ea90 0f02 	teqeq	r0, r2
 8082c48:	d005      	beq.n	8082c56 <__adddf3+0x212>
 8082c4a:	ea54 0c00 	orrs.w	ip, r4, r0
 8082c4e:	bf04      	itt	eq
 8082c50:	4619      	moveq	r1, r3
 8082c52:	4610      	moveq	r0, r2
 8082c54:	bd30      	pop	{r4, r5, pc}
 8082c56:	ea91 0f03 	teq	r1, r3
 8082c5a:	bf1e      	ittt	ne
 8082c5c:	2100      	movne	r1, #0
 8082c5e:	2000      	movne	r0, #0
 8082c60:	bd30      	popne	{r4, r5, pc}
 8082c62:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8082c66:	d105      	bne.n	8082c74 <__adddf3+0x230>
 8082c68:	0040      	lsls	r0, r0, #1
 8082c6a:	4149      	adcs	r1, r1
 8082c6c:	bf28      	it	cs
 8082c6e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8082c72:	bd30      	pop	{r4, r5, pc}
 8082c74:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8082c78:	bf3c      	itt	cc
 8082c7a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8082c7e:	bd30      	popcc	{r4, r5, pc}
 8082c80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8082c84:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8082c88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8082c8c:	f04f 0000 	mov.w	r0, #0
 8082c90:	bd30      	pop	{r4, r5, pc}
 8082c92:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8082c96:	bf1a      	itte	ne
 8082c98:	4619      	movne	r1, r3
 8082c9a:	4610      	movne	r0, r2
 8082c9c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8082ca0:	bf1c      	itt	ne
 8082ca2:	460b      	movne	r3, r1
 8082ca4:	4602      	movne	r2, r0
 8082ca6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8082caa:	bf06      	itte	eq
 8082cac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8082cb0:	ea91 0f03 	teqeq	r1, r3
 8082cb4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8082cb8:	bd30      	pop	{r4, r5, pc}
 8082cba:	bf00      	nop

08082cbc <__aeabi_ui2d>:
 8082cbc:	f090 0f00 	teq	r0, #0
 8082cc0:	bf04      	itt	eq
 8082cc2:	2100      	moveq	r1, #0
 8082cc4:	4770      	bxeq	lr
 8082cc6:	b530      	push	{r4, r5, lr}
 8082cc8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8082ccc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8082cd0:	f04f 0500 	mov.w	r5, #0
 8082cd4:	f04f 0100 	mov.w	r1, #0
 8082cd8:	e750      	b.n	8082b7c <__adddf3+0x138>
 8082cda:	bf00      	nop

08082cdc <__aeabi_i2d>:
 8082cdc:	f090 0f00 	teq	r0, #0
 8082ce0:	bf04      	itt	eq
 8082ce2:	2100      	moveq	r1, #0
 8082ce4:	4770      	bxeq	lr
 8082ce6:	b530      	push	{r4, r5, lr}
 8082ce8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8082cec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8082cf0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8082cf4:	bf48      	it	mi
 8082cf6:	4240      	negmi	r0, r0
 8082cf8:	f04f 0100 	mov.w	r1, #0
 8082cfc:	e73e      	b.n	8082b7c <__adddf3+0x138>
 8082cfe:	bf00      	nop

08082d00 <__aeabi_f2d>:
 8082d00:	0042      	lsls	r2, r0, #1
 8082d02:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8082d06:	ea4f 0131 	mov.w	r1, r1, rrx
 8082d0a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8082d0e:	bf1f      	itttt	ne
 8082d10:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8082d14:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8082d18:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8082d1c:	4770      	bxne	lr
 8082d1e:	f092 0f00 	teq	r2, #0
 8082d22:	bf14      	ite	ne
 8082d24:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8082d28:	4770      	bxeq	lr
 8082d2a:	b530      	push	{r4, r5, lr}
 8082d2c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8082d30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8082d34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8082d38:	e720      	b.n	8082b7c <__adddf3+0x138>
 8082d3a:	bf00      	nop

08082d3c <__aeabi_ul2d>:
 8082d3c:	ea50 0201 	orrs.w	r2, r0, r1
 8082d40:	bf08      	it	eq
 8082d42:	4770      	bxeq	lr
 8082d44:	b530      	push	{r4, r5, lr}
 8082d46:	f04f 0500 	mov.w	r5, #0
 8082d4a:	e00a      	b.n	8082d62 <__aeabi_l2d+0x16>

08082d4c <__aeabi_l2d>:
 8082d4c:	ea50 0201 	orrs.w	r2, r0, r1
 8082d50:	bf08      	it	eq
 8082d52:	4770      	bxeq	lr
 8082d54:	b530      	push	{r4, r5, lr}
 8082d56:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8082d5a:	d502      	bpl.n	8082d62 <__aeabi_l2d+0x16>
 8082d5c:	4240      	negs	r0, r0
 8082d5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8082d62:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8082d66:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8082d6a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8082d6e:	f43f aedc 	beq.w	8082b2a <__adddf3+0xe6>
 8082d72:	f04f 0203 	mov.w	r2, #3
 8082d76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8082d7a:	bf18      	it	ne
 8082d7c:	3203      	addne	r2, #3
 8082d7e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8082d82:	bf18      	it	ne
 8082d84:	3203      	addne	r2, #3
 8082d86:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8082d8a:	f1c2 0320 	rsb	r3, r2, #32
 8082d8e:	fa00 fc03 	lsl.w	ip, r0, r3
 8082d92:	fa20 f002 	lsr.w	r0, r0, r2
 8082d96:	fa01 fe03 	lsl.w	lr, r1, r3
 8082d9a:	ea40 000e 	orr.w	r0, r0, lr
 8082d9e:	fa21 f102 	lsr.w	r1, r1, r2
 8082da2:	4414      	add	r4, r2
 8082da4:	e6c1      	b.n	8082b2a <__adddf3+0xe6>
 8082da6:	bf00      	nop

08082da8 <__aeabi_dmul>:
 8082da8:	b570      	push	{r4, r5, r6, lr}
 8082daa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8082dae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8082db2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8082db6:	bf1d      	ittte	ne
 8082db8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8082dbc:	ea94 0f0c 	teqne	r4, ip
 8082dc0:	ea95 0f0c 	teqne	r5, ip
 8082dc4:	f000 f8de 	bleq	8082f84 <__aeabi_dmul+0x1dc>
 8082dc8:	442c      	add	r4, r5
 8082dca:	ea81 0603 	eor.w	r6, r1, r3
 8082dce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8082dd2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8082dd6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8082dda:	bf18      	it	ne
 8082ddc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8082de0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8082de4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8082de8:	d038      	beq.n	8082e5c <__aeabi_dmul+0xb4>
 8082dea:	fba0 ce02 	umull	ip, lr, r0, r2
 8082dee:	f04f 0500 	mov.w	r5, #0
 8082df2:	fbe1 e502 	umlal	lr, r5, r1, r2
 8082df6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8082dfa:	fbe0 e503 	umlal	lr, r5, r0, r3
 8082dfe:	f04f 0600 	mov.w	r6, #0
 8082e02:	fbe1 5603 	umlal	r5, r6, r1, r3
 8082e06:	f09c 0f00 	teq	ip, #0
 8082e0a:	bf18      	it	ne
 8082e0c:	f04e 0e01 	orrne.w	lr, lr, #1
 8082e10:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8082e14:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8082e18:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8082e1c:	d204      	bcs.n	8082e28 <__aeabi_dmul+0x80>
 8082e1e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8082e22:	416d      	adcs	r5, r5
 8082e24:	eb46 0606 	adc.w	r6, r6, r6
 8082e28:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8082e2c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8082e30:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8082e34:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8082e38:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8082e3c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8082e40:	bf88      	it	hi
 8082e42:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8082e46:	d81e      	bhi.n	8082e86 <__aeabi_dmul+0xde>
 8082e48:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8082e4c:	bf08      	it	eq
 8082e4e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8082e52:	f150 0000 	adcs.w	r0, r0, #0
 8082e56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8082e5a:	bd70      	pop	{r4, r5, r6, pc}
 8082e5c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8082e60:	ea46 0101 	orr.w	r1, r6, r1
 8082e64:	ea40 0002 	orr.w	r0, r0, r2
 8082e68:	ea81 0103 	eor.w	r1, r1, r3
 8082e6c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8082e70:	bfc2      	ittt	gt
 8082e72:	ebd4 050c 	rsbsgt	r5, r4, ip
 8082e76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8082e7a:	bd70      	popgt	{r4, r5, r6, pc}
 8082e7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8082e80:	f04f 0e00 	mov.w	lr, #0
 8082e84:	3c01      	subs	r4, #1
 8082e86:	f300 80ab 	bgt.w	8082fe0 <__aeabi_dmul+0x238>
 8082e8a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8082e8e:	bfde      	ittt	le
 8082e90:	2000      	movle	r0, #0
 8082e92:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8082e96:	bd70      	pople	{r4, r5, r6, pc}
 8082e98:	f1c4 0400 	rsb	r4, r4, #0
 8082e9c:	3c20      	subs	r4, #32
 8082e9e:	da35      	bge.n	8082f0c <__aeabi_dmul+0x164>
 8082ea0:	340c      	adds	r4, #12
 8082ea2:	dc1b      	bgt.n	8082edc <__aeabi_dmul+0x134>
 8082ea4:	f104 0414 	add.w	r4, r4, #20
 8082ea8:	f1c4 0520 	rsb	r5, r4, #32
 8082eac:	fa00 f305 	lsl.w	r3, r0, r5
 8082eb0:	fa20 f004 	lsr.w	r0, r0, r4
 8082eb4:	fa01 f205 	lsl.w	r2, r1, r5
 8082eb8:	ea40 0002 	orr.w	r0, r0, r2
 8082ebc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8082ec0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8082ec4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8082ec8:	fa21 f604 	lsr.w	r6, r1, r4
 8082ecc:	eb42 0106 	adc.w	r1, r2, r6
 8082ed0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8082ed4:	bf08      	it	eq
 8082ed6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8082eda:	bd70      	pop	{r4, r5, r6, pc}
 8082edc:	f1c4 040c 	rsb	r4, r4, #12
 8082ee0:	f1c4 0520 	rsb	r5, r4, #32
 8082ee4:	fa00 f304 	lsl.w	r3, r0, r4
 8082ee8:	fa20 f005 	lsr.w	r0, r0, r5
 8082eec:	fa01 f204 	lsl.w	r2, r1, r4
 8082ef0:	ea40 0002 	orr.w	r0, r0, r2
 8082ef4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8082ef8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8082efc:	f141 0100 	adc.w	r1, r1, #0
 8082f00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8082f04:	bf08      	it	eq
 8082f06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8082f0a:	bd70      	pop	{r4, r5, r6, pc}
 8082f0c:	f1c4 0520 	rsb	r5, r4, #32
 8082f10:	fa00 f205 	lsl.w	r2, r0, r5
 8082f14:	ea4e 0e02 	orr.w	lr, lr, r2
 8082f18:	fa20 f304 	lsr.w	r3, r0, r4
 8082f1c:	fa01 f205 	lsl.w	r2, r1, r5
 8082f20:	ea43 0302 	orr.w	r3, r3, r2
 8082f24:	fa21 f004 	lsr.w	r0, r1, r4
 8082f28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8082f2c:	fa21 f204 	lsr.w	r2, r1, r4
 8082f30:	ea20 0002 	bic.w	r0, r0, r2
 8082f34:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8082f38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8082f3c:	bf08      	it	eq
 8082f3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8082f42:	bd70      	pop	{r4, r5, r6, pc}
 8082f44:	f094 0f00 	teq	r4, #0
 8082f48:	d10f      	bne.n	8082f6a <__aeabi_dmul+0x1c2>
 8082f4a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8082f4e:	0040      	lsls	r0, r0, #1
 8082f50:	eb41 0101 	adc.w	r1, r1, r1
 8082f54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8082f58:	bf08      	it	eq
 8082f5a:	3c01      	subeq	r4, #1
 8082f5c:	d0f7      	beq.n	8082f4e <__aeabi_dmul+0x1a6>
 8082f5e:	ea41 0106 	orr.w	r1, r1, r6
 8082f62:	f095 0f00 	teq	r5, #0
 8082f66:	bf18      	it	ne
 8082f68:	4770      	bxne	lr
 8082f6a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8082f6e:	0052      	lsls	r2, r2, #1
 8082f70:	eb43 0303 	adc.w	r3, r3, r3
 8082f74:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8082f78:	bf08      	it	eq
 8082f7a:	3d01      	subeq	r5, #1
 8082f7c:	d0f7      	beq.n	8082f6e <__aeabi_dmul+0x1c6>
 8082f7e:	ea43 0306 	orr.w	r3, r3, r6
 8082f82:	4770      	bx	lr
 8082f84:	ea94 0f0c 	teq	r4, ip
 8082f88:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8082f8c:	bf18      	it	ne
 8082f8e:	ea95 0f0c 	teqne	r5, ip
 8082f92:	d00c      	beq.n	8082fae <__aeabi_dmul+0x206>
 8082f94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8082f98:	bf18      	it	ne
 8082f9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8082f9e:	d1d1      	bne.n	8082f44 <__aeabi_dmul+0x19c>
 8082fa0:	ea81 0103 	eor.w	r1, r1, r3
 8082fa4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8082fa8:	f04f 0000 	mov.w	r0, #0
 8082fac:	bd70      	pop	{r4, r5, r6, pc}
 8082fae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8082fb2:	bf06      	itte	eq
 8082fb4:	4610      	moveq	r0, r2
 8082fb6:	4619      	moveq	r1, r3
 8082fb8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8082fbc:	d019      	beq.n	8082ff2 <__aeabi_dmul+0x24a>
 8082fbe:	ea94 0f0c 	teq	r4, ip
 8082fc2:	d102      	bne.n	8082fca <__aeabi_dmul+0x222>
 8082fc4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8082fc8:	d113      	bne.n	8082ff2 <__aeabi_dmul+0x24a>
 8082fca:	ea95 0f0c 	teq	r5, ip
 8082fce:	d105      	bne.n	8082fdc <__aeabi_dmul+0x234>
 8082fd0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8082fd4:	bf1c      	itt	ne
 8082fd6:	4610      	movne	r0, r2
 8082fd8:	4619      	movne	r1, r3
 8082fda:	d10a      	bne.n	8082ff2 <__aeabi_dmul+0x24a>
 8082fdc:	ea81 0103 	eor.w	r1, r1, r3
 8082fe0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8082fe4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8082fe8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8082fec:	f04f 0000 	mov.w	r0, #0
 8082ff0:	bd70      	pop	{r4, r5, r6, pc}
 8082ff2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8082ff6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8082ffa:	bd70      	pop	{r4, r5, r6, pc}

08082ffc <__aeabi_ddiv>:
 8082ffc:	b570      	push	{r4, r5, r6, lr}
 8082ffe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083002:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083006:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808300a:	bf1d      	ittte	ne
 808300c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083010:	ea94 0f0c 	teqne	r4, ip
 8083014:	ea95 0f0c 	teqne	r5, ip
 8083018:	f000 f8a7 	bleq	808316a <__aeabi_ddiv+0x16e>
 808301c:	eba4 0405 	sub.w	r4, r4, r5
 8083020:	ea81 0e03 	eor.w	lr, r1, r3
 8083024:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083028:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808302c:	f000 8088 	beq.w	8083140 <__aeabi_ddiv+0x144>
 8083030:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083034:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8083038:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 808303c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8083040:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8083044:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8083048:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 808304c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8083050:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8083054:	429d      	cmp	r5, r3
 8083056:	bf08      	it	eq
 8083058:	4296      	cmpeq	r6, r2
 808305a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808305e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8083062:	d202      	bcs.n	808306a <__aeabi_ddiv+0x6e>
 8083064:	085b      	lsrs	r3, r3, #1
 8083066:	ea4f 0232 	mov.w	r2, r2, rrx
 808306a:	1ab6      	subs	r6, r6, r2
 808306c:	eb65 0503 	sbc.w	r5, r5, r3
 8083070:	085b      	lsrs	r3, r3, #1
 8083072:	ea4f 0232 	mov.w	r2, r2, rrx
 8083076:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808307a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808307e:	ebb6 0e02 	subs.w	lr, r6, r2
 8083082:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083086:	bf22      	ittt	cs
 8083088:	1ab6      	subcs	r6, r6, r2
 808308a:	4675      	movcs	r5, lr
 808308c:	ea40 000c 	orrcs.w	r0, r0, ip
 8083090:	085b      	lsrs	r3, r3, #1
 8083092:	ea4f 0232 	mov.w	r2, r2, rrx
 8083096:	ebb6 0e02 	subs.w	lr, r6, r2
 808309a:	eb75 0e03 	sbcs.w	lr, r5, r3
 808309e:	bf22      	ittt	cs
 80830a0:	1ab6      	subcs	r6, r6, r2
 80830a2:	4675      	movcs	r5, lr
 80830a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80830a8:	085b      	lsrs	r3, r3, #1
 80830aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80830ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80830b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80830b6:	bf22      	ittt	cs
 80830b8:	1ab6      	subcs	r6, r6, r2
 80830ba:	4675      	movcs	r5, lr
 80830bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80830c0:	085b      	lsrs	r3, r3, #1
 80830c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80830c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80830ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80830ce:	bf22      	ittt	cs
 80830d0:	1ab6      	subcs	r6, r6, r2
 80830d2:	4675      	movcs	r5, lr
 80830d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80830d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80830dc:	d018      	beq.n	8083110 <__aeabi_ddiv+0x114>
 80830de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80830e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80830e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80830ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80830ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80830f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80830f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80830fa:	d1c0      	bne.n	808307e <__aeabi_ddiv+0x82>
 80830fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083100:	d10b      	bne.n	808311a <__aeabi_ddiv+0x11e>
 8083102:	ea41 0100 	orr.w	r1, r1, r0
 8083106:	f04f 0000 	mov.w	r0, #0
 808310a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808310e:	e7b6      	b.n	808307e <__aeabi_ddiv+0x82>
 8083110:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083114:	bf04      	itt	eq
 8083116:	4301      	orreq	r1, r0
 8083118:	2000      	moveq	r0, #0
 808311a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808311e:	bf88      	it	hi
 8083120:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083124:	f63f aeaf 	bhi.w	8082e86 <__aeabi_dmul+0xde>
 8083128:	ebb5 0c03 	subs.w	ip, r5, r3
 808312c:	bf04      	itt	eq
 808312e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8083132:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8083136:	f150 0000 	adcs.w	r0, r0, #0
 808313a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808313e:	bd70      	pop	{r4, r5, r6, pc}
 8083140:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8083144:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8083148:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 808314c:	bfc2      	ittt	gt
 808314e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8083152:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083156:	bd70      	popgt	{r4, r5, r6, pc}
 8083158:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808315c:	f04f 0e00 	mov.w	lr, #0
 8083160:	3c01      	subs	r4, #1
 8083162:	e690      	b.n	8082e86 <__aeabi_dmul+0xde>
 8083164:	ea45 0e06 	orr.w	lr, r5, r6
 8083168:	e68d      	b.n	8082e86 <__aeabi_dmul+0xde>
 808316a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808316e:	ea94 0f0c 	teq	r4, ip
 8083172:	bf08      	it	eq
 8083174:	ea95 0f0c 	teqeq	r5, ip
 8083178:	f43f af3b 	beq.w	8082ff2 <__aeabi_dmul+0x24a>
 808317c:	ea94 0f0c 	teq	r4, ip
 8083180:	d10a      	bne.n	8083198 <__aeabi_ddiv+0x19c>
 8083182:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083186:	f47f af34 	bne.w	8082ff2 <__aeabi_dmul+0x24a>
 808318a:	ea95 0f0c 	teq	r5, ip
 808318e:	f47f af25 	bne.w	8082fdc <__aeabi_dmul+0x234>
 8083192:	4610      	mov	r0, r2
 8083194:	4619      	mov	r1, r3
 8083196:	e72c      	b.n	8082ff2 <__aeabi_dmul+0x24a>
 8083198:	ea95 0f0c 	teq	r5, ip
 808319c:	d106      	bne.n	80831ac <__aeabi_ddiv+0x1b0>
 808319e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80831a2:	f43f aefd 	beq.w	8082fa0 <__aeabi_dmul+0x1f8>
 80831a6:	4610      	mov	r0, r2
 80831a8:	4619      	mov	r1, r3
 80831aa:	e722      	b.n	8082ff2 <__aeabi_dmul+0x24a>
 80831ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80831b0:	bf18      	it	ne
 80831b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80831b6:	f47f aec5 	bne.w	8082f44 <__aeabi_dmul+0x19c>
 80831ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80831be:	f47f af0d 	bne.w	8082fdc <__aeabi_dmul+0x234>
 80831c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80831c6:	f47f aeeb 	bne.w	8082fa0 <__aeabi_dmul+0x1f8>
 80831ca:	e712      	b.n	8082ff2 <__aeabi_dmul+0x24a>

080831cc <__aeabi_d2iz>:
 80831cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80831d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80831d4:	d215      	bcs.n	8083202 <__aeabi_d2iz+0x36>
 80831d6:	d511      	bpl.n	80831fc <__aeabi_d2iz+0x30>
 80831d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80831dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80831e0:	d912      	bls.n	8083208 <__aeabi_d2iz+0x3c>
 80831e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80831e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80831ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80831ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80831f2:	fa23 f002 	lsr.w	r0, r3, r2
 80831f6:	bf18      	it	ne
 80831f8:	4240      	negne	r0, r0
 80831fa:	4770      	bx	lr
 80831fc:	f04f 0000 	mov.w	r0, #0
 8083200:	4770      	bx	lr
 8083202:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8083206:	d105      	bne.n	8083214 <__aeabi_d2iz+0x48>
 8083208:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 808320c:	bf08      	it	eq
 808320e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8083212:	4770      	bx	lr
 8083214:	f04f 0000 	mov.w	r0, #0
 8083218:	4770      	bx	lr
 808321a:	bf00      	nop

0808321c <__aeabi_d2f>:
 808321c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8083220:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8083224:	bf24      	itt	cs
 8083226:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 808322a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808322e:	d90d      	bls.n	808324c <__aeabi_d2f+0x30>
 8083230:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8083234:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8083238:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 808323c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8083240:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8083244:	bf08      	it	eq
 8083246:	f020 0001 	biceq.w	r0, r0, #1
 808324a:	4770      	bx	lr
 808324c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8083250:	d121      	bne.n	8083296 <__aeabi_d2f+0x7a>
 8083252:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8083256:	bfbc      	itt	lt
 8083258:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 808325c:	4770      	bxlt	lr
 808325e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083262:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8083266:	f1c2 0218 	rsb	r2, r2, #24
 808326a:	f1c2 0c20 	rsb	ip, r2, #32
 808326e:	fa10 f30c 	lsls.w	r3, r0, ip
 8083272:	fa20 f002 	lsr.w	r0, r0, r2
 8083276:	bf18      	it	ne
 8083278:	f040 0001 	orrne.w	r0, r0, #1
 808327c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8083280:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8083284:	fa03 fc0c 	lsl.w	ip, r3, ip
 8083288:	ea40 000c 	orr.w	r0, r0, ip
 808328c:	fa23 f302 	lsr.w	r3, r3, r2
 8083290:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8083294:	e7cc      	b.n	8083230 <__aeabi_d2f+0x14>
 8083296:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808329a:	d107      	bne.n	80832ac <__aeabi_d2f+0x90>
 808329c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80832a0:	bf1e      	ittt	ne
 80832a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80832a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80832aa:	4770      	bxne	lr
 80832ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80832b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80832b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80832b8:	4770      	bx	lr
 80832ba:	bf00      	nop

080832bc <__aeabi_frsub>:
 80832bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80832c0:	e002      	b.n	80832c8 <__addsf3>
 80832c2:	bf00      	nop

080832c4 <__aeabi_fsub>:
 80832c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080832c8 <__addsf3>:
 80832c8:	0042      	lsls	r2, r0, #1
 80832ca:	bf1f      	itttt	ne
 80832cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80832d0:	ea92 0f03 	teqne	r2, r3
 80832d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80832d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80832dc:	d06a      	beq.n	80833b4 <__addsf3+0xec>
 80832de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80832e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80832e6:	bfc1      	itttt	gt
 80832e8:	18d2      	addgt	r2, r2, r3
 80832ea:	4041      	eorgt	r1, r0
 80832ec:	4048      	eorgt	r0, r1
 80832ee:	4041      	eorgt	r1, r0
 80832f0:	bfb8      	it	lt
 80832f2:	425b      	neglt	r3, r3
 80832f4:	2b19      	cmp	r3, #25
 80832f6:	bf88      	it	hi
 80832f8:	4770      	bxhi	lr
 80832fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80832fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083302:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8083306:	bf18      	it	ne
 8083308:	4240      	negne	r0, r0
 808330a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808330e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8083312:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8083316:	bf18      	it	ne
 8083318:	4249      	negne	r1, r1
 808331a:	ea92 0f03 	teq	r2, r3
 808331e:	d03f      	beq.n	80833a0 <__addsf3+0xd8>
 8083320:	f1a2 0201 	sub.w	r2, r2, #1
 8083324:	fa41 fc03 	asr.w	ip, r1, r3
 8083328:	eb10 000c 	adds.w	r0, r0, ip
 808332c:	f1c3 0320 	rsb	r3, r3, #32
 8083330:	fa01 f103 	lsl.w	r1, r1, r3
 8083334:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8083338:	d502      	bpl.n	8083340 <__addsf3+0x78>
 808333a:	4249      	negs	r1, r1
 808333c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8083340:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8083344:	d313      	bcc.n	808336e <__addsf3+0xa6>
 8083346:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808334a:	d306      	bcc.n	808335a <__addsf3+0x92>
 808334c:	0840      	lsrs	r0, r0, #1
 808334e:	ea4f 0131 	mov.w	r1, r1, rrx
 8083352:	f102 0201 	add.w	r2, r2, #1
 8083356:	2afe      	cmp	r2, #254	; 0xfe
 8083358:	d251      	bcs.n	80833fe <__addsf3+0x136>
 808335a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808335e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8083362:	bf08      	it	eq
 8083364:	f020 0001 	biceq.w	r0, r0, #1
 8083368:	ea40 0003 	orr.w	r0, r0, r3
 808336c:	4770      	bx	lr
 808336e:	0049      	lsls	r1, r1, #1
 8083370:	eb40 0000 	adc.w	r0, r0, r0
 8083374:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8083378:	f1a2 0201 	sub.w	r2, r2, #1
 808337c:	d1ed      	bne.n	808335a <__addsf3+0x92>
 808337e:	fab0 fc80 	clz	ip, r0
 8083382:	f1ac 0c08 	sub.w	ip, ip, #8
 8083386:	ebb2 020c 	subs.w	r2, r2, ip
 808338a:	fa00 f00c 	lsl.w	r0, r0, ip
 808338e:	bfaa      	itet	ge
 8083390:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8083394:	4252      	neglt	r2, r2
 8083396:	4318      	orrge	r0, r3
 8083398:	bfbc      	itt	lt
 808339a:	40d0      	lsrlt	r0, r2
 808339c:	4318      	orrlt	r0, r3
 808339e:	4770      	bx	lr
 80833a0:	f092 0f00 	teq	r2, #0
 80833a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80833a8:	bf06      	itte	eq
 80833aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80833ae:	3201      	addeq	r2, #1
 80833b0:	3b01      	subne	r3, #1
 80833b2:	e7b5      	b.n	8083320 <__addsf3+0x58>
 80833b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80833b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80833bc:	bf18      	it	ne
 80833be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80833c2:	d021      	beq.n	8083408 <__addsf3+0x140>
 80833c4:	ea92 0f03 	teq	r2, r3
 80833c8:	d004      	beq.n	80833d4 <__addsf3+0x10c>
 80833ca:	f092 0f00 	teq	r2, #0
 80833ce:	bf08      	it	eq
 80833d0:	4608      	moveq	r0, r1
 80833d2:	4770      	bx	lr
 80833d4:	ea90 0f01 	teq	r0, r1
 80833d8:	bf1c      	itt	ne
 80833da:	2000      	movne	r0, #0
 80833dc:	4770      	bxne	lr
 80833de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80833e2:	d104      	bne.n	80833ee <__addsf3+0x126>
 80833e4:	0040      	lsls	r0, r0, #1
 80833e6:	bf28      	it	cs
 80833e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80833ec:	4770      	bx	lr
 80833ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80833f2:	bf3c      	itt	cc
 80833f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80833f8:	4770      	bxcc	lr
 80833fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80833fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8083402:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083406:	4770      	bx	lr
 8083408:	ea7f 6222 	mvns.w	r2, r2, asr #24
 808340c:	bf16      	itet	ne
 808340e:	4608      	movne	r0, r1
 8083410:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8083414:	4601      	movne	r1, r0
 8083416:	0242      	lsls	r2, r0, #9
 8083418:	bf06      	itte	eq
 808341a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 808341e:	ea90 0f01 	teqeq	r0, r1
 8083422:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8083426:	4770      	bx	lr

08083428 <__aeabi_ui2f>:
 8083428:	f04f 0300 	mov.w	r3, #0
 808342c:	e004      	b.n	8083438 <__aeabi_i2f+0x8>
 808342e:	bf00      	nop

08083430 <__aeabi_i2f>:
 8083430:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8083434:	bf48      	it	mi
 8083436:	4240      	negmi	r0, r0
 8083438:	ea5f 0c00 	movs.w	ip, r0
 808343c:	bf08      	it	eq
 808343e:	4770      	bxeq	lr
 8083440:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8083444:	4601      	mov	r1, r0
 8083446:	f04f 0000 	mov.w	r0, #0
 808344a:	e01c      	b.n	8083486 <__aeabi_l2f+0x2a>

0808344c <__aeabi_ul2f>:
 808344c:	ea50 0201 	orrs.w	r2, r0, r1
 8083450:	bf08      	it	eq
 8083452:	4770      	bxeq	lr
 8083454:	f04f 0300 	mov.w	r3, #0
 8083458:	e00a      	b.n	8083470 <__aeabi_l2f+0x14>
 808345a:	bf00      	nop

0808345c <__aeabi_l2f>:
 808345c:	ea50 0201 	orrs.w	r2, r0, r1
 8083460:	bf08      	it	eq
 8083462:	4770      	bxeq	lr
 8083464:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8083468:	d502      	bpl.n	8083470 <__aeabi_l2f+0x14>
 808346a:	4240      	negs	r0, r0
 808346c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083470:	ea5f 0c01 	movs.w	ip, r1
 8083474:	bf02      	ittt	eq
 8083476:	4684      	moveq	ip, r0
 8083478:	4601      	moveq	r1, r0
 808347a:	2000      	moveq	r0, #0
 808347c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8083480:	bf08      	it	eq
 8083482:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8083486:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808348a:	fabc f28c 	clz	r2, ip
 808348e:	3a08      	subs	r2, #8
 8083490:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8083494:	db10      	blt.n	80834b8 <__aeabi_l2f+0x5c>
 8083496:	fa01 fc02 	lsl.w	ip, r1, r2
 808349a:	4463      	add	r3, ip
 808349c:	fa00 fc02 	lsl.w	ip, r0, r2
 80834a0:	f1c2 0220 	rsb	r2, r2, #32
 80834a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80834a8:	fa20 f202 	lsr.w	r2, r0, r2
 80834ac:	eb43 0002 	adc.w	r0, r3, r2
 80834b0:	bf08      	it	eq
 80834b2:	f020 0001 	biceq.w	r0, r0, #1
 80834b6:	4770      	bx	lr
 80834b8:	f102 0220 	add.w	r2, r2, #32
 80834bc:	fa01 fc02 	lsl.w	ip, r1, r2
 80834c0:	f1c2 0220 	rsb	r2, r2, #32
 80834c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80834c8:	fa21 f202 	lsr.w	r2, r1, r2
 80834cc:	eb43 0002 	adc.w	r0, r3, r2
 80834d0:	bf08      	it	eq
 80834d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80834d6:	4770      	bx	lr

080834d8 <__aeabi_fmul>:
 80834d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80834dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80834e0:	bf1e      	ittt	ne
 80834e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80834e6:	ea92 0f0c 	teqne	r2, ip
 80834ea:	ea93 0f0c 	teqne	r3, ip
 80834ee:	d06f      	beq.n	80835d0 <__aeabi_fmul+0xf8>
 80834f0:	441a      	add	r2, r3
 80834f2:	ea80 0c01 	eor.w	ip, r0, r1
 80834f6:	0240      	lsls	r0, r0, #9
 80834f8:	bf18      	it	ne
 80834fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80834fe:	d01e      	beq.n	808353e <__aeabi_fmul+0x66>
 8083500:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8083504:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8083508:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808350c:	fba0 3101 	umull	r3, r1, r0, r1
 8083510:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8083514:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8083518:	bf3e      	ittt	cc
 808351a:	0049      	lslcc	r1, r1, #1
 808351c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8083520:	005b      	lslcc	r3, r3, #1
 8083522:	ea40 0001 	orr.w	r0, r0, r1
 8083526:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808352a:	2afd      	cmp	r2, #253	; 0xfd
 808352c:	d81d      	bhi.n	808356a <__aeabi_fmul+0x92>
 808352e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8083532:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8083536:	bf08      	it	eq
 8083538:	f020 0001 	biceq.w	r0, r0, #1
 808353c:	4770      	bx	lr
 808353e:	f090 0f00 	teq	r0, #0
 8083542:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8083546:	bf08      	it	eq
 8083548:	0249      	lsleq	r1, r1, #9
 808354a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808354e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8083552:	3a7f      	subs	r2, #127	; 0x7f
 8083554:	bfc2      	ittt	gt
 8083556:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808355a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808355e:	4770      	bxgt	lr
 8083560:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083564:	f04f 0300 	mov.w	r3, #0
 8083568:	3a01      	subs	r2, #1
 808356a:	dc5d      	bgt.n	8083628 <__aeabi_fmul+0x150>
 808356c:	f112 0f19 	cmn.w	r2, #25
 8083570:	bfdc      	itt	le
 8083572:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8083576:	4770      	bxle	lr
 8083578:	f1c2 0200 	rsb	r2, r2, #0
 808357c:	0041      	lsls	r1, r0, #1
 808357e:	fa21 f102 	lsr.w	r1, r1, r2
 8083582:	f1c2 0220 	rsb	r2, r2, #32
 8083586:	fa00 fc02 	lsl.w	ip, r0, r2
 808358a:	ea5f 0031 	movs.w	r0, r1, rrx
 808358e:	f140 0000 	adc.w	r0, r0, #0
 8083592:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8083596:	bf08      	it	eq
 8083598:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808359c:	4770      	bx	lr
 808359e:	f092 0f00 	teq	r2, #0
 80835a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80835a6:	bf02      	ittt	eq
 80835a8:	0040      	lsleq	r0, r0, #1
 80835aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80835ae:	3a01      	subeq	r2, #1
 80835b0:	d0f9      	beq.n	80835a6 <__aeabi_fmul+0xce>
 80835b2:	ea40 000c 	orr.w	r0, r0, ip
 80835b6:	f093 0f00 	teq	r3, #0
 80835ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80835be:	bf02      	ittt	eq
 80835c0:	0049      	lsleq	r1, r1, #1
 80835c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80835c6:	3b01      	subeq	r3, #1
 80835c8:	d0f9      	beq.n	80835be <__aeabi_fmul+0xe6>
 80835ca:	ea41 010c 	orr.w	r1, r1, ip
 80835ce:	e78f      	b.n	80834f0 <__aeabi_fmul+0x18>
 80835d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80835d4:	ea92 0f0c 	teq	r2, ip
 80835d8:	bf18      	it	ne
 80835da:	ea93 0f0c 	teqne	r3, ip
 80835de:	d00a      	beq.n	80835f6 <__aeabi_fmul+0x11e>
 80835e0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80835e4:	bf18      	it	ne
 80835e6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80835ea:	d1d8      	bne.n	808359e <__aeabi_fmul+0xc6>
 80835ec:	ea80 0001 	eor.w	r0, r0, r1
 80835f0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80835f4:	4770      	bx	lr
 80835f6:	f090 0f00 	teq	r0, #0
 80835fa:	bf17      	itett	ne
 80835fc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8083600:	4608      	moveq	r0, r1
 8083602:	f091 0f00 	teqne	r1, #0
 8083606:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808360a:	d014      	beq.n	8083636 <__aeabi_fmul+0x15e>
 808360c:	ea92 0f0c 	teq	r2, ip
 8083610:	d101      	bne.n	8083616 <__aeabi_fmul+0x13e>
 8083612:	0242      	lsls	r2, r0, #9
 8083614:	d10f      	bne.n	8083636 <__aeabi_fmul+0x15e>
 8083616:	ea93 0f0c 	teq	r3, ip
 808361a:	d103      	bne.n	8083624 <__aeabi_fmul+0x14c>
 808361c:	024b      	lsls	r3, r1, #9
 808361e:	bf18      	it	ne
 8083620:	4608      	movne	r0, r1
 8083622:	d108      	bne.n	8083636 <__aeabi_fmul+0x15e>
 8083624:	ea80 0001 	eor.w	r0, r0, r1
 8083628:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808362c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8083630:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8083634:	4770      	bx	lr
 8083636:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808363a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808363e:	4770      	bx	lr

08083640 <__aeabi_fdiv>:
 8083640:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083644:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8083648:	bf1e      	ittt	ne
 808364a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808364e:	ea92 0f0c 	teqne	r2, ip
 8083652:	ea93 0f0c 	teqne	r3, ip
 8083656:	d069      	beq.n	808372c <__aeabi_fdiv+0xec>
 8083658:	eba2 0203 	sub.w	r2, r2, r3
 808365c:	ea80 0c01 	eor.w	ip, r0, r1
 8083660:	0249      	lsls	r1, r1, #9
 8083662:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8083666:	d037      	beq.n	80836d8 <__aeabi_fdiv+0x98>
 8083668:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808366c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8083670:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8083674:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8083678:	428b      	cmp	r3, r1
 808367a:	bf38      	it	cc
 808367c:	005b      	lslcc	r3, r3, #1
 808367e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8083682:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8083686:	428b      	cmp	r3, r1
 8083688:	bf24      	itt	cs
 808368a:	1a5b      	subcs	r3, r3, r1
 808368c:	ea40 000c 	orrcs.w	r0, r0, ip
 8083690:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8083694:	bf24      	itt	cs
 8083696:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808369a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808369e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80836a2:	bf24      	itt	cs
 80836a4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80836a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80836ac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80836b0:	bf24      	itt	cs
 80836b2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80836b6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80836ba:	011b      	lsls	r3, r3, #4
 80836bc:	bf18      	it	ne
 80836be:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80836c2:	d1e0      	bne.n	8083686 <__aeabi_fdiv+0x46>
 80836c4:	2afd      	cmp	r2, #253	; 0xfd
 80836c6:	f63f af50 	bhi.w	808356a <__aeabi_fmul+0x92>
 80836ca:	428b      	cmp	r3, r1
 80836cc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80836d0:	bf08      	it	eq
 80836d2:	f020 0001 	biceq.w	r0, r0, #1
 80836d6:	4770      	bx	lr
 80836d8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80836dc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80836e0:	327f      	adds	r2, #127	; 0x7f
 80836e2:	bfc2      	ittt	gt
 80836e4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80836e8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80836ec:	4770      	bxgt	lr
 80836ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80836f2:	f04f 0300 	mov.w	r3, #0
 80836f6:	3a01      	subs	r2, #1
 80836f8:	e737      	b.n	808356a <__aeabi_fmul+0x92>
 80836fa:	f092 0f00 	teq	r2, #0
 80836fe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8083702:	bf02      	ittt	eq
 8083704:	0040      	lsleq	r0, r0, #1
 8083706:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808370a:	3a01      	subeq	r2, #1
 808370c:	d0f9      	beq.n	8083702 <__aeabi_fdiv+0xc2>
 808370e:	ea40 000c 	orr.w	r0, r0, ip
 8083712:	f093 0f00 	teq	r3, #0
 8083716:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808371a:	bf02      	ittt	eq
 808371c:	0049      	lsleq	r1, r1, #1
 808371e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8083722:	3b01      	subeq	r3, #1
 8083724:	d0f9      	beq.n	808371a <__aeabi_fdiv+0xda>
 8083726:	ea41 010c 	orr.w	r1, r1, ip
 808372a:	e795      	b.n	8083658 <__aeabi_fdiv+0x18>
 808372c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8083730:	ea92 0f0c 	teq	r2, ip
 8083734:	d108      	bne.n	8083748 <__aeabi_fdiv+0x108>
 8083736:	0242      	lsls	r2, r0, #9
 8083738:	f47f af7d 	bne.w	8083636 <__aeabi_fmul+0x15e>
 808373c:	ea93 0f0c 	teq	r3, ip
 8083740:	f47f af70 	bne.w	8083624 <__aeabi_fmul+0x14c>
 8083744:	4608      	mov	r0, r1
 8083746:	e776      	b.n	8083636 <__aeabi_fmul+0x15e>
 8083748:	ea93 0f0c 	teq	r3, ip
 808374c:	d104      	bne.n	8083758 <__aeabi_fdiv+0x118>
 808374e:	024b      	lsls	r3, r1, #9
 8083750:	f43f af4c 	beq.w	80835ec <__aeabi_fmul+0x114>
 8083754:	4608      	mov	r0, r1
 8083756:	e76e      	b.n	8083636 <__aeabi_fmul+0x15e>
 8083758:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808375c:	bf18      	it	ne
 808375e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8083762:	d1ca      	bne.n	80836fa <__aeabi_fdiv+0xba>
 8083764:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8083768:	f47f af5c 	bne.w	8083624 <__aeabi_fmul+0x14c>
 808376c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8083770:	f47f af3c 	bne.w	80835ec <__aeabi_fmul+0x114>
 8083774:	e75f      	b.n	8083636 <__aeabi_fmul+0x15e>
 8083776:	bf00      	nop

08083778 <__gesf2>:
 8083778:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 808377c:	e006      	b.n	808378c <__cmpsf2+0x4>
 808377e:	bf00      	nop

08083780 <__lesf2>:
 8083780:	f04f 0c01 	mov.w	ip, #1
 8083784:	e002      	b.n	808378c <__cmpsf2+0x4>
 8083786:	bf00      	nop

08083788 <__cmpsf2>:
 8083788:	f04f 0c01 	mov.w	ip, #1
 808378c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8083790:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8083794:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8083798:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808379c:	bf18      	it	ne
 808379e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80837a2:	d011      	beq.n	80837c8 <__cmpsf2+0x40>
 80837a4:	b001      	add	sp, #4
 80837a6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80837aa:	bf18      	it	ne
 80837ac:	ea90 0f01 	teqne	r0, r1
 80837b0:	bf58      	it	pl
 80837b2:	ebb2 0003 	subspl.w	r0, r2, r3
 80837b6:	bf88      	it	hi
 80837b8:	17c8      	asrhi	r0, r1, #31
 80837ba:	bf38      	it	cc
 80837bc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80837c0:	bf18      	it	ne
 80837c2:	f040 0001 	orrne.w	r0, r0, #1
 80837c6:	4770      	bx	lr
 80837c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80837cc:	d102      	bne.n	80837d4 <__cmpsf2+0x4c>
 80837ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80837d2:	d105      	bne.n	80837e0 <__cmpsf2+0x58>
 80837d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80837d8:	d1e4      	bne.n	80837a4 <__cmpsf2+0x1c>
 80837da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80837de:	d0e1      	beq.n	80837a4 <__cmpsf2+0x1c>
 80837e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80837e4:	4770      	bx	lr
 80837e6:	bf00      	nop

080837e8 <__aeabi_cfrcmple>:
 80837e8:	4684      	mov	ip, r0
 80837ea:	4608      	mov	r0, r1
 80837ec:	4661      	mov	r1, ip
 80837ee:	e7ff      	b.n	80837f0 <__aeabi_cfcmpeq>

080837f0 <__aeabi_cfcmpeq>:
 80837f0:	b50f      	push	{r0, r1, r2, r3, lr}
 80837f2:	f7ff ffc9 	bl	8083788 <__cmpsf2>
 80837f6:	2800      	cmp	r0, #0
 80837f8:	bf48      	it	mi
 80837fa:	f110 0f00 	cmnmi.w	r0, #0
 80837fe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08083800 <__aeabi_fcmpeq>:
 8083800:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083804:	f7ff fff4 	bl	80837f0 <__aeabi_cfcmpeq>
 8083808:	bf0c      	ite	eq
 808380a:	2001      	moveq	r0, #1
 808380c:	2000      	movne	r0, #0
 808380e:	f85d fb08 	ldr.w	pc, [sp], #8
 8083812:	bf00      	nop

08083814 <__aeabi_fcmplt>:
 8083814:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083818:	f7ff ffea 	bl	80837f0 <__aeabi_cfcmpeq>
 808381c:	bf34      	ite	cc
 808381e:	2001      	movcc	r0, #1
 8083820:	2000      	movcs	r0, #0
 8083822:	f85d fb08 	ldr.w	pc, [sp], #8
 8083826:	bf00      	nop

08083828 <__aeabi_fcmple>:
 8083828:	f84d ed08 	str.w	lr, [sp, #-8]!
 808382c:	f7ff ffe0 	bl	80837f0 <__aeabi_cfcmpeq>
 8083830:	bf94      	ite	ls
 8083832:	2001      	movls	r0, #1
 8083834:	2000      	movhi	r0, #0
 8083836:	f85d fb08 	ldr.w	pc, [sp], #8
 808383a:	bf00      	nop

0808383c <__aeabi_fcmpge>:
 808383c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083840:	f7ff ffd2 	bl	80837e8 <__aeabi_cfrcmple>
 8083844:	bf94      	ite	ls
 8083846:	2001      	movls	r0, #1
 8083848:	2000      	movhi	r0, #0
 808384a:	f85d fb08 	ldr.w	pc, [sp], #8
 808384e:	bf00      	nop

08083850 <__aeabi_fcmpgt>:
 8083850:	f84d ed08 	str.w	lr, [sp, #-8]!
 8083854:	f7ff ffc8 	bl	80837e8 <__aeabi_cfrcmple>
 8083858:	bf34      	ite	cc
 808385a:	2001      	movcc	r0, #1
 808385c:	2000      	movcs	r0, #0
 808385e:	f85d fb08 	ldr.w	pc, [sp], #8
 8083862:	bf00      	nop

08083864 <__aeabi_f2iz>:
 8083864:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8083868:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 808386c:	d30f      	bcc.n	808388e <__aeabi_f2iz+0x2a>
 808386e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8083872:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8083876:	d90d      	bls.n	8083894 <__aeabi_f2iz+0x30>
 8083878:	ea4f 2300 	mov.w	r3, r0, lsl #8
 808387c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8083880:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8083884:	fa23 f002 	lsr.w	r0, r3, r2
 8083888:	bf18      	it	ne
 808388a:	4240      	negne	r0, r0
 808388c:	4770      	bx	lr
 808388e:	f04f 0000 	mov.w	r0, #0
 8083892:	4770      	bx	lr
 8083894:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8083898:	d101      	bne.n	808389e <__aeabi_f2iz+0x3a>
 808389a:	0242      	lsls	r2, r0, #9
 808389c:	d105      	bne.n	80838aa <__aeabi_f2iz+0x46>
 808389e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80838a2:	bf08      	it	eq
 80838a4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80838a8:	4770      	bx	lr
 80838aa:	f04f 0000 	mov.w	r0, #0
 80838ae:	4770      	bx	lr

080838b0 <asctime>:
 80838b0:	4b09      	ldr	r3, [pc, #36]	; (80838d8 <asctime+0x28>)
 80838b2:	b570      	push	{r4, r5, r6, lr}
 80838b4:	681c      	ldr	r4, [r3, #0]
 80838b6:	4606      	mov	r6, r0
 80838b8:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80838ba:	b93d      	cbnz	r5, 80838cc <asctime+0x1c>
 80838bc:	201a      	movs	r0, #26
 80838be:	f7fd fd8b 	bl	80813d8 <malloc>
 80838c2:	221a      	movs	r2, #26
 80838c4:	6420      	str	r0, [r4, #64]	; 0x40
 80838c6:	4629      	mov	r1, r5
 80838c8:	f000 f943 	bl	8083b52 <memset>
 80838cc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80838ce:	4630      	mov	r0, r6
 80838d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80838d4:	f000 b802 	b.w	80838dc <asctime_r>
 80838d8:	200004f4 	.word	0x200004f4

080838dc <asctime_r>:
 80838dc:	b510      	push	{r4, lr}
 80838de:	460c      	mov	r4, r1
 80838e0:	6941      	ldr	r1, [r0, #20]
 80838e2:	b086      	sub	sp, #24
 80838e4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80838e8:	6903      	ldr	r3, [r0, #16]
 80838ea:	6982      	ldr	r2, [r0, #24]
 80838ec:	9104      	str	r1, [sp, #16]
 80838ee:	6801      	ldr	r1, [r0, #0]
 80838f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80838f4:	9103      	str	r1, [sp, #12]
 80838f6:	6841      	ldr	r1, [r0, #4]
 80838f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80838fc:	9102      	str	r1, [sp, #8]
 80838fe:	6881      	ldr	r1, [r0, #8]
 8083900:	9101      	str	r1, [sp, #4]
 8083902:	68c1      	ldr	r1, [r0, #12]
 8083904:	4620      	mov	r0, r4
 8083906:	9100      	str	r1, [sp, #0]
 8083908:	4904      	ldr	r1, [pc, #16]	; (808391c <asctime_r+0x40>)
 808390a:	440b      	add	r3, r1
 808390c:	4904      	ldr	r1, [pc, #16]	; (8083920 <asctime_r+0x44>)
 808390e:	440a      	add	r2, r1
 8083910:	4904      	ldr	r1, [pc, #16]	; (8083924 <asctime_r+0x48>)
 8083912:	f7fd fd79 	bl	8081408 <siprintf>
 8083916:	4620      	mov	r0, r4
 8083918:	b006      	add	sp, #24
 808391a:	bd10      	pop	{r4, pc}
 808391c:	08084909 	.word	0x08084909
 8083920:	080848f4 	.word	0x080848f4
 8083924:	0808492d 	.word	0x0808492d

08083928 <atoi>:
 8083928:	220a      	movs	r2, #10
 808392a:	2100      	movs	r1, #0
 808392c:	f000 ba26 	b.w	8083d7c <strtol>

08083930 <__cxa_atexit>:
 8083930:	b510      	push	{r4, lr}
 8083932:	4c05      	ldr	r4, [pc, #20]	; (8083948 <__cxa_atexit+0x18>)
 8083934:	4613      	mov	r3, r2
 8083936:	b12c      	cbz	r4, 8083944 <__cxa_atexit+0x14>
 8083938:	460a      	mov	r2, r1
 808393a:	4601      	mov	r1, r0
 808393c:	2002      	movs	r0, #2
 808393e:	f3af 8000 	nop.w
 8083942:	bd10      	pop	{r4, pc}
 8083944:	4620      	mov	r0, r4
 8083946:	bd10      	pop	{r4, pc}
 8083948:	00000000 	.word	0x00000000

0808394c <localtime>:
 808394c:	b538      	push	{r3, r4, r5, lr}
 808394e:	4b07      	ldr	r3, [pc, #28]	; (808396c <localtime+0x20>)
 8083950:	4605      	mov	r5, r0
 8083952:	681c      	ldr	r4, [r3, #0]
 8083954:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8083956:	b91b      	cbnz	r3, 8083960 <localtime+0x14>
 8083958:	2024      	movs	r0, #36	; 0x24
 808395a:	f7fd fd3d 	bl	80813d8 <malloc>
 808395e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8083960:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8083962:	4628      	mov	r0, r5
 8083964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8083968:	f000 b802 	b.w	8083970 <localtime_r>
 808396c:	200004f4 	.word	0x200004f4

08083970 <localtime_r>:
 8083970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083974:	460c      	mov	r4, r1
 8083976:	4680      	mov	r8, r0
 8083978:	f000 fd06 	bl	8084388 <__gettzinfo>
 808397c:	4621      	mov	r1, r4
 808397e:	4607      	mov	r7, r0
 8083980:	4640      	mov	r0, r8
 8083982:	f000 fd05 	bl	8084390 <gmtime_r>
 8083986:	6946      	ldr	r6, [r0, #20]
 8083988:	4604      	mov	r4, r0
 808398a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 808398e:	07b3      	lsls	r3, r6, #30
 8083990:	d105      	bne.n	808399e <localtime_r+0x2e>
 8083992:	2264      	movs	r2, #100	; 0x64
 8083994:	fb96 f3f2 	sdiv	r3, r6, r2
 8083998:	fb02 6313 	mls	r3, r2, r3, r6
 808399c:	b94b      	cbnz	r3, 80839b2 <localtime_r+0x42>
 808399e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80839a2:	fb96 f3f5 	sdiv	r3, r6, r5
 80839a6:	fb05 6513 	mls	r5, r5, r3, r6
 80839aa:	fab5 f385 	clz	r3, r5
 80839ae:	095b      	lsrs	r3, r3, #5
 80839b0:	e000      	b.n	80839b4 <localtime_r+0x44>
 80839b2:	2301      	movs	r3, #1
 80839b4:	4a5f      	ldr	r2, [pc, #380]	; (8083b34 <localtime_r+0x1c4>)
 80839b6:	2530      	movs	r5, #48	; 0x30
 80839b8:	fb05 2503 	mla	r5, r5, r3, r2
 80839bc:	f000 fb18 	bl	8083ff0 <__tz_lock>
 80839c0:	f000 fb18 	bl	8083ff4 <_tzset_unlocked>
 80839c4:	4b5c      	ldr	r3, [pc, #368]	; (8083b38 <localtime_r+0x1c8>)
 80839c6:	681b      	ldr	r3, [r3, #0]
 80839c8:	b1f3      	cbz	r3, 8083a08 <localtime_r+0x98>
 80839ca:	687b      	ldr	r3, [r7, #4]
 80839cc:	429e      	cmp	r6, r3
 80839ce:	d105      	bne.n	80839dc <localtime_r+0x6c>
 80839d0:	6839      	ldr	r1, [r7, #0]
 80839d2:	f8d8 3000 	ldr.w	r3, [r8]
 80839d6:	69fa      	ldr	r2, [r7, #28]
 80839d8:	b941      	cbnz	r1, 80839ec <localtime_r+0x7c>
 80839da:	e00a      	b.n	80839f2 <localtime_r+0x82>
 80839dc:	4630      	mov	r0, r6
 80839de:	f000 fa5f 	bl	8083ea0 <__tzcalc_limits>
 80839e2:	2800      	cmp	r0, #0
 80839e4:	d1f4      	bne.n	80839d0 <localtime_r+0x60>
 80839e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80839ea:	e00d      	b.n	8083a08 <localtime_r+0x98>
 80839ec:	4293      	cmp	r3, r2
 80839ee:	db08      	blt.n	8083a02 <localtime_r+0x92>
 80839f0:	e001      	b.n	80839f6 <localtime_r+0x86>
 80839f2:	4293      	cmp	r3, r2
 80839f4:	da07      	bge.n	8083a06 <localtime_r+0x96>
 80839f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80839f8:	4293      	cmp	r3, r2
 80839fa:	bfac      	ite	ge
 80839fc:	2300      	movge	r3, #0
 80839fe:	2301      	movlt	r3, #1
 8083a00:	e002      	b.n	8083a08 <localtime_r+0x98>
 8083a02:	2300      	movs	r3, #0
 8083a04:	e000      	b.n	8083a08 <localtime_r+0x98>
 8083a06:	2301      	movs	r3, #1
 8083a08:	6223      	str	r3, [r4, #32]
 8083a0a:	6a23      	ldr	r3, [r4, #32]
 8083a0c:	203c      	movs	r0, #60	; 0x3c
 8083a0e:	2b01      	cmp	r3, #1
 8083a10:	bf0c      	ite	eq
 8083a12:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 8083a14:	6a39      	ldrne	r1, [r7, #32]
 8083a16:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8083a1a:	fb91 f6f3 	sdiv	r6, r1, r3
 8083a1e:	fb03 1316 	mls	r3, r3, r6, r1
 8083a22:	fb93 f2f0 	sdiv	r2, r3, r0
 8083a26:	fb00 3012 	mls	r0, r0, r2, r3
 8083a2a:	6861      	ldr	r1, [r4, #4]
 8083a2c:	6823      	ldr	r3, [r4, #0]
 8083a2e:	1a89      	subs	r1, r1, r2
 8083a30:	68a2      	ldr	r2, [r4, #8]
 8083a32:	1a1b      	subs	r3, r3, r0
 8083a34:	1b92      	subs	r2, r2, r6
 8083a36:	2b3b      	cmp	r3, #59	; 0x3b
 8083a38:	6023      	str	r3, [r4, #0]
 8083a3a:	6061      	str	r1, [r4, #4]
 8083a3c:	60a2      	str	r2, [r4, #8]
 8083a3e:	dd03      	ble.n	8083a48 <localtime_r+0xd8>
 8083a40:	3101      	adds	r1, #1
 8083a42:	6061      	str	r1, [r4, #4]
 8083a44:	3b3c      	subs	r3, #60	; 0x3c
 8083a46:	e004      	b.n	8083a52 <localtime_r+0xe2>
 8083a48:	2b00      	cmp	r3, #0
 8083a4a:	da03      	bge.n	8083a54 <localtime_r+0xe4>
 8083a4c:	3901      	subs	r1, #1
 8083a4e:	6061      	str	r1, [r4, #4]
 8083a50:	333c      	adds	r3, #60	; 0x3c
 8083a52:	6023      	str	r3, [r4, #0]
 8083a54:	6863      	ldr	r3, [r4, #4]
 8083a56:	2b3b      	cmp	r3, #59	; 0x3b
 8083a58:	dd03      	ble.n	8083a62 <localtime_r+0xf2>
 8083a5a:	3201      	adds	r2, #1
 8083a5c:	60a2      	str	r2, [r4, #8]
 8083a5e:	3b3c      	subs	r3, #60	; 0x3c
 8083a60:	e004      	b.n	8083a6c <localtime_r+0xfc>
 8083a62:	2b00      	cmp	r3, #0
 8083a64:	da03      	bge.n	8083a6e <localtime_r+0xfe>
 8083a66:	3a01      	subs	r2, #1
 8083a68:	60a2      	str	r2, [r4, #8]
 8083a6a:	333c      	adds	r3, #60	; 0x3c
 8083a6c:	6063      	str	r3, [r4, #4]
 8083a6e:	68a3      	ldr	r3, [r4, #8]
 8083a70:	2b17      	cmp	r3, #23
 8083a72:	dd22      	ble.n	8083aba <localtime_r+0x14a>
 8083a74:	69e2      	ldr	r2, [r4, #28]
 8083a76:	3b18      	subs	r3, #24
 8083a78:	3201      	adds	r2, #1
 8083a7a:	61e2      	str	r2, [r4, #28]
 8083a7c:	69a2      	ldr	r2, [r4, #24]
 8083a7e:	60a3      	str	r3, [r4, #8]
 8083a80:	3201      	adds	r2, #1
 8083a82:	2a06      	cmp	r2, #6
 8083a84:	bfc8      	it	gt
 8083a86:	2200      	movgt	r2, #0
 8083a88:	61a2      	str	r2, [r4, #24]
 8083a8a:	68e2      	ldr	r2, [r4, #12]
 8083a8c:	6923      	ldr	r3, [r4, #16]
 8083a8e:	3201      	adds	r2, #1
 8083a90:	60e2      	str	r2, [r4, #12]
 8083a92:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8083a96:	428a      	cmp	r2, r1
 8083a98:	dd46      	ble.n	8083b28 <localtime_r+0x1b8>
 8083a9a:	3301      	adds	r3, #1
 8083a9c:	2b0c      	cmp	r3, #12
 8083a9e:	bf08      	it	eq
 8083aa0:	6963      	ldreq	r3, [r4, #20]
 8083aa2:	eba2 0201 	sub.w	r2, r2, r1
 8083aa6:	60e2      	str	r2, [r4, #12]
 8083aa8:	bf05      	ittet	eq
 8083aaa:	3301      	addeq	r3, #1
 8083aac:	2200      	moveq	r2, #0
 8083aae:	6123      	strne	r3, [r4, #16]
 8083ab0:	6122      	streq	r2, [r4, #16]
 8083ab2:	bf04      	itt	eq
 8083ab4:	6163      	streq	r3, [r4, #20]
 8083ab6:	61e2      	streq	r2, [r4, #28]
 8083ab8:	e036      	b.n	8083b28 <localtime_r+0x1b8>
 8083aba:	2b00      	cmp	r3, #0
 8083abc:	da34      	bge.n	8083b28 <localtime_r+0x1b8>
 8083abe:	69e2      	ldr	r2, [r4, #28]
 8083ac0:	3318      	adds	r3, #24
 8083ac2:	3a01      	subs	r2, #1
 8083ac4:	61e2      	str	r2, [r4, #28]
 8083ac6:	69a2      	ldr	r2, [r4, #24]
 8083ac8:	60a3      	str	r3, [r4, #8]
 8083aca:	3a01      	subs	r2, #1
 8083acc:	bf48      	it	mi
 8083ace:	2206      	movmi	r2, #6
 8083ad0:	61a2      	str	r2, [r4, #24]
 8083ad2:	68e2      	ldr	r2, [r4, #12]
 8083ad4:	3a01      	subs	r2, #1
 8083ad6:	60e2      	str	r2, [r4, #12]
 8083ad8:	bb32      	cbnz	r2, 8083b28 <localtime_r+0x1b8>
 8083ada:	6923      	ldr	r3, [r4, #16]
 8083adc:	3b01      	subs	r3, #1
 8083ade:	d401      	bmi.n	8083ae4 <localtime_r+0x174>
 8083ae0:	6123      	str	r3, [r4, #16]
 8083ae2:	e01d      	b.n	8083b20 <localtime_r+0x1b0>
 8083ae4:	230b      	movs	r3, #11
 8083ae6:	6123      	str	r3, [r4, #16]
 8083ae8:	6963      	ldr	r3, [r4, #20]
 8083aea:	1e5a      	subs	r2, r3, #1
 8083aec:	f012 0f03 	tst.w	r2, #3
 8083af0:	6162      	str	r2, [r4, #20]
 8083af2:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8083af6:	d105      	bne.n	8083b04 <localtime_r+0x194>
 8083af8:	2164      	movs	r1, #100	; 0x64
 8083afa:	fb93 f2f1 	sdiv	r2, r3, r1
 8083afe:	fb01 3212 	mls	r2, r1, r2, r3
 8083b02:	b94a      	cbnz	r2, 8083b18 <localtime_r+0x1a8>
 8083b04:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8083b08:	fb93 f2f1 	sdiv	r2, r3, r1
 8083b0c:	fb01 3312 	mls	r3, r1, r2, r3
 8083b10:	fab3 f383 	clz	r3, r3
 8083b14:	095b      	lsrs	r3, r3, #5
 8083b16:	e000      	b.n	8083b1a <localtime_r+0x1aa>
 8083b18:	2301      	movs	r3, #1
 8083b1a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8083b1e:	61e3      	str	r3, [r4, #28]
 8083b20:	6923      	ldr	r3, [r4, #16]
 8083b22:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8083b26:	60e3      	str	r3, [r4, #12]
 8083b28:	f000 fa63 	bl	8083ff2 <__tz_unlock>
 8083b2c:	4620      	mov	r0, r4
 8083b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8083b32:	bf00      	nop
 8083b34:	08084ab4 	.word	0x08084ab4
 8083b38:	20000cb8 	.word	0x20000cb8

08083b3c <memcpy>:
 8083b3c:	b510      	push	{r4, lr}
 8083b3e:	1e43      	subs	r3, r0, #1
 8083b40:	440a      	add	r2, r1
 8083b42:	4291      	cmp	r1, r2
 8083b44:	d004      	beq.n	8083b50 <memcpy+0x14>
 8083b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8083b4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8083b4e:	e7f8      	b.n	8083b42 <memcpy+0x6>
 8083b50:	bd10      	pop	{r4, pc}

08083b52 <memset>:
 8083b52:	4603      	mov	r3, r0
 8083b54:	4402      	add	r2, r0
 8083b56:	4293      	cmp	r3, r2
 8083b58:	d002      	beq.n	8083b60 <memset+0xe>
 8083b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8083b5e:	e7fa      	b.n	8083b56 <memset+0x4>
 8083b60:	4770      	bx	lr
	...

08083b64 <srand>:
 8083b64:	b538      	push	{r3, r4, r5, lr}
 8083b66:	4b12      	ldr	r3, [pc, #72]	; (8083bb0 <srand+0x4c>)
 8083b68:	4605      	mov	r5, r0
 8083b6a:	681c      	ldr	r4, [r3, #0]
 8083b6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8083b6e:	b9d3      	cbnz	r3, 8083ba6 <srand+0x42>
 8083b70:	2018      	movs	r0, #24
 8083b72:	f7fd fc31 	bl	80813d8 <malloc>
 8083b76:	f243 330e 	movw	r3, #13070	; 0x330e
 8083b7a:	63a0      	str	r0, [r4, #56]	; 0x38
 8083b7c:	8003      	strh	r3, [r0, #0]
 8083b7e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8083b82:	8043      	strh	r3, [r0, #2]
 8083b84:	f241 2334 	movw	r3, #4660	; 0x1234
 8083b88:	8083      	strh	r3, [r0, #4]
 8083b8a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8083b8e:	80c3      	strh	r3, [r0, #6]
 8083b90:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8083b94:	8103      	strh	r3, [r0, #8]
 8083b96:	2305      	movs	r3, #5
 8083b98:	8143      	strh	r3, [r0, #10]
 8083b9a:	230b      	movs	r3, #11
 8083b9c:	8183      	strh	r3, [r0, #12]
 8083b9e:	2201      	movs	r2, #1
 8083ba0:	2300      	movs	r3, #0
 8083ba2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8083ba6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8083ba8:	2200      	movs	r2, #0
 8083baa:	611d      	str	r5, [r3, #16]
 8083bac:	615a      	str	r2, [r3, #20]
 8083bae:	bd38      	pop	{r3, r4, r5, pc}
 8083bb0:	200004f4 	.word	0x200004f4

08083bb4 <strcmp>:
 8083bb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8083bb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8083bbc:	2a01      	cmp	r2, #1
 8083bbe:	bf28      	it	cs
 8083bc0:	429a      	cmpcs	r2, r3
 8083bc2:	d0f7      	beq.n	8083bb4 <strcmp>
 8083bc4:	1ad0      	subs	r0, r2, r3
 8083bc6:	4770      	bx	lr

08083bc8 <strcpy>:
 8083bc8:	4603      	mov	r3, r0
 8083bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8083bce:	f803 2b01 	strb.w	r2, [r3], #1
 8083bd2:	2a00      	cmp	r2, #0
 8083bd4:	d1f9      	bne.n	8083bca <strcpy+0x2>
 8083bd6:	4770      	bx	lr

08083bd8 <strdup>:
 8083bd8:	4b02      	ldr	r3, [pc, #8]	; (8083be4 <strdup+0xc>)
 8083bda:	4601      	mov	r1, r0
 8083bdc:	6818      	ldr	r0, [r3, #0]
 8083bde:	f000 b803 	b.w	8083be8 <_strdup_r>
 8083be2:	bf00      	nop
 8083be4:	200004f4 	.word	0x200004f4

08083be8 <_strdup_r>:
 8083be8:	b570      	push	{r4, r5, r6, lr}
 8083bea:	4606      	mov	r6, r0
 8083bec:	4608      	mov	r0, r1
 8083bee:	460c      	mov	r4, r1
 8083bf0:	f000 f80d 	bl	8083c0e <strlen>
 8083bf4:	1c45      	adds	r5, r0, #1
 8083bf6:	4629      	mov	r1, r5
 8083bf8:	4630      	mov	r0, r6
 8083bfa:	f7fd fc25 	bl	8081448 <_malloc_r>
 8083bfe:	4606      	mov	r6, r0
 8083c00:	b118      	cbz	r0, 8083c0a <_strdup_r+0x22>
 8083c02:	462a      	mov	r2, r5
 8083c04:	4621      	mov	r1, r4
 8083c06:	f7ff ff99 	bl	8083b3c <memcpy>
 8083c0a:	4630      	mov	r0, r6
 8083c0c:	bd70      	pop	{r4, r5, r6, pc}

08083c0e <strlen>:
 8083c0e:	4603      	mov	r3, r0
 8083c10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8083c14:	2a00      	cmp	r2, #0
 8083c16:	d1fb      	bne.n	8083c10 <strlen+0x2>
 8083c18:	1a18      	subs	r0, r3, r0
 8083c1a:	3801      	subs	r0, #1
 8083c1c:	4770      	bx	lr

08083c1e <strncmp>:
 8083c1e:	b530      	push	{r4, r5, lr}
 8083c20:	b182      	cbz	r2, 8083c44 <strncmp+0x26>
 8083c22:	1e45      	subs	r5, r0, #1
 8083c24:	3901      	subs	r1, #1
 8083c26:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8083c2a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8083c2e:	42a3      	cmp	r3, r4
 8083c30:	d106      	bne.n	8083c40 <strncmp+0x22>
 8083c32:	43ec      	mvns	r4, r5
 8083c34:	4414      	add	r4, r2
 8083c36:	42e0      	cmn	r0, r4
 8083c38:	d001      	beq.n	8083c3e <strncmp+0x20>
 8083c3a:	2b00      	cmp	r3, #0
 8083c3c:	d1f3      	bne.n	8083c26 <strncmp+0x8>
 8083c3e:	461c      	mov	r4, r3
 8083c40:	1b18      	subs	r0, r3, r4
 8083c42:	bd30      	pop	{r4, r5, pc}
 8083c44:	4610      	mov	r0, r2
 8083c46:	bd30      	pop	{r4, r5, pc}

08083c48 <strncpy>:
 8083c48:	4603      	mov	r3, r0
 8083c4a:	b510      	push	{r4, lr}
 8083c4c:	b142      	cbz	r2, 8083c60 <strncpy+0x18>
 8083c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8083c52:	3a01      	subs	r2, #1
 8083c54:	f803 4b01 	strb.w	r4, [r3], #1
 8083c58:	2c00      	cmp	r4, #0
 8083c5a:	d1f7      	bne.n	8083c4c <strncpy+0x4>
 8083c5c:	441a      	add	r2, r3
 8083c5e:	e000      	b.n	8083c62 <strncpy+0x1a>
 8083c60:	bd10      	pop	{r4, pc}
 8083c62:	4293      	cmp	r3, r2
 8083c64:	d002      	beq.n	8083c6c <strncpy+0x24>
 8083c66:	f803 4b01 	strb.w	r4, [r3], #1
 8083c6a:	e7fa      	b.n	8083c62 <strncpy+0x1a>
 8083c6c:	bd10      	pop	{r4, pc}
	...

08083c70 <_strtol_r>:
 8083c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8083c74:	460f      	mov	r7, r1
 8083c76:	4680      	mov	r8, r0
 8083c78:	483f      	ldr	r0, [pc, #252]	; (8083d78 <_strtol_r+0x108>)
 8083c7a:	f8d0 9000 	ldr.w	r9, [r0]
 8083c7e:	463d      	mov	r5, r7
 8083c80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8083c84:	eb09 0004 	add.w	r0, r9, r4
 8083c88:	7840      	ldrb	r0, [r0, #1]
 8083c8a:	f000 0008 	and.w	r0, r0, #8
 8083c8e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8083c92:	b108      	cbz	r0, 8083c98 <_strtol_r+0x28>
 8083c94:	462f      	mov	r7, r5
 8083c96:	e7f2      	b.n	8083c7e <_strtol_r+0xe>
 8083c98:	2c2d      	cmp	r4, #45	; 0x2d
 8083c9a:	d103      	bne.n	8083ca4 <_strtol_r+0x34>
 8083c9c:	1cbd      	adds	r5, r7, #2
 8083c9e:	787c      	ldrb	r4, [r7, #1]
 8083ca0:	2601      	movs	r6, #1
 8083ca2:	e003      	b.n	8083cac <_strtol_r+0x3c>
 8083ca4:	2c2b      	cmp	r4, #43	; 0x2b
 8083ca6:	bf04      	itt	eq
 8083ca8:	787c      	ldrbeq	r4, [r7, #1]
 8083caa:	1cbd      	addeq	r5, r7, #2
 8083cac:	b113      	cbz	r3, 8083cb4 <_strtol_r+0x44>
 8083cae:	2b10      	cmp	r3, #16
 8083cb0:	d10a      	bne.n	8083cc8 <_strtol_r+0x58>
 8083cb2:	e05b      	b.n	8083d6c <_strtol_r+0xfc>
 8083cb4:	2c30      	cmp	r4, #48	; 0x30
 8083cb6:	d157      	bne.n	8083d68 <_strtol_r+0xf8>
 8083cb8:	7828      	ldrb	r0, [r5, #0]
 8083cba:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8083cbe:	2858      	cmp	r0, #88	; 0x58
 8083cc0:	d14d      	bne.n	8083d5e <_strtol_r+0xee>
 8083cc2:	786c      	ldrb	r4, [r5, #1]
 8083cc4:	2310      	movs	r3, #16
 8083cc6:	3502      	adds	r5, #2
 8083cc8:	2e00      	cmp	r6, #0
 8083cca:	bf14      	ite	ne
 8083ccc:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8083cd0:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8083cd4:	fbbc faf3 	udiv	sl, ip, r3
 8083cd8:	2700      	movs	r7, #0
 8083cda:	4638      	mov	r0, r7
 8083cdc:	fb03 cc1a 	mls	ip, r3, sl, ip
 8083ce0:	eb09 0e04 	add.w	lr, r9, r4
 8083ce4:	f89e e001 	ldrb.w	lr, [lr, #1]
 8083ce8:	f01e 0f04 	tst.w	lr, #4
 8083cec:	d001      	beq.n	8083cf2 <_strtol_r+0x82>
 8083cee:	3c30      	subs	r4, #48	; 0x30
 8083cf0:	e00b      	b.n	8083d0a <_strtol_r+0x9a>
 8083cf2:	f01e 0e03 	ands.w	lr, lr, #3
 8083cf6:	d01b      	beq.n	8083d30 <_strtol_r+0xc0>
 8083cf8:	f1be 0f01 	cmp.w	lr, #1
 8083cfc:	bf0c      	ite	eq
 8083cfe:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8083d02:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8083d06:	ebce 0404 	rsb	r4, lr, r4
 8083d0a:	42a3      	cmp	r3, r4
 8083d0c:	dd10      	ble.n	8083d30 <_strtol_r+0xc0>
 8083d0e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8083d12:	d00a      	beq.n	8083d2a <_strtol_r+0xba>
 8083d14:	4550      	cmp	r0, sl
 8083d16:	d806      	bhi.n	8083d26 <_strtol_r+0xb6>
 8083d18:	d101      	bne.n	8083d1e <_strtol_r+0xae>
 8083d1a:	4564      	cmp	r4, ip
 8083d1c:	dc03      	bgt.n	8083d26 <_strtol_r+0xb6>
 8083d1e:	fb03 4000 	mla	r0, r3, r0, r4
 8083d22:	2701      	movs	r7, #1
 8083d24:	e001      	b.n	8083d2a <_strtol_r+0xba>
 8083d26:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8083d2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8083d2e:	e7d7      	b.n	8083ce0 <_strtol_r+0x70>
 8083d30:	1c7b      	adds	r3, r7, #1
 8083d32:	d10c      	bne.n	8083d4e <_strtol_r+0xde>
 8083d34:	2e00      	cmp	r6, #0
 8083d36:	f04f 0322 	mov.w	r3, #34	; 0x22
 8083d3a:	bf14      	ite	ne
 8083d3c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8083d40:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8083d44:	f8c8 3000 	str.w	r3, [r8]
 8083d48:	b92a      	cbnz	r2, 8083d56 <_strtol_r+0xe6>
 8083d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8083d4e:	b106      	cbz	r6, 8083d52 <_strtol_r+0xe2>
 8083d50:	4240      	negs	r0, r0
 8083d52:	b172      	cbz	r2, 8083d72 <_strtol_r+0x102>
 8083d54:	b107      	cbz	r7, 8083d58 <_strtol_r+0xe8>
 8083d56:	1e69      	subs	r1, r5, #1
 8083d58:	6011      	str	r1, [r2, #0]
 8083d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8083d5e:	2430      	movs	r4, #48	; 0x30
 8083d60:	2b00      	cmp	r3, #0
 8083d62:	d1b1      	bne.n	8083cc8 <_strtol_r+0x58>
 8083d64:	2308      	movs	r3, #8
 8083d66:	e7af      	b.n	8083cc8 <_strtol_r+0x58>
 8083d68:	230a      	movs	r3, #10
 8083d6a:	e7ad      	b.n	8083cc8 <_strtol_r+0x58>
 8083d6c:	2c30      	cmp	r4, #48	; 0x30
 8083d6e:	d0a3      	beq.n	8083cb8 <_strtol_r+0x48>
 8083d70:	e7aa      	b.n	8083cc8 <_strtol_r+0x58>
 8083d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8083d76:	bf00      	nop
 8083d78:	20000490 	.word	0x20000490

08083d7c <strtol>:
 8083d7c:	4613      	mov	r3, r2
 8083d7e:	460a      	mov	r2, r1
 8083d80:	4601      	mov	r1, r0
 8083d82:	4802      	ldr	r0, [pc, #8]	; (8083d8c <strtol+0x10>)
 8083d84:	6800      	ldr	r0, [r0, #0]
 8083d86:	f7ff bf73 	b.w	8083c70 <_strtol_r>
 8083d8a:	bf00      	nop
 8083d8c:	200004f4 	.word	0x200004f4

08083d90 <_strtoul_r>:
 8083d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8083d94:	460e      	mov	r6, r1
 8083d96:	4680      	mov	r8, r0
 8083d98:	483b      	ldr	r0, [pc, #236]	; (8083e88 <_strtoul_r+0xf8>)
 8083d9a:	f8d0 9000 	ldr.w	r9, [r0]
 8083d9e:	4635      	mov	r5, r6
 8083da0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8083da4:	eb09 0004 	add.w	r0, r9, r4
 8083da8:	7840      	ldrb	r0, [r0, #1]
 8083daa:	f000 0008 	and.w	r0, r0, #8
 8083dae:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8083db2:	b108      	cbz	r0, 8083db8 <_strtoul_r+0x28>
 8083db4:	462e      	mov	r6, r5
 8083db6:	e7f2      	b.n	8083d9e <_strtoul_r+0xe>
 8083db8:	2c2d      	cmp	r4, #45	; 0x2d
 8083dba:	d103      	bne.n	8083dc4 <_strtoul_r+0x34>
 8083dbc:	1cb5      	adds	r5, r6, #2
 8083dbe:	7874      	ldrb	r4, [r6, #1]
 8083dc0:	2701      	movs	r7, #1
 8083dc2:	e003      	b.n	8083dcc <_strtoul_r+0x3c>
 8083dc4:	2c2b      	cmp	r4, #43	; 0x2b
 8083dc6:	bf04      	itt	eq
 8083dc8:	7874      	ldrbeq	r4, [r6, #1]
 8083dca:	1cb5      	addeq	r5, r6, #2
 8083dcc:	b113      	cbz	r3, 8083dd4 <_strtoul_r+0x44>
 8083dce:	2b10      	cmp	r3, #16
 8083dd0:	d10a      	bne.n	8083de8 <_strtoul_r+0x58>
 8083dd2:	e053      	b.n	8083e7c <_strtoul_r+0xec>
 8083dd4:	2c30      	cmp	r4, #48	; 0x30
 8083dd6:	d14f      	bne.n	8083e78 <_strtoul_r+0xe8>
 8083dd8:	7828      	ldrb	r0, [r5, #0]
 8083dda:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8083dde:	2858      	cmp	r0, #88	; 0x58
 8083de0:	d145      	bne.n	8083e6e <_strtoul_r+0xde>
 8083de2:	786c      	ldrb	r4, [r5, #1]
 8083de4:	2310      	movs	r3, #16
 8083de6:	3502      	adds	r5, #2
 8083de8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8083dec:	fbbc fcf3 	udiv	ip, ip, r3
 8083df0:	fb03 fa0c 	mul.w	sl, r3, ip
 8083df4:	2600      	movs	r6, #0
 8083df6:	ea6f 0a0a 	mvn.w	sl, sl
 8083dfa:	4630      	mov	r0, r6
 8083dfc:	eb09 0e04 	add.w	lr, r9, r4
 8083e00:	f89e e001 	ldrb.w	lr, [lr, #1]
 8083e04:	f01e 0f04 	tst.w	lr, #4
 8083e08:	d001      	beq.n	8083e0e <_strtoul_r+0x7e>
 8083e0a:	3c30      	subs	r4, #48	; 0x30
 8083e0c:	e00b      	b.n	8083e26 <_strtoul_r+0x96>
 8083e0e:	f01e 0e03 	ands.w	lr, lr, #3
 8083e12:	d01a      	beq.n	8083e4a <_strtoul_r+0xba>
 8083e14:	f1be 0f01 	cmp.w	lr, #1
 8083e18:	bf0c      	ite	eq
 8083e1a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8083e1e:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8083e22:	ebce 0404 	rsb	r4, lr, r4
 8083e26:	42a3      	cmp	r3, r4
 8083e28:	dd0f      	ble.n	8083e4a <_strtoul_r+0xba>
 8083e2a:	2e00      	cmp	r6, #0
 8083e2c:	db08      	blt.n	8083e40 <_strtoul_r+0xb0>
 8083e2e:	4560      	cmp	r0, ip
 8083e30:	d806      	bhi.n	8083e40 <_strtoul_r+0xb0>
 8083e32:	d101      	bne.n	8083e38 <_strtoul_r+0xa8>
 8083e34:	4554      	cmp	r4, sl
 8083e36:	dc03      	bgt.n	8083e40 <_strtoul_r+0xb0>
 8083e38:	fb03 4000 	mla	r0, r3, r0, r4
 8083e3c:	2601      	movs	r6, #1
 8083e3e:	e001      	b.n	8083e44 <_strtoul_r+0xb4>
 8083e40:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8083e44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8083e48:	e7d8      	b.n	8083dfc <_strtoul_r+0x6c>
 8083e4a:	2e00      	cmp	r6, #0
 8083e4c:	da07      	bge.n	8083e5e <_strtoul_r+0xce>
 8083e4e:	2322      	movs	r3, #34	; 0x22
 8083e50:	f8c8 3000 	str.w	r3, [r8]
 8083e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8083e58:	b92a      	cbnz	r2, 8083e66 <_strtoul_r+0xd6>
 8083e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8083e5e:	b107      	cbz	r7, 8083e62 <_strtoul_r+0xd2>
 8083e60:	4240      	negs	r0, r0
 8083e62:	b172      	cbz	r2, 8083e82 <_strtoul_r+0xf2>
 8083e64:	b106      	cbz	r6, 8083e68 <_strtoul_r+0xd8>
 8083e66:	1e69      	subs	r1, r5, #1
 8083e68:	6011      	str	r1, [r2, #0]
 8083e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8083e6e:	2430      	movs	r4, #48	; 0x30
 8083e70:	2b00      	cmp	r3, #0
 8083e72:	d1b9      	bne.n	8083de8 <_strtoul_r+0x58>
 8083e74:	2308      	movs	r3, #8
 8083e76:	e7b7      	b.n	8083de8 <_strtoul_r+0x58>
 8083e78:	230a      	movs	r3, #10
 8083e7a:	e7b5      	b.n	8083de8 <_strtoul_r+0x58>
 8083e7c:	2c30      	cmp	r4, #48	; 0x30
 8083e7e:	d0ab      	beq.n	8083dd8 <_strtoul_r+0x48>
 8083e80:	e7b2      	b.n	8083de8 <_strtoul_r+0x58>
 8083e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8083e86:	bf00      	nop
 8083e88:	20000490 	.word	0x20000490

08083e8c <strtoul>:
 8083e8c:	4613      	mov	r3, r2
 8083e8e:	460a      	mov	r2, r1
 8083e90:	4601      	mov	r1, r0
 8083e92:	4802      	ldr	r0, [pc, #8]	; (8083e9c <strtoul+0x10>)
 8083e94:	6800      	ldr	r0, [r0, #0]
 8083e96:	f7ff bf7b 	b.w	8083d90 <_strtoul_r>
 8083e9a:	bf00      	nop
 8083e9c:	200004f4 	.word	0x200004f4

08083ea0 <__tzcalc_limits>:
 8083ea0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8083ea4:	4604      	mov	r4, r0
 8083ea6:	f000 fa6f 	bl	8084388 <__gettzinfo>
 8083eaa:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8083eae:	429c      	cmp	r4, r3
 8083eb0:	f340 8096 	ble.w	8083fe0 <__tzcalc_limits+0x140>
 8083eb4:	f240 156d 	movw	r5, #365	; 0x16d
 8083eb8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8083ebc:	18e3      	adds	r3, r4, r3
 8083ebe:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 8083ec2:	109b      	asrs	r3, r3, #2
 8083ec4:	fb05 3502 	mla	r5, r5, r2, r3
 8083ec8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 8083ecc:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8083ed0:	fb92 f3f3 	sdiv	r3, r2, r3
 8083ed4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8083ed8:	442b      	add	r3, r5
 8083eda:	18a5      	adds	r5, r4, r2
 8083edc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8083ee0:	fb94 f7f2 	sdiv	r7, r4, r2
 8083ee4:	fb95 f5f2 	sdiv	r5, r5, r2
 8083ee8:	fb02 4717 	mls	r7, r2, r7, r4
 8083eec:	441d      	add	r5, r3
 8083eee:	2364      	movs	r3, #100	; 0x64
 8083ef0:	fb94 f6f3 	sdiv	r6, r4, r3
 8083ef4:	fab7 fe87 	clz	lr, r7
 8083ef8:	4601      	mov	r1, r0
 8083efa:	fb03 4616 	mls	r6, r3, r6, r4
 8083efe:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8083f02:	9301      	str	r3, [sp, #4]
 8083f04:	f004 0303 	and.w	r3, r4, #3
 8083f08:	6044      	str	r4, [r0, #4]
 8083f0a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8083f0e:	9300      	str	r3, [sp, #0]
 8083f10:	f04f 0c07 	mov.w	ip, #7
 8083f14:	7a0b      	ldrb	r3, [r1, #8]
 8083f16:	2b4a      	cmp	r3, #74	; 0x4a
 8083f18:	d10e      	bne.n	8083f38 <__tzcalc_limits+0x98>
 8083f1a:	694b      	ldr	r3, [r1, #20]
 8083f1c:	9a00      	ldr	r2, [sp, #0]
 8083f1e:	18ec      	adds	r4, r5, r3
 8083f20:	b902      	cbnz	r2, 8083f24 <__tzcalc_limits+0x84>
 8083f22:	b906      	cbnz	r6, 8083f26 <__tzcalc_limits+0x86>
 8083f24:	b927      	cbnz	r7, 8083f30 <__tzcalc_limits+0x90>
 8083f26:	2b3b      	cmp	r3, #59	; 0x3b
 8083f28:	bfd4      	ite	le
 8083f2a:	2300      	movle	r3, #0
 8083f2c:	2301      	movgt	r3, #1
 8083f2e:	e000      	b.n	8083f32 <__tzcalc_limits+0x92>
 8083f30:	2300      	movs	r3, #0
 8083f32:	4423      	add	r3, r4
 8083f34:	3b01      	subs	r3, #1
 8083f36:	e03f      	b.n	8083fb8 <__tzcalc_limits+0x118>
 8083f38:	2b44      	cmp	r3, #68	; 0x44
 8083f3a:	d102      	bne.n	8083f42 <__tzcalc_limits+0xa2>
 8083f3c:	694b      	ldr	r3, [r1, #20]
 8083f3e:	442b      	add	r3, r5
 8083f40:	e03a      	b.n	8083fb8 <__tzcalc_limits+0x118>
 8083f42:	9b00      	ldr	r3, [sp, #0]
 8083f44:	b92b      	cbnz	r3, 8083f52 <__tzcalc_limits+0xb2>
 8083f46:	2e00      	cmp	r6, #0
 8083f48:	bf0c      	ite	eq
 8083f4a:	46f0      	moveq	r8, lr
 8083f4c:	f04f 0801 	movne.w	r8, #1
 8083f50:	e000      	b.n	8083f54 <__tzcalc_limits+0xb4>
 8083f52:	46f0      	mov	r8, lr
 8083f54:	46a9      	mov	r9, r5
 8083f56:	4b24      	ldr	r3, [pc, #144]	; (8083fe8 <__tzcalc_limits+0x148>)
 8083f58:	2230      	movs	r2, #48	; 0x30
 8083f5a:	fb02 3808 	mla	r8, r2, r8, r3
 8083f5e:	68cc      	ldr	r4, [r1, #12]
 8083f60:	f1a8 0a04 	sub.w	sl, r8, #4
 8083f64:	2301      	movs	r3, #1
 8083f66:	42a3      	cmp	r3, r4
 8083f68:	da04      	bge.n	8083f74 <__tzcalc_limits+0xd4>
 8083f6a:	f85a bf04 	ldr.w	fp, [sl, #4]!
 8083f6e:	3301      	adds	r3, #1
 8083f70:	44d9      	add	r9, fp
 8083f72:	e7f8      	b.n	8083f66 <__tzcalc_limits+0xc6>
 8083f74:	f109 0304 	add.w	r3, r9, #4
 8083f78:	fb93 fbfc 	sdiv	fp, r3, ip
 8083f7c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 8083f80:	ebca 0a03 	rsb	sl, sl, r3
 8083f84:	694b      	ldr	r3, [r1, #20]
 8083f86:	2c01      	cmp	r4, #1
 8083f88:	bfb8      	it	lt
 8083f8a:	2401      	movlt	r4, #1
 8083f8c:	ebb3 0a0a 	subs.w	sl, r3, sl
 8083f90:	690b      	ldr	r3, [r1, #16]
 8083f92:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8083f96:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8083f9a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8083f9e:	bf48      	it	mi
 8083fa0:	f10a 0a07 	addmi.w	sl, sl, #7
 8083fa4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8083fa8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8083fac:	4453      	add	r3, sl
 8083fae:	42a3      	cmp	r3, r4
 8083fb0:	db01      	blt.n	8083fb6 <__tzcalc_limits+0x116>
 8083fb2:	3b07      	subs	r3, #7
 8083fb4:	e7fb      	b.n	8083fae <__tzcalc_limits+0x10e>
 8083fb6:	444b      	add	r3, r9
 8083fb8:	698c      	ldr	r4, [r1, #24]
 8083fba:	4a0c      	ldr	r2, [pc, #48]	; (8083fec <__tzcalc_limits+0x14c>)
 8083fbc:	fb02 4303 	mla	r3, r2, r3, r4
 8083fc0:	6a0c      	ldr	r4, [r1, #32]
 8083fc2:	4423      	add	r3, r4
 8083fc4:	f841 3f1c 	str.w	r3, [r1, #28]!
 8083fc8:	9b01      	ldr	r3, [sp, #4]
 8083fca:	4299      	cmp	r1, r3
 8083fcc:	d1a2      	bne.n	8083f14 <__tzcalc_limits+0x74>
 8083fce:	69c3      	ldr	r3, [r0, #28]
 8083fd0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8083fd2:	4293      	cmp	r3, r2
 8083fd4:	bfac      	ite	ge
 8083fd6:	2300      	movge	r3, #0
 8083fd8:	2301      	movlt	r3, #1
 8083fda:	6003      	str	r3, [r0, #0]
 8083fdc:	2001      	movs	r0, #1
 8083fde:	e000      	b.n	8083fe2 <__tzcalc_limits+0x142>
 8083fe0:	2000      	movs	r0, #0
 8083fe2:	b003      	add	sp, #12
 8083fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8083fe8:	08084ab4 	.word	0x08084ab4
 8083fec:	00015180 	.word	0x00015180

08083ff0 <__tz_lock>:
 8083ff0:	4770      	bx	lr

08083ff2 <__tz_unlock>:
 8083ff2:	4770      	bx	lr

08083ff4 <_tzset_unlocked>:
 8083ff4:	4b01      	ldr	r3, [pc, #4]	; (8083ffc <_tzset_unlocked+0x8>)
 8083ff6:	6818      	ldr	r0, [r3, #0]
 8083ff8:	f000 b802 	b.w	8084000 <_tzset_unlocked_r>
 8083ffc:	200004f4 	.word	0x200004f4

08084000 <_tzset_unlocked_r>:
 8084000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084004:	b08d      	sub	sp, #52	; 0x34
 8084006:	4607      	mov	r7, r0
 8084008:	f000 f9be 	bl	8084388 <__gettzinfo>
 808400c:	49b0      	ldr	r1, [pc, #704]	; (80842d0 <_tzset_unlocked_r+0x2d0>)
 808400e:	4604      	mov	r4, r0
 8084010:	4638      	mov	r0, r7
 8084012:	f000 f9b1 	bl	8084378 <_getenv_r>
 8084016:	4eaf      	ldr	r6, [pc, #700]	; (80842d4 <_tzset_unlocked_r+0x2d4>)
 8084018:	4605      	mov	r5, r0
 808401a:	b960      	cbnz	r0, 8084036 <_tzset_unlocked_r+0x36>
 808401c:	4bae      	ldr	r3, [pc, #696]	; (80842d8 <_tzset_unlocked_r+0x2d8>)
 808401e:	4aaf      	ldr	r2, [pc, #700]	; (80842dc <_tzset_unlocked_r+0x2dc>)
 8084020:	6018      	str	r0, [r3, #0]
 8084022:	4baf      	ldr	r3, [pc, #700]	; (80842e0 <_tzset_unlocked_r+0x2e0>)
 8084024:	6018      	str	r0, [r3, #0]
 8084026:	4baf      	ldr	r3, [pc, #700]	; (80842e4 <_tzset_unlocked_r+0x2e4>)
 8084028:	6830      	ldr	r0, [r6, #0]
 808402a:	601a      	str	r2, [r3, #0]
 808402c:	605a      	str	r2, [r3, #4]
 808402e:	f7fd f9db 	bl	80813e8 <free>
 8084032:	6035      	str	r5, [r6, #0]
 8084034:	e148      	b.n	80842c8 <_tzset_unlocked_r+0x2c8>
 8084036:	6831      	ldr	r1, [r6, #0]
 8084038:	b979      	cbnz	r1, 808405a <_tzset_unlocked_r+0x5a>
 808403a:	6830      	ldr	r0, [r6, #0]
 808403c:	f7fd f9d4 	bl	80813e8 <free>
 8084040:	4628      	mov	r0, r5
 8084042:	f7ff fde4 	bl	8083c0e <strlen>
 8084046:	1c41      	adds	r1, r0, #1
 8084048:	4638      	mov	r0, r7
 808404a:	f7fd f9fd 	bl	8081448 <_malloc_r>
 808404e:	6030      	str	r0, [r6, #0]
 8084050:	b148      	cbz	r0, 8084066 <_tzset_unlocked_r+0x66>
 8084052:	4629      	mov	r1, r5
 8084054:	f7ff fdb8 	bl	8083bc8 <strcpy>
 8084058:	e005      	b.n	8084066 <_tzset_unlocked_r+0x66>
 808405a:	f7ff fdab 	bl	8083bb4 <strcmp>
 808405e:	2800      	cmp	r0, #0
 8084060:	f000 8132 	beq.w	80842c8 <_tzset_unlocked_r+0x2c8>
 8084064:	e7e9      	b.n	808403a <_tzset_unlocked_r+0x3a>
 8084066:	782b      	ldrb	r3, [r5, #0]
 8084068:	ae0a      	add	r6, sp, #40	; 0x28
 808406a:	2b3a      	cmp	r3, #58	; 0x3a
 808406c:	bf08      	it	eq
 808406e:	3501      	addeq	r5, #1
 8084070:	4633      	mov	r3, r6
 8084072:	4a9d      	ldr	r2, [pc, #628]	; (80842e8 <_tzset_unlocked_r+0x2e8>)
 8084074:	499d      	ldr	r1, [pc, #628]	; (80842ec <_tzset_unlocked_r+0x2ec>)
 8084076:	4628      	mov	r0, r5
 8084078:	f7fd f9ce 	bl	8081418 <siscanf>
 808407c:	2800      	cmp	r0, #0
 808407e:	f340 8123 	ble.w	80842c8 <_tzset_unlocked_r+0x2c8>
 8084082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084084:	18ef      	adds	r7, r5, r3
 8084086:	5ceb      	ldrb	r3, [r5, r3]
 8084088:	2b2d      	cmp	r3, #45	; 0x2d
 808408a:	d103      	bne.n	8084094 <_tzset_unlocked_r+0x94>
 808408c:	3701      	adds	r7, #1
 808408e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8084092:	e003      	b.n	808409c <_tzset_unlocked_r+0x9c>
 8084094:	2b2b      	cmp	r3, #43	; 0x2b
 8084096:	bf08      	it	eq
 8084098:	3701      	addeq	r7, #1
 808409a:	2501      	movs	r5, #1
 808409c:	f10d 0a20 	add.w	sl, sp, #32
 80840a0:	f10d 0b1e 	add.w	fp, sp, #30
 80840a4:	f04f 0800 	mov.w	r8, #0
 80840a8:	9603      	str	r6, [sp, #12]
 80840aa:	f8cd a008 	str.w	sl, [sp, #8]
 80840ae:	9601      	str	r6, [sp, #4]
 80840b0:	f8cd b000 	str.w	fp, [sp]
 80840b4:	4633      	mov	r3, r6
 80840b6:	aa07      	add	r2, sp, #28
 80840b8:	498d      	ldr	r1, [pc, #564]	; (80842f0 <_tzset_unlocked_r+0x2f0>)
 80840ba:	4638      	mov	r0, r7
 80840bc:	f8ad 801e 	strh.w	r8, [sp, #30]
 80840c0:	f8ad 8020 	strh.w	r8, [sp, #32]
 80840c4:	f7fd f9a8 	bl	8081418 <siscanf>
 80840c8:	4540      	cmp	r0, r8
 80840ca:	f340 80fd 	ble.w	80842c8 <_tzset_unlocked_r+0x2c8>
 80840ce:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80840d2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80840d6:	213c      	movs	r1, #60	; 0x3c
 80840d8:	fb01 3302 	mla	r3, r1, r2, r3
 80840dc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80840e0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80840e4:	fb01 3302 	mla	r3, r1, r2, r3
 80840e8:	435d      	muls	r5, r3
 80840ea:	4b7f      	ldr	r3, [pc, #508]	; (80842e8 <_tzset_unlocked_r+0x2e8>)
 80840ec:	6225      	str	r5, [r4, #32]
 80840ee:	4d7d      	ldr	r5, [pc, #500]	; (80842e4 <_tzset_unlocked_r+0x2e4>)
 80840f0:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80842fc <_tzset_unlocked_r+0x2fc>
 80840f4:	602b      	str	r3, [r5, #0]
 80840f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80840f8:	464a      	mov	r2, r9
 80840fa:	441f      	add	r7, r3
 80840fc:	497b      	ldr	r1, [pc, #492]	; (80842ec <_tzset_unlocked_r+0x2ec>)
 80840fe:	4633      	mov	r3, r6
 8084100:	4638      	mov	r0, r7
 8084102:	f7fd f989 	bl	8081418 <siscanf>
 8084106:	4540      	cmp	r0, r8
 8084108:	dc08      	bgt.n	808411c <_tzset_unlocked_r+0x11c>
 808410a:	682b      	ldr	r3, [r5, #0]
 808410c:	6a22      	ldr	r2, [r4, #32]
 808410e:	606b      	str	r3, [r5, #4]
 8084110:	4b71      	ldr	r3, [pc, #452]	; (80842d8 <_tzset_unlocked_r+0x2d8>)
 8084112:	601a      	str	r2, [r3, #0]
 8084114:	4b72      	ldr	r3, [pc, #456]	; (80842e0 <_tzset_unlocked_r+0x2e0>)
 8084116:	f8c3 8000 	str.w	r8, [r3]
 808411a:	e0d5      	b.n	80842c8 <_tzset_unlocked_r+0x2c8>
 808411c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808411e:	f8c5 9004 	str.w	r9, [r5, #4]
 8084122:	18fd      	adds	r5, r7, r3
 8084124:	5cfb      	ldrb	r3, [r7, r3]
 8084126:	2b2d      	cmp	r3, #45	; 0x2d
 8084128:	d103      	bne.n	8084132 <_tzset_unlocked_r+0x132>
 808412a:	3501      	adds	r5, #1
 808412c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8084130:	e003      	b.n	808413a <_tzset_unlocked_r+0x13a>
 8084132:	2b2b      	cmp	r3, #43	; 0x2b
 8084134:	bf08      	it	eq
 8084136:	3501      	addeq	r5, #1
 8084138:	2701      	movs	r7, #1
 808413a:	2300      	movs	r3, #0
 808413c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8084140:	f8ad 301e 	strh.w	r3, [sp, #30]
 8084144:	f8ad 3020 	strh.w	r3, [sp, #32]
 8084148:	930a      	str	r3, [sp, #40]	; 0x28
 808414a:	9603      	str	r6, [sp, #12]
 808414c:	f8cd a008 	str.w	sl, [sp, #8]
 8084150:	9601      	str	r6, [sp, #4]
 8084152:	f8cd b000 	str.w	fp, [sp]
 8084156:	4633      	mov	r3, r6
 8084158:	aa07      	add	r2, sp, #28
 808415a:	4965      	ldr	r1, [pc, #404]	; (80842f0 <_tzset_unlocked_r+0x2f0>)
 808415c:	4628      	mov	r0, r5
 808415e:	f7fd f95b 	bl	8081418 <siscanf>
 8084162:	2800      	cmp	r0, #0
 8084164:	dc04      	bgt.n	8084170 <_tzset_unlocked_r+0x170>
 8084166:	6a23      	ldr	r3, [r4, #32]
 8084168:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 808416c:	63e3      	str	r3, [r4, #60]	; 0x3c
 808416e:	e00e      	b.n	808418e <_tzset_unlocked_r+0x18e>
 8084170:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8084174:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8084178:	213c      	movs	r1, #60	; 0x3c
 808417a:	fb01 3302 	mla	r3, r1, r2, r3
 808417e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8084182:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8084186:	fb01 3302 	mla	r3, r1, r2, r3
 808418a:	435f      	muls	r7, r3
 808418c:	63e7      	str	r7, [r4, #60]	; 0x3c
 808418e:	4627      	mov	r7, r4
 8084190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084192:	f04f 0900 	mov.w	r9, #0
 8084196:	441d      	add	r5, r3
 8084198:	782b      	ldrb	r3, [r5, #0]
 808419a:	2b2c      	cmp	r3, #44	; 0x2c
 808419c:	bf08      	it	eq
 808419e:	3501      	addeq	r5, #1
 80841a0:	f895 8000 	ldrb.w	r8, [r5]
 80841a4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80841a8:	d126      	bne.n	80841f8 <_tzset_unlocked_r+0x1f8>
 80841aa:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80841ae:	9302      	str	r3, [sp, #8]
 80841b0:	ab09      	add	r3, sp, #36	; 0x24
 80841b2:	9300      	str	r3, [sp, #0]
 80841b4:	9603      	str	r6, [sp, #12]
 80841b6:	9601      	str	r6, [sp, #4]
 80841b8:	4633      	mov	r3, r6
 80841ba:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80841be:	494d      	ldr	r1, [pc, #308]	; (80842f4 <_tzset_unlocked_r+0x2f4>)
 80841c0:	4628      	mov	r0, r5
 80841c2:	f7fd f929 	bl	8081418 <siscanf>
 80841c6:	2803      	cmp	r0, #3
 80841c8:	d17e      	bne.n	80842c8 <_tzset_unlocked_r+0x2c8>
 80841ca:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80841ce:	1e4b      	subs	r3, r1, #1
 80841d0:	2b0b      	cmp	r3, #11
 80841d2:	d879      	bhi.n	80842c8 <_tzset_unlocked_r+0x2c8>
 80841d4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80841d8:	1e53      	subs	r3, r2, #1
 80841da:	2b04      	cmp	r3, #4
 80841dc:	d874      	bhi.n	80842c8 <_tzset_unlocked_r+0x2c8>
 80841de:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80841e2:	2b06      	cmp	r3, #6
 80841e4:	d870      	bhi.n	80842c8 <_tzset_unlocked_r+0x2c8>
 80841e6:	f887 8008 	strb.w	r8, [r7, #8]
 80841ea:	60f9      	str	r1, [r7, #12]
 80841ec:	613a      	str	r2, [r7, #16]
 80841ee:	617b      	str	r3, [r7, #20]
 80841f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80841f2:	eb05 0803 	add.w	r8, r5, r3
 80841f6:	e02a      	b.n	808424e <_tzset_unlocked_r+0x24e>
 80841f8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80841fc:	bf06      	itte	eq
 80841fe:	4643      	moveq	r3, r8
 8084200:	3501      	addeq	r5, #1
 8084202:	2344      	movne	r3, #68	; 0x44
 8084204:	220a      	movs	r2, #10
 8084206:	a90b      	add	r1, sp, #44	; 0x2c
 8084208:	4628      	mov	r0, r5
 808420a:	9305      	str	r3, [sp, #20]
 808420c:	f7ff fe3e 	bl	8083e8c <strtoul>
 8084210:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8084214:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8084218:	4545      	cmp	r5, r8
 808421a:	9b05      	ldr	r3, [sp, #20]
 808421c:	d114      	bne.n	8084248 <_tzset_unlocked_r+0x248>
 808421e:	234d      	movs	r3, #77	; 0x4d
 8084220:	f1b9 0f00 	cmp.w	r9, #0
 8084224:	d107      	bne.n	8084236 <_tzset_unlocked_r+0x236>
 8084226:	7223      	strb	r3, [r4, #8]
 8084228:	2303      	movs	r3, #3
 808422a:	60e3      	str	r3, [r4, #12]
 808422c:	2302      	movs	r3, #2
 808422e:	6123      	str	r3, [r4, #16]
 8084230:	f8c4 9014 	str.w	r9, [r4, #20]
 8084234:	e00b      	b.n	808424e <_tzset_unlocked_r+0x24e>
 8084236:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 808423a:	230b      	movs	r3, #11
 808423c:	62a3      	str	r3, [r4, #40]	; 0x28
 808423e:	2301      	movs	r3, #1
 8084240:	62e3      	str	r3, [r4, #44]	; 0x2c
 8084242:	2300      	movs	r3, #0
 8084244:	6323      	str	r3, [r4, #48]	; 0x30
 8084246:	e002      	b.n	808424e <_tzset_unlocked_r+0x24e>
 8084248:	b280      	uxth	r0, r0
 808424a:	723b      	strb	r3, [r7, #8]
 808424c:	6178      	str	r0, [r7, #20]
 808424e:	2302      	movs	r3, #2
 8084250:	f8ad 301c 	strh.w	r3, [sp, #28]
 8084254:	2300      	movs	r3, #0
 8084256:	f8ad 301e 	strh.w	r3, [sp, #30]
 808425a:	f8ad 3020 	strh.w	r3, [sp, #32]
 808425e:	930a      	str	r3, [sp, #40]	; 0x28
 8084260:	f898 3000 	ldrb.w	r3, [r8]
 8084264:	2b2f      	cmp	r3, #47	; 0x2f
 8084266:	d10b      	bne.n	8084280 <_tzset_unlocked_r+0x280>
 8084268:	9603      	str	r6, [sp, #12]
 808426a:	f8cd a008 	str.w	sl, [sp, #8]
 808426e:	9601      	str	r6, [sp, #4]
 8084270:	f8cd b000 	str.w	fp, [sp]
 8084274:	4633      	mov	r3, r6
 8084276:	aa07      	add	r2, sp, #28
 8084278:	491f      	ldr	r1, [pc, #124]	; (80842f8 <_tzset_unlocked_r+0x2f8>)
 808427a:	4640      	mov	r0, r8
 808427c:	f7fd f8cc 	bl	8081418 <siscanf>
 8084280:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8084284:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8084288:	213c      	movs	r1, #60	; 0x3c
 808428a:	fb01 3302 	mla	r3, r1, r2, r3
 808428e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8084292:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8084296:	fb01 3302 	mla	r3, r1, r2, r3
 808429a:	61bb      	str	r3, [r7, #24]
 808429c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808429e:	f109 0901 	add.w	r9, r9, #1
 80842a2:	f1b9 0f02 	cmp.w	r9, #2
 80842a6:	4445      	add	r5, r8
 80842a8:	f107 071c 	add.w	r7, r7, #28
 80842ac:	f47f af74 	bne.w	8084198 <_tzset_unlocked_r+0x198>
 80842b0:	6860      	ldr	r0, [r4, #4]
 80842b2:	f7ff fdf5 	bl	8083ea0 <__tzcalc_limits>
 80842b6:	6a22      	ldr	r2, [r4, #32]
 80842b8:	4b07      	ldr	r3, [pc, #28]	; (80842d8 <_tzset_unlocked_r+0x2d8>)
 80842ba:	601a      	str	r2, [r3, #0]
 80842bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80842be:	1a9b      	subs	r3, r3, r2
 80842c0:	4a07      	ldr	r2, [pc, #28]	; (80842e0 <_tzset_unlocked_r+0x2e0>)
 80842c2:	bf18      	it	ne
 80842c4:	2301      	movne	r3, #1
 80842c6:	6013      	str	r3, [r2, #0]
 80842c8:	b00d      	add	sp, #52	; 0x34
 80842ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80842ce:	bf00      	nop
 80842d0:	08084b14 	.word	0x08084b14
 80842d4:	20000cb4 	.word	0x20000cb4
 80842d8:	20000cbc 	.word	0x20000cbc
 80842dc:	08084b17 	.word	0x08084b17
 80842e0:	20000cb8 	.word	0x20000cb8
 80842e4:	200004f8 	.word	0x200004f8
 80842e8:	20000ca7 	.word	0x20000ca7
 80842ec:	08084b1b 	.word	0x08084b1b
 80842f0:	08084b3e 	.word	0x08084b3e
 80842f4:	08084b2a 	.word	0x08084b2a
 80842f8:	08084b3d 	.word	0x08084b3d
 80842fc:	20000c9c 	.word	0x20000c9c

08084300 <_findenv_r>:
 8084300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084304:	4607      	mov	r7, r0
 8084306:	468b      	mov	fp, r1
 8084308:	4690      	mov	r8, r2
 808430a:	f000 f8d7 	bl	80844bc <__env_lock>
 808430e:	4b19      	ldr	r3, [pc, #100]	; (8084374 <_findenv_r+0x74>)
 8084310:	681d      	ldr	r5, [r3, #0]
 8084312:	469a      	mov	sl, r3
 8084314:	b13d      	cbz	r5, 8084326 <_findenv_r+0x26>
 8084316:	465c      	mov	r4, fp
 8084318:	4623      	mov	r3, r4
 808431a:	f813 2b01 	ldrb.w	r2, [r3], #1
 808431e:	b142      	cbz	r2, 8084332 <_findenv_r+0x32>
 8084320:	2a3d      	cmp	r2, #61	; 0x3d
 8084322:	461c      	mov	r4, r3
 8084324:	d1f8      	bne.n	8084318 <_findenv_r+0x18>
 8084326:	4638      	mov	r0, r7
 8084328:	f000 f8c9 	bl	80844be <__env_unlock>
 808432c:	2000      	movs	r0, #0
 808432e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084332:	ebcb 0404 	rsb	r4, fp, r4
 8084336:	46a9      	mov	r9, r5
 8084338:	f859 0b04 	ldr.w	r0, [r9], #4
 808433c:	2800      	cmp	r0, #0
 808433e:	d0f2      	beq.n	8084326 <_findenv_r+0x26>
 8084340:	4622      	mov	r2, r4
 8084342:	4659      	mov	r1, fp
 8084344:	f7ff fc6b 	bl	8083c1e <strncmp>
 8084348:	b988      	cbnz	r0, 808436e <_findenv_r+0x6e>
 808434a:	f859 3c04 	ldr.w	r3, [r9, #-4]
 808434e:	191e      	adds	r6, r3, r4
 8084350:	5d1b      	ldrb	r3, [r3, r4]
 8084352:	2b3d      	cmp	r3, #61	; 0x3d
 8084354:	d10b      	bne.n	808436e <_findenv_r+0x6e>
 8084356:	f8da 3000 	ldr.w	r3, [sl]
 808435a:	4638      	mov	r0, r7
 808435c:	1aed      	subs	r5, r5, r3
 808435e:	10ad      	asrs	r5, r5, #2
 8084360:	f8c8 5000 	str.w	r5, [r8]
 8084364:	f000 f8ab 	bl	80844be <__env_unlock>
 8084368:	1c70      	adds	r0, r6, #1
 808436a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808436e:	464d      	mov	r5, r9
 8084370:	e7e1      	b.n	8084336 <_findenv_r+0x36>
 8084372:	bf00      	nop
 8084374:	20000540 	.word	0x20000540

08084378 <_getenv_r>:
 8084378:	b507      	push	{r0, r1, r2, lr}
 808437a:	aa01      	add	r2, sp, #4
 808437c:	f7ff ffc0 	bl	8084300 <_findenv_r>
 8084380:	b003      	add	sp, #12
 8084382:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08084388 <__gettzinfo>:
 8084388:	4800      	ldr	r0, [pc, #0]	; (808438c <__gettzinfo+0x4>)
 808438a:	4770      	bx	lr
 808438c:	20000500 	.word	0x20000500

08084390 <gmtime_r>:
 8084390:	6802      	ldr	r2, [r0, #0]
 8084392:	4b46      	ldr	r3, [pc, #280]	; (80844ac <gmtime_r+0x11c>)
 8084394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8084396:	fb92 f4f3 	sdiv	r4, r2, r3
 808439a:	fb03 2214 	mls	r2, r3, r4, r2
 808439e:	2a00      	cmp	r2, #0
 80843a0:	bfbc      	itt	lt
 80843a2:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80843a6:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80843aa:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80843ae:	fb92 f3f0 	sdiv	r3, r2, r0
 80843b2:	fb00 2213 	mls	r2, r0, r3, r2
 80843b6:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80843ba:	608b      	str	r3, [r1, #8]
 80843bc:	fb92 f3f0 	sdiv	r3, r2, r0
 80843c0:	fb00 2213 	mls	r2, r0, r3, r2
 80843c4:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80843c8:	bfac      	ite	ge
 80843ca:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80843ce:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80843d2:	604b      	str	r3, [r1, #4]
 80843d4:	600a      	str	r2, [r1, #0]
 80843d6:	2307      	movs	r3, #7
 80843d8:	1ce2      	adds	r2, r4, #3
 80843da:	fb92 f3f3 	sdiv	r3, r2, r3
 80843de:	4d34      	ldr	r5, [pc, #208]	; (80844b0 <gmtime_r+0x120>)
 80843e0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80843e4:	fb94 f5f5 	sdiv	r5, r4, r5
 80843e8:	1ad3      	subs	r3, r2, r3
 80843ea:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80843ee:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80843f2:	618b      	str	r3, [r1, #24]
 80843f4:	4b2f      	ldr	r3, [pc, #188]	; (80844b4 <gmtime_r+0x124>)
 80843f6:	4830      	ldr	r0, [pc, #192]	; (80844b8 <gmtime_r+0x128>)
 80843f8:	fb03 4405 	mla	r4, r3, r5, r4
 80843fc:	fbb4 f2f2 	udiv	r2, r4, r2
 8084400:	fbb4 f3f7 	udiv	r3, r4, r7
 8084404:	fbb4 f0f0 	udiv	r0, r4, r0
 8084408:	4422      	add	r2, r4
 808440a:	1ad2      	subs	r2, r2, r3
 808440c:	f648 6694 	movw	r6, #36500	; 0x8e94
 8084410:	1a13      	subs	r3, r2, r0
 8084412:	f240 126d 	movw	r2, #365	; 0x16d
 8084416:	fbb3 f6f6 	udiv	r6, r3, r6
 808441a:	fbb3 f0f2 	udiv	r0, r3, r2
 808441e:	fbb3 f3f7 	udiv	r3, r3, r7
 8084422:	4434      	add	r4, r6
 8084424:	1ae3      	subs	r3, r4, r3
 8084426:	fb02 3310 	mls	r3, r2, r0, r3
 808442a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 808442e:	2499      	movs	r4, #153	; 0x99
 8084430:	3202      	adds	r2, #2
 8084432:	fbb2 f2f4 	udiv	r2, r2, r4
 8084436:	4354      	muls	r4, r2
 8084438:	1ca6      	adds	r6, r4, #2
 808443a:	2405      	movs	r4, #5
 808443c:	fbb6 f4f4 	udiv	r4, r6, r4
 8084440:	2a0a      	cmp	r2, #10
 8084442:	bf34      	ite	cc
 8084444:	2602      	movcc	r6, #2
 8084446:	f06f 0609 	mvncs.w	r6, #9
 808444a:	4416      	add	r6, r2
 808444c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8084450:	fb02 0505 	mla	r5, r2, r5, r0
 8084454:	1c5f      	adds	r7, r3, #1
 8084456:	2e01      	cmp	r6, #1
 8084458:	bf98      	it	ls
 808445a:	3501      	addls	r5, #1
 808445c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8084460:	eba7 0704 	sub.w	r7, r7, r4
 8084464:	d302      	bcc.n	808446c <gmtime_r+0xdc>
 8084466:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 808446a:	e014      	b.n	8084496 <gmtime_r+0x106>
 808446c:	0782      	lsls	r2, r0, #30
 808446e:	d105      	bne.n	808447c <gmtime_r+0xec>
 8084470:	2464      	movs	r4, #100	; 0x64
 8084472:	fbb0 f2f4 	udiv	r2, r0, r4
 8084476:	fb04 0212 	mls	r2, r4, r2, r0
 808447a:	b94a      	cbnz	r2, 8084490 <gmtime_r+0x100>
 808447c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8084480:	fbb0 f4f2 	udiv	r4, r0, r2
 8084484:	fb02 0014 	mls	r0, r2, r4, r0
 8084488:	fab0 f280 	clz	r2, r0
 808448c:	0952      	lsrs	r2, r2, #5
 808448e:	e000      	b.n	8084492 <gmtime_r+0x102>
 8084490:	2201      	movs	r2, #1
 8084492:	333b      	adds	r3, #59	; 0x3b
 8084494:	441a      	add	r2, r3
 8084496:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 808449a:	2300      	movs	r3, #0
 808449c:	61ca      	str	r2, [r1, #28]
 808449e:	614d      	str	r5, [r1, #20]
 80844a0:	610e      	str	r6, [r1, #16]
 80844a2:	60cf      	str	r7, [r1, #12]
 80844a4:	620b      	str	r3, [r1, #32]
 80844a6:	4608      	mov	r0, r1
 80844a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80844aa:	bf00      	nop
 80844ac:	00015180 	.word	0x00015180
 80844b0:	00023ab1 	.word	0x00023ab1
 80844b4:	fffdc54f 	.word	0xfffdc54f
 80844b8:	00023ab0 	.word	0x00023ab0

080844bc <__env_lock>:
 80844bc:	4770      	bx	lr

080844be <__env_unlock>:
 80844be:	4770      	bx	lr

080844c0 <dynalib_user>:
 80844c0:	001d 0808 005d 0808 0089 0808 008d 0808     ....]...........
 80844d0:	0000 0000 6e4f 2500 2073 3a53 3225 302e     ....On.%s S:%2.0
 80844e0:	2566 2c25 5120 253a 2e32 6630 2525 0020     f%%, Q:%2.0f%% .
 80844f0:	6c46 7361 6968 676e 4100 2b54 4643 4e55     Flashing.AT+CFUN
 8084500:	313d 0d36 000a 6552 6573 7474 6e69 2067     =16...Resetting 
 8084510:	6e69 7020 6f72 7267 7365 0073 3532 2025     in progress.25% 
 8084520:	6f64 656e 3500 2530 6420 6e6f 0065 3537     done.50% done.75
 8084530:	2025 6f64 656e 4400 6e6f 0065 227b 6361     % done.Done.{"ac
 8084540:	6564 6574 7463 2231 253a 2c69 2220 6361     detect1":%i, "ac
 8084550:	6564 6574 7463 2232 253a 2c69 2220 6574     detect2":%i, "te
 8084560:	706d 3a22 6925 202c 7222 7365 7465 2273     mp":%i, "resets"
 8084570:	253a 7d69 4300 6d6f 6170 7463 726f 485f     :%i}.Compactor_H
 8084580:	6f6f 006b 6f4e 4420 7461 0061 6255 6469     ook.No Data.Ubid
 8084590:	746f 2073 6f48 6b6f 5200 7365 6f70 736e     ots Hook.Respons
 80845a0:	2065 6552 6563 7669 6465 5300 6174 6574     e Received.State
 80845b0:	5300 7465 5620 7265 6f62 6573 4d20 646f     .Set Verbose Mod
 80845c0:	0065 6c43 6165 6572 2064 6556 6272 736f     e.Cleared Verbos
 80845d0:	2065 6f4d 6564 5400 6d69 2065 6f7a 656e     e Mode.Time zone
 80845e0:	6f20 6666 6573 2074 6925 5400 6d69 0065      offset %i.Time.
 80845f0:	7246 6d6f 2520 2073 6f74 2520 0073 7453     From %s to %s.St
 8084600:	7461 2065 7254 6e61 6973 6974 6e6f 5700     ate Transition.W
 8084610:	6961 6974 676e 6620 726f 5220 7365 6f70     aiting for Respo
 8084620:	736e 0065 5245 4f52 5f52 5453 5441 2045     nse.ERROR_STATE 
 8084630:	202d 6552 6573 7474 6e69 0067 6953 6e67     - Resetting.Sign
 8084640:	6c61 5200 7365 7465 6f43 6e75 0074 6554     al.ResetCount.Te
 8084650:	706d 7265 7461 7275 0065 6552 656c 7361     mperature.Releas
 8084660:	0065 4341 6564 6574 3163 4100 6443 7465     e.ACdetec1.ACdet
 8084670:	6365 3274 5200 7365 7465 462d 4152 004d     ect2.Reset-FRAM.
 8084680:	6148 6472 522d 7365 7465 5300 6e65 2d64     Hard-Reset.Send-
 8084690:	6f4e 0077 6556 6272 736f 2d65 6f4d 6564     Now.Verbose-Mode
 80846a0:	5300 7465 542d 6d69 7a65 6e6f 0065 664f     .Set-Timezone.Of
 80846b0:	0066 6e55 6e6b 776f 006e 6f4e 656e 5700     f.Unknown.None.W
 80846c0:	4669 0069 5347 004d 4d55 5354 4300 4d44     iFi.GSM.UMTS.CDM
 80846d0:	0041 544c 0045 4549 4545 3038 3132 3435     A.LTE.IEEE802154
 80846e0:	3000 332e 0030 0000                         .0.30...

080846e8 <_ZTVN5spark13CellularClassE>:
	...
 80846f0:	01d3 0808                                   ....

080846f4 <_ZTV14CellularSignal>:
	...
 80846fc:	1535 0808 15b7 0808 1537 0808 15f5 0808     5.......7.......
 808470c:	153d 0808 15c5 0808 1561 0808 1585 0808     =.......a.......
 808471c:	fffc ffff 0000 0000 15af 0808               ............

08084728 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8084730:	163d 0808 1643 0808 166b 0808 164f 0808     =...C...k...O...
 8084740:	163f 0808                                   ?...

08084744 <_ZTV7TwoWire>:
	...
 808474c:	1bdd 0808 1c27 0808 1bff 0808 1bdf 0808     ....'...........
 808475c:	1c07 0808 1c0f 0808 1c17 0808 1c1f 0808     ................

0808476c <_ZTV9IPAddress>:
	...
 8084774:	1d2f 0808 1d21 0808 1d23 0808 6e6c 6600     /...!...#...ln.f
 8084784:	006e 6f63 6564 6400 7465 6961 006c 3025     n.code.detail.%0
 8084794:	3031 2075 5d00 0020 6425 2c00 0020 2928     10u .] .%d., .()
 80847a4:	203a 2000 005b 6f63 6564 3d20 0020 6564     : . [.code = .de
 80847b4:	6174 6c69 2073 203d 6200 7561 0064 6553     tails = .baud.Se
 80847c4:	6972 6c61 5500 4253 6553 6972 6c61 0031     rial.USBSerial1.
 80847d4:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
 80847e4:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
 80847f4:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
 8084804:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
 8084814:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
 8084824:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
 8084834:	7070 6e00 6e6f 0065 7274 6361 0065 6e69     pp.none.trace.in
 8084844:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
 8084854:	696e 0063 6c61 006c                         nic.all.

0808485c <_ZTV8SPIClass>:
	...
 8084864:	1ee9 0808 1eeb 0808 2b25 3330 3a64 3025     ........%+03d:%0
 8084874:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 8084884:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

08084894 <_ZTV11USARTSerial>:
	...
 808489c:	2271 0808 2295 0808 22a1 0808 1da1 0808     q"..."..."......
 80848ac:	227d 0808 2289 0808 2283 0808 228f 0808     }"..."..."..."..
 80848bc:	2273 0808 2277 0808                         s"..w"..

080848c4 <_ZTV9USBSerial>:
	...
 80848cc:	2349 0808 238d 0808 2367 0808 1da1 0808     I#...#..g#......
 80848dc:	2361 0808 234b 0808 2353 0808 2387 0808     a#..K#..S#...#..
 80848ec:	235b 0808 2345 0808                         [#..E#..

080848f4 <day_name.4723>:
 80848f4:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 8084904:	6972 6153 4a74                                   riSat

08084909 <mon_name.4724>:
 8084909:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 8084919:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 8084929:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 8084939:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 8084949:	6425 000a                                   %d..

0808494d <_ctype_>:
 808494d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 808495d:	2020 2020 2020 2020 2020 2020 2020 2020                     
 808496d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 808497d:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 808498d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 808499d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80849ad:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80849bd:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80849cd:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08084a50 <__sf_fake_stdin>:
	...

08084a70 <__sf_fake_stdout>:
	...

08084a90 <__sf_fake_stderr>:
	...
 8084ab0:	0043 0000                                   C...

08084ab4 <__month_lengths>:
 8084ab4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 8084ac4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8084ad4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8084ae4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 8084af4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8084b04:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8084b14:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 8084b24:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 8084b34:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 8084b44:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

08084b50 <link_const_variable_data_end>:
 8084b50:	08080159 	.word	0x08080159
 8084b54:	08080ee9 	.word	0x08080ee9
 8084b58:	080814f9 	.word	0x080814f9
 8084b5c:	08081d91 	.word	0x08081d91
 8084b60:	08081ecd 	.word	0x08081ecd
 8084b64:	080820a9 	.word	0x080820a9
 8084b68:	0808225d 	.word	0x0808225d
 8084b6c:	0808270d 	.word	0x0808270d
 8084b70:	0808273d 	.word	0x0808273d
 8084b74:	080827a9 	.word	0x080827a9
 8084b78:	0808286d 	.word	0x0808286d
 8084b7c:	080828f1 	.word	0x080828f1
 8084b80:	08082975 	.word	0x08082975

08084b84 <link_constructors_end>:
	...
